<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>LivingDataLab</title>
<link>http://livingdatalab.com/index.html</link>
<atom:link href="http://livingdatalab.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Wed, 22 Feb 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Advanced Model Deployment on AWS - A/B testing traffic shifting and autoscaling</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="https://livingdatalab.com/categories/#aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>AWS Sagemaker offers many options for deploying models, in this project we will create an endpoint for a text classification model, splitting the traffic between them. Then after testing and reviewing the endpoint performance metrics, we will shift the traffic to one variant and configure it to autoscale.</p>
</section>
<section id="deployment-options" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="deployment-options"><span class="header-section-number">2</span> Deployment Options</h2>
<p>There are normally 3 main deployment options available for cloud computing services such as AWS.</p>
<ul>
<li><strong>Real-Time Inference:</strong> This involves a continually running process that responds to individual prediction requests on demand</li>
<li><strong>Batch Inference:</strong> This involves spinning up computing resources, performing a batch of predictions in one go, then switching off these resources when the process is complete</li>
<li><strong>Edge:</strong> This involves optimising a model for running closer to the user on edge devices such as mobile phones to generate predictions there</li>
</ul>
<p>Real time inference can be useful to respond to requests on demand, such as allowing quick responses to negative customer reviews.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy1.png" title="Deployment Options" class="img-fluid"></p>
<p>Batch inference can be useful when time is less critical, for example if we want to indentify a vendor with potential quality issues, we would want to look at a large number of reviews over time.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy2.png" title="Deployment Options" class="img-fluid"></p>
<p>Edge deployment can be useful when we want to provide predictions on the device itself, for example when privacy is a concern and we want to keep the data on the users device.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy3.png" title="Deployment Options" class="img-fluid"></p>
<p>When should we use each option? this will depend on your use case and a number of factors such as cost and how quickly and where the predictions are needed.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy4.png" title="Deployment Options" class="img-fluid"></p>
<p>As a general rule, you should use the option that meets your use case and is the most cost effective.</p>
</section>
<section id="deployment-strategies-autoscaling" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="deployment-strategies-autoscaling"><span class="header-section-number">3</span> Deployment Strategies &amp; Autoscaling</h2>
<p>When we deploy models we have 3 key objectives:</p>
<ul>
<li>Minimise risk</li>
<li>Minimise down time</li>
<li>Measure model performance</li>
</ul>
<p>There are a range of possible deployment strategies including:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat2.png" title="Deployment Strategies" class="img-fluid"></p>
<p>In this project we will be using A/B testing.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat3.png" title="Deployment Strategies" class="img-fluid"></p>
<p>Another interesting strategy thats more dynamic is Multi Armed Bandits which use machine learning to switch between different models dynamically depending on changing performance.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat4.png" title="Deployment Strategies" class="img-fluid"></p>
<p>But we will be using A/B testing.</p>
<p>We will also be using AWS Sagemaker Hosting to automatically scale our resources depending on demand.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_autoscale2.png" title="Deployment Strategies" class="img-fluid"></p>
</section>
<section id="setup" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="setup"><span class="header-section-number">4</span> Setup</h2>
<p>Let’s install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb2-5"></span>
<span id="cb2-6">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c3/w2'</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb2-9">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb2-10">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-11"></span>
<span id="cb2-12">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb2-13">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-14"></span>
<span id="cb2-15">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb2-16">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb2-17"></span>
<span id="cb2-18">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb2-19">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb2-20">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span>
<span id="cb2-21"></span>
<span id="cb2-22">cw <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cloudwatch'</span>, </span>
<span id="cb2-23">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-24"></span>
<span id="cb2-25">autoscale <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"application-autoscaling"</span>, </span>
<span id="cb2-26">                         config<span class="op" style="color: #5E5E5E;">=</span>config)</span></code></pre></div>
</div>
</section>
<section id="create-an-endpoint-with-multiple-variants" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="create-an-endpoint-with-multiple-variants"><span class="header-section-number">5</span> Create an endpoint with multiple variants</h2>
<p>We have two models trained to analyze customer feedback and classify the messages into positive (1), neutral (0), and negative (-1) sentiments are saved in the following S3 bucket paths. These <code>tar.gz</code> files contain the model artifacts, which result from model training.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">model_a_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/models/ab/variant_a/model.tar.gz'</span></span>
<span id="cb3-2">model_b_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/models/ab/variant_b/model.tar.gz'</span></span></code></pre></div>
</div>
<p>Let’s deploy an endpoint splitting the traffic between these two models 50/50 to perform A/B Testing. Instead of creating a PyTorch Model object and calling <code>model.deploy()</code> function, we will create an <code>Endpoint configuration</code> with multiple model variants. Here is the workflow we will follow to create an endpoint:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/endpoint-workflow.png" title="Endpoint Workflow" class="img-fluid"></p>
<section id="construct-docker-image-uri" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="construct-docker-image-uri"><span class="header-section-number">5.1</span> Construct Docker Image URI</h3>
<p>We will need to create the models in Amazon SageMaker, which retrieves the URI for the pre-built SageMaker Docker image stored in Amazon Elastic Container Re gistry (ECR). Let’s construct the ECR URI which we will pass into the <code>create_model</code> function later.</p>
<p>Now lets set the instance type. For the purposes of this project, we will use a relatively small instance. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">inference_instance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'ml.m5.large'</span></span></code></pre></div>
</div>
<p>Let’s create an ECR URI using the <code>'PyTorch'</code> framework.</p>
<div class="cell" data-outputid="86feb216-d666-4b46-cad8-1a542370ec59">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">inference_image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb5-2">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'pytorch'</span>, </span>
<span id="cb5-3">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb5-4">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type,</span>
<span id="cb5-5">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb5-6">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb5-7">    image_scope<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'inference'</span></span>
<span id="cb5-8">)</span>
<span id="cb5-9"><span class="bu" style="color: null;">print</span>(inference_image_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py3</code></pre>
</div>
</div>
</section>
<section id="create-amazon-sagemaker-models" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="create-amazon-sagemaker-models"><span class="header-section-number">5.2</span> Create Amazon SageMaker Models</h3>
<p>Amazon SageMaker Model includes information such as the S3 location of the model, the container image that can be used for inference with that model, the execution role, and the model name.</p>
<p>Let’s construct the model names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb7-3"></span>
<span id="cb7-4">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb7-5"></span>
<span id="cb7-6">model_name_a <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'a'</span>, timestamp)</span>
<span id="cb7-7">model_name_b <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'b'</span>, timestamp)</span></code></pre></div>
</div>
<p>We will use the following function to check if the model already exists in Amazon SageMaker.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> check_model_existence(model_name):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> sm.list_models()[<span class="st" style="color: #20794D;">'Models'</span>]:</span>
<span id="cb8-3">        <span class="cf" style="color: #003B4F;">if</span> model_name <span class="op" style="color: #5E5E5E;">==</span> model[<span class="st" style="color: #20794D;">'ModelName'</span>]:</span>
<span id="cb8-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Now we shall create an Amazon SageMaker Model based on the <code>model_a_s3_uri</code> data.</p>
<p>We will use the <code>sm.create_model</code> function, which requires the model name, Amazon SageMaker execution role and a primary container description (<code>PrimaryContainer</code> dictionary). The <code>PrimaryContainer</code> includes the S3 bucket location of the model artifacts (<code>ModelDataUrl</code> key) and ECR URI (<code>Image</code> key).</p>
<div class="cell" data-outputid="869025f6-49ee-4893-d99e-205ef7841156">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_model_existence(model_name_a):</span>
<span id="cb9-2">    model_a <span class="op" style="color: #5E5E5E;">=</span> sm.create_model(</span>
<span id="cb9-3">        ModelName<span class="op" style="color: #5E5E5E;">=</span>model_name_a,</span>
<span id="cb9-4">        ExecutionRoleArn<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb9-5">        PrimaryContainer<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;">'ModelDataUrl'</span>: model_a_s3_uri,</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;">'Image'</span>: inference_image_uri </span>
<span id="cb9-8">        }</span>
<span id="cb9-9">    )</span>
<span id="cb9-10">    pprint(model_a)</span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_name_a))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelArn': 'arn:aws:sagemaker:us-east-1:266291165402:model/a-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '74',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:15:03 GMT',
                                      'x-amzn-requestid': '8f653536-35b7-40ee-8b7f-de44570c71b9'},
                      'HTTPStatusCode': 200,
                      'RequestId': '8f653536-35b7-40ee-8b7f-de44570c71b9',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Now lets create an Amazon SageMaker Model based on the <code>model_b_s3_uri</code> data.</p>
<div class="cell" data-outputid="cabdbd7d-8679-40ac-b13b-32219ea1dcc0">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_model_existence(model_name_b):</span>
<span id="cb11-2">    model_b <span class="op" style="color: #5E5E5E;">=</span> sm.create_model(</span>
<span id="cb11-3">        ModelName<span class="op" style="color: #5E5E5E;">=</span>model_name_b, </span>
<span id="cb11-4">        ExecutionRoleArn<span class="op" style="color: #5E5E5E;">=</span>role, </span>
<span id="cb11-5">        PrimaryContainer<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb11-6">            <span class="st" style="color: #20794D;">'ModelDataUrl'</span>: model_b_s3_uri, </span>
<span id="cb11-7">            <span class="st" style="color: #20794D;">'Image'</span>: inference_image_uri</span>
<span id="cb11-8">        }</span>
<span id="cb11-9">    )</span>
<span id="cb11-10">    pprint(model_b)</span>
<span id="cb11-11"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb11-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_name_b))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelArn': 'arn:aws:sagemaker:us-east-1:266291165402:model/b-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '74',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:15:23 GMT',
                                      'x-amzn-requestid': 'a58a4de2-8ba0-4388-99b8-4f10031c606d'},
                      'HTTPStatusCode': 200,
                      'RequestId': 'a58a4de2-8ba0-4388-99b8-4f10031c606d',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
</section>
<section id="set-up-amazon-sagemaker-production-variants" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="set-up-amazon-sagemaker-production-variants"><span class="header-section-number">5.3</span> Set up Amazon SageMaker production variants</h3>
<p>A production variant is a packaged SageMaker Model combined with the configuration related to how that model will be hosted.</p>
<p>We have constructed the model in the section above. The hosting resources configuration includes information on how we want that model to be hosted: the number and type of instances, a pointer to the SageMaker package model, as well as a variant name and variant weight. A single SageMaker Endpoint can actually include multiple production variants.</p>
<p>Let’s create an Amazon SageMaker production variant for the SageMaker Model with the <code>model_name_a</code>.</p>
<div class="cell" data-outputid="0b32393f-161e-43fc-bcf4-2e36f3a51773">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> sagemaker.session <span class="im" style="color: #00769E;">import</span> production_variant</span>
<span id="cb13-2"></span>
<span id="cb13-3">variantA <span class="op" style="color: #5E5E5E;">=</span> production_variant(</span>
<span id="cb13-4">    model_name<span class="op" style="color: #5E5E5E;">=</span>model_name_a, </span>
<span id="cb13-5">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type, </span>
<span id="cb13-6">    initial_weight<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb13-7">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb13-8">    variant_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'VariantA'</span>,</span>
<span id="cb13-9">)</span>
<span id="cb13-10"><span class="bu" style="color: null;">print</span>(variantA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelName': 'a-1677082486', 'InstanceType': 'ml.m5.large', 'InitialInstanceCount': 1, 'VariantName': 'VariantA', 'InitialVariantWeight': 50}</code></pre>
</div>
</div>
<p>Now lets create an Amazon SageMaker production variant for the SageMaker Model with the <code>model_name_b</code>.</p>
<div class="cell" data-outputid="20ff2b26-1a2f-4775-fcb2-073a9e7e33ec">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">variantB <span class="op" style="color: #5E5E5E;">=</span> production_variant(</span>
<span id="cb15-2">    model_name<span class="op" style="color: #5E5E5E;">=</span>model_name_b, </span>
<span id="cb15-3">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type, </span>
<span id="cb15-4">    initial_weight<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, </span>
<span id="cb15-5">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb15-6">    variant_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'VariantB'</span></span>
<span id="cb15-7">)</span>
<span id="cb15-8"><span class="bu" style="color: null;">print</span>(variantB)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelName': 'b-1677082486', 'InstanceType': 'ml.m5.large', 'InitialInstanceCount': 1, 'VariantName': 'VariantB', 'InitialVariantWeight': 50}</code></pre>
</div>
</div>
</section>
<section id="configure-and-create-the-endpoint" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="configure-and-create-the-endpoint"><span class="header-section-number">5.4</span> Configure and create the endpoint</h3>
<p>We will use the following functions to check if the endpoint configuration and endpoint itself already exist in Amazon SageMaker.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> check_endpoint_config_existence(endpoint_config_name):</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;">for</span> endpoint_config <span class="kw" style="color: #003B4F;">in</span> sm.list_endpoint_configs()[<span class="st" style="color: #20794D;">'EndpointConfigs'</span>]:</span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;">if</span> endpoint_config_name <span class="op" style="color: #5E5E5E;">==</span> endpoint_config[<span class="st" style="color: #20794D;">'EndpointConfigName'</span>]:</span>
<span id="cb17-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;">def</span> check_endpoint_existence(endpoint_name):</span>
<span id="cb17-8">    <span class="cf" style="color: #003B4F;">for</span> endpoint <span class="kw" style="color: #003B4F;">in</span> sm.list_endpoints()[<span class="st" style="color: #20794D;">'Endpoints'</span>]:</span>
<span id="cb17-9">        <span class="cf" style="color: #003B4F;">if</span> endpoint_name <span class="op" style="color: #5E5E5E;">==</span> endpoint[<span class="st" style="color: #20794D;">'EndpointName'</span>]:</span>
<span id="cb17-10">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb17-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>We create the endpoint configuration by specifying the name and pointing to the two production variants that we just configured that tell SageMaker how we want to host those models.</p>
<div class="cell" data-outputid="66a28e4e-384c-4b60-eaea-42825e53e3e3">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">endpoint_config_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'ab'</span>, timestamp)</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_endpoint_config_existence(endpoint_config_name):</span>
<span id="cb18-4">    endpoint_config <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint_config(</span>
<span id="cb18-5">        EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name, </span>
<span id="cb18-6">        ProductionVariants<span class="op" style="color: #5E5E5E;">=</span>[variantA, variantB]</span>
<span id="cb18-7">    )</span>
<span id="cb18-8">    pprint(endpoint_config)</span>
<span id="cb18-9"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb18-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Endpoint configuration </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(endpoint_config_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'EndpointConfigArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint-config/ab-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '94',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:16:04 GMT',
                                      'x-amzn-requestid': 'caa4197d-8d8a-4b0e-ab55-e20d5bfe31d6'},
                      'HTTPStatusCode': 200,
                      'RequestId': 'caa4197d-8d8a-4b0e-ab55-e20d5bfe31d6',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Construct the endpoint name.</p>
<div class="cell" data-outputid="c9a67886-c5c9-4ed9-cdfe-c92a6e93c5ee">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'ab'</span>, timestamp)</span>
<span id="cb20-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Endpoint name: ab-1677082486</code></pre>
</div>
</div>
<p>Lets create an endpoint with the endpoint name and configuration defined above.</p>
<div class="cell" data-outputid="407b9d29-b278-4944-ada4-c0b013801046">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_endpoint_existence(model_ab_endpoint_name):</span>
<span id="cb22-2">    endpoint_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint(</span>
<span id="cb22-3">        EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb22-4">        EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name</span>
<span id="cb22-5">    )</span>
<span id="cb22-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Creating endpoint </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span>
<span id="cb22-7">    pprint(endpoint_response)</span>
<span id="cb22-8"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb22-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Endpoint </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Creating endpoint ab-1677082486
{'EndpointArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint/ab-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '81',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:16:24 GMT',
                                      'x-amzn-requestid': '0d5dd2d5-519a-4618-ab29-809c0e3e28da'},
                      'HTTPStatusCode': 200,
                      'RequestId': '0d5dd2d5-519a-4618-ab29-809c0e3e28da',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Now we wait for the endpoint to deploy.</p>
<div class="cell" data-outputid="94aef061-5938-4e6a-a283-462310c69b20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb24-2"></span>
<span id="cb24-3">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">'endpoint_in_service'</span>)</span>
<span id="cb24-4">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 133 ms, sys: 21 ms, total: 154 ms
Wall time: 5min 1s</code></pre>
</div>
</div>
</section>
</section>
<section id="test-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="test-model"><span class="header-section-number">6</span> Test model</h2>
<section id="test-the-model-on-a-few-sample-strings" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="test-the-model-on-a-few-sample-strings"><span class="header-section-number">6.1</span> Test the model on a few sample strings</h3>
<p>Here, we will pass sample strings of text to the endpoint in order to see the sentiment. We give one example of each.</p>
<p>Now we create an Amazon SageMaker Predictor based on the deployed endpoint.</p>
<p>We will use the <code>Predictor</code> object with the following parameters. We pass JSON serializer and deserializer objects here, calling them with the functions <code>JSONLinesSerializer()</code> and <code>JSONLinesDeserializer()</code>, respectively. More information about the serializers can be found <a href="https://sagemaker.readthedocs.io/en/stable/api/inference/serializers.html">here</a>.</p>
<div class="cell" data-outputid="cfc735a5-c2e0-4385-f206-cabeb05bb66f">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb26-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb26-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb26-4"></span>
<span id="cb26-5">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb26-6">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb26-7">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb26-8">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb26-9">]</span>
<span id="cb26-10"></span>
<span id="cb26-11">predictor <span class="op" style="color: #5E5E5E;">=</span> Predictor(</span>
<span id="cb26-12">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb26-13">    serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(), </span>
<span id="cb26-14">    deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer(), </span>
<span id="cb26-15">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb26-16">)</span>
<span id="cb26-17"></span>
<span id="cb26-18">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb26-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9605445861816406
Predicted class 0 with probability 0.5798221230506897
Predicted class -1 with probability 0.7667604684829712</code></pre>
</div>
</div>
</section>
<section id="generate-traffic-and-review-the-endpoint-performance-metrics" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="generate-traffic-and-review-the-endpoint-performance-metrics"><span class="header-section-number">6.2</span> Generate traffic and review the endpoint performance metrics</h3>
<p>Now we will generate some traffic. To analyze the endpoint performance we will review some of the metrics that Amazon SageMaker emits in CloudWatch: CPU Utilization, Latency and Invocations.</p>
<p>A full list of namespaces and metrics can be found <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/monitoring-cloudwatch.html">here</a>. CloudWatch <code>get_metric_statistics</code> documentation can be found <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">here</a>.</p>
<p>But before that, let’s create a function that will help to extract the results from CloudWatch and plot them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> plot_endpoint_metrics_for_variants(endpoint_name, </span>
<span id="cb28-2">                                       namespace_name, </span>
<span id="cb28-3">                                       metric_name, </span>
<span id="cb28-4">                                       variant_names, </span>
<span id="cb28-5">                                       start_time, </span>
<span id="cb28-6">                                       end_time):</span>
<span id="cb28-7">    </span>
<span id="cb28-8">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb28-9">        joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb28-10"></span>
<span id="cb28-11">        <span class="cf" style="color: #003B4F;">for</span> variant_name <span class="kw" style="color: #003B4F;">in</span> variant_names:</span>
<span id="cb28-12">            metrics <span class="op" style="color: #5E5E5E;">=</span> cw.get_metric_statistics( <span class="co" style="color: #5E5E5E;"># extracts the results in a dictionary format</span></span>
<span id="cb28-13">                Namespace<span class="op" style="color: #5E5E5E;">=</span>namespace_name, <span class="co" style="color: #5E5E5E;"># the namespace of the metric, e.g. "AWS/SageMaker"</span></span>
<span id="cb28-14">                MetricName<span class="op" style="color: #5E5E5E;">=</span>metric_name, <span class="co" style="color: #5E5E5E;"># the name of the metric, e.g. "CPUUtilization"</span></span>
<span id="cb28-15">                StartTime<span class="op" style="color: #5E5E5E;">=</span>start_time, <span class="co" style="color: #5E5E5E;"># the time stamp that determines the first data point to return</span></span>
<span id="cb28-16">                EndTime<span class="op" style="color: #5E5E5E;">=</span>end_time, <span class="co" style="color: #5E5E5E;"># the time stamp that determines the last data point to return</span></span>
<span id="cb28-17">                Period<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>, <span class="co" style="color: #5E5E5E;"># the granularity, in seconds, of the returned data points</span></span>
<span id="cb28-18">                Statistics<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Sum"</span>], <span class="co" style="color: #5E5E5E;"># the metric statistics</span></span>
<span id="cb28-19">                Dimensions<span class="op" style="color: #5E5E5E;">=</span>[ <span class="co" style="color: #5E5E5E;"># dimensions, as CloudWatch treats each unique combination of dimensions as a separate metric</span></span>
<span id="cb28-20">                    {<span class="st" style="color: #20794D;">"Name"</span>: <span class="st" style="color: #20794D;">"EndpointName"</span>, <span class="st" style="color: #20794D;">"Value"</span>: endpoint_name}, </span>
<span id="cb28-21">                    {<span class="st" style="color: #20794D;">"Name"</span>: <span class="st" style="color: #20794D;">"VariantName"</span>, <span class="st" style="color: #20794D;">"Value"</span>: variant_name}</span>
<span id="cb28-22">                ],</span>
<span id="cb28-23">            )</span>
<span id="cb28-24">            </span>
<span id="cb28-25">            <span class="cf" style="color: #003B4F;">if</span> metrics[<span class="st" style="color: #20794D;">"Datapoints"</span>]: <span class="co" style="color: #5E5E5E;"># access the results from the distionary using the key "Datapoints"</span></span>
<span id="cb28-26">                df_metrics <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(metrics[<span class="st" style="color: #20794D;">"Datapoints"</span>]) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-27">                    .sort_values(<span class="st" style="color: #20794D;">"Timestamp"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-28">                    .set_index(<span class="st" style="color: #20794D;">"Timestamp"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-29">                    .drop(<span class="st" style="color: #20794D;">"Unit"</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-30">                    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"Sum"</span>: variant_name}) <span class="co" style="color: #5E5E5E;"># rename the column with the metric results as a variant_name</span></span>
<span id="cb28-31">                </span>
<span id="cb28-32">                <span class="cf" style="color: #003B4F;">if</span> joint_variant_metrics <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb28-33">                    joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> df_metrics</span>
<span id="cb28-34">                <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb28-35">                    joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> joint_variant_metrics.join(df_metrics, how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"outer"</span>)</span>
<span id="cb28-36">        </span>
<span id="cb28-37">        joint_variant_metrics.plot(title<span class="op" style="color: #5E5E5E;">=</span>metric_name)</span>
<span id="cb28-38">    <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb28-39">        <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</div>
<p>We must establish wide enough time bounds to show all the charts using the same timeframe:</p>
<div class="cell" data-outputid="0a306d5a-4efb-429b-f768-d26e436ead4d">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">from</span> datetime <span class="im" style="color: #00769E;">import</span> datetime, timedelta</span>
<span id="cb29-2"></span>
<span id="cb29-3">start_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now() <span class="op" style="color: #5E5E5E;">-</span> timedelta(minutes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb29-4">end_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now() <span class="op" style="color: #5E5E5E;">+</span> timedelta(minutes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb29-5"></span>
<span id="cb29-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Start Time: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(start_time))</span>
<span id="cb29-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'End Time: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(end_time))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Start Time: 2023-02-22 15:52:19.078234
End Time: 2023-02-22 16:52:19.078289</code></pre>
</div>
</div>
<p>Set the list of the the variant names to analyze.</p>
<div class="cell" data-outputid="9e038c7b-050a-43cc-d819-10b94cb4f8ae">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">variant_names <span class="op" style="color: #5E5E5E;">=</span> [variantA[<span class="st" style="color: #20794D;">"VariantName"</span>], variantB[<span class="st" style="color: #20794D;">"VariantName"</span>]]</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="bu" style="color: null;">print</span>(variant_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['VariantA', 'VariantB']</code></pre>
</div>
</div>
<p>Now run some predictions and view the metrics for each variant.</p>
<div class="cell" data-outputid="4cbc34f7-ab23-4bb0-a400-d99b467c19f4">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb33-4">    predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 239 ms, sys: 4.17 ms, total: 243 ms
Wall time: 1min 28s</code></pre>
</div>
</div>
<p>Let’s query CloudWatch to get a few metrics that are split across variants.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">time.sleep(<span class="dv" style="color: #AD0000;">30</span>) <span class="co" style="color: #5E5E5E;"># Sleep to accomodate a slight delay in metrics gathering</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="64b5f9fe-a87b-4015-c900-fb65110bcdf6">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># CPUUtilization</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># The sum of each individual CPU core's utilization. </span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;"># The CPU utilization of each core can range between 0 and 100. For example, if there are four CPUs, CPUUtilization can range from 0% to 400%.</span></span>
<span id="cb36-4">plot_endpoint_metrics_for_variants(</span>
<span id="cb36-5">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb36-6">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/aws/sagemaker/Endpoints"</span>, </span>
<span id="cb36-7">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPUUtilization"</span>,</span>
<span id="cb36-8">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb36-9">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb36-10">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb36-11">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="41d5eee9-7ce5-4724-d6ef-cbe383b2e7d5">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Invocations</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;"># The number of requests sent to a model endpoint.</span></span>
<span id="cb37-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb37-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb37-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb37-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Invocations"</span>,</span>
<span id="cb37-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb37-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb37-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb37-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ad929f1d-4e6f-46e8-8f85-a0ddcdb226e5">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># InvocationsPerInstance</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;"># The number of invocations sent to a model, normalized by InstanceCount in each production variant.</span></span>
<span id="cb38-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb38-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb38-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb38-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InvocationsPerInstance"</span>,</span>
<span id="cb38-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb38-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb38-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb38-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ff52adee-6936-44e8-d9b7-12a4cd64cdf8">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># ModelLatency</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;"># The interval of time taken by a model to respond as viewed from SageMaker (in microseconds).</span></span>
<span id="cb39-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb39-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb39-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb39-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelLatency"</span>,</span>
<span id="cb39-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb39-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb39-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb39-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="shift-the-traffic-to-one-variant-and-review-the-endpoint-performance-metrics" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="shift-the-traffic-to-one-variant-and-review-the-endpoint-performance-metrics"><span class="header-section-number">7</span> Shift the traffic to one variant and review the endpoint performance metrics</h2>
<p>Generally, the winning model would need to be chosen. The decision would be made based on the endpoint performance metrics and some other business related evaluations. Here we will assume that the winning model is in the Variant B and shift all traffic to it.</p>
<p>Let’s now construct a list with the updated endpoint weights.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">updated_endpoint_config <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb40-2">    {</span>
<span id="cb40-3">        <span class="st" style="color: #20794D;">"VariantName"</span>: variantA[<span class="st" style="color: #20794D;">"VariantName"</span>],</span>
<span id="cb40-4">        <span class="st" style="color: #20794D;">"DesiredWeight"</span>: <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb40-5">    },</span>
<span id="cb40-6">    {</span>
<span id="cb40-7">        <span class="st" style="color: #20794D;">"VariantName"</span>: variantB[<span class="st" style="color: #20794D;">"VariantName"</span>],</span>
<span id="cb40-8">        <span class="st" style="color: #20794D;">"DesiredWeight"</span>: <span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb40-9">    },</span>
<span id="cb40-10">]</span></code></pre></div>
</div>
<p>Now we update variant weights in the configuration of the existing endpoint.</p>
<p>We will use the <code>sm.update_endpoint_weights_and_capacities</code> function, passing the endpoint name and list of updated weights for each of the variants that we defined above.</p>
<div class="cell" data-outputid="9357749c-ae5a-40e6-b2f3-2b818fcbf2b5">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">sm.update_endpoint_weights_and_capacities(</span>
<span id="cb41-2">    EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb41-3">    DesiredWeightsAndCapacities<span class="op" style="color: #5E5E5E;">=</span>updated_endpoint_config </span>
<span id="cb41-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>{'EndpointArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint/ab-1677082486',
 'ResponseMetadata': {'RequestId': 'd150d0c7-90d9-48bd-b9fd-06aed5f7c4b7',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'd150d0c7-90d9-48bd-b9fd-06aed5f7c4b7',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '81',
   'date': 'Wed, 22 Feb 2023 16:24:19 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb43-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
<p>Now run some more predictions and view the metrics for each variant.</p>
<div class="cell" data-outputid="da6a1da3-5f2d-4458-9a01-77b0c102f4b2">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb44-4">    predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 256 ms, sys: 3.23 ms, total: 259 ms
Wall time: 1min 27s</code></pre>
</div>
</div>
<div class="cell" data-outputid="e119b348-3703-4af6-b941-a45cfbfd45d1">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># CPUUtilization</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;"># The sum of each individual CPU core's utilization. </span></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;"># The CPU utilization of each core can range between 0 and 100. For example, if there are four CPUs, CPUUtilization can range from 0% to 400%.</span></span>
<span id="cb46-4">plot_endpoint_metrics_for_variants(</span>
<span id="cb46-5">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb46-6">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/aws/sagemaker/Endpoints"</span>,</span>
<span id="cb46-7">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPUUtilization"</span>,</span>
<span id="cb46-8">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb46-9">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb46-10">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb46-11">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-33-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="b1a13d87-90ba-4aa9-e11f-c7683d031b90">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># Invocations</span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;"># The number of requests sent to a model endpoint.</span></span>
<span id="cb47-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb47-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb47-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb47-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Invocations"</span>,</span>
<span id="cb47-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb47-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb47-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb47-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-34-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="f395a3b6-57f1-456b-d532-c96a54464f63">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># InvocationsPerInstance</span></span>
<span id="cb48-2"><span class="co" style="color: #5E5E5E;"># The number of invocations sent to a model, normalized by InstanceCount in each production variant.</span></span>
<span id="cb48-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb48-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb48-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb48-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InvocationsPerInstance"</span>,</span>
<span id="cb48-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb48-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb48-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb48-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-35-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="49321bfa-73df-4178-9657-73159fcbb7a5">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># ModelLatency</span></span>
<span id="cb49-2"><span class="co" style="color: #5E5E5E;"># The interval of time taken by a model to respond as viewed from SageMaker (in microseconds).</span></span>
<span id="cb49-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb49-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb49-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb49-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelLatency"</span>,</span>
<span id="cb49-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb49-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb49-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb49-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="configure-one-variant-to-autoscale" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="configure-one-variant-to-autoscale"><span class="header-section-number">8</span> Configure one variant to autoscale</h2>
<p>Let’s configure Variant B to autoscale. We would not autoscale Variant A since no traffic is being passed to it at this time.</p>
<p>First, we need to define a scalable target. It is an AWS resource and in this case you want to scale a <code>sagemaker</code> resource as indicated in the <code>ServiceNameSpace</code> parameter. Then the <code>ResourceId</code> is a SageMaker Endpoint. Because autoscaling is used by other AWS resources, we’ll see a few parameters that will remain static for scaling SageMaker Endpoints. Thus the <code>ScalableDimension</code> is a set value for SageMaker Endpoint scaling.</p>
<p>We also need to specify a few key parameters that control the min and max behavior for our Machine Learning instances. The <code>MinCapacity</code> indicates the minimum number of instances we plan to scale in to. The <code>MaxCapacity</code> is the maximum number of instances we want to scale out to. So in this case we always want to have at least 1 instance running and a maximum of 2 during peak periods.</p>
<div class="cell" data-outputid="614b0b70-6abd-4eb4-cc68-314fcf099a54">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">autoscale.register_scalable_target(</span>
<span id="cb50-2">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb50-3">    ResourceId<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"endpoint/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"/variant/VariantB"</span>,</span>
<span id="cb50-4">    ScalableDimension<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker:variant:DesiredInstanceCount"</span>,</span>
<span id="cb50-5">    MinCapacity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb50-6">    MaxCapacity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb50-7">    RoleARN<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb50-8">    SuspendedState<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb50-9">        <span class="st" style="color: #20794D;">"DynamicScalingInSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-10">        <span class="st" style="color: #20794D;">"DynamicScalingOutSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-11">        <span class="st" style="color: #20794D;">"ScheduledScalingSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-12">    },</span>
<span id="cb50-13">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>{'ResponseMetadata': {'RequestId': '1df51ac9-60ae-4b21-9c3a-2b676e32802c',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': '1df51ac9-60ae-4b21-9c3a-2b676e32802c',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '2',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb52-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
<p>Check that the parameters from the function above are in the description of the scalable target:</p>
<div class="cell" data-outputid="d6e26b2b-9a67-4a44-9471-2fceab47737e">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">autoscale.describe_scalable_targets(</span>
<span id="cb53-2">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb53-3">    MaxResults<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb53-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>{'ScalableTargets': [{'ServiceNamespace': 'sagemaker',
   'ResourceId': 'endpoint/ab-1677082486/variant/VariantB',
   'ScalableDimension': 'sagemaker:variant:DesiredInstanceCount',
   'MinCapacity': 1,
   'MaxCapacity': 2,
   'RoleARN': 'arn:aws:iam::266291165402:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint',
   'CreationTime': datetime.datetime(2023, 2, 22, 16, 27, 20, 908000, tzinfo=tzlocal()),
   'SuspendedState': {'DynamicScalingInSuspended': False,
    'DynamicScalingOutSuspended': False,
    'ScheduledScalingSuspended': False}}],
 'ResponseMetadata': {'RequestId': 'bd518cbf-fc90-40e5-9d45-56f2252dfe71',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'bd518cbf-fc90-40e5-9d45-56f2252dfe71',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '522',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Define and apply scaling policy using the <code>put_scaling_policy</code> function. The scaling policy provides additional information about the scaling behavior for our instance. <code>TargetTrackingScaling</code> refers to a specific autoscaling type supported by SageMaker, that uses a scaling metric and a target value as the indicator to scale.</p>
<p>In the scaling policy configuration, we have the predefined metric <code>PredefinedMetricSpecification</code> which is the number of invocations on our instance and the <code>TargetValue</code> which indicates the number of invocations per ML instance we want to allow before triggering your scaling policy. A scale out cooldown of 60 seconds means that after autoscaling successfully scales out it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again until the cooldown period ends.</p>
<p>The scale in cooldown setting of 300 seconds means that SageMaker will not attempt to start another cooldown policy within 300 seconds of when the last one completed.</p>
<div class="cell" data-outputid="3812a528-43a1-4a65-8e2b-371e68a49650">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">autoscale.put_scaling_policy(</span>
<span id="cb55-2">    PolicyName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bert-reviews-autoscale-policy"</span>,</span>
<span id="cb55-3">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb55-4">    ResourceId<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"endpoint/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"/variant/VariantB"</span>,</span>
<span id="cb55-5">    ScalableDimension<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker:variant:DesiredInstanceCount"</span>,</span>
<span id="cb55-6">    PolicyType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TargetTrackingScaling"</span>,</span>
<span id="cb55-7">    TargetTrackingScalingPolicyConfiguration<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb55-8">        <span class="st" style="color: #20794D;">"TargetValue"</span>: <span class="fl" style="color: #AD0000;">2.0</span>, <span class="co" style="color: #5E5E5E;"># the number of invocations per ML instance you want to allow before triggering your scaling policy</span></span>
<span id="cb55-9">        <span class="st" style="color: #20794D;">"PredefinedMetricSpecification"</span>: {</span>
<span id="cb55-10">            <span class="st" style="color: #20794D;">"PredefinedMetricType"</span>: <span class="st" style="color: #20794D;">"SageMakerVariantInvocationsPerInstance"</span>, <span class="co" style="color: #5E5E5E;"># scaling metric</span></span>
<span id="cb55-11">        },</span>
<span id="cb55-12">        <span class="st" style="color: #20794D;">"ScaleOutCooldown"</span>: <span class="dv" style="color: #AD0000;">60</span>, <span class="co" style="color: #5E5E5E;"># wait time, in seconds, before beginning another scale out activity after last one completes</span></span>
<span id="cb55-13">        <span class="st" style="color: #20794D;">"ScaleInCooldown"</span>: <span class="dv" style="color: #AD0000;">300</span>, <span class="co" style="color: #5E5E5E;"># wait time, in seconds, before beginning another scale in activity after last one completes</span></span>
<span id="cb55-14">    },</span>
<span id="cb55-15">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>{'PolicyARN': 'arn:aws:autoscaling:us-east-1:266291165402:scalingPolicy:913d3148-a6ef-4773-a62f-44892892074e:resource/sagemaker/endpoint/ab-1677082486/variant/VariantB:policyName/bert-reviews-autoscale-policy',
 'Alarms': [{'AlarmName': 'TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmHigh-c3f6ea38-0824-48ec-b42f-dbacfbe50cc4',
   'AlarmARN': 'arn:aws:cloudwatch:us-east-1:266291165402:alarm:TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmHigh-c3f6ea38-0824-48ec-b42f-dbacfbe50cc4'},
  {'AlarmName': 'TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmLow-15074d95-12ab-446d-8ebe-b17964112be7',
   'AlarmARN': 'arn:aws:cloudwatch:us-east-1:266291165402:alarm:TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmLow-15074d95-12ab-446d-8ebe-b17964112be7'}],
 'ResponseMetadata': {'RequestId': 'c82eb21e-613e-4143-a40c-3a852ac5b1e8',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'c82eb21e-613e-4143-a40c-3a852ac5b1e8',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '780',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb57-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">9</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws.html</guid>
  <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Optimize Models in the Cloud using AWS Automatic Model Tuning</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-14-optimize-models-in-the-cloud-using-aws-automatic-model-tuning.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>When training ML models, hyperparameter tuning is a step taken to find the best performing training model. In this project we will apply a random algorithm of Automated Hyperparameter Tuning to train a BERT-based natural language processing (NLP) classifier.</p>
<p>We will use the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - and will prepare it to train a deep learning BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>Amazon SageMaker supports Automated Hyperparameter Tuning. It runs multiple training jobs on the training dataset using the hyperparameter ranges specified by the user. Then it chooses the combination of hyperparameters that leads to the best model candidate. The choice is made based on the objective metrics, e.g.&nbsp;maximization of the validation accuracy.</p>
<p>For the choice of hyperparameters combinations, SageMaker supports two different types of tuning strategies: random and Bayesian. This capability can be further extended by providing an implementation of a custom tuning strategy as a Docker container.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/hpt.png" title="Hyperparameter Tuning" class="img-fluid"></p>
<p>In this project we will perform the following three steps:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sagemaker_hpt.png" title="Hyperparameter Tuning with AWS" class="img-fluid"></p>
<p>First, let’s install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-5"></span>
<span id="cb1-6">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c3/w1'</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-9">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-10">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-11"></span>
<span id="cb1-12">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)</span>
<span id="cb1-13"></span>
<span id="cb1-14">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-15">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-16">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
</section>
<section id="configure-dataset-and-hyperparameter-tuning-job-htp" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="configure-dataset-and-hyperparameter-tuning-job-htp"><span class="header-section-number">2</span> Configure dataset and Hyperparameter Tuning Job (HTP)</h2>
<section id="configure-dataset" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">2.1</span> Configure dataset</h3>
<p>Let’s set up the paths and copy the data to the S3 bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-train/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb2-2">processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-validation/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb2-3">processed_test_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-test/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span></code></pre></div>
</div>
<p>Upload the data to the S3 bucket:</p>
<div class="cell" data-outputid="f6dbc801-1f8d-4a03-ce2d-d2630517774f">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train $processed_train_data_s3_uri</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation $processed_validation_data_s3_uri</span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test $processed_test_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Check the existence of those files in the S3 bucket:</p>
<div class="cell" data-outputid="c6058d35-bbf8-49c7-b9be-8c9c46d5b93c">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_train_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:41    4894416 transformed/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="736b7a72-d04b-46ed-c94d-2da565beeddf">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:42     276522 transformed/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="c26e1338-e788-4b01-ebc9-663aa02ed54d">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_test_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:43     273414 transformed/data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Now we set up a dictionary of the input training and validation data channels, wrapping the corresponding S3 locations in a <code>TrainingInput</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> TrainingInput</span>
<span id="cb11-2"></span>
<span id="cb11-3">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb11-4">    <span class="st" style="color: #20794D;">'train'</span>: processed_train_data_s3_uri, </span>
<span id="cb11-5">    <span class="st" style="color: #20794D;">'validation'</span>: processed_validation_data_s3_uri </span>
<span id="cb11-6">}</span></code></pre></div>
</div>
<p>There is no need to create a test data channel, as the test data is used later at the evaluation stage and does not need to be wrapped into the <code>sagemaker.inputs.TrainingInput</code> function.</p>
</section>
<section id="configure-hyperparameter-tuning-job" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="configure-hyperparameter-tuning-job"><span class="header-section-number">2.2</span> Configure Hyperparameter Tuning Job</h3>
<p>Model hyperparameters need to be set prior to starting the model training as they control the process of learning. Some of the hyperparameters you will set up as static - they will not be explored during the tuning job. For the non-static hyperparameters we will set the range of possible values to be explored.</p>
<p>First, we configure static hyperparameters including the instance type, instance count, maximum sequence length, etc. For the purposes of this project, we will use a relatively small instance type. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span> <span class="co" style="color: #5E5E5E;"># maximum number of input tokens passed to BERT model</span></span>
<span id="cb12-2">freeze_bert_layer<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># specifies the depth of training within the network</span></span>
<span id="cb12-3">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb12-4">train_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb12-5">validation_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb12-6">validation_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb12-7">seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">train_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-10">train_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span></span>
<span id="cb12-11">train_volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb12-12">input_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span></span>
<span id="cb12-13">run_validation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span></code></pre></div>
</div>
<p>Some of these will be passed into the PyTorch estimator and tuner in the hyperparameters argument. Let’s set up the dictionary for that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">hyperparameters_static<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb13-2">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb13-3">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb13-10">}</span></code></pre></div>
</div>
<p>Now we configure hyperparameter ranges to explore in the Tuning Job. The values of the ranges typically come from prior experience, research papers, or other models similar to the task you are trying to do.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> IntegerParameter</span>
<span id="cb14-2"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> ContinuousParameter</span>
<span id="cb14-3"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> CategoricalParameter</span>
<span id="cb14-4">                                                </span>
<span id="cb14-5">hyperparameter_ranges <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb14-6">    <span class="st" style="color: #20794D;">'learning_rate'</span>: ContinuousParameter(<span class="fl" style="color: #AD0000;">0.00001</span>, <span class="fl" style="color: #AD0000;">0.00005</span>, scaling_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Linear'</span>), <span class="co" style="color: #5E5E5E;"># specifying continuous variable type, the tuning job will explore the range of values</span></span>
<span id="cb14-7">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: CategoricalParameter([<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>]), <span class="co" style="color: #5E5E5E;"># specifying categorical variable type, the tuning job will explore only listed values</span></span>
<span id="cb14-8">}</span></code></pre></div>
</div>
</section>
<section id="set-up-evaluation-metrics" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="set-up-evaluation-metrics"><span class="header-section-number">2.3</span> Set up evaluation metrics</h3>
<p>Choose loss and accuracy as the evaluation metrics. The regular expressions <code>Regex</code> will capture the values of metrics that the algorithm will emit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb15-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb15-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb15-4">]</span></code></pre></div>
</div>
<p>In the Tuning Job, we will be maximizing validation accuracy as the objective metric.</p>
</section>
</section>
<section id="run-tuning-job" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="run-tuning-job"><span class="header-section-number">3</span> Run Tuning Job</h2>
<section id="set-up-the-roberta-and-pytorch-script-to-run-on-sagemaker" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="set-up-the-roberta-and-pytorch-script-to-run-on-sagemaker"><span class="header-section-number">3.1</span> Set up the RoBERTa and PyTorch script to run on SageMaker</h3>
<p>We will now prepare the PyTorch model to run as a SageMaker Training Job. The estimator takes into the entry point a separate Python file, which will be called during the training. We can open and review this file <a href="https://pranath.github.io/pds/tuning/train.py">src/train.py</a>.</p>
<p>For more information on the <code>PyTorchEstimator</code>, see the documentation here: https://sagemaker.readthedocs.io/</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Note: we don't have to rename the PyTorch estimator,</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># but this is useful for code clarity, especially when a few modules of 'sagemaker.pytorch' are used</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb16-6">    entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb16-7">    source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb16-8">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb16-9">    instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb16-10">    instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb16-11">    volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb16-12">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb16-13">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb16-14">    hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters_static,</span>
<span id="cb16-15">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb16-16">    input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode,</span>
<span id="cb16-17">)</span></code></pre></div>
</div>
</section>
<section id="launch-the-hyperparameter-tuning-job" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="launch-the-hyperparameter-tuning-job"><span class="header-section-number">3.2</span> Launch the Hyperparameter Tuning Job</h3>
<p>A hyperparameter tuning job runs a series of training jobs that each test a combination of hyperparameters for a given objective metric (i.e.&nbsp;<code>validation:accuracy</code>). In this project, we will use a <code>Random</code> search strategy to determine the combinations of hyperparameters - within the specific ranges - to use for each training job within the tuning job. For more information on hyperparameter tuning search strategies, please see the following documentation: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html</p>
<p>When the tuning job completes, we can select the hyperparameters used by the best-performing training job relative to the objective metric.</p>
<p>The <code>max_jobs</code> parameter is a stop criteria that limits the number of overall training jobs (and therefore hyperparameter combinations) to run within the tuning job.</p>
<p>The <code>max_parallel_jobs</code> parameter limits the number of training jobs (and therefore hyperparameter combinations) to run in parallel within the tuning job. This parameter is often used in combination with the <code>Bayesian</code> search strategy when you want to test a smaller set of training jobs (less than the <code>max_jobs</code>), learn from the smaller set of training jobs, then apply Bayesian methods to determine the next set of hyperparameters used by the next set of training jobs. Bayesian methods can improve hyperparameter-tuning performance in some cases.</p>
<p>The <code>early_stopping_type</code> parameter is used by SageMaker hyper-parameter tuning jobs to automatically stop a training job if the job is not improving the objective metrics (i.e.&nbsp;<code>validation:accuracy</code>) relative to previous training jobs within the tuning job. For more information on early stopping, please see the following documentation: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html.</p>
<p>Let’s set up the Hyperparameter Tuner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> HyperparameterTuner</span>
<span id="cb17-2"></span>
<span id="cb17-3">tuner <span class="op" style="color: #5E5E5E;">=</span> HyperparameterTuner(</span>
<span id="cb17-4">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator, </span>
<span id="cb17-5">    hyperparameter_ranges<span class="op" style="color: #5E5E5E;">=</span>hyperparameter_ranges, </span>
<span id="cb17-6">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions, </span>
<span id="cb17-7">    strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Random'</span>, </span>
<span id="cb17-8">    objective_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Maximize'</span>,</span>
<span id="cb17-9">    objective_metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'validation:accuracy'</span>,</span>
<span id="cb17-10">    max_jobs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># maximum number of jobs to run</span></span>
<span id="cb17-11">    max_parallel_jobs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># maximum number of jobs to run in parallel</span></span>
<span id="cb17-12">    early_stopping_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Auto'</span> <span class="co" style="color: #5E5E5E;"># early stopping criteria</span></span>
<span id="cb17-13">)</span></code></pre></div>
</div>
<p>Now we launch the SageMaker Hyper-Parameter Tuning (HPT) Job.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">tuner.fit(</span>
<span id="cb18-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb18-3">    include_cls_metadata<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb18-4">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb18-5">)</span></code></pre></div>
</div>
</section>
<section id="check-tuning-job-status" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="check-tuning-job-status"><span class="header-section-number">3.3</span> Check Tuning Job status</h3>
<p>We can see the Tuning Job status in the console.</p>
<div class="cell" data-outputid="18d3bff8-09d1-4c2f-e4f8-092a9f9fd450" data-scrolled="true">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">tuning_job_name <span class="op" style="color: #5E5E5E;">=</span> tuner.latest_tuning_job.job_name</span>
<span id="cb19-2"><span class="bu" style="color: null;">print</span>(tuning_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>pytorch-training-230213-1736</code></pre>
</div>
</div>
<div class="cell" data-outputid="885c59c6-02a5-4410-fa72-8e5c4061c397">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb21-2"></span>
<span id="cb21-3">tuner.wait()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.....................................................................................................................................................................................................................................................................................................!
CPU times: user 1.37 s, sys: 191 ms, total: 1.56 s
Wall time: 24min 53s</code></pre>
</div>
</div>
<p>The results of the SageMaker Hyperparameter Tuning Job are available on the <code>analytics</code> of the <code>tuner object</code>. The <code>dataframe</code> function converts the result directly into the dataframe. We can explore the results with the following lines of the code:</p>
<div class="cell" data-outputid="b87d480a-0a86-4216-d88b-0e89b1face48">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb23-2"></span>
<span id="cb23-3">time.sleep(<span class="dv" style="color: #AD0000;">10</span>) <span class="co" style="color: #5E5E5E;"># slight delay to allow the analytics to be calculated</span></span>
<span id="cb23-4"></span>
<span id="cb23-5">df_results <span class="op" style="color: #5E5E5E;">=</span> tuner.analytics().dataframe()</span>
<span id="cb23-6">df_results.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(2, 8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="53838327-3ae5-4bf2-fc7b-cb46ee637777">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df_results.sort_values(<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>learning_rate</th>
      <th>train_batch_size</th>
      <th>TrainingJobName</th>
      <th>TrainingJobStatus</th>
      <th>FinalObjectiveValue</th>
      <th>TrainingStartTime</th>
      <th>TrainingEndTime</th>
      <th>TrainingElapsedTimeSeconds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.000020</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-002-23e15b91</td>
      <td>Completed</td>
      <td>73.050003</td>
      <td>2023-02-13 17:38:06+00:00</td>
      <td>2023-02-13 18:01:09+00:00</td>
      <td>1383.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.000017</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-001-44bd7477</td>
      <td>Completed</td>
      <td>72.269997</td>
      <td>2023-02-13 17:38:02+00:00</td>
      <td>2023-02-13 18:01:24+00:00</td>
      <td>1402.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>When training and tuning at scale, it is important to continuously monitor and use the right compute resources. While we have the flexibility of choosing different compute options how do you choose the specific instance types and sizes to use? There is no standard answer for this. It comes down to understanding the workload and running empirical testing to determine the best compute resources to use for the training.</p>
<p>SageMaker Training Jobs emit CloudWatch metrics for resource utilization. We can review them in the AWS console.</p>
</section>
</section>
<section id="evaluate-the-results" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="evaluate-the-results"><span class="header-section-number">4</span> Evaluate the results</h2>
<p>An important part of developing a model is evaluating the model with a test data set - one that the model has never seen during its training process. The final metrics resulting from this evaluation can be used to compare competing machine learning models. The higher the value of these metrics, the better the model is able to generalize.</p>
<section id="show-the-best-candidate" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="show-the-best-candidate"><span class="header-section-number">4.1</span> Show the best candidate</h3>
<p>Let’s now show the best candidate - the one with the highest accuracy result.</p>
<div class="cell" data-outputid="58699c9c-5c70-4df3-b231-b1ef3ad2b716">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df_results.sort_values(</span>
<span id="cb26-2">    <span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, </span>
<span id="cb26-3">    ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).head(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>learning_rate</th>
      <th>train_batch_size</th>
      <th>TrainingJobName</th>
      <th>TrainingJobStatus</th>
      <th>FinalObjectiveValue</th>
      <th>TrainingStartTime</th>
      <th>TrainingEndTime</th>
      <th>TrainingElapsedTimeSeconds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.00002</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-002-23e15b91</td>
      <td>Completed</td>
      <td>73.050003</td>
      <td>2023-02-13 17:38:06+00:00</td>
      <td>2023-02-13 18:01:09+00:00</td>
      <td>1383.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="evaluate-the-best-candidate" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="evaluate-the-best-candidate"><span class="header-section-number">4.2</span> Evaluate the best candidate</h3>
<p>Let’s pull the information about the best candidate from the dataframe and then take the Training Job name from the column <code>TrainingJobName</code>.</p>
<div class="cell" data-outputid="d000d21b-8e0b-4fe4-a726-0864b589a731">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">best_candidate <span class="op" style="color: #5E5E5E;">=</span> df_results.sort_values(<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb27-2"></span>
<span id="cb27-3">best_candidate_training_job_name <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb27-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate Training Job name: pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Now lets show the accuracy result for the best candidate.</p>
<div class="cell" data-outputid="1d6a7aee-827a-40b3-d89c-27cb8218d653">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">best_candidate_accuracy <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>] </span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate accuracy result: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_accuracy))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate accuracy result: 73.05000305175781</code></pre>
</div>
</div>
<p>We can use the function <code>describe_training_job</code> of the service client to get some more information about the best candidate. The result is in dictionary format. Let’s check that it has the same Training Job name:</p>
<div class="cell" data-outputid="f6804e74-19d9-415f-9549-c9a09b7aecd6">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">best_candidate_description <span class="op" style="color: #5E5E5E;">=</span> sm.describe_training_job(TrainingJobName<span class="op" style="color: #5E5E5E;">=</span>best_candidate_training_job_name)</span>
<span id="cb31-2"></span>
<span id="cb31-3">best_candidate_training_job_name2 <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_name2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Now lets pull the Tuning Job and Training Job Amazon Resource Name (ARN) from the best candidate training job description.</p>
<div class="cell" data-outputid="3528b282-76f7-45ff-bbeb-c1656bd77280">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;">print</span>(best_candidate_description.keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['TrainingJobName', 'TrainingJobArn', 'TuningJobArn', 'ModelArtifacts', 'TrainingJobStatus', 'SecondaryStatus', 'HyperParameters', 'AlgorithmSpecification', 'RoleArn', 'InputDataConfig', 'OutputDataConfig', 'ResourceConfig', 'StoppingCondition', 'CreationTime', 'TrainingStartTime', 'TrainingEndTime', 'LastModifiedTime', 'SecondaryStatusTransitions', 'FinalMetricDataList', 'EnableNetworkIsolation', 'EnableInterContainerTrafficEncryption', 'EnableManagedSpotTraining', 'TrainingTimeInSeconds', 'BillableTimeInSeconds', 'ProfilingStatus', 'WarmPoolStatus', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="cf019137-fd79-4c70-e931-a39b98fbc0b8">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">best_candidate_tuning_job_arn <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TuningJobArn'</span>] </span>
<span id="cb35-2">best_candidate_training_job_arn <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TrainingJobArn'</span>] </span>
<span id="cb35-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Tuning Job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_tuning_job_arn))</span>
<span id="cb35-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Training Job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_arn))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate Tuning Job ARN: arn:aws:sagemaker:us-east-1:058323655887:hyper-parameter-tuning-job/pytorch-training-230213-1736
Best candidate Training Job ARN: arn:aws:sagemaker:us-east-1:058323655887:training-job/pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Next, we pull the path of the best candidate model in the S3 bucket. We will need it later to set up the Processing Job for the evaluation.</p>
<div class="cell" data-outputid="107f7d5d-d89b-47ba-9484-f707d1d7d9e7">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">model_tar_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sm.describe_training_job(TrainingJobName<span class="op" style="color: #5E5E5E;">=</span>best_candidate_training_job_name)[<span class="st" style="color: #20794D;">'ModelArtifacts'</span>][<span class="st" style="color: #20794D;">'S3ModelArtifacts'</span>]</span>
<span id="cb37-2"><span class="bu" style="color: null;">print</span>(model_tar_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz</code></pre>
</div>
</div>
<p>To perform model evaluation we will use a scikit-learn-based Processing Job. This is essentially a generic Python Processing Job with scikit-learn pre-installed. We can specify the version of scikit-learn we wish to use. Also we need to pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb39-2"></span>
<span id="cb39-3">processing_instance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ml.c5.2xlarge"</span></span>
<span id="cb39-4">processing_instance_count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb39-5"></span>
<span id="cb39-6">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb39-7">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.23-1"</span>,</span>
<span id="cb39-8">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb39-9">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb39-10">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb39-11">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span>,</span>
<span id="cb39-12">)</span></code></pre></div>
</div>
<p>The model evaluation Processing Job will be running the Python code from the file <a href="https://pranath.github.io/pds/tuning/evaluate_model_metrics.py">src/evaluate_model_metrics.py</a>. You can open and review the file.</p>
<p>Let’s launch the Processing Job, passing the defined above parameters, custom script, path and the S3 bucket location of the test data.</p>
<div class="cell" data-outputid="a4d26510-3c5e-4bd1-bb75-edd8619d257d">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb40-2"></span>
<span id="cb40-3">processor.run(</span>
<span id="cb40-4">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"src/evaluate_model_metrics.py"</span>,</span>
<span id="cb40-5">    inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb40-6">        ProcessingInput(  </span>
<span id="cb40-7">            input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"model-tar-s3-uri"</span>,                        </span>
<span id="cb40-8">            source<span class="op" style="color: #5E5E5E;">=</span>model_tar_s3_uri,                               </span>
<span id="cb40-9">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/input/model/"</span></span>
<span id="cb40-10">        ),</span>
<span id="cb40-11">        ProcessingInput(</span>
<span id="cb40-12">            input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"evaluation-data-s3-uri"</span>,</span>
<span id="cb40-13">            source<span class="op" style="color: #5E5E5E;">=</span>processed_test_data_s3_uri,                                    </span>
<span id="cb40-14">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/input/data/"</span>,</span>
<span id="cb40-15">        ),</span>
<span id="cb40-16">    ],</span>
<span id="cb40-17">    outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb40-18">        ProcessingOutput(s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"EndOfJob"</span>, output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"metrics"</span>, source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/output/metrics"</span>),</span>
<span id="cb40-19">    ],</span>
<span id="cb40-20">    arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"--max-seq-length"</span>, <span class="bu" style="color: null;">str</span>(max_seq_length)],</span>
<span id="cb40-21">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb40-22">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb40-23">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  sagemaker-scikit-learn-2023-02-13-18-04-08-342
Inputs:  [{'InputName': 'model-tar-s3-uri', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz', 'LocalPath': '/opt/ml/processing/input/model/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'evaluation-data-s3-uri', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/', 'LocalPath': '/opt/ml/processing/input/data/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'code', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/input/code/evaluate_model_metrics.py', 'LocalPath': '/opt/ml/processing/input/code', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'metrics', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics', 'LocalPath': '/opt/ml/processing/output/metrics', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<p>We can see the information about the Processing Jobs using the <code>describe</code> function. The result is in dictionary format. Let’s pull the Processing Job name:</p>
<div class="cell" data-outputid="3fe215be-7c07-4f9d-dbc8-4bf43a0746a8">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">scikit_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">"ProcessingJobName"</span>]</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing Job name: sagemaker-scikit-learn-2023-02-13-18-04-08-342</code></pre>
</div>
</div>
<p>Now lets pull the Processing Job status from the Processing Job description.</p>
<div class="cell" data-outputid="833388eb-4228-423f-a974-4623df207ace">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;">print</span>(processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['ProcessingInputs', 'ProcessingOutputConfig', 'ProcessingJobName', 'ProcessingResources', 'StoppingCondition', 'AppSpecification', 'RoleArn', 'ProcessingJobArn', 'ProcessingJobStatus', 'LastModifiedTime', 'CreationTime', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="1c84660f-929d-4b8a-eea4-736f6bc82e21">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">scikit_processing_job_status <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobStatus'</span>] </span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job status: InProgress</code></pre>
</div>
</div>
<p>Let’s monitor the Processing Job.</p>
<div class="cell" data-outputid="40404e21-48fe-49ff-ee39-5eb801a174db">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb48-2"></span>
<span id="cb48-3">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(</span>
<span id="cb48-4">    processing_job_name<span class="op" style="color: #5E5E5E;">=</span>scikit_processing_job_name, sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb48-5">)</span>
<span id="cb48-6"></span>
<span id="cb48-7">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb48-8"></span>
<span id="cb48-9">pprint(processing_job_description)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AppSpecification': {'ContainerArguments': ['--max-seq-length', '128'],
                      'ContainerEntrypoint': ['python3',
                                              '/opt/ml/processing/input/code/evaluate_model_metrics.py'],
                      'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
 'CreationTime': datetime.datetime(2023, 2, 13, 18, 4, 9, 1000, tzinfo=tzlocal()),
 'LastModifiedTime': datetime.datetime(2023, 2, 13, 18, 4, 9, 766000, tzinfo=tzlocal()),
 'ProcessingInputs': [{'AppManaged': False,
                       'InputName': 'model-tar-s3-uri',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/model/',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz'}},
                      {'AppManaged': False,
                       'InputName': 'evaluation-data-s3-uri',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/data/',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/'}},
                      {'AppManaged': False,
                       'InputName': 'code',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/input/code/evaluate_model_metrics.py'}}],
 'ProcessingJobArn': 'arn:aws:sagemaker:us-east-1:058323655887:processing-job/sagemaker-scikit-learn-2023-02-13-18-04-08-342',
 'ProcessingJobName': 'sagemaker-scikit-learn-2023-02-13-18-04-08-342',
 'ProcessingJobStatus': 'InProgress',
 'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                         'OutputName': 'metrics',
                                         'S3Output': {'LocalPath': '/opt/ml/processing/output/metrics',
                                                      'S3UploadMode': 'EndOfJob',
                                                      'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics'}}]},
 'ProcessingResources': {'ClusterConfig': {'InstanceCount': 1,
                                           'InstanceType': 'ml.c5.2xlarge',
                                           'VolumeSizeInGB': 30}},
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '2328',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Mon, 13 Feb 2023 18:04:09 GMT',
                                      'x-amzn-requestid': '27108fc5-7782-41b6-ac72-25de5e9245dc'},
                      'HTTPStatusCode': 200,
                      'RequestId': '27108fc5-7782-41b6-ac72-25de5e9245dc',
                      'RetryAttempts': 0},
 'RoleArn': 'arn:aws:iam::058323655887:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
 'StoppingCondition': {'MaxRuntimeInSeconds': 7200}}</code></pre>
</div>
</div>
<div class="cell" data-outputid="28e8fc5e-cf8d-4f8d-8d20-c840b94af512">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb50-2"></span>
<span id="cb50-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.........................................................................!CPU times: user 338 ms, sys: 40.8 ms, total: 379 ms
Wall time: 6min 9s</code></pre>
</div>
</div>
</section>
<section id="inspect-the-processed-output-data" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="inspect-the-processed-output-data"><span class="header-section-number">4.3</span> Inspect the processed output data</h3>
<p>Let’s take a look at the results of the Processing Job. Get the S3 bucket location of the output metrics:</p>
<div class="cell" data-outputid="f3ba6a45-9a70-40e4-e490-35ef80f49d5f">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb52-2"></span>
<span id="cb52-3">output_config <span class="op" style="color: #5E5E5E;">=</span> processing_job_description[<span class="st" style="color: #20794D;">"ProcessingOutputConfig"</span>]</span>
<span id="cb52-4"><span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> output_config[<span class="st" style="color: #20794D;">"Outputs"</span>]:</span>
<span id="cb52-5">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">"OutputName"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"metrics"</span>:</span>
<span id="cb52-6">        processed_metrics_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">"S3Output"</span>][<span class="st" style="color: #20794D;">"S3Uri"</span>]</span>
<span id="cb52-7"></span>
<span id="cb52-8"><span class="bu" style="color: null;">print</span>(processed_metrics_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics</code></pre>
</div>
</div>
<p>List the content of the folder:</p>
<div class="cell" data-outputid="c00b6ef0-b45e-44dc-a5a2-1aa6bae5d1ba">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_metrics_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 18:10:13      21764 confusion_matrix.png
2023-02-13 18:10:13         56 evaluation.json</code></pre>
</div>
</div>
<p>The test accuracy can be pulled from the <code>evaluation.json</code> file.</p>
<div class="cell" data-outputid="884bea2a-63bc-49d7-b47b-550759874538">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb56-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb56-3"></span>
<span id="cb56-4">metrics_json <span class="op" style="color: #5E5E5E;">=</span> sagemaker.s3.S3Downloader.read_file(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb56-5">    processed_metrics_s3_uri</span>
<span id="cb56-6">))</span>
<span id="cb56-7"></span>
<span id="cb56-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Test accuracy: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(json.loads(metrics_json)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test accuracy: {'metrics': {'accuracy': {'value': 0.7378640776699029}}}</code></pre>
</div>
</div>
<p>Copy image with the confusion matrix generated during the model evaluation into the folder <code>generated</code>.</p>
<div class="cell" data-outputid="708667b1-9f41-4beb-92ca-1dc68ab2538d">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_metrics_s3_uri<span class="op" style="color: #5E5E5E;">/</span>confusion_matrix.png .<span class="op" style="color: #5E5E5E;">/</span>generated<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb58-2"></span>
<span id="cb58-3"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb58-4">time.sleep(<span class="dv" style="color: #AD0000;">10</span>) <span class="co" style="color: #5E5E5E;"># Slight delay for our notebook to recognize the newly-downloaded file</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics/confusion_matrix.png to generated/confusion_matrix.png</code></pre>
</div>
</div>
<p>Lets show and review the confusion matrix, which is a table of all combinations of true (actual) and predicted labels. Each cell contains the number of the reviews for the corresponding sentiments.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/confusion_matrix.png" title="Confusion Matrix" class="img-fluid"></p>
<p>We can see that the highest numbers of the reviews appear in the diagonal cells, which are the correct predictions for each sentiment class.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">5</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-14-optimize-models-in-the-cloud-using-aws-automatic-model-tuning.html</guid>
  <pubDate>Tue, 14 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Building an AWS SageMaker Pipeline for a BERT Based text classifier</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-12-building-aws-sagemaker-pipeline-train-deploy-bert-text-classifier.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this project will look at the deploy and manage phase for the workflow using <strong>AWS Sagemaker Pipelines</strong>, which will actually involve all previous phases.</p>
<p>In particular we will do the following:</p>
<ul>
<li>Define and run a pipeline using a directed acyclic graph (DAG) with specific pipeline parameters and model hyper-parameters</li>
<li>Define a processing step that cleans, balances, transforms, and splits our dataset into train, validation, and test dataset</li>
<li>Define a training step that trains a model using the train and validation datasets</li>
<li>Define a processing step that evaluates the trained model’s performance on the test dataset</li>
<li>Define a register model step that creates a model package from the trained model</li>
<li>Define a conditional step that checks the model’s performance and conditionally registers the model for deployment</li>
</ul>
<p>Using the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - we will prepare it to train a deep learning BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
</section>
<section id="what-are-mlops" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-are-mlops"><span class="header-section-number">2</span> What are MLOPS ?</h2>
<p>MLOPS stands for Machine Learning Operations - but what does that mean?</p>
<p>MLOps builds on DevOps practices that encompass people, process, and technology. However, MLOps also includes considerations and practices that are really unique to machine learning workloads. All of these practices aim to be able to deliver machine learning workloads quickly to production while still maintaining high quality consistency and ensuring end-to-end traceability.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_path_mlmodels.png" title="Consideratons" class="img-fluid"></p>
<p>It’s important to consider that the machine learning development life cycle is very different than the software development life cycle for a variety of reasons.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_path_mlmodels2.png" title="Challenges" class="img-fluid"></p>
<p>First, the model development life cycle is difficult to plan for from a project management perspective. It typically includes longer experimentation cycles than you would see in a standard agile software development process. Also the development of machine learning models includes data tasks like feature engineering and data preparation. You also have data processing code, as well as new inputs and artifacts to consider for versioning. You also have additional pipeline task as well. When you start to look at automating the machine learning workflow, the inputs and artifacts that are generated across these tasks result in multiple disparate pipelines with dependencies that can be a bit more challenging, stitched together than a typical software development workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml.png" title="Goals" class="img-fluid"></p>
<p>Second, some models exist by themselves where you might be manually reading prediction requests and getting responses through a batch process or even within your notebook on an ad hoc basis. This is especially true in research environments. However, in many cases, a model is typically a small part of an overall solution that incorporates machine-learning. While that model is still a very key component to that solution, most often there is a need for other components that need to be built or integrated. As an example, consider your product review use case and your model that is predicting the classes of sentiment for a product review. That model itself will be able to classify the sentiment related to a product, but you also need to consider how that prediction will actually be used and potentially integrated into other existing applications. For this, there may be additional tasks like creating a rest API as a common interface for other applications to integrate with your model or even building applications that can respond to those reviews. This could mean creating automation to initiate back-end processes that allow for customer support engineers to quickly react and respond to any negative reviews.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml2.png" title="Path to production" class="img-fluid"></p>
<p>A third consideration is that where typically multiple personas span the machine learning development lifecycle, and all are really needed to ultimately be able to build, deploy, integrate, and operate a machine learning workload. This can create challenges as these personas often have competing priorities and needs. There may also be skill gaps in building an operating machine learning workloads. As an example, a data scientist may not have a traditional IT background. While they may be very comfortable in creating a model that meets the performance objectives that have been identified for your particular machine learning use case, they may not know how to host that model in a way that it can be consumed by other applications or other systems. In this case, there may be a need to have a deployment engineer that is also engaged to help in building out the infrastructure and the resources that are needed to operate and host that model.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml3.png" title="Accelerating the path to production" class="img-fluid"></p>
<p>Also, you might need to integrate that hosted model with another application. In this case, you’re likely to depend on a software engineer to perform that integration. If there isn’t a cross-functional team with the same project goals in place, competing priorities and skill gaps across these personas make it really difficult to provide that path to production for your model.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml4.png" title="Improving the Quality of Deployed Models" class="img-fluid"></p>
<p>Finally, many teams have processes in place supporting different regulatory or even internal corporate requirements. This means that when you’re creating your machine learning pipeline, sometimes you also need to be able to ensure that traditional practices can be included inside the steps of your pipeline. Something like change management as an example here. This may mean that within your pipeline, you’re going to automatically open a change ticket anytime a new model gets deployed to production. Or maybe it’s a manual approval that’s required before your model can deploy to production. All of these processes may need to be incorporated inside your machine learning pipeline.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml5.png" title="Key Considerations" class="img-fluid"></p>
<p><strong>MLOps aims to provide the most efficient path to production by reducing manual hand-offs between the steps in your workflow, increasing automation within those steps in your workflow, and then going a step further to orchestrate the steps across your workflow.</strong></p>
</section>
<section id="aws-pipelines-terminology" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="aws-pipelines-terminology"><span class="header-section-number">3</span> AWS Pipelines Terminology</h2>
<p>This project focuses on the following features of Amazon SageMaker Pipelines:</p>
<ul>
<li><strong>Pipelines</strong> - a directed acyclic graph (DAG) of steps and conditions to orchestrate SageMaker jobs and resource creation</li>
<li><strong>Processing job steps</strong> - a simplified, managed experience on SageMaker to run data processing workloads, such as feature engineering, data validation, model evaluation, and model explainability</li>
<li><strong>Training job steps</strong> - an iterative process that teaches a model to make predictions on new data by presenting examples from a training dataset</li>
<li><strong>Conditional step execution</strong> - provides conditional execution of branches in a pipeline</li>
<li><strong>Registering models</strong> - register a model in a model registry to create a deployable models in Amazon SageMaker</li>
<li><strong>Parameterized pipeline executions</strong> - allows pipeline executions to vary by supplied parameters</li>
<li><strong>Model endpoint</strong> - hosts the model as a REST endpoint to serve predictions from new data</li>
</ul>
</section>
<section id="creating-a-bert-pipeline" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="creating-a-bert-pipeline"><span class="header-section-number">4</span> Creating a BERT Pipeline</h2>
<p>The pipeline that we will create follows a typical machine learning application pattern of pre-processing, training, evaluation, and model registration.</p>
<p>In the processing step, we will perform feature engineering to transform the <code>review_body</code> text into BERT embeddings using the pre-trained BERT model and split the dataset into train, validation and test files. The transformed dataset is stored in a feature store. To optimize for Tensorflow training, the transformed dataset files are saved using the TFRecord format in Amazon S3.</p>
<p>In the training step, we will fine-tune the BERT model to the customer reviews dataset and add a new classification layer to predict the <code>sentiment</code> for a given <code>review_body</code>.</p>
<p>In the evaluation step, we will take the trained model and a test dataset as input, and produce a JSON file containing classification evaluation metrics.</p>
<p>In the condition step, we will register the trained model if the accuracy of the model, as determined by our evaluation step, exceeds a given threshold value.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/bert_sagemaker_pipeline.png" title="BERT Sagemaker Pipelines" class="img-fluid"></p>
<p>First, let’s install the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> logging</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> botocore.exceptions <span class="im" style="color: #00769E;">import</span> ClientError</span>
<span id="cb1-10"></span>
<span id="cb1-11">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w3'</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-14">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-15">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-16"></span>
<span id="cb1-17">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-18">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-19"></span>
<span id="cb1-20">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-21">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-22"></span>
<span id="cb1-23">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-24">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-25">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<p>Let’s setup the pipeline name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb2-2">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb2-3"></span>
<span id="cb2-4">pipeline_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'BERT-pipeline-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span></code></pre></div>
</div>
</section>
<section id="configure-the-dataset-and-processing-step" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="configure-the-dataset-and-processing-step"><span class="header-section-number">5</span> Configure the dataset and processing step</h2>
<section id="configure-s3-path-for-raw-input-data" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="configure-s3-path-for-raw-input-data"><span class="header-section-number">5.1</span> Configure S3 path for raw input data</h3>
<p>The raw dataset is in the public S3 bucket. Let’s start by specifying the S3 location of it:</p>
<div class="cell" data-outputid="bf6a9f74-3ac8-41f3-9687-cd1b46820068">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">raw_input_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/raw/'</span></span>
<span id="cb3-2"><span class="bu" style="color: null;">print</span>(raw_input_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://dlai-practical-data-science/data/raw/</code></pre>
</div>
</div>
<p>List the files in the S3 bucket (in this case it will be just one file):</p>
<div class="cell" data-outputid="704edfd2-2e74-445d-fd0a-d261ce456342">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $raw_input_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="configure-processing-step" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="configure-processing-step"><span class="header-section-number">5.2</span> Configure processing step</h3>
<p>For the pipeline workflow we will need to create workflow parameters of a specific type: integer, string, or float.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.parameters <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb7-2">    ParameterInteger,</span>
<span id="cb7-3">    ParameterString,</span>
<span id="cb7-4">    ParameterFloat,</span>
<span id="cb7-5">)</span></code></pre></div>
</div>
<p>Now set the parameters for the processing step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">processing_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ProcessingInstanceType"</span>,</span>
<span id="cb8-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.c5.2xlarge"</span></span>
<span id="cb8-4">)</span>
<span id="cb8-5"></span>
<span id="cb8-6">processing_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb8-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ProcessingInstanceCount"</span>,</span>
<span id="cb8-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-9">)</span>
<span id="cb8-10"></span>
<span id="cb8-11">train_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainSplitPercentage"</span>,</span>
<span id="cb8-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.90</span>,</span>
<span id="cb8-14">)</span>
<span id="cb8-15"></span>
<span id="cb8-16">validation_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationSplitPercentage"</span>,</span>
<span id="cb8-18">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb8-19">)</span>
<span id="cb8-20"></span>
<span id="cb8-21">test_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-22">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TestSplitPercentage"</span>,</span>
<span id="cb8-23">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb8-24">)</span>
<span id="cb8-25"></span>
<span id="cb8-26">balance_dataset <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-27">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"BalanceDataset"</span>,</span>
<span id="cb8-28">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"True"</span>,</span>
<span id="cb8-29">)</span>
<span id="cb8-30"></span>
<span id="cb8-31">max_seq_length <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb8-32">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MaxSeqLength"</span>,</span>
<span id="cb8-33">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>,</span>
<span id="cb8-34">)</span>
<span id="cb8-35"></span>
<span id="cb8-36">feature_store_offline_prefix <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-37">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FeatureStoreOfflinePrefix"</span>,</span>
<span id="cb8-38">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews-feature-store-"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb8-39">)</span>
<span id="cb8-40"></span>
<span id="cb8-41">feature_group_name <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-42">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FeatureGroupName"</span>,</span>
<span id="cb8-43">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews-feature-group-"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb8-44">)</span>
<span id="cb8-45"></span>
<span id="cb8-46">input_data <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-47">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InputData"</span>,</span>
<span id="cb8-48">    default_value<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb8-49">)</span></code></pre></div>
</div>
<p>Setting up scikit-learn-based processor, pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb9-2"></span>
<span id="cb9-3">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb9-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb9-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb9-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb9-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb9-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},                             </span>
<span id="cb9-9">)</span></code></pre></div>
</div>
<p>Now we will use the processor instance to construct a <code>ProcessingStep</code>, along with the input and output channels and the code that will be executed when the pipeline invokes pipeline execution. This is very similar to a processor instance’s <code>run</code> method, for those familiar with the existing Python SDK.</p>
<p>Note the <code>"sentiment-train"</code>, <code>"sentiment-validation"</code> and <code>"sentiment-test"</code> named channels specified in the output configuration for the processing job. Such step <code>Properties</code> can be used in subsequent steps and will resolve to their runtime values at execution. In particular, we will call out this usage defining the training step.</p>
<div class="cell" data-outputid="cccebd03-d359-47d4-cb04-6cb53cde120a">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb10-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> ProcessingStep</span>
<span id="cb10-3"></span>
<span id="cb10-4">processing_inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-5">    ProcessingInput(</span>
<span id="cb10-6">        input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'raw-input-data'</span>,</span>
<span id="cb10-7">        source<span class="op" style="color: #5E5E5E;">=</span>input_data,</span>
<span id="cb10-8">        destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data/'</span>,</span>
<span id="cb10-9">        s3_data_distribution_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ShardedByS3Key'</span></span>
<span id="cb10-10">    )</span>
<span id="cb10-11">]</span>
<span id="cb10-12"></span>
<span id="cb10-13">processing_outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-14">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-train'</span>,</span>
<span id="cb10-15">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/train'</span>,</span>
<span id="cb10-16">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb10-17">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-validation'</span>,</span>
<span id="cb10-18">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/validation'</span>,</span>
<span id="cb10-19">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb10-20">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-test'</span>,</span>
<span id="cb10-21">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/test'</span>,</span>
<span id="cb10-22">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>)</span>
<span id="cb10-23">]        </span>
<span id="cb10-24"></span>
<span id="cb10-25">processing_step <span class="op" style="color: #5E5E5E;">=</span> ProcessingStep(</span>
<span id="cb10-26">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Processing'</span>, </span>
<span id="cb10-27">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/prepare_data.py'</span>,</span>
<span id="cb10-28">    processor<span class="op" style="color: #5E5E5E;">=</span>processor,</span>
<span id="cb10-29">    inputs<span class="op" style="color: #5E5E5E;">=</span>processing_inputs,</span>
<span id="cb10-30">    outputs<span class="op" style="color: #5E5E5E;">=</span>processing_outputs,</span>
<span id="cb10-31">    job_arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'--train-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(train_split_percentage.default_value),                   </span>
<span id="cb10-32">                   <span class="st" style="color: #20794D;">'--validation-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(validation_split_percentage.default_value),</span>
<span id="cb10-33">                   <span class="st" style="color: #20794D;">'--test-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(test_split_percentage.default_value),</span>
<span id="cb10-34">                   <span class="st" style="color: #20794D;">'--balance-dataset'</span>, <span class="bu" style="color: null;">str</span>(balance_dataset.default_value),</span>
<span id="cb10-35">                   <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length.default_value),                   </span>
<span id="cb10-36">                   <span class="st" style="color: #20794D;">'--feature-store-offline-prefix'</span>, <span class="bu" style="color: null;">str</span>(feature_store_offline_prefix.default_value),</span>
<span id="cb10-37">                   <span class="st" style="color: #20794D;">'--feature-group-name'</span>, <span class="bu" style="color: null;">str</span>(feature_group_name.default_value)</span>
<span id="cb10-38">                  ]</span>
<span id="cb10-39">)        </span>
<span id="cb10-40"></span>
<span id="cb10-41"><span class="bu" style="color: null;">print</span>(processing_step)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ProcessingStep(name='Processing', step_type=&lt;StepTypeEnum.PROCESSING: 'Processing'&gt;)</code></pre>
</div>
</div>
<p>Now we can call out the properties of the processing job as an object using the command <code>processing_step.properties</code>. To print out and explore the attributes use <code>__dict__</code> method.</p>
<div class="cell" data-outputid="24eec809-fdf8-45c0-dc04-721ac29153c2">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># print out the list of the processing job properties</span></span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb12-3">    processing_step.properties.__dict__,</span>
<span id="cb12-4">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb12-5">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "AppSpecification": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298a10&gt;",
    "AutoMLJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431d10&gt;",
    "CreationTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431950&gt;",
    "Environment": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298690&gt;",
    "ExitMessage": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431d50&gt;",
    "ExperimentConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf52a0b10&gt;",
    "FailureReason": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431750&gt;",
    "LastModifiedTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431a10&gt;",
    "MonitoringScheduleArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431190&gt;",
    "NetworkConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298b90&gt;",
    "ProcessingEndTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431610&gt;",
    "ProcessingInputs": "&lt;sagemaker.workflow.properties.PropertiesList object at 0x7fcdf5298350&gt;",
    "ProcessingJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431410&gt;",
    "ProcessingJobName": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298590&gt;",
    "ProcessingJobStatus": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431310&gt;",
    "ProcessingOutputConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298510&gt;",
    "ProcessingResources": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf52984d0&gt;",
    "ProcessingStartTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431ed0&gt;",
    "RoleArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298650&gt;",
    "StoppingCondition": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298a50&gt;",
    "TrainingJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431bd0&gt;",
    "_path": "Steps.Processing",
    "_shape_name": "DescribeProcessingJobResponse"
}</code></pre>
</div>
</div>
<p>Pull the channel <code>sentiment-train</code> from the output configuration of the processing job. Print out the attributes of the resulting object:</p>
<div class="cell" data-outputid="1a5369ca-8996-42cc-a2d7-6db70c5aede9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb14-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-train'</span>].__dict__, </span>
<span id="cb14-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb14-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "AppManaged": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf543c490&gt;",
    "FeatureStoreOutput": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf54d4510&gt;",
    "OutputName": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5384650&gt;",
    "S3Output": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf53845d0&gt;",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train']",
    "_shape_name": "ProcessingOutput"
}</code></pre>
</div>
</div>
<p>Now we can pull and print out attributes of the S3 output path related to the <code>sentiment-train</code> output channel:</p>
<div class="cell" data-outputid="dfa191f0-ccff-4e84-c304-4a64f757b7f7">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb16-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-train'</span>].S3Output.S3Uri.__dict__,</span>
<span id="cb16-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb16-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "__str__": "S3Uri",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train'].S3Output.S3Uri",
    "_shape_name": "S3Uri"
}</code></pre>
</div>
</div>
<p>Let’s pull and print out attributes of the S3 output path object related to the <code>sentiment-test</code> output channel.</p>
<div class="cell" data-outputid="da8c78c7-73fc-49b9-ae1b-de5351dd2c23">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb18-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-test'</span>].S3Output.S3Uri.__dict__, </span>
<span id="cb18-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb18-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "__str__": "S3Uri",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-test'].S3Output.S3Uri",
    "_shape_name": "S3Uri"
}</code></pre>
</div>
</div>
<p>These objects can be passed into the next steps of the workflow. Also, we can pull the arguments of the processing step with the corresponding function. The result is in the dictionary format.</p>
<div class="cell" data-outputid="1cad757e-7257-4de9-9839-87e1064dbb23">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">processing_step.arguments.keys()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>dict_keys(['ProcessingResources', 'AppSpecification', 'RoleArn', 'ProcessingInputs', 'ProcessingOutputConfig', 'Environment'])</code></pre>
</div>
</div>
<p>Let’s pull and review processing inputs from the arguments of the processing step:</p>
<div class="cell" data-outputid="d923a819-de37-4576-ce4a-f121a31e5b25">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">processing_step.arguments[<span class="st" style="color: #20794D;">'ProcessingInputs'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[{'InputName': 'raw-input-data',
  'AppManaged': False,
  'S3Input': {'S3Uri': ParameterString(name='InputData', parameter_type=&lt;ParameterTypeEnum.STRING: 'String'&gt;, default_value='s3://dlai-practical-data-science/data/raw/'),
   'LocalPath': '/opt/ml/processing/input/data/',
   'S3DataType': 'S3Prefix',
   'S3InputMode': 'File',
   'S3DataDistributionType': 'ShardedByS3Key',
   'S3CompressionType': 'None'}},
 {'InputName': 'code',
  'AppManaged': False,
  'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-22-918/input/code/prepare_data.py',
   'LocalPath': '/opt/ml/processing/input/code',
   'S3DataType': 'S3Prefix',
   'S3InputMode': 'File',
   'S3DataDistributionType': 'FullyReplicated',
   'S3CompressionType': 'None'}}]</code></pre>
</div>
</div>
<p>Let’s now pull and review configuration of the processing outputs from the arguments of the processing step.</p>
<div class="cell" data-outputid="b1a5bc56-0416-441d-a771-8e40ca39c1ec">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">processing_step.arguments[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>] </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>{'Outputs': [{'OutputName': 'sentiment-train',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train',
    'LocalPath': '/opt/ml/processing/output/sentiment/train',
    'S3UploadMode': 'EndOfJob'}},
  {'OutputName': 'sentiment-validation',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-validation',
    'LocalPath': '/opt/ml/processing/output/sentiment/validation',
    'S3UploadMode': 'EndOfJob'}},
  {'OutputName': 'sentiment-test',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-test',
    'LocalPath': '/opt/ml/processing/output/sentiment/test',
    'S3UploadMode': 'EndOfJob'}}]}</code></pre>
</div>
</div>
</section>
</section>
<section id="configure-training-step" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="configure-training-step"><span class="header-section-number">6</span> Configure training step</h2>
<section id="define-parameters" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="define-parameters"><span class="header-section-number">6.1</span> Define parameters</h3>
<p>Setup the parameters for the workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">freeze_bert_layer <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FreezeBertLayer"</span>,</span>
<span id="cb26-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"False"</span>,</span>
<span id="cb26-4">)</span>
<span id="cb26-5"></span>
<span id="cb26-6">epochs <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Epochs"</span>,</span>
<span id="cb26-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb26-9">)</span>
<span id="cb26-10">    </span>
<span id="cb26-11">learning_rate <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb26-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"LearningRate"</span>,</span>
<span id="cb26-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.00001</span></span>
<span id="cb26-14">) </span>
<span id="cb26-15">    </span>
<span id="cb26-16">train_batch_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainBatchSize"</span>,</span>
<span id="cb26-18">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb26-19">)</span>
<span id="cb26-20"></span>
<span id="cb26-21">train_steps_per_epoch <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-22">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainStepsPerEpoch"</span>,</span>
<span id="cb26-23">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb26-24">)</span>
<span id="cb26-25"></span>
<span id="cb26-26">validation_batch_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-27">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationBatchSize"</span>,</span>
<span id="cb26-28">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb26-29">)</span>
<span id="cb26-30"></span>
<span id="cb26-31">validation_steps_per_epoch <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-32">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationStepsPerEpoch"</span>,</span>
<span id="cb26-33">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb26-34">)</span>
<span id="cb26-35"></span>
<span id="cb26-36">seed <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-37">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Seed"</span>,</span>
<span id="cb26-38">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb26-39">)</span>
<span id="cb26-40"></span>
<span id="cb26-41">run_validation <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-42">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RunValidation"</span>,</span>
<span id="cb26-43">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"True"</span>,</span>
<span id="cb26-44">)</span>
<span id="cb26-45"></span>
<span id="cb26-46">train_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-47">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainInstanceCount"</span>,</span>
<span id="cb26-48">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-49">)</span>
<span id="cb26-50"></span>
<span id="cb26-51">train_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-52">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainInstanceType"</span>,</span>
<span id="cb26-53">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.c5.9xlarge"</span></span>
<span id="cb26-54">)</span>
<span id="cb26-55"></span>
<span id="cb26-56">train_volume_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-57">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainVolumeSize"</span>,</span>
<span id="cb26-58">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb26-59">) </span>
<span id="cb26-60"></span>
<span id="cb26-61">input_mode <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-62">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InputMode"</span>,</span>
<span id="cb26-63">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"File"</span>,</span>
<span id="cb26-64">)</span></code></pre></div>
</div>
</section>
<section id="configure-hyper-parameters" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="configure-hyper-parameters"><span class="header-section-number">6.2</span> Configure hyper-parameters</h3>
<p>Setup the dictionary that will be passed into the hyperparameters argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">hyperparameters<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb27-2">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb27-3">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb27-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb27-5">    <span class="st" style="color: #20794D;">'learning_rate'</span>: learning_rate,</span>
<span id="cb27-6">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: train_batch_size,</span>
<span id="cb27-7">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb27-8">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb27-9">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,</span>
<span id="cb27-10">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb27-11">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb27-12">}</span></code></pre></div>
</div>
</section>
<section id="configure-model-evaluation-metrics" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="configure-model-evaluation-metrics"><span class="header-section-number">6.3</span> Configure model-evaluation metrics</h3>
<p>Choose loss and accuracy as the evaluation metrics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb28-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb28-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb28-4">]</span></code></pre></div>
</div>
</section>
<section id="configure-the-pytorchestimator" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="configure-the-pytorchestimator"><span class="header-section-number">6.4</span> Configure the <code>PyTorchEstimator</code></h3>
<p>Let’s configure an estimator and the input dataset. A typical training script loads data from the input channels, configures training with hyperparameters, trains a model, and saves a model to <code>model_dir</code> so that it can be hosted later.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb29-2"></span>
<span id="cb29-3">estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb29-4">    entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb29-5">    source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb29-6">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb29-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb29-8">    instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb29-9">    volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb29-10">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb29-11">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb29-12">    hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters,</span>
<span id="cb29-13">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb29-14">    input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode</span>
<span id="cb29-15">)</span></code></pre></div>
</div>
</section>
<section id="setup-pipeline-step-caching" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="setup-pipeline-step-caching"><span class="header-section-number">6.5</span> Setup pipeline step caching</h3>
<p>Step signature caching allows SageMaker Pipelines, before executing a step, to find a previous execution of a step that was called using the same arguments. Cache hit gets created if the previous execution is found. Then during execution instead of recomputing the step, pipelines propagates the values from the cache hit.</p>
<p>Timeout period is defined using <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> format, it can contain a year, month, week, day, hour, and minute value.</p>
<p>More details on SageMaker Pipeline step caching can be found <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-caching.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> CacheConfig</span>
<span id="cb30-2"></span>
<span id="cb30-3">cache_config <span class="op" style="color: #5E5E5E;">=</span> CacheConfig(enable_caching<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, expire_after<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"PT1H"</span>) <span class="co" style="color: #5E5E5E;"># PT1H represents `one hour`</span></span></code></pre></div>
</div>
</section>
<section id="configure-the-trainingstep" class="level3" data-number="6.6">
<h3 data-number="6.6" class="anchored" data-anchor-id="configure-the-trainingstep"><span class="header-section-number">6.6</span> Configure the <code>TrainingStep</code></h3>
<p>Now we configure the <code>TrainingStep</code> calling the outputs of the processing step:</p>
<div class="cell" data-outputid="1cb4774c-ee9a-4e9d-c088-b062621abaa9">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> TrainingInput</span>
<span id="cb31-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> TrainingStep</span>
<span id="cb31-3"></span>
<span id="cb31-4">training_step <span class="op" style="color: #5E5E5E;">=</span> TrainingStep(</span>
<span id="cb31-5">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Train'</span>,</span>
<span id="cb31-6">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator,</span>
<span id="cb31-7">    inputs<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb31-8">        <span class="st" style="color: #20794D;">'train'</span>: TrainingInput(</span>
<span id="cb31-9">            s3_data<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[</span>
<span id="cb31-10">                <span class="st" style="color: #20794D;">'sentiment-train'</span></span>
<span id="cb31-11">            ].S3Output.S3Uri,</span>
<span id="cb31-12">            content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb31-13">        ),</span>
<span id="cb31-14">        <span class="st" style="color: #20794D;">'validation'</span>: TrainingInput(</span>
<span id="cb31-15">            s3_data<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[</span>
<span id="cb31-16">                <span class="st" style="color: #20794D;">'sentiment-validation'</span></span>
<span id="cb31-17">            ].S3Output.S3Uri,</span>
<span id="cb31-18">            content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb31-19">        )</span>
<span id="cb31-20">    },</span>
<span id="cb31-21">    cache_config<span class="op" style="color: #5E5E5E;">=</span>cache_config</span>
<span id="cb31-22">)</span>
<span id="cb31-23"></span>
<span id="cb31-24"><span class="bu" style="color: null;">print</span>(training_step)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>TrainingStep(name='Train', step_type=&lt;StepTypeEnum.TRAINING: 'Training'&gt;)</code></pre>
</div>
</div>
<p>We will use the <code>__dict__</code> method to print out attributes of the training step properties. Briefly review the result. The attributes match the object model of the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a> response object.</p>
<div class="cell" data-outputid="593d96f5-84ad-46e2-c89e-c2d19fe5f68a">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">training_step.properties.__dict__ </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>{'_path': 'Steps.Train',
 '_shape_name': 'DescribeTrainingJobResponse',
 'TrainingJobName': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101310&gt;,
 'TrainingJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101350&gt;,
 'TuningJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101390&gt;,
 'LabelingJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51013d0&gt;,
 'AutoMLJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101210&gt;,
 'ModelArtifacts': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101250&gt;,
 'TrainingJobStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51012d0&gt;,
 'SecondaryStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101110&gt;,
 'FailureReason': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101150&gt;,
 'HyperParameters': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101190&gt;,
 'AlgorithmSpecification': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51011d0&gt;,
 'RoleArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101850&gt;,
 'InputDataConfig': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5101750&gt;,
 'OutputDataConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101490&gt;,
 'ResourceConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51015d0&gt;,
 'VpcConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424e10&gt;,
 'StoppingCondition': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424350&gt;,
 'CreationTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424910&gt;,
 'TrainingStartTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424750&gt;,
 'TrainingEndTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424950&gt;,
 'LastModifiedTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424550&gt;,
 'SecondaryStatusTransitions': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5424a10&gt;,
 'FinalMetricDataList': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5424590&gt;,
 'EnableNetworkIsolation': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424e50&gt;,
 'EnableInterContainerTrafficEncryption': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424690&gt;,
 'EnableManagedSpotTraining': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424150&gt;,
 'CheckpointConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424fd0&gt;,
 'TrainingTimeInSeconds': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424490&gt;,
 'BillableTimeInSeconds': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424ad0&gt;,
 'DebugHookConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf54246d0&gt;,
 'ExperimentConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7d50&gt;,
 'DebugRuleConfigurations': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7890&gt;,
 'TensorBoardOutputConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7e50&gt;,
 'DebugRuleEvaluationStatuses': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7dd0&gt;,
 'ProfilerConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7d90&gt;,
 'ProfilerRuleConfigurations': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a79d0&gt;,
 'ProfilerRuleEvaluationStatuses': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7410&gt;,
 'ProfilingStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7ad0&gt;,
 'RetryStrategy': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7a10&gt;,
 'Environment': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7950&gt;,
 'WarmPoolStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7f10&gt;}</code></pre>
</div>
</div>
</section>
</section>
<section id="configure-model-evaluation-step" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="configure-model-evaluation-step"><span class="header-section-number">7</span> Configure model-evaluation step</h2>
<p>First, we will develop an evaluation script that will be specified in the model evaluation processing step. The evaluation script users the trained model and the test dataset to produce a JSON file with classification evaluation metrics such as accuracy.</p>
<p>The evaluation script performs the following steps: * loads in the model * reads in the test data * issues a bunch of predictions against the test data * builds a classification report, including accuracy * saves the evaluation report to the evaluation directory</p>
<p>Create an instance of the <code>SKLearnProcessor</code> to run our evaluation script as a scikit-learn-based SageMaker processing job.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb35-2"></span>
<span id="cb35-3">evaluation_processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb35-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb35-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb35-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb35-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb35-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},</span>
<span id="cb35-9">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb35-10">)</span></code></pre></div>
</div>
<p>Setup the output <code>PropertyFile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.properties <span class="im" style="color: #00769E;">import</span> PropertyFile</span>
<span id="cb36-2"></span>
<span id="cb36-3">evaluation_report <span class="op" style="color: #5E5E5E;">=</span> PropertyFile(</span>
<span id="cb36-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EvaluationReport'</span>,</span>
<span id="cb36-5">    output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'metrics'</span>,</span>
<span id="cb36-6">    path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'evaluation.json'</span></span>
<span id="cb36-7">)</span></code></pre></div>
</div>
<p>Now we use the processor instance to construct a <code>ProcessingStep</code>, along with the input and output channels and the code that will be executed when the pipeline invokes pipeline execution. This is very similar to a processor instance’s <code>run</code> method.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb37-2"></span>
<span id="cb37-3">evaluation_step <span class="op" style="color: #5E5E5E;">=</span> ProcessingStep(</span>
<span id="cb37-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EvaluateModel'</span>,</span>
<span id="cb37-5">    processor<span class="op" style="color: #5E5E5E;">=</span>evaluation_processor,</span>
<span id="cb37-6">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/evaluate_model_metrics.py'</span>,</span>
<span id="cb37-7">    inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-8">        ProcessingInput(</span>
<span id="cb37-9">            source<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb37-10">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/model'</span></span>
<span id="cb37-11">        ),</span>
<span id="cb37-12">        ProcessingInput(</span>
<span id="cb37-13">            source<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-test'</span>].S3Output.S3Uri,</span>
<span id="cb37-14">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data'</span></span>
<span id="cb37-15">        )</span>
<span id="cb37-16">    ],</span>
<span id="cb37-17">    outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-18">        ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'metrics'</span>, </span>
<span id="cb37-19">                         s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>,</span>
<span id="cb37-20">                         source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/metrics/'</span>),</span>
<span id="cb37-21">    ],</span>
<span id="cb37-22">    job_arguments<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-23">        <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length.default_value),</span>
<span id="cb37-24">    ],</span>
<span id="cb37-25">    property_files<span class="op" style="color: #5E5E5E;">=</span>[evaluation_report],</span>
<span id="cb37-26">)</span></code></pre></div>
</div>
</section>
<section id="configure-and-register-model-step" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="configure-and-register-model-step"><span class="header-section-number">8</span> Configure and register model step</h2>
<section id="configure-the-model-for-deployment" class="level3" data-number="8.1">
<h3 data-number="8.1" class="anchored" data-anchor-id="configure-the-model-for-deployment"><span class="header-section-number">8.1</span> Configure the model for deployment</h3>
<p>We will now use the estimator instance that was used for the training step to construct an instance of <code>RegisterModel</code>. The result of executing <code>RegisterModel</code> in a pipeline is a model package. A model package is a reusable model artifacts abstraction that packages all ingredients necessary for inference. Primarily, it consists of an inference specification that defines the inference image to use along with an optional model weights location.</p>
<p>A model package group is a collection of model packages. You can create a model package group for a specific ML business problem, and you can keep adding versions/model packages into it. Typically, customers are expected to create a ModelPackageGroup for a SageMaker workflow pipeline so that they can keep adding versions/model packages to the group for every workflow pipeline run.</p>
<p>The construction of <code>RegisterModel</code> is very similar to an estimator instance’s <code>register</code> method, for those familiar with the existing Python SDK.</p>
<p>In particular, we will pass in the <code>S3ModelArtifacts</code> from the <code>training_step</code> properties.</p>
<p>Of note, here we will be provided a specific model package group name which will be used in the Model Registry and Continuous Integration/Continuous Deployment (CI/CD) work later on. Let’s setup the variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">model_approval_status <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb38-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelApprovalStatus"</span>,</span>
<span id="cb38-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"PendingManualApproval"</span></span>
<span id="cb38-4">)</span>
<span id="cb38-5"></span>
<span id="cb38-6">deploy_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb38-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"DeployInstanceType"</span>,</span>
<span id="cb38-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.m5.large"</span></span>
<span id="cb38-9">)</span>
<span id="cb38-10"></span>
<span id="cb38-11">deploy_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb38-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"DeployInstanceCount"</span>,</span>
<span id="cb38-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb38-14">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="801217b4-4c41-46bd-c1e7-e3eecf95cb47">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">model_package_group_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"BERT-Reviews-</span><span class="sc" style="color: #5E5E5E;">{</span>timestamp<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="bu" style="color: null;">print</span>(model_package_group_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>BERT-Reviews-1676208665</code></pre>
</div>
</div>
<p>Configure the <code>ModelMetrics</code> to be stored as metadata.</p>
<div class="cell" data-outputid="686e843f-9bf2-49ea-c0cb-e530838f774a">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;">from</span> sagemaker.model_metrics <span class="im" style="color: #00769E;">import</span> MetricsSource, ModelMetrics </span>
<span id="cb41-2"></span>
<span id="cb41-3">model_metrics <span class="op" style="color: #5E5E5E;">=</span> ModelMetrics(</span>
<span id="cb41-4">    model_statistics<span class="op" style="color: #5E5E5E;">=</span>MetricsSource(</span>
<span id="cb41-5">        s3_uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb41-6">            evaluation_step.arguments[<span class="st" style="color: #20794D;">"ProcessingOutputConfig"</span>][<span class="st" style="color: #20794D;">"Outputs"</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">"S3Output"</span>][<span class="st" style="color: #20794D;">"S3Uri"</span>]</span>
<span id="cb41-7">        ),</span>
<span id="cb41-8">        content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"application/json"</span></span>
<span id="cb41-9">    )</span>
<span id="cb41-10">)</span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="bu" style="color: null;">print</span>(model_metrics)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;sagemaker.model_metrics.ModelMetrics object at 0x7fcdf40cd5d0&gt;</code></pre>
</div>
</div>
<p>Define deployment image for inference.</p>
<div class="cell" data-outputid="c9e17fee-616b-4f13-8431-c3eab06105c8">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">inference_image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb43-2">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pytorch"</span>,</span>
<span id="cb43-3">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb43-4">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.6.0"</span>,</span>
<span id="cb43-5">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"py36"</span>,</span>
<span id="cb43-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>deploy_instance_type,</span>
<span id="cb43-7">    image_scope<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"inference"</span></span>
<span id="cb43-8">)</span>
<span id="cb43-9"><span class="bu" style="color: null;">print</span>(inference_image_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36</code></pre>
</div>
</div>
</section>
<section id="register-the-model-for-deployment" class="level3" data-number="8.2">
<h3 data-number="8.2" class="anchored" data-anchor-id="register-the-model-for-deployment"><span class="header-section-number">8.2</span> Register the model for deployment</h3>
<p>Let’s now configure the register model step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.step_collections <span class="im" style="color: #00769E;">import</span> RegisterModel</span>
<span id="cb45-2"></span>
<span id="cb45-3">register_step <span class="op" style="color: #5E5E5E;">=</span> RegisterModel(</span>
<span id="cb45-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RegisterModel"</span>,</span>
<span id="cb45-5">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator,</span>
<span id="cb45-6">    image_uri<span class="op" style="color: #5E5E5E;">=</span>inference_image_uri, </span>
<span id="cb45-7">    model_data<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb45-8">    content_types<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"application/jsonlines"</span>],</span>
<span id="cb45-9">    response_types<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"application/jsonlines"</span>],</span>
<span id="cb45-10">    inference_instances<span class="op" style="color: #5E5E5E;">=</span>[deploy_instance_type],</span>
<span id="cb45-11">    transform_instances<span class="op" style="color: #5E5E5E;">=</span>[deploy_instance_type], </span>
<span id="cb45-12">    model_package_group_name<span class="op" style="color: #5E5E5E;">=</span>model_package_group_name,</span>
<span id="cb45-13">    approval_status<span class="op" style="color: #5E5E5E;">=</span>model_approval_status,</span>
<span id="cb45-14">    model_metrics<span class="op" style="color: #5E5E5E;">=</span>model_metrics</span>
<span id="cb45-15">)</span></code></pre></div>
</div>
</section>
</section>
<section id="create-model-for-deployment-step" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="create-model-for-deployment-step"><span class="header-section-number">9</span> Create model for deployment step</h2>
<p>Let’s configure the model for deployment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;">from</span> sagemaker.model <span class="im" style="color: #00769E;">import</span> Model</span>
<span id="cb46-2"></span>
<span id="cb46-3">model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb46-4"></span>
<span id="cb46-5">model <span class="op" style="color: #5E5E5E;">=</span> Model(</span>
<span id="cb46-6">    name<span class="op" style="color: #5E5E5E;">=</span>model_name,</span>
<span id="cb46-7">    image_uri<span class="op" style="color: #5E5E5E;">=</span>inference_image_uri, </span>
<span id="cb46-8">    model_data<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb46-9">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb46-10">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb46-11">)</span></code></pre></div>
</div>
<p>Now we configure create model input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> CreateModelInput</span>
<span id="cb47-2"></span>
<span id="cb47-3">create_inputs <span class="op" style="color: #5E5E5E;">=</span> CreateModelInput(</span>
<span id="cb47-4">    instance_type<span class="op" style="color: #5E5E5E;">=</span>deploy_instance_type, </span>
<span id="cb47-5">)</span></code></pre></div>
</div>
<p>Lastly we configure the create model step for the workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> CreateModelStep</span>
<span id="cb48-2"></span>
<span id="cb48-3">create_step <span class="op" style="color: #5E5E5E;">=</span> CreateModelStep(</span>
<span id="cb48-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CreateModel"</span>,</span>
<span id="cb48-5">    model<span class="op" style="color: #5E5E5E;">=</span>model, </span>
<span id="cb48-6">    inputs<span class="op" style="color: #5E5E5E;">=</span>create_inputs, </span>
<span id="cb48-7">)</span></code></pre></div>
</div>
</section>
<section id="check-accuracy-condition-step" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="check-accuracy-condition-step"><span class="header-section-number">10</span> Check accuracy condition step</h2>
<p>Finally, we would like to only register this model if the accuracy of the model, as determined by our evaluation step <code>evaluation_step</code>, exceeded some value. A <code>ConditionStep</code> allows for pipelines to support conditional execution in the pipeline DAG based on conditions of step properties.</p>
<p>Below, we will:</p>
<ul>
<li>define a minimum accuracy value as a parameter</li>
<li>define a <code>ConditionGreaterThan</code> on the accuracy value found in the output of the evaluation step, <code>evaluation_step</code>.</li>
<li>use the condition in the list of conditions in a <code>ConditionStep</code></li>
<li>pass the <code>RegisterModel</code> step collection into the <code>if_steps</code> of the <code>ConditionStep</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">min_accuracy_value <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb49-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MinAccuracyValue"</span>,</span>
<span id="cb49-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.33</span> <span class="co" style="color: #5E5E5E;"># random choice from three classes</span></span>
<span id="cb49-4">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.conditions <span class="im" style="color: #00769E;">import</span> ConditionGreaterThanOrEqualTo</span>
<span id="cb50-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.condition_step <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb50-3">    ConditionStep,</span>
<span id="cb50-4">    JsonGet,</span>
<span id="cb50-5">)</span>
<span id="cb50-6"></span>
<span id="cb50-7">minimum_accuracy_condition <span class="op" style="color: #5E5E5E;">=</span> ConditionGreaterThanOrEqualTo(</span>
<span id="cb50-8">    left<span class="op" style="color: #5E5E5E;">=</span>JsonGet(</span>
<span id="cb50-9">        step<span class="op" style="color: #5E5E5E;">=</span>evaluation_step,</span>
<span id="cb50-10">        property_file<span class="op" style="color: #5E5E5E;">=</span>evaluation_report,</span>
<span id="cb50-11">        json_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"metrics.accuracy.value"</span>,</span>
<span id="cb50-12">    ),</span>
<span id="cb50-13">    right<span class="op" style="color: #5E5E5E;">=</span>min_accuracy_value <span class="co" style="color: #5E5E5E;"># minimum accuracy threshold</span></span>
<span id="cb50-14">)</span>
<span id="cb50-15"></span>
<span id="cb50-16">minimum_accuracy_condition_step <span class="op" style="color: #5E5E5E;">=</span> ConditionStep(</span>
<span id="cb50-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AccuracyCondition"</span>,</span>
<span id="cb50-18">    conditions<span class="op" style="color: #5E5E5E;">=</span>[minimum_accuracy_condition],</span>
<span id="cb50-19">    if_steps<span class="op" style="color: #5E5E5E;">=</span>[register_step, create_step], <span class="co" style="color: #5E5E5E;"># successfully exceeded or equaled the minimum accuracy, continue with model registration</span></span>
<span id="cb50-20">    else_steps<span class="op" style="color: #5E5E5E;">=</span>[], <span class="co" style="color: #5E5E5E;"># did not exceed the minimum accuracy, the model will not be registered</span></span>
<span id="cb50-21">)</span></code></pre></div>
</div>
</section>
<section id="create-pipeline" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="create-pipeline"><span class="header-section-number">11</span> Create pipeline</h2>
<section id="define-a-pipeline-of-parameters-steps-and-conditions" class="level3" data-number="11.1">
<h3 data-number="11.1" class="anchored" data-anchor-id="define-a-pipeline-of-parameters-steps-and-conditions"><span class="header-section-number">11.1</span> Define a pipeline of parameters, steps, and conditions</h3>
<p>Let’s tie it all up into a workflow pipeline so we can execute it, and even schedule it.</p>
<p>A pipeline requires a <code>name</code>, <code>parameters</code>, and <code>steps</code>. Names must be unique within an <code>(account, region)</code> pair so you can append the timestamp to the name to reduce the chance of name conflict.</p>
<p>Note:</p>
<ul>
<li>All the parameters used in the definitions must be present.</li>
<li>Steps passed into the pipeline need not be in the order of execution. The SageMaker workflow service will resolve the <em>data dependency</em> DAG as steps the execution complete.</li>
<li>Steps must be unique to either pipeline step list or a single condition step if/else list.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.pipeline <span class="im" style="color: #00769E;">import</span> Pipeline</span>
<span id="cb51-2"></span>
<span id="cb51-3">pipeline <span class="op" style="color: #5E5E5E;">=</span> Pipeline(</span>
<span id="cb51-4">    name<span class="op" style="color: #5E5E5E;">=</span>pipeline_name,</span>
<span id="cb51-5">    parameters<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb51-6">        input_data,</span>
<span id="cb51-7">        processing_instance_count,</span>
<span id="cb51-8">        processing_instance_type,</span>
<span id="cb51-9">        max_seq_length,</span>
<span id="cb51-10">        balance_dataset,</span>
<span id="cb51-11">        train_split_percentage,</span>
<span id="cb51-12">        validation_split_percentage,</span>
<span id="cb51-13">        test_split_percentage,</span>
<span id="cb51-14">        feature_store_offline_prefix,</span>
<span id="cb51-15">        feature_group_name,</span>
<span id="cb51-16">        epochs,</span>
<span id="cb51-17">        learning_rate,</span>
<span id="cb51-18">        train_batch_size,</span>
<span id="cb51-19">        train_steps_per_epoch,</span>
<span id="cb51-20">        validation_batch_size,</span>
<span id="cb51-21">        validation_steps_per_epoch,</span>
<span id="cb51-22">        freeze_bert_layer,</span>
<span id="cb51-23">        seed,</span>
<span id="cb51-24">        train_instance_count,</span>
<span id="cb51-25">        train_instance_type,</span>
<span id="cb51-26">        train_volume_size,        </span>
<span id="cb51-27">        input_mode,</span>
<span id="cb51-28">        run_validation,</span>
<span id="cb51-29">        min_accuracy_value,</span>
<span id="cb51-30">        model_approval_status,</span>
<span id="cb51-31">        deploy_instance_type,</span>
<span id="cb51-32">        deploy_instance_count</span>
<span id="cb51-33">    ],</span>
<span id="cb51-34">    steps<span class="op" style="color: #5E5E5E;">=</span>[processing_step, training_step, evaluation_step, minimum_accuracy_condition_step],</span>
<span id="cb51-35">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb51-36">)</span></code></pre></div>
</div>
<p>Let’s examine the JSON of the pipeline definition that meets the SageMaker Workflow Pipeline DSL specification.</p>
<p>By examining the definition, you are also confirming that the pipeline was well-defined, and that the parameters and step properties resolve correctly.</p>
<div class="cell" data-outputid="27f05fa4-8980-4dbb-b3e9-52ba548492b0" data-scrolled="true">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb52-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb52-3"></span>
<span id="cb52-4">definition <span class="op" style="color: #5E5E5E;">=</span> json.loads(pipeline.definition())</span>
<span id="cb52-5"></span>
<span id="cb52-6">pprint(definition)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No finished training job found associated with this estimator. Please make sure this estimator is only used for building workflow config</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Metadata': {},
 'Parameters': [{'DefaultValue': 's3://dlai-practical-data-science/data/raw/',
                 'Name': 'InputData',
                 'Type': 'String'},
                {'DefaultValue': 1,
                 'Name': 'ProcessingInstanceCount',
                 'Type': 'Integer'},
                {'DefaultValue': 'ml.c5.2xlarge',
                 'Name': 'ProcessingInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 128,
                 'Name': 'MaxSeqLength',
                 'Type': 'Integer'},
                {'DefaultValue': 'True',
                 'Name': 'BalanceDataset',
                 'Type': 'String'},
                {'DefaultValue': 0.9,
                 'Name': 'TrainSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 0.05,
                 'Name': 'ValidationSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 0.05,
                 'Name': 'TestSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 'reviews-feature-store-1676208665',
                 'Name': 'FeatureStoreOfflinePrefix',
                 'Type': 'String'},
                {'DefaultValue': 'reviews-feature-group-1676208665',
                 'Name': 'FeatureGroupName',
                 'Type': 'String'},
                {'DefaultValue': 3, 'Name': 'Epochs', 'Type': 'Integer'},
                {'DefaultValue': 1e-05,
                 'Name': 'LearningRate',
                 'Type': 'Float'},
                {'DefaultValue': 64,
                 'Name': 'TrainBatchSize',
                 'Type': 'Integer'},
                {'DefaultValue': 50,
                 'Name': 'TrainStepsPerEpoch',
                 'Type': 'Integer'},
                {'DefaultValue': 64,
                 'Name': 'ValidationBatchSize',
                 'Type': 'Integer'},
                {'DefaultValue': 50,
                 'Name': 'ValidationStepsPerEpoch',
                 'Type': 'Integer'},
                {'DefaultValue': 'False',
                 'Name': 'FreezeBertLayer',
                 'Type': 'String'},
                {'DefaultValue': 42, 'Name': 'Seed', 'Type': 'Integer'},
                {'DefaultValue': 1,
                 'Name': 'TrainInstanceCount',
                 'Type': 'Integer'},
                {'DefaultValue': 'ml.c5.9xlarge',
                 'Name': 'TrainInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 256,
                 'Name': 'TrainVolumeSize',
                 'Type': 'Integer'},
                {'DefaultValue': 'File', 'Name': 'InputMode', 'Type': 'String'},
                {'DefaultValue': 'True',
                 'Name': 'RunValidation',
                 'Type': 'String'},
                {'DefaultValue': 0.33,
                 'Name': 'MinAccuracyValue',
                 'Type': 'Float'},
                {'DefaultValue': 'PendingManualApproval',
                 'Name': 'ModelApprovalStatus',
                 'Type': 'String'},
                {'DefaultValue': 'ml.m5.large',
                 'Name': 'DeployInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 1,
                 'Name': 'DeployInstanceCount',
                 'Type': 'Integer'}],
 'Steps': [{'Arguments': {'AppSpecification': {'ContainerArguments': ['--train-split-percentage',
                                                                      '0.9',
                                                                      '--validation-split-percentage',
                                                                      '0.05',
                                                                      '--test-split-percentage',
                                                                      '0.05',
                                                                      '--balance-dataset',
                                                                      'True',
                                                                      '--max-seq-length',
                                                                      '128',
                                                                      '--feature-store-offline-prefix',
                                                                      'reviews-feature-store-1676208665',
                                                                      '--feature-group-name',
                                                                      'reviews-feature-group-1676208665'],
                                               'ContainerEntrypoint': ['python3',
                                                                       '/opt/ml/processing/input/code/prepare_data.py'],
                                               'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
                          'Environment': {'AWS_DEFAULT_REGION': 'us-east-1'},
                          'ProcessingInputs': [{'AppManaged': False,
                                                'InputName': 'raw-input-data',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/data/',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'ShardedByS3Key',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': 'Parameters.InputData'}}},
                                               {'AppManaged': False,
                                                'InputName': 'code',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-37-28-563/input/code/prepare_data.py'}}],
                          'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                                                  'OutputName': 'sentiment-train',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/train',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train'}},
                                                                 {'AppManaged': False,
                                                                  'OutputName': 'sentiment-validation',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/validation',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-validation'}},
                                                                 {'AppManaged': False,
                                                                  'OutputName': 'sentiment-test',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/test',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-test'}}]},
                          'ProcessingResources': {'ClusterConfig': {'InstanceCount': {'Get': 'Parameters.ProcessingInstanceCount'},
                                                                    'InstanceType': {'Get': 'Parameters.ProcessingInstanceType'},
                                                                    'VolumeSizeInGB': 30}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role'},
            'Name': 'Processing',
            'Type': 'Processing'},
           {'Arguments': {'AlgorithmSpecification': {'EnableSageMakerMetricsTimeSeries': True,
                                                     'MetricDefinitions': [{'Name': 'validation:loss',
                                                                            'Regex': 'val_loss: '
                                                                                     '([0-9.]+)'},
                                                                           {'Name': 'validation:accuracy',
                                                                            'Regex': 'val_acc: '
                                                                                     '([0-9.]+)'}],
                                                     'TrainingImage': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.6.0-cpu-py3',
                                                     'TrainingInputMode': {'Get': 'Parameters.InputMode'}},
                          'DebugHookConfig': {'CollectionConfigurations': [],
                                              'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'HyperParameters': {'epochs': '3',
                                              'freeze_bert_layer': '"False"',
                                              'learning_rate': '1e-05',
                                              'max_seq_length': '128',
                                              'run_validation': '"True"',
                                              'sagemaker_container_log_level': '20',
                                              'sagemaker_job_name': '"pytorch-training-2023-02-12-13-37-28-707"',
                                              'sagemaker_program': '"train.py"',
                                              'sagemaker_region': '"us-east-1"',
                                              'sagemaker_submit_directory': '"s3://sagemaker-us-east-1-912822595625/pytorch-training-2023-02-12-13-37-28-707/source/sourcedir.tar.gz"',
                                              'seed': '42',
                                              'train_batch_size': '64',
                                              'train_steps_per_epoch': '50',
                                              'validation_batch_size': '64',
                                              'validation_steps_per_epoch': '50'},
                          'InputDataConfig': [{'ChannelName': 'train',
                                               'ContentType': 'text/csv',
                                               'DataSource': {'S3DataSource': {'S3DataDistributionType': 'FullyReplicated',
                                                                               'S3DataType': 'S3Prefix',
                                                                               'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train'].S3Output.S3Uri"}}}},
                                              {'ChannelName': 'validation',
                                               'ContentType': 'text/csv',
                                               'DataSource': {'S3DataSource': {'S3DataDistributionType': 'FullyReplicated',
                                                                               'S3DataType': 'S3Prefix',
                                                                               'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-validation'].S3Output.S3Uri"}}}}],
                          'OutputDataConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'ProfilerConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'ProfilerRuleConfigurations': [{'RuleConfigurationName': 'ProfilerReport-1676209048',
                                                          'RuleEvaluatorImage': '503895931360.dkr.ecr.us-east-1.amazonaws.com/sagemaker-debugger-rules:latest',
                                                          'RuleParameters': {'rule_to_invoke': 'ProfilerReport'}}],
                          'ResourceConfig': {'InstanceCount': {'Get': 'Parameters.TrainInstanceCount'},
                                             'InstanceType': {'Get': 'Parameters.TrainInstanceType'},
                                             'VolumeSizeInGB': {'Get': 'Parameters.TrainVolumeSize'}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                          'StoppingCondition': {'MaxRuntimeInSeconds': 86400}},
            'CacheConfig': {'Enabled': True, 'ExpireAfter': 'PT1H'},
            'Name': 'Train',
            'Type': 'Training'},
           {'Arguments': {'AppSpecification': {'ContainerArguments': ['--max-seq-length',
                                                                      '128'],
                                               'ContainerEntrypoint': ['python3',
                                                                       '/opt/ml/processing/input/code/evaluate_model_metrics.py'],
                                               'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
                          'Environment': {'AWS_DEFAULT_REGION': 'us-east-1'},
                          'ProcessingInputs': [{'AppManaged': False,
                                                'InputName': 'input-1',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/model',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}},
                                               {'AppManaged': False,
                                                'InputName': 'input-2',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/data',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-test'].S3Output.S3Uri"}}},
                                               {'AppManaged': False,
                                                'InputName': 'code',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-37-29-187/input/code/evaluate_model_metrics.py'}}],
                          'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                                                  'OutputName': 'metrics',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/metrics/',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics'}}]},
                          'ProcessingResources': {'ClusterConfig': {'InstanceCount': {'Get': 'Parameters.ProcessingInstanceCount'},
                                                                    'InstanceType': {'Get': 'Parameters.ProcessingInstanceType'},
                                                                    'VolumeSizeInGB': 30}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                          'StoppingCondition': {'MaxRuntimeInSeconds': 7200}},
            'Name': 'EvaluateModel',
            'PropertyFiles': [{'FilePath': 'evaluation.json',
                               'OutputName': 'metrics',
                               'PropertyFileName': 'EvaluationReport'}],
            'Type': 'Processing'},
           {'Arguments': {'Conditions': [{'LeftValue': {'Std:JsonGet': {'Path': 'metrics.accuracy.value',
                                                                        'PropertyFile': {'Get': 'Steps.EvaluateModel.PropertyFiles.EvaluationReport'}}},
                                          'RightValue': {'Get': 'Parameters.MinAccuracyValue'},
                                          'Type': 'GreaterThanOrEqualTo'}],
                          'ElseSteps': [],
                          'IfSteps': [{'Arguments': {'InferenceSpecification': {'Containers': [{'Image': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36',
                                                                                                'ModelDataUrl': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}],
                                                                                'SupportedContentTypes': ['application/jsonlines'],
                                                                                'SupportedRealtimeInferenceInstanceTypes': [{'Get': 'Parameters.DeployInstanceType'}],
                                                                                'SupportedResponseMIMETypes': ['application/jsonlines'],
                                                                                'SupportedTransformInstanceTypes': [{'Get': 'Parameters.DeployInstanceType'}]},
                                                     'ModelApprovalStatus': {'Get': 'Parameters.ModelApprovalStatus'},
                                                     'ModelMetrics': {'ModelQuality': {'Statistics': {'ContentType': 'application/json',
                                                                                                      'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics/evaluation.json'}}},
                                                     'ModelPackageGroupName': 'BERT-Reviews-1676208665'},
                                       'Name': 'RegisterModel',
                                       'Type': 'RegisterModel'},
                                      {'Arguments': {'ExecutionRoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                                                     'PrimaryContainer': {'Environment': {},
                                                                          'Image': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36',
                                                                          'ModelDataUrl': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}},
                                       'Name': 'CreateModel',
                                       'Type': 'Model'}]},
            'Name': 'AccuracyCondition',
            'Type': 'Condition'}],
 'Version': '2020-12-01'}</code></pre>
</div>
</div>
<p>Now we create a pipeline using the <code>create</code> method and then print the Amazon Resource Name (ARN) of it.</p>
<div class="cell" data-outputid="8c60e97f-d45b-4ea1-be6e-ee42b7c36822">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">response <span class="op" style="color: #5E5E5E;">=</span> pipeline.create(role_arn<span class="op" style="color: #5E5E5E;">=</span>role)</span>
<span id="cb55-2"></span>
<span id="cb55-3">pipeline_arn <span class="op" style="color: #5E5E5E;">=</span> response[<span class="st" style="color: #20794D;">"PipelineArn"</span>]</span>
<span id="cb55-4"><span class="bu" style="color: null;">print</span>(pipeline_arn)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No finished training job found associated with this estimator. Please make sure this estimator is only used for building workflow config</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665</code></pre>
</div>
</div>
</section>
<section id="start-pipeline" class="level3" data-number="11.2">
<h3 data-number="11.2" class="anchored" data-anchor-id="start-pipeline"><span class="header-section-number">11.2</span> Start Pipeline</h3>
<p>Let’s submit our pipeline definition to the Amazon SageMaker Pipeline service. The role passed in will be used by the service to create all the jobs defined in the steps. We will start the pipeline using the parameters passed into the <code>start()</code> function.</p>
<div class="cell" data-outputid="fed7b243-649f-4834-c4ee-42c21e3ce00d">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">execution <span class="op" style="color: #5E5E5E;">=</span> pipeline.start(</span>
<span id="cb58-2">    parameters<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(</span>
<span id="cb58-3">        InputData<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb58-4">        ProcessingInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb58-5">        ProcessingInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.2xlarge'</span>,</span>
<span id="cb58-6">        MaxSeqLength<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>,</span>
<span id="cb58-7">        BalanceDataset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'True'</span>,</span>
<span id="cb58-8">        TrainSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>,</span>
<span id="cb58-9">        ValidationSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb58-10">        TestSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb58-11">        FeatureStoreOfflinePrefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews-feature-store-'</span><span class="op" style="color: #5E5E5E;">+</span><span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb58-12">        FeatureGroupName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews-feature-group-'</span><span class="op" style="color: #5E5E5E;">+</span><span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb58-13">        Epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb58-14">        LearningRate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.000012</span>,</span>
<span id="cb58-15">        TrainBatchSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-16">        TrainStepsPerEpoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb58-17">        ValidationBatchSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-18">        ValidationStepsPerEpoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-19">        FreezeBertLayer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'False'</span>,</span>
<span id="cb58-20">        Seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>,         </span>
<span id="cb58-21">        TrainInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb58-22">        TrainInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span>,</span>
<span id="cb58-23">        TrainVolumeSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,</span>
<span id="cb58-24">        InputMode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span>,</span>
<span id="cb58-25">        RunValidation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'True'</span>,</span>
<span id="cb58-26">        MinAccuracyValue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>,</span>
<span id="cb58-27">        ModelApprovalStatus<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'PendingManualApproval'</span>, </span>
<span id="cb58-28">        DeployInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb58-29">        DeployInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb58-30">    )</span>
<span id="cb58-31">)</span>
<span id="cb58-32"></span>
<span id="cb58-33"><span class="bu" style="color: null;">print</span>(execution.arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
<section id="wait-for-pipeline-execution" class="level3" data-number="11.3">
<h3 data-number="11.3" class="anchored" data-anchor-id="wait-for-pipeline-execution"><span class="header-section-number">11.3</span> Wait for pipeline execution</h3>
<p>Now we can describe execution instance and list the steps in the execution to find out more about the execution.</p>
<div class="cell" data-outputid="efe604fa-ddc1-4e23-ad4d-203a0aaadfe2">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb60-2"></span>
<span id="cb60-3">execution_run <span class="op" style="color: #5E5E5E;">=</span> execution.describe()</span>
<span id="cb60-4">pprint(execution_run)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'CreatedBy': {'DomainId': 'd-h9yolcap5nrc',
               'UserProfileArn': 'arn:aws:sagemaker:us-east-1:912822595625:user-profile/d-h9yolcap5nrc/sagemaker-user-profile-us-east-1',
               'UserProfileName': 'sagemaker-user-profile-us-east-1'},
 'CreationTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal()),
 'LastModifiedBy': {'DomainId': 'd-h9yolcap5nrc',
                    'UserProfileArn': 'arn:aws:sagemaker:us-east-1:912822595625:user-profile/d-h9yolcap5nrc/sagemaker-user-profile-us-east-1',
                    'UserProfileName': 'sagemaker-user-profile-us-east-1'},
 'LastModifiedTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal()),
 'PipelineArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665',
 'PipelineExecutionArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk',
 'PipelineExecutionDisplayName': 'execution-1676209061894',
 'PipelineExecutionStatus': 'Executing',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '815',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 12 Feb 2023 13:37:46 GMT',
                                      'x-amzn-requestid': '5d8ec01a-6a95-4737-802b-82302f7ab368'},
                      'HTTPStatusCode': 200,
                      'RequestId': '5d8ec01a-6a95-4737-802b-82302f7ab368',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Print the execution display name and its ARN:</p>
<div class="cell" data-outputid="4da59038-01c5-44fb-8b66-b757f6202406">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">execution_run_name <span class="op" style="color: #5E5E5E;">=</span> execution_run[<span class="st" style="color: #20794D;">'PipelineExecutionDisplayName'</span>]</span>
<span id="cb62-2"><span class="bu" style="color: null;">print</span>(execution_run_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>execution-1676209061894</code></pre>
</div>
</div>
<div class="cell" data-outputid="20e767dc-cde1-493c-b769-fd94a2e32c90">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">pipeline_execution_arn <span class="op" style="color: #5E5E5E;">=</span> execution_run[<span class="st" style="color: #20794D;">'PipelineExecutionArn'</span>]</span>
<span id="cb64-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
<section id="describe-completed-pipeline" class="level3" data-number="11.4">
<h3 data-number="11.4" class="anchored" data-anchor-id="describe-completed-pipeline"><span class="header-section-number">11.4</span> Describe completed pipeline</h3>
<p>We will wait for the first step to start running and print the information about it:</p>
<div class="cell" data-outputid="c02195a7-bafb-4e5d-a1e6-91b1d30d3723">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb66-2"></span>
<span id="cb66-3">time.sleep(<span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb66-4"></span>
<span id="cb66-5">execution.list_steps()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>[{'StepName': 'Processing',
  'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 42, 570000, tzinfo=tzlocal()),
  'StepStatus': 'Executing',
  'AttemptCount': 0,
  'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-processing-mwnbfz07z3'}}}]</code></pre>
</div>
</div>
</section>
<section id="wait-for-the-pipeline-to-complete" class="level3" data-number="11.5">
<h3 data-number="11.5" class="anchored" data-anchor-id="wait-for-the-pipeline-to-complete"><span class="header-section-number">11.5</span> Wait for the pipeline to complete</h3>
<p>To get the information about the pipeline execution we can use a low-level service client of the boto3 session. It is also useful for other operations that you will see below.</p>
<p>In the code below we will be observing the pipeline execution summary and waiting for the execution status to change from <code>Executing</code> to <code>Succeeded</code>.</p>
<div class="cell" data-outputid="380b6722-6362-4805-8654-9e398e28f874">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb68-4"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb68-5"></span>
<span id="cb68-6">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.Session().client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, region_name<span class="op" style="color: #5E5E5E;">=</span>region)</span>
<span id="cb68-7"></span>
<span id="cb68-8">executions_response <span class="op" style="color: #5E5E5E;">=</span> sm.list_pipeline_executions(PipelineName<span class="op" style="color: #5E5E5E;">=</span>pipeline_name)[<span class="st" style="color: #20794D;">'PipelineExecutionSummaries'</span>]</span>
<span id="cb68-9">pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb68-10"><span class="bu" style="color: null;">print</span>(pipeline_execution_status)</span>
<span id="cb68-11"></span>
<span id="cb68-12"><span class="cf" style="color: #003B4F;">while</span> pipeline_execution_status<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'Executing'</span>:</span>
<span id="cb68-13">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb68-14">        executions_response <span class="op" style="color: #5E5E5E;">=</span> sm.list_pipeline_executions(PipelineName<span class="op" style="color: #5E5E5E;">=</span>pipeline_name)[<span class="st" style="color: #20794D;">'PipelineExecutionSummaries'</span>]</span>
<span id="cb68-15">        pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb68-16">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span> <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb68-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Please wait...'</span>)</span>
<span id="cb68-18">        time.sleep(<span class="dv" style="color: #AD0000;">30</span>)    </span>
<span id="cb68-19">    </span>
<span id="cb68-20">pprint(executions_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Executing
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
[{'PipelineExecutionArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk',
  'PipelineExecutionDisplayName': 'execution-1676209061894',
  'PipelineExecutionStatus': 'Succeeded',
  'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal())}]
CPU times: user 14.7 s, sys: 641 ms, total: 15.4 s
Wall time: 32min 38s</code></pre>
</div>
</div>
<p>We can list the execution steps to check out the status and artifacts:</p>
<div class="cell" data-outputid="35bed80d-fa02-4dbf-8dd7-1c049f4f2b14">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb70-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_status)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Succeeded</code></pre>
</div>
</div>
<div class="cell" data-outputid="ae57cfe1-cc01-4d7f-9509-0a123e8f5fc5">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">pipeline_execution_arn <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionArn'</span>]</span>
<span id="cb72-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
</section>
<section id="evaluate-the-model" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="evaluate-the-model"><span class="header-section-number">12</span> Evaluate the model</h2>
<section id="describe-evaluation-metrics" class="level3" data-number="12.1">
<h3 data-number="12.1" class="anchored" data-anchor-id="describe-evaluation-metrics"><span class="header-section-number">12.1</span> Describe evaluation metrics</h3>
<p>Now we examine the resulting model evaluation after the pipeline completes.</p>
<div class="cell" data-outputid="71c01fc4-2b17-4b05-830c-b54ed89c1e7a">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">processing_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;"># pull the processing step name</span></span>
<span id="cb74-4"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb74-5">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Processing'</span>:</span>
<span id="cb74-6">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb74-7"></span>
<span id="cb74-8"><span class="co" style="color: #5E5E5E;"># get the description of the processing job</span></span>
<span id="cb74-9">describe_transform_processing_job_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_processing_job(ProcessingJobName<span class="op" style="color: #5E5E5E;">=</span>processing_job_name)</span>
<span id="cb74-10"></span>
<span id="cb74-11"><span class="co" style="color: #5E5E5E;"># get the output S3 path</span></span>
<span id="cb74-12">transform_output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> describe_transform_processing_job_response[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>][<span class="st" style="color: #20794D;">'Outputs'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb74-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Transform output </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(transform_output_s3_uri))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Transform output s3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train</code></pre>
</div>
</div>
<div class="cell" data-outputid="9e51d7c5-bbd5-4397-e79b-4a8112a8674d">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># list the files in the resulting output S3 path</span></span>
<span id="cb76-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $transform_output_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-12 13:48:45    4882265 sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Let’s pull the name of the model-evaluation step and then get the S3 path of the evaluation metrics, which will contain the evaluation report.</p>
<div class="cell" data-outputid="89be571d-1417-4fff-ed89-7429df045686">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">processing_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb78-2"></span>
<span id="cb78-3"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb78-4">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'EvaluateModel'</span>: </span>
<span id="cb78-5">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb78-6"></span>
<span id="cb78-7">describe_evaluation_processing_job_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_processing_job(ProcessingJobName<span class="op" style="color: #5E5E5E;">=</span>processing_job_name)</span>
<span id="cb78-8"></span>
<span id="cb78-9">evaluation_metrics_s3_uri <span class="op" style="color: #5E5E5E;">=</span> describe_evaluation_processing_job_response[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>][<span class="st" style="color: #20794D;">'Outputs'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb78-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Evaluation output </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(evaluation_metrics_s3_uri))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Evaluation output s3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics</code></pre>
</div>
</div>
</section>
<section id="review-the-evaluation-report" class="level3" data-number="12.2">
<h3 data-number="12.2" class="anchored" data-anchor-id="review-the-evaluation-report"><span class="header-section-number">12.2</span> Review the evaluation report</h3>
<p>Download the evaluation report and print the accuracy.</p>
<div class="cell" data-outputid="7b1c79b8-2c63-4392-d604-57888208403b">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb80-2"></span>
<span id="cb80-3">evaluation_json <span class="op" style="color: #5E5E5E;">=</span> sagemaker.s3.S3Downloader.read_file(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb80-4">    evaluation_metrics_s3_uri</span>
<span id="cb80-5">))</span>
<span id="cb80-6"></span>
<span id="cb80-7">pprint(json.loads(evaluation_json))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'metrics': {'accuracy': {'value': 0.7313915857605178}}}</code></pre>
</div>
</div>
</section>
<section id="list-pipeline-artifacts" class="level3" data-number="12.3">
<h3 data-number="12.3" class="anchored" data-anchor-id="list-pipeline-artifacts"><span class="header-section-number">12.3</span> List pipeline artifacts</h3>
<p>Now let’s find and print the ARN and job name of the training job.</p>
<div class="cell" data-outputid="7ab73b20-8c68-4d38-b603-d2bea3a64094">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">training_job_arn<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb82-2"></span>
<span id="cb82-3"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb82-4">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Train'</span>:</span>
<span id="cb82-5">        training_job_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'TrainingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]        </span>
<span id="cb82-6">        pprint(execution_step)</span>
<span id="cb82-7">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb82-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_arn))</span>
<span id="cb82-9">        </span>
<span id="cb82-10">training_job_name <span class="op" style="color: #5E5E5E;">=</span> training_job_arn.split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb82-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job Name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 4, 49, 838000, tzinfo=tzlocal()),
 'Metadata': {'TrainingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 48, 54, 641000, tzinfo=tzlocal()),
 'StepName': 'Train',
 'StepStatus': 'Succeeded'}
Training job ARN: arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5
Training job Name: pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5</code></pre>
</div>
</div>
<p>Using similar approach we can find and print the pipeline artifacts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">processing_job_name<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb84-2">training_job_name<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="0cf68005-c1d1-4277-9e23-ea043e62f970">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb85-2"><span class="im" style="color: #00769E;">from</span> sagemaker.lineage.visualizer <span class="im" style="color: #00769E;">import</span> LineageTableVisualizer</span>
<span id="cb85-3"></span>
<span id="cb85-4">viz <span class="op" style="color: #5E5E5E;">=</span> LineageTableVisualizer(sagemaker.session.Session())</span>
<span id="cb85-5"></span>
<span id="cb85-6"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb85-7">    pprint(execution_step)</span>
<span id="cb85-8">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Processing'</span>:</span>
<span id="cb85-9">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(processing_job_name))</span>
<span id="cb85-11">        display(viz.show(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>processing_job_name))</span>
<span id="cb85-12">    <span class="cf" style="color: #003B4F;">elif</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Train'</span>:</span>
<span id="cb85-13">        training_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'TrainingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-14">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span>
<span id="cb85-15">        display(viz.show(training_job_name<span class="op" style="color: #5E5E5E;">=</span>training_job_name))</span>
<span id="cb85-16">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb85-17">        display(viz.show(pipeline_execution_step<span class="op" style="color: #5E5E5E;">=</span>execution_step))</span>
<span id="cb85-18">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 13, 48, 53, 920000, tzinfo=tzlocal()),
 'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-processing-mwnbfz07z3'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 42, 570000, tzinfo=tzlocal()),
 'StepName': 'Processing',
 'StepStatus': 'Succeeded'}
Processing job name: pipelines-h4inlmq7fqwk-processing-mwnbfz07z3</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...-13-37-36-257/input/code/prepare_data.py</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://dlai-practical-data-science/data/raw/</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>68331...om/sagemaker-scikit-learn:0.23-1-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>s3://...02-12-13-32-20-378/output/sentiment-test</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>4</th>
      <td>s3://...13-32-20-378/output/sentiment-validation</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>5</th>
      <td>s3://...2-12-13-32-20-378/output/sentiment-train</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 4, 49, 838000, tzinfo=tzlocal()),
 'Metadata': {'TrainingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 48, 54, 641000, tzinfo=tzlocal()),
 'StepName': 'Train',
 'StepStatus': 'Succeeded'}
Training job name: pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...13-32-20-378/output/sentiment-validation</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://...2-12-13-32-20-378/output/sentiment-train</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>76310...onaws.com/pytorch-training:1.6.0-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Output</td>
      <td>Model</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 48, 729000, tzinfo=tzlocal()),
 'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-evaluatemodel-uqvunnu2ks'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 4, 50, 615000, tzinfo=tzlocal()),
 'StepName': 'EvaluateModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...640/input/code/evaluate_model_metrics.py</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://...02-12-13-32-20-378/output/sentiment-test</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Input</td>
      <td>Model</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>68331...om/sagemaker-scikit-learn:0.23-1-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>4</th>
      <td>s3://...n-2023-02-12-13-35-32-414/output/metrics</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 50, 320000, tzinfo=tzlocal()),
 'Metadata': {'Condition': {'Outcome': 'True'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 49, 585000, tzinfo=tzlocal()),
 'StepName': 'AccuracyCondition',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 52, 545000, tzinfo=tzlocal()),
 'Metadata': {'Model': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:model/pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 51, 78000, tzinfo=tzlocal()),
 'StepName': 'CreateModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 52, 324000, tzinfo=tzlocal()),
 'Metadata': {'RegisterModel': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 51, 78000, tzinfo=tzlocal()),
 'StepName': 'RegisterModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Input</td>
      <td>Model</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>76310...aws.com/pytorch-inference:1.6.0-cpu-py36</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>bert-reviews-1676208665-1-PendingManualApprova...</td>
      <td>Input</td>
      <td>Approval</td>
      <td>ContributedTo</td>
      <td>action</td>
    </tr>
    <tr>
      <th>3</th>
      <td>BERT-Reviews-1676208665-1676211052-aws-model-p...</td>
      <td>Output</td>
      <td>ModelGroup</td>
      <td>AssociatedWith</td>
      <td>context</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="deploy-and-test-the-model" class="level2" data-number="13">
<h2 data-number="13" class="anchored" data-anchor-id="deploy-and-test-the-model"><span class="header-section-number">13</span> Deploy and test the model</h2>
<section id="approve-trained-model" class="level3" data-number="13.1">
<h3 data-number="13.1" class="anchored" data-anchor-id="approve-trained-model"><span class="header-section-number">13.1</span> Approve trained model</h3>
<p>The pipeline created a model package version within the specified model package group and an approval status of <code>PendingManualApproval</code>. This requires a separate step to manually approve the model before deploying to production.</p>
<p>We can approve the model using the SageMaker Studio UI or programmatically as shown below.</p>
<p>Get the model package ARN.</p>
<div class="cell" data-outputid="b5a1f02f-625f-43b6-9c17-18972e1ca6b1">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb94-2">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'RegisterModel'</span>:</span>
<span id="cb94-3">        model_package_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'RegisterModel'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]</span>
<span id="cb94-4">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb94-5"><span class="bu" style="color: null;">print</span>(model_package_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1</code></pre>
</div>
</div>
<p>Update the model package with the <code>Approved</code> status to prepare for deployment.</p>
<p>The model must be <code>Approved</code> before it can be deployed.</p>
<div class="cell" data-outputid="49ae389d-3b0b-4529-b77c-09f035f94b9c">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">model_package_update_response <span class="op" style="color: #5E5E5E;">=</span> sm.update_model_package(</span>
<span id="cb96-2">    ModelPackageArn<span class="op" style="color: #5E5E5E;">=</span>model_package_arn,</span>
<span id="cb96-3">    ModelApprovalStatus<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Approved"</span>,</span>
<span id="cb96-4">)</span>
<span id="cb96-5"></span>
<span id="cb96-6">pprint(model_package_update_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelPackageArn': 'arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '102',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 12 Feb 2023 14:15:24 GMT',
                                      'x-amzn-requestid': '95e70fcf-b3f0-4925-be40-73450c40a5ec'},
                      'HTTPStatusCode': 200,
                      'RequestId': '95e70fcf-b3f0-4925-be40-73450c40a5ec',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
</section>
<section id="deploy-model" class="level3" data-number="13.2">
<h3 data-number="13.2" class="anchored" data-anchor-id="deploy-model"><span class="header-section-number">13.2</span> Deploy model</h3>
<p>Get the model ARN and the model name from it.</p>
<div class="cell" data-outputid="4a79b3a9-63ca-4182-dfed-063d0827cb1b">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb98-2">    <span class="bu" style="color: null;">print</span>(execution_step[<span class="st" style="color: #20794D;">'StepName'</span>])</span>
<span id="cb98-3">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'CreateModel'</span>:</span>
<span id="cb98-4">        model_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'Model'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]</span>
<span id="cb98-5">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb98-6"><span class="bu" style="color: null;">print</span>(model_arn)</span>
<span id="cb98-7"></span>
<span id="cb98-8">model_name <span class="op" style="color: #5E5E5E;">=</span> model_arn.split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb98-9"><span class="bu" style="color: null;">print</span>(model_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RegisterModel
CreateModel
arn:aws:sagemaker:us-east-1:912822595625:model/pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6
pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6</code></pre>
</div>
</div>
</section>
<section id="create-endpoint-from-registry" class="level3" data-number="13.3">
<h3 data-number="13.3" class="anchored" data-anchor-id="create-endpoint-from-registry"><span class="header-section-number">13.3</span> Create endpoint from registry</h3>
<p>Configure the endpoint.</p>
<div class="cell" data-outputid="8d65d1cc-8ed2-4682-8eae-52ad417070e9">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">endpoint_config_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-epc-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb100-2"><span class="bu" style="color: null;">print</span>(endpoint_config_name)</span>
<span id="cb100-3"></span>
<span id="cb100-4">create_endpoint_config_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint_config(</span>
<span id="cb100-5">    EndpointConfigName <span class="op" style="color: #5E5E5E;">=</span> endpoint_config_name,</span>
<span id="cb100-6">    ProductionVariants<span class="op" style="color: #5E5E5E;">=</span>[{</span>
<span id="cb100-7">        <span class="st" style="color: #20794D;">'InstanceType'</span>:<span class="st" style="color: #20794D;">'ml.m5.xlarge'</span>,</span>
<span id="cb100-8">        <span class="st" style="color: #20794D;">'InitialVariantWeight'</span>:<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb100-9">        <span class="st" style="color: #20794D;">'InitialInstanceCount'</span>:<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb100-10">        <span class="st" style="color: #20794D;">'ModelName'</span>: model_name,</span>
<span id="cb100-11">        <span class="st" style="color: #20794D;">'VariantName'</span>:<span class="st" style="color: #20794D;">'AllTraffic'</span>}])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bert-model-epc-1676208665</code></pre>
</div>
</div>
<p>Create the endpoint.</p>
<div class="cell" data-outputid="8e6c05ae-6a88-4e71-fc09-307995983c70">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">pipeline_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-ep-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb102-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"EndpointName=</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(pipeline_endpoint_name))</span>
<span id="cb102-3"></span>
<span id="cb102-4">create_endpoint_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint(</span>
<span id="cb102-5">    EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name,</span>
<span id="cb102-6">    EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name)</span>
<span id="cb102-7"><span class="bu" style="color: null;">print</span>(create_endpoint_response[<span class="st" style="color: #20794D;">'EndpointArn'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>EndpointName=bert-model-ep-1676208665
arn:aws:sagemaker:us-east-1:912822595625:endpoint/bert-model-ep-1676208665</code></pre>
</div>
</div>
<div class="cell" data-outputid="816fc01f-bff8-404c-fe80-f4d416405b6a">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb104-2"></span>
<span id="cb104-3"><span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb104-4">    <span class="cf" style="color: #003B4F;">try</span>: </span>
<span id="cb104-5">        waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">'endpoint_in_service'</span>)</span>
<span id="cb104-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Waiting for endpoint to be in `InService`...'</span>)</span>
<span id="cb104-7">        waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name)</span>
<span id="cb104-8">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb104-9">    <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb104-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Waiting for endpoint...'</span>)</span>
<span id="cb104-11">        endpoint_status <span class="op" style="color: #5E5E5E;">=</span> sm.describe_endpoint(EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name)[<span class="st" style="color: #20794D;">'EndpointStatus'</span>]</span>
<span id="cb104-12">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(endpoint_status))</span>
<span id="cb104-13">        <span class="cf" style="color: #003B4F;">if</span> endpoint_status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Failed'</span>:</span>
<span id="cb104-14">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb104-15">        time.sleep(<span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb104-16">        </span>
<span id="cb104-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint deployed.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Waiting for endpoint to be in `InService`...
Endpoint deployed.
CPU times: user 109 ms, sys: 30.6 ms, total: 140 ms
Wall time: 4min 31s</code></pre>
</div>
</div>
</section>
<section id="test-model" class="level3" data-number="13.4">
<h3 data-number="13.4" class="anchored" data-anchor-id="test-model"><span class="header-section-number">13.4</span> Test model</h3>
<p>Let’s predict the <code>sentiment</code> with <code>review_body</code> samples and review the result:</p>
<div class="cell" data-outputid="09f68f38-d201-44c0-a111-5ff2b2b7da19">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb106-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb106-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb106-4"></span>
<span id="cb106-5">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb106-6">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb106-7">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb106-8">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb106-9">]</span>
<span id="cb106-10"></span>
<span id="cb106-11">predictor <span class="op" style="color: #5E5E5E;">=</span> Predictor(</span>
<span id="cb106-12">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name,</span>
<span id="cb106-13">    serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(),</span>
<span id="cb106-14">    deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer(),</span>
<span id="cb106-15">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb106-16">)</span>
<span id="cb106-17"></span>
<span id="cb106-18">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb106-19"></span>
<span id="cb106-20"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb106-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9203698635101318
Predicted class 0 with probability 0.44024962186813354
Predicted class -1 with probability 0.778016209602356</code></pre>
</div>
</div>
</section>
<section id="sagemaker-studio-extensions" class="level3" data-number="13.5">
<h3 data-number="13.5" class="anchored" data-anchor-id="sagemaker-studio-extensions"><span class="header-section-number">13.5</span> SageMaker Studio extensions</h3>
<p>SageMaker Studio provides a rich set of features to visually inspect SageMaker resources including pipelines, training jobs, and endpoints.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sm_studio_extensions_pipelines.png" title="Sagemaker Studio Extensions" class="img-fluid"></p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="14">
<h2 data-number="14" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">14</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-12-building-aws-sagemaker-pipeline-train-deploy-bert-text-classifier.html</guid>
  <pubDate>Sun, 12 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Train a Review Classifier with BERT and Amazon SageMaker</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level3" data-number="0.1">
<h3 data-number="0.1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">0.1</span> Introduction</h3>
<p>In the previous article we performed <a href="2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html">Feature Engineering on a raw dataset of product text reviews</a> using AWS Sagemaker, preparing it for training the model. Now we will train a text classifier using a variant of BERT called <a href="https://arxiv.org/abs/1907.11692">RoBERTa</a> - a Robustly Optimized BERT Pretraining Approach - within a PyTorch model ran as a SageMaker Training Job.</p>
<p>Let’s review the Amazon SageMaker “Bring Your Own Script” scheme:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sagemaker_scriptmode.png" title="AWS Bring your own script scheme" class="img-fluid"></p>
<p>In this project we will cover each part of this scheme. First, we need to install and import the required modules:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w2'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-14">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-15"></span>
<span id="cb1-16">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-17">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-18"></span>
<span id="cb1-19">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-20">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-21">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="aws-built-in-algorithms-vs-pre-trained-models" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="aws-built-in-algorithms-vs-pre-trained-models"><span class="header-section-number">1</span> AWS Built-in algorithms vs Pre-Trained Models</h2>
<p>Training an NLP model from scratch can be a very time-consuming and expensive. For example, training the BERT models 110 or 340 million parameters from scratch could take multiple days, depending on the CPU or GPU resources you have available. Luckily, there are many pretrained models available, which you can use to simply adapt them to your use case and your data set.</p>
<p>Lets also highlight the differences between AWS built-in algorithms and pretrained models. In <a href="https://livingdatalab.com/categories/#aws">earlier articles</a>, we looked at how to use built-in AWS algorithms, for example, the blazing text algorithm, to quickly train a model.</p>
<p>The built-in algorithm all required code to train the text classifier. We just pointed the algorithm to the prepared training data. In this project, we will work with pretrained models. <strong>The main difference here is that the model has already been trained on large collections of text data.</strong> For example, wikipedia text data.</p>
<p>We looked at <a href="https://livingdatalab.com/categories/#fastai">pre-trained deep learning models previously as the Fastai deep learning library provides these by default</a>.</p>
<p>With pre-trained models there are usually 2 steps:</p>
<ul>
<li><strong>Model pre-training</strong>: a task to help the model understand language better e.g.&nbsp;to predict the next word in a sequence</li>
<li><strong>Model fine-tuning</strong>: the main task at hand, where we use the pre-trained model that already understands language well and then customise that for a task e.g.&nbsp;classify text for sentiment</li>
</ul>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_model_pretrain_finetune.png" title="Pre-training and fine tuning models" class="img-fluid"></p>
<p>This helps improve the speed and performance of training a deep learning model by using a pre-training step, as opposed to say training a deep learning text classifier from scratch. This concept is also known as <em>transfer learning</em>.</p>
<p>Here using AWS we will provide specific text data, the product reviews data, to adapt a pre-trained model to our text domain and also provide the task and model training code. We wll be telling the pretrained model to perform a text classification task, with the three sentiment classes supplied.</p>
</section>
<section id="pre-trained-bert-and-roberta-models" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="pre-trained-bert-and-roberta-models"><span class="header-section-number">2</span> Pre-Trained BERT and Roberta Models</h2>
<p>While you can use BERT as is without training from scratch, it’s useful to understand how BERT uses word masking and next sentence prediction in parallel to learn and understand language. As BERT sees new text, the model masks 15 percent of the words in each sentence. BERT then predicts the masked words and corrects itself, meaning it updates the model weights when it predicts incorrectly.</p>
<p>This step is called <em>masked language model or masked LM</em>. Masking forces the model to learn the surrounding words for each sentence. At the same time, BERT is masking and predicting words, or to be more precise, input tokens. It is also performing next sentence prediction, or NSP, on pairs of input sequences.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_pretrain.png" title="Pretraining a BERT Model" class="img-fluid"></p>
<p>To perform NSP, BERT randomly chooses 50 percent of the sentence pairs and replaces one of the two sentences with a random sentence from another part of the document. BERT then predicts if the two sentences are a valid sentence pair or not. BERT again will correct itself when it predicts incorrectly. Both of those training tasks are performed in parallel to create a single accuracy score for the combined training efforts.</p>
<p>This results in a more robust model capable of performing word and sentence level predictive tasks. The input data is large collections of unlabeled text.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_finetune.png" title="Finetuning a BERT Model" class="img-fluid"></p>
<p>Since BERT has already been pre-trained on millions of public documents from Wikipedia and the Google Books corpus, the vocabulary and learned representations are indeed transferable to a large number of NLP and NLU tasks across a wide variety of domains.</p>
<p>In the fine-tuning step, you also configure the model for the actual NLP task, such as question and answer, text classification, or a named entity recognition. Fine-tuning is implemented as supervised learning and no masking or next sentence prediction happens. As a result, fine-tuning is very fast and requires a relatively small number of samples or product reviews, in our case.</p>
<p>The RoBERTa model architecture builds on BERT’s language masking strategy, but removes the next sentence pre-training objective. It also trains with much larger mini-batches and learning rates and with a 160 gigabyte of text, RoBERTa also uses much more training data compared to BERT, which is pre-trained with 16 gigabytes of text data.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_roberta.png" title="AWS Pretrain &amp; Finetune a Roberta Model" class="img-fluid"></p>
<p>These model architecture changes focus on building an even better performing masked language model for the NLP downstream tasks, such as text classification.</p>
</section>
<section id="configure-dataset-hyper-parameters-and-evaluation-metrics" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="configure-dataset-hyper-parameters-and-evaluation-metrics"><span class="header-section-number">3</span> Configure dataset, hyper-parameters and evaluation metrics</h2>
<section id="configure-dataset" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">3.1</span> Configure dataset</h3>
<p>We have already transformed and balanced the data into a format that the model expects. Let’s copy this data to S3. We will be using training and validation datasets to train the model. The test dataset will be used for tuning later.</p>
<p>Let’s setup the paths:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/sentiment-train/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb3-2">processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/sentiment-validation/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span></code></pre></div>
</div>
<p>Upload the data to S3 bucket:</p>
<div class="cell" data-outputid="48c9d0c2-2eb4-4c7b-a335-b5dd46a30dbb">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train $processed_train_data_s3_uri</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-215290792315/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-215290792315/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Check the existence of those files in the S3 bucket:</p>
<div class="cell" data-outputid="ef3a5da4-a37e-4137-94f9-e3cce56b85b2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_train_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-11 11:21:43    4894416 data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="46dd16e0-7745-4a9f-dc96-e3cc57e84bed">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-11 11:21:44     276522 data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>We need to setup the input data channels, wrapping the S3 locations in a <code>TrainingInput</code> object to use with the SageMaker Training Job. This can be organized as a dictionary where training and validation data are the Amazon SageMaker channels for S3 input data sources.</p>
<p>Let’s create a train data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">s3_input_train_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb10-2">    s3_data<span class="op" style="color: #5E5E5E;">=</span>processed_train_data_s3_uri </span>
<span id="cb10-3">)</span></code></pre></div>
</div>
<p>Now create a validation data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">s3_input_validation_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb11-2">    s3_data<span class="op" style="color: #5E5E5E;">=</span>processed_validation_data_s3_uri </span>
<span id="cb11-3">)</span></code></pre></div>
</div>
<p>Organize the data channels defined above as a dictionary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb12-2">    <span class="st" style="color: #20794D;">'train'</span>: s3_input_train_data, </span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">'validation'</span>: s3_input_validation_data </span>
<span id="cb12-4">}</span></code></pre></div>
</div>
</section>
<section id="configure-model-hyper-parameters" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="configure-model-hyper-parameters"><span class="header-section-number">3.2</span> Configure model hyper-parameters</h3>
<p>Now we need to set the Training Job parameters including the instance type, instance count, learning rate, batch size etc. For the purposes of this project, we will use a relatively small instance type. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span> <span class="co" style="color: #5E5E5E;"># maximum number of input tokens passed to BERT model</span></span>
<span id="cb13-2">freeze_bert_layer<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># specifies the depth of training within the network</span></span>
<span id="cb13-3">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb13-4">learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2e-5</span></span>
<span id="cb13-5">train_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-6">train_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-7">validation_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-8">validation_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-9">seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb13-10">run_validation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb13-11"></span>
<span id="cb13-12">train_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-13">train_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span></span>
<span id="cb13-14">train_volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-15">input_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span></span></code></pre></div>
</div>
<p>Some of them will be passed into the PyTorch estimator in the hyperparameters argument. Let’s setup the dictionary for that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">hyperparameters<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb14-2">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb14-5">    <span class="st" style="color: #20794D;">'learning_rate'</span>: learning_rate,</span>
<span id="cb14-6">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: train_batch_size,</span>
<span id="cb14-7">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb14-8">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb14-9">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,    </span>
<span id="cb14-10">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb14-11">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb14-12">}</span></code></pre></div>
</div>
</section>
<section id="setup-evaluation-metrics" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="setup-evaluation-metrics"><span class="header-section-number">3.3</span> Setup evaluation metrics</h3>
<p>We will choose loss and accuracy as the evaluation metrics. The regular expressions <code>Regex</code> will capture the values of metrics that the algorithm will emit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb15-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb15-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb15-4">]</span></code></pre></div>
</div>
<p>For example, these sample log lines…</p>
<pre><code>[step: 100] val_loss: 0.76 - val_acc: 70.92%</code></pre>
<p>…will produce the following metrics in CloudWatch:</p>
<p><code>validation:loss</code> = 0.76</p>
<p><code>validation:accuracy</code> = 70.92</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/cloudwatch_validation_metrics.png" title="Evaluation metrics" class="img-fluid"></p>
</section>
<section id="setup-debugger-and-profiler" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="setup-debugger-and-profiler"><span class="header-section-number">3.4</span> Setup Debugger and Profiler</h3>
<p>Amazon SageMaker Debugger can be used to profile machine learning models, helping to identify and fix training issues caused by hardware resource usage. Setting some parameters in the SageMaker estimator, without any change to the training code, can enable the collection of infrastructure and model metrics such as: CPU and GPU, RAM and GPU RAM, data loading time, time spent in ML operators running on CPU and GPU, distributed training metrics and many more.</p>
<p>In addition, we can visualize how much time is spent in different phases, such as preprocessing, training loop, and postprocessing. If needed, you can drill down on each training epoch, and even on each function in your training script.</p>
<p>You can define Debugger Rules as are described here: https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> Rule, ProfilerRule, rule_configs</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> DebuggerHookConfig</span>
<span id="cb17-3"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> ProfilerConfig, FrameworkProfile</span></code></pre></div>
</div>
<p><code>DebuggerHookConfig</code> provides options to customize how debugging information is emitted and saved. <code>s3_output_path</code> argument value defines the location in Amazon S3 to store the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">debugger_hook_config <span class="op" style="color: #5E5E5E;">=</span> DebuggerHookConfig(</span>
<span id="cb18-2">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(bucket),</span>
<span id="cb18-3">)</span></code></pre></div>
</div>
<p><code>ProfilerConfig</code> sets the configuration for collecting system and framework metrics of SageMaker Training Jobs. Parameter <code>system_monitor_interval_millis</code> sets the time interval to collect system metrics (in milliseconds). Parameter <code>framework_profile_params</code> is the object for framework metrics profiling. Here we will set its local path, the step at which to start profiling, <code>start_step</code>, and the number of steps to profile, <code>num_steps</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> ProfilerConfig, FrameworkProfile</span>
<span id="cb19-2"></span>
<span id="cb19-3">profiler_config <span class="op" style="color: #5E5E5E;">=</span> ProfilerConfig(</span>
<span id="cb19-4">    system_monitor_interval_millis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">500</span>,</span>
<span id="cb19-5">    framework_profile_params<span class="op" style="color: #5E5E5E;">=</span>FrameworkProfile(local_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/output/profiler/"</span>, start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, num_steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb19-6">)</span></code></pre></div>
</div>
<p>For monitoring and profiling the built-in rules we can use the <code>ProfilerReport</code>. It creates a profiling report and updates when the individual rules are triggered. If you trigger this <code>ProfilerReport</code> rule without any customized parameter as in the cell below, then the <code>ProfilerReport</code> rule triggers all of the built-in rules for monitoring and profiling with their default parameter values.</p>
<p>The profiling report can be downloaded while the Training Job is running or after the job has finished.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">rules<span class="op" style="color: #5E5E5E;">=</span>[ProfilerRule.sagemaker(rule_configs.ProfilerReport())]</span></code></pre></div>
</div>
</section>
</section>
<section id="train-model" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="train-model"><span class="header-section-number">4</span> Train model</h2>
<section id="setup-the-roberta-and-pytorch-script-to-run-on-sagemaker" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="setup-the-roberta-and-pytorch-script-to-run-on-sagemaker"><span class="header-section-number">4.1</span> Setup the RoBERTa and PyTorch script to run on SageMaker</h3>
<p>We will prepare the PyTorch model to run as a SageMaker Training Job in a separate Python file, which will be called during the training.</p>
<p>Here we will be using the pre-trained model <code>roberta-base</code>. The information about the available models can be found in the <a href="https://huggingface.co/models">Hugging Face website</a>.</p>
<div class="cell" data-outputid="c2e3988f-0967-4dd0-8353-d13e7f71b752">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;">import</span> sys, importlib</span>
<span id="cb21-2">sys.path.append(<span class="st" style="color: #20794D;">'src/'</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="im" style="color: #00769E;">import</span> train</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;"># reload the module if it has been previously loaded</span></span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'train'</span> <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb21-8">    importlib.<span class="bu" style="color: null;">reload</span>(train)</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;"># Ignore warnings below</span></span>
<span id="cb21-11">config <span class="op" style="color: #5E5E5E;">=</span> train.configure_model()</span>
<span id="cb21-12"></span>
<span id="cb21-13">label_0 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb21-14">label_1 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-15">label_2 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb21-16"></span>
<span id="cb21-17">updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb21-18"></span>
<span id="cb21-19"><span class="cf" style="color: #003B4F;">if</span> label_0 <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">or</span> label_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="kw" style="color: #003B4F;">or</span> label_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb21-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'#######################################################################################'</span>)</span>
<span id="cb21-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">configure_model</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/train.py is complete.'</span>)</span>
<span id="cb21-22">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'########################################################################################'</span>)</span>
<span id="cb21-23">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="st" style="color: #20794D;">'Check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">configure_model</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/train.py is complete.'</span>)</span>
<span id="cb21-24"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb21-25">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)    </span>
<span id="cb21-26">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Updated correctly!'</span>)        </span>
<span id="cb21-27">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)        </span>
<span id="cb21-28"></span>
<span id="cb21-29">    updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3913195754df496ab1e9b41497fc6739","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
##################
Updated correctly!
##################</code></pre>
</div>
</div>
<p>Setup the PyTorch estimator to train our model. For more information on the PyTorch estimator, see the documentation <a href="https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/sagemaker.pytorch.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="cf" style="color: #003B4F;">if</span> updated_correctly:</span>
<span id="cb23-4">    estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb23-5">        entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb23-6">        source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb23-7">        role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb23-8">        instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb23-9">        instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb23-10">        volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb23-11">        py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>, <span class="co" style="color: #5E5E5E;"># dynamically retrieves the correct training image (Python 3)</span></span>
<span id="cb23-12">        framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>, <span class="co" style="color: #5E5E5E;"># dynamically retrieves the correct training image (PyTorch)</span></span>
<span id="cb23-13">        hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters,</span>
<span id="cb23-14">        metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb23-15">        input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode,</span>
<span id="cb23-16">        debugger_hook_config<span class="op" style="color: #5E5E5E;">=</span>debugger_hook_config,</span>
<span id="cb23-17">        profiler_config<span class="op" style="color: #5E5E5E;">=</span>profiler_config,</span>
<span id="cb23-18">        rules<span class="op" style="color: #5E5E5E;">=</span>rules</span>
<span id="cb23-19">    )</span></code></pre></div>
</div>
<p>Lets now launch the SageMaker Training Job which will be fitting the model to the dataset. We can use the <code>estimator.fit</code> function, passing the configured train and validation inputs (data channels).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">estimator.fit(</span>
<span id="cb24-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb24-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb24-4">)</span></code></pre></div>
</div>
<p>We can refer to the last Training Job using the estimator function <code>latest_training_job</code>. Then the Training Job name can be found with the <code>name</code> function:</p>
<div class="cell" data-outputid="985f7efd-a155-4784-b1bd-5e2c9a5a2ec5">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.name</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-2023-02-11-11-22-02-024</code></pre>
</div>
</div>
<p>We can also load the information about the Training Job using the function <code>describe()</code>. The result is in dictionary format. Let’s check that it has the same Training Job name:</p>
<div class="cell" data-outputid="83c51a67-93dc-436a-9b22-b682c806c683">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.describe()[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-2023-02-11-11-22-02-024</code></pre>
</div>
</div>
<p>Let’s pull the Training Job status from the Training Job description.</p>
<div class="cell" data-outputid="17e1fd2c-3db0-458f-ead5-bc7391134802">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;">print</span>(estimator.latest_training_job.describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['TrainingJobName', 'TrainingJobArn', 'TrainingJobStatus', 'SecondaryStatus', 'HyperParameters', 'AlgorithmSpecification', 'RoleArn', 'InputDataConfig', 'OutputDataConfig', 'ResourceConfig', 'StoppingCondition', 'CreationTime', 'LastModifiedTime', 'SecondaryStatusTransitions', 'EnableNetworkIsolation', 'EnableInterContainerTrafficEncryption', 'EnableManagedSpotTraining', 'DebugHookConfig', 'ProfilerConfig', 'ProfilerRuleConfigurations', 'ProfilerRuleEvaluationStatuses', 'ProfilingStatus', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="8f57ce0a-fa4c-48ba-b246-db24734663c5">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">training_job_status_primary <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.describe()[<span class="st" style="color: #20794D;">'TrainingJobStatus'</span>] </span>
<span id="cb31-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_status_primary))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job status: InProgress</code></pre>
</div>
</div>
<p>Wait for the Training Job to complete.</p>
<div class="cell" data-outputid="752461d7-2cf6-4cd7-d043-1a143e0f5281">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb33-2"></span>
<span id="cb33-3">estimator.latest_training_job.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
2023-02-11 11:44:39 Starting - Preparing the instances for training
2023-02-11 11:44:39 Downloading - Downloading input data
2023-02-11 11:44:39 Training - Training image download completed. Training in progress.....................................................................................................................................................................................................................
2023-02-11 12:02:56 Uploading - Uploading generated training model....................................
2023-02-11 12:06:06 Completed - Training job completed
CPU times: user 1.19 s, sys: 131 ms, total: 1.32 s
Wall time: 21min 9s</code></pre>
</div>
</div>
<p>Review the training metrics.</p>
<div class="cell" data-outputid="a8344d15-8a6f-498c-9457-da067937674c">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df_metrics <span class="op" style="color: #5E5E5E;">=</span> estimator.training_job_analytics.dataframe()</span>
<span id="cb35-2">df_metrics</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>timestamp</th>
      <th>metric_name</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>validation:loss</td>
      <td>1.10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1320.0</td>
      <td>validation:loss</td>
      <td>1.02</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1800.0</td>
      <td>validation:loss</td>
      <td>0.66</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.0</td>
      <td>validation:accuracy</td>
      <td>34.77</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1320.0</td>
      <td>validation:accuracy</td>
      <td>50.39</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1800.0</td>
      <td>validation:accuracy</td>
      <td>69.14</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can query and plot the training metrics:</p>
<div class="cell" data-outputid="6a84ab14-11fb-40ce-d96d-0e29e4dd3ae5">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df_metrics.query(<span class="st" style="color: #20794D;">"metric_name=='validation:accuracy'"</span>).plot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'timestamp'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'value'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f40865b1a90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="download-sagemaker-debugger-profiling-report" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="download-sagemaker-debugger-profiling-report"><span class="header-section-number">4.2</span> Download SageMaker debugger profiling report</h3>
<p>We can download and review the debugger profiling report.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">profiler_report_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/rule-output/ProfilerReport/profiler-output"</span>.<span class="bu" style="color: null;">format</span>(bucket, training_job_name)</span></code></pre></div>
</div>
<p>Then we can list the report files:</p>
<div class="cell" data-outputid="89304a1b-e467-4bcc-b7c8-03d89d655527">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $profiler_report_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                           PRE profiler-reports/
2023-02-11 12:03:09     364394 profiler-report.html
2023-02-11 12:03:08     211444 profiler-report.ipynb</code></pre>
</div>
</div>
<p>The folder <code>profiler-reports</code> contains the built-in rule analysis components, stored in JSON and a Jupyter notebook. They are aggregated into the report.</p>
<div class="cell" data-outputid="f391389f-c01c-4fa4-9687-9711abd67366">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive $profiler_report_s3_uri .<span class="op" style="color: #5E5E5E;">/</span>profiler_report<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/CPUBottleneck.json to profiler_report/profiler-reports/CPUBottleneck.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/MaxInitializationTime.json to profiler_report/profiler-reports/MaxInitializationTime.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/Dataloader.json to profiler_report/profiler-reports/Dataloader.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/OverallFrameworkMetrics.json to profiler_report/profiler-reports/OverallFrameworkMetrics.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/BatchSize.json to profiler_report/profiler-reports/BatchSize.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/OverallSystemUsage.json to profiler_report/profiler-reports/OverallSystemUsage.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/GPUMemoryIncrease.json to profiler_report/profiler-reports/GPUMemoryIncrease.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/IOBottleneck.json to profiler_report/profiler-reports/IOBottleneck.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/LoadBalancing.json to profiler_report/profiler-reports/LoadBalancing.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-report.ipynb to profiler_report/profiler-report.ipynb
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/LowGPUUtilization.json to profiler_report/profiler-reports/LowGPUUtilization.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/StepOutlier.json to profiler_report/profiler-reports/StepOutlier.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-report.html to profiler_report/profiler-report.html</code></pre>
</div>
</div>
<p>You can review the profiler report <a href="https://pranath.github.io/pds/profiler-report.html">here</a>.</p>
</section>
</section>
<section id="deploy-the-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="deploy-the-model"><span class="header-section-number">5</span> Deploy the model</h2>
<p>Now we will create a custom <code>SentimentPredictor</code> that encapsulates a JSONLines serializer and deserializer. To be passed into the <code>PyTorchModel</code> it needs to be wrapped as a class.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb43-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb43-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb43-4"></span>
<span id="cb43-5"><span class="kw" style="color: #003B4F;">class</span> SentimentPredictor(Predictor):</span>
<span id="cb43-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, endpoint_name, sagemaker_session):</span>
<span id="cb43-7">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(endpoint_name, </span>
<span id="cb43-8">                         sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sagemaker_session, </span>
<span id="cb43-9">                         serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(),</span>
<span id="cb43-10">                         deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb44-2"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch.model <span class="im" style="color: #00769E;">import</span> PyTorchModel</span>
<span id="cb44-3"></span>
<span id="cb44-4">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb44-5"></span>
<span id="cb44-6">pytorch_model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name, <span class="st" style="color: #20794D;">'pt'</span>, timestamp)</span>
<span id="cb44-7"></span>
<span id="cb44-8">model <span class="op" style="color: #5E5E5E;">=</span> PyTorchModel(name<span class="op" style="color: #5E5E5E;">=</span>pytorch_model_name,</span>
<span id="cb44-9">                     model_data<span class="op" style="color: #5E5E5E;">=</span>estimator.model_data,</span>
<span id="cb44-10">                     predictor_cls<span class="op" style="color: #5E5E5E;">=</span>SentimentPredictor,</span>
<span id="cb44-11">                     entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'inference.py'</span>,</span>
<span id="cb44-12">                     source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb44-13">                     framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb44-14">                     py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb44-15">                     role<span class="op" style="color: #5E5E5E;">=</span>role)</span></code></pre></div>
</div>
<div class="cell" data-outputid="4922a522-8c15-428f-a648-02597f213c11">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb45-2"></span>
<span id="cb45-3">pytorch_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name, <span class="st" style="color: #20794D;">'pt'</span>, timestamp)</span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="bu" style="color: null;">print</span>(pytorch_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>pytorch-training-2023-02-11-11-22-02-024-pt-1676117278</code></pre>
</div>
</div>
<p>Now we deploy the model as an endpoint.</p>
<div class="cell" data-outputid="72355abe-ebf0-4fa7-8079-7ee6c2bdba90">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb47-2"></span>
<span id="cb47-3">predictor <span class="op" style="color: #5E5E5E;">=</span> model.deploy(initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb47-4">                         instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>, </span>
<span id="cb47-5">                         endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pytorch_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------!CPU times: user 2min 15s, sys: 9.35 s, total: 2min 25s
Wall time: 7min 23s</code></pre>
</div>
</div>
</section>
<section id="test-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="test-model"><span class="header-section-number">6</span> Test model</h2>
<p>Here, we will pass sample strings of text to the endpoint in order to see the sentiment. We will try one example of each sentiment.</p>
<div class="cell" data-outputid="47d672de-b9cb-48f6-b13e-2c3a277ebb99">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb49-2">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb49-3">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb49-4">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb49-5">]</span>
<span id="cb49-6"></span>
<span id="cb49-7">predictor <span class="op" style="color: #5E5E5E;">=</span> SentimentPredictor(endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pytorch_endpoint_name,</span>
<span id="cb49-8">                               sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span>
<span id="cb49-9"></span>
<span id="cb49-10">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb49-11"></span>
<span id="cb49-12"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb49-13">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9605445861816406
Predicted class 0 with probability 0.5798221230506897
Predicted class -1 with probability 0.7667604684829712</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">7</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker.html</guid>
  <pubDate>Sat, 11 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Feature Transformation with Amazon SageMaker Processing Job and Feature Store</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="https://livingdatalab.com/categories/#aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will look at the <strong>Prepare &amp; Transform</strong> stage using AWS including:</p>
<ul>
<li>Feature engineering</li>
<li>Feature store</li>
</ul>
<p>Using the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - we will prepare it to train a BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>We will convert the original review text into machine-readable features used by BERT. To perform the required feature transformation we will configure an Amazon SageMaker processing job, which will be running a custom Python script.</p>
</section>
<section id="the-bert-language-model" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="the-bert-language-model"><span class="header-section-number">2</span> The Bert language model</h2>
<p>BERT stands for ‘Bidirectional Encoder Representations from Transformers’. So Bert language models are based on the transformer type models first created in 2017.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_history.png" title="The History of Language Models" class="img-fluid"></p>
<p>In a <a href="https://livingdatalab.com/aws/cloud-data-science/natural-language-processing/deep-learning/2023/02/06/creating-text-classifier-using-aws-sagemaker-blazingtext.html">previous article we used a Blazing Text Language Model</a> to create a text classifier. Blazing Text language models are in turn based on Word2Vec type language models. But how do word2vec/Blazing text language models work? essentially these models convert individual words into a series of numbers or a <em>vector</em>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_blazingtext_embed.png" title="Blazing Text Embeddings" class="img-fluid"></p>
<p>I used word2vec in one of my first data science/deep learning projects back in 2019 <a href="https://docs.google.com/presentation/d/164oDiuEZFR35X9QEJN1R-rOb4sp5r32DxR4Xm6z-Qgs/edit#slide=id.p">classifying disaster text messages</a>.</p>
<p>This means with word2vec similar meaning words will have similar numbers and vector positions, this is what this language model learns. The downside of this approach though is it allows only for one sense of what a word might mean - but we know in practice the meaning of a word can be effected by the context.</p>
<p>For example, if we were trying to decide if these two phrases were positive or negative:</p>
<ul>
<li>I love the dress</li>
<li>I love the dress, but not the price</li>
</ul>
<p>A word2vec model might end up giving quite positive sentiment to both of these phrases when summing up the meaning of these words individually, yet we can see that the second phrase might have more neutral if not negative sentiment, because here ‘love’, usually positive, has been modified by the context of the words its within.</p>
<p>This is one key thing that transformer models such as BERT or GPT can do, <strong>they can take into account the context of a word, and indeed process an entire phrase in one go to give a vector for that group of words, rather than for one word at a time.</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_embed.png" title="The Bert Embeddings" class="img-fluid"></p>
<p>In particular transformers use <em>attention</em> to capture the relationship and meaning between words used together. You can find out more about the differences between word2vec and transformer models <a href="https://towardsdatascience.com/word2vec-to-transformers-caf5a3daa08a">here</a>.</p>
</section>
<section id="feature-engineering-at-scale" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="feature-engineering-at-scale"><span class="header-section-number">3</span> Feature Engineering at Scale</h2>
<p>Amazon SageMaker processing allows you to perform data related tasks such as, preprocessing, postprocessing, and model evaluation at scale. SageMaker processing provides this capability by using a distributed cluster. By specifying some parameters, you can control how many notes and the type of the notes that make up the distributed cluster.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_processing.png" title="Amazon SageMaker Processing" class="img-fluid"></p>
<p>Sagemaker Feature Store is a fully managed service that provides purpose-built feature store. SageMaker Feature Store provides you with a centralized repository to securely save and serve features from.</p>
<p>Next, SageMaker Feature Store provides you with the capabilities to reuse the features, not just across a single machine learning project, but across multiple projects. A typical challenge that data scientist sees is training an inference skew that could result from discrepancies in the data used for training and the data used for inferencing. Sagemaker Feature Store helps reduce the skew by reusing the features across training and inference traces and by keeping the features consistent.</p>
<p>Finally, SageMaker Feature Store provides the capabilities to create it for the features both in real time and batch. The ability to creating for features in real time suppose use cases such as near real time ML predictions. Similarly, the ability to look up features in batch mode can be used to support use cases, such as model training.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_feature_store.png" title="AWS Feature Store" class="img-fluid"></p>
</section>
<section id="import-libraries-initialise" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="import-libraries-initialise"><span class="header-section-number">4</span> Import Libraries &amp; Initialise</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-4"></span>
<span id="cb1-5">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w1'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-8">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-9">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-10"></span>
<span id="cb1-11">featurestore_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker-featurestore-runtime'</span>, </span>
<span id="cb1-12">                                    config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-13"></span>
<span id="cb1-14">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-15">                         sagemaker_featurestore_runtime_client<span class="op" style="color: #5E5E5E;">=</span>featurestore_runtime)</span>
<span id="cb1-16"></span>
<span id="cb1-17">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-18">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-19">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
</section>
<section id="configure-the-sagemaker-feature-store" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="configure-the-sagemaker-feature-store"><span class="header-section-number">5</span> Configure the SageMaker Feature Store</h2>
<section id="configure-dataset" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">5.1</span> Configure dataset</h3>
<p>The raw dataset is in the public S3 bucket. Let’s start by specifying the S3 location of it:</p>
<div class="cell" data-outputid="b4ddde35-0d6b-4320-a9be-f29a22f1be3c">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">raw_input_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/raw/'</span></span>
<span id="cb2-2"><span class="bu" style="color: null;">print</span>(raw_input_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://dlai-practical-data-science/data/raw/</code></pre>
</div>
</div>
<p>List the files in the S3 bucket (in this case it will be just one file):</p>
<div class="cell" data-outputid="5712b73b-7dd8-47d6-b0a9-f2b69298a913">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $raw_input_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="configure-the-sagemaker-feature-store-1" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="configure-the-sagemaker-feature-store-1"><span class="header-section-number">5.2</span> Configure the SageMaker feature store</h3>
<p>As the result of the transformation, in addition to generating files in S3 bucket, we will also save the transformed data in the <strong>Amazon SageMaker Feature Store</strong> to be used by others in our organization, for example.</p>
<p>To configure a Feature Store we need to setup a <strong>Feature Group</strong>. This is the main resource containing all of the metadata related to the data stored in the Feature Store.</p>
<p>A Feature Group should contain a list of <strong>Feature Definitions</strong>. A Feature Definition consists of a name and the data type. The Feature Group also contains an online store configuration and an offline store configuration controlling where the data is stored. Enabling the online store allows quick access to the latest value for a record via the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_GetRecord.html">GetRecord API</a>. The offline store allows storage of the data in your S3 bucket. We will be using the offline store here.</p>
<p>Let’s setup the Feature Group name and the Feature Store offline prefix in S3 bucket.</p>
<div class="cell" data-outputid="fc9ed9db-1b5f-4575-f4f9-516bcb663856">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb6-2">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb6-3"></span>
<span id="cb6-4">feature_group_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews-feature-group-'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb6-5">feature_store_offline_prefix <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews-feature-store-'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Feature group name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_group_name))</span>
<span id="cb6-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Feature store offline prefix in S3: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_store_offline_prefix))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Feature group name: reviews-feature-group-1675799708
Feature store offline prefix in S3: reviews-feature-store-1675799708</code></pre>
</div>
</div>
<p>Taking two features from the original raw dataset (<code>Review Text</code> and <code>Rating</code>), we will transform it preparing to be used for the model training and then to be saved in the Feature Store. Here we will define the related features to be stored as a list of <code>FeatureDefinition</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">from</span> sagemaker.feature_store.feature_definition <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb8-2">    FeatureDefinition,</span>
<span id="cb8-3">    FeatureTypeEnum,</span>
<span id="cb8-4">)</span>
<span id="cb8-5"></span>
<span id="cb8-6">feature_definitions<span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;"># unique ID of the review</span></span>
<span id="cb8-8">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'review_id'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING), </span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;"># ingestion timestamp</span></span>
<span id="cb8-10">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'date'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;"># sentiment: -1 (negative), 0 (neutral) or 1 (positive). It will be found the Rating values (1, 2, 3, 4, 5)</span></span>
<span id="cb8-12">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING), </span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;"># label ID of the target class (sentiment)</span></span>
<span id="cb8-14">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'label_id'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;"># reviews encoded with the BERT tokenizer</span></span>
<span id="cb8-16">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'input_ids'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;"># original Review Text</span></span>
<span id="cb8-18">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'review_body'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-19">    <span class="co" style="color: #5E5E5E;"># train/validation/test label</span></span>
<span id="cb8-20">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'split_type'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING)</span>
<span id="cb8-21">]</span></code></pre></div>
</div>
<p>Let’s create the feature group using the feature definitions defined above.</p>
<div class="cell" data-outputid="1bb637b8-7887-46dd-8634-575fc8095b69">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> sagemaker.feature_store.feature_group <span class="im" style="color: #00769E;">import</span> FeatureGroup</span>
<span id="cb9-2"></span>
<span id="cb9-3">feature_group <span class="op" style="color: #5E5E5E;">=</span> FeatureGroup(</span>
<span id="cb9-4">    name<span class="op" style="color: #5E5E5E;">=</span>feature_group_name, </span>
<span id="cb9-5">    feature_definitions<span class="op" style="color: #5E5E5E;">=</span>feature_definitions, </span>
<span id="cb9-6">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb9-7">)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="bu" style="color: null;">print</span>(feature_group)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FeatureGroup(name='reviews-feature-group-1675799708', sagemaker_session=&lt;sagemaker.session.Session object at 0x7f9cb912c350&gt;, feature_definitions=[FeatureDefinition(feature_name='review_id', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='date', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='sentiment', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='label_id', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='input_ids', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='review_body', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='split_type', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;)])</code></pre>
</div>
</div>
<p>We will use the defined Feature Group later in this project, the actual creation of the Feature Group will take place in the processing job. Now let’s move into the setup of the processing job to transform the dataset.</p>
</section>
</section>
<section id="transform-the-dataset" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="transform-the-dataset"><span class="header-section-number">6</span> Transform the dataset</h2>
<p>We will configure a SageMaker processing job to run a custom Python script to balance and transform the raw data into a format used by BERT model.</p>
<p>Let’s set the transformation parameters including the instance type, instance count, and train/validation/test split percentages. We will use a relatively small instance type for this project. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this</a> link for additional instance types that may work for your use case.</p>
<p>We can also choose whether you want to balance the dataset or not. In this case, we will balance the dataset to avoid class imbalance in the target variable, <code>sentiment</code>.</p>
<p>Another important parameter of the model is the <code>max_seq_length</code>, which specifies the maximum length of the classified reviews for the RoBERTa model. If the sentence is shorter than the maximum length parameter, it will be padded. In another case, when the sentence is longer, it will be truncated from the right side.</p>
<p>Since a smaller <code>max_seq_length</code> leads to faster training and lower resource utilization, you want to find the smallest power-of-2 that captures <code>100%</code> of our reviews. For this dataset, the <code>100th</code> percentile is <code>115</code>. However, it’s best to stick with powers-of-2 when using BERT. So let’s choose <code>128</code> as this is the smallest power-of-2 greater than <code>115</code>. We will see below how the shorter sentences will be padded to a maximum length.</p>
<pre><code>mean        52.512374
std         31.387048
min          1.000000
10%         10.000000
20%         22.000000
30%         32.000000
40%         41.000000
50%         51.000000
60%         61.000000
70%         73.000000
80%         88.000000
90%         97.000000
100%       115.000000
max        115.000000</code></pre>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/distribution_num_words_per_review.png" title="Histogram of text sequence lengths" class="img-fluid"></p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">processing_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.xlarge'</span></span>
<span id="cb12-2">processing_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-3">train_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.90</span></span>
<span id="cb12-4">validation_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb12-5">test_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb12-6">balance_dataset<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb12-7">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span></span></code></pre></div>
</div>
<p>To balance and transform our data, we will use a scikit-learn-based processing job. This is essentially a generic Python processing job with scikit-learn pre-installed. We can specify the version of scikit-learn we wish to use. Also we will pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb13-2"></span>
<span id="cb13-3">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb13-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb13-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb13-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb13-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb13-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},                             </span>
<span id="cb13-9">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb13-10">)</span></code></pre></div>
</div>
<p>The processing job will be running the Python code from the file <a href="https://github.com/pranath/pds/blob/main/prepare_data.py"><code>src/prepare_data.py</code></a>.</p>
<div class="cell" data-outputid="36d16e53-c76f-4665-9a17-5cbaa581c55c">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> sys, importlib</span>
<span id="cb14-2">sys.path.append(<span class="st" style="color: #20794D;">'src/'</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;"># import the `prepare_data.py` module</span></span>
<span id="cb14-5"><span class="im" style="color: #00769E;">import</span> prepare_data</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;"># reload the module if it has been previously loaded </span></span>
<span id="cb14-8"><span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'prepare_data'</span> <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb14-9">    importlib.<span class="bu" style="color: null;">reload</span>(prepare_data)</span>
<span id="cb14-10"></span>
<span id="cb14-11">input_ids <span class="op" style="color: #5E5E5E;">=</span> prepare_data.convert_to_bert_input_ids(<span class="st" style="color: #20794D;">"this product is great!"</span>, max_seq_length)</span>
<span id="cb14-12">    </span>
<span id="cb14-13">updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(input_ids) <span class="op" style="color: #5E5E5E;">!=</span> max_seq_length:</span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="st" style="color: #20794D;">'Please check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">convert_to_bert_input_ids</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/prepare_data.py is complete.'</span>)</span>
<span id="cb14-17"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb14-18">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)</span>
<span id="cb14-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Updated correctly!'</span>)</span>
<span id="cb14-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)</span>
<span id="cb14-21"></span>
<span id="cb14-22">    updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>##################
Updated correctly!
##################</code></pre>
</div>
</div>
<div class="cell" data-outputid="1d816a68-2ca9-4893-c5d9-b942dfe893e7">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">input_ids <span class="op" style="color: #5E5E5E;">=</span> prepare_data.convert_to_bert_input_ids(<span class="st" style="color: #20794D;">"this product is great!"</span>, max_seq_length)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="bu" style="color: null;">print</span>(input_ids)</span>
<span id="cb16-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Length of the sequence: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">len</span>(input_ids)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 9226, 1152, 16, 372, 328, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Length of the sequence: 128</code></pre>
</div>
</div>
<p>Now we launch the processing job with the custom script passing defined above parameters.</p>
<div class="cell" data-outputid="bcbfb17d-a9cf-4bc3-f0b6-c3ffd4bb542b">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;">if</span> (updated_correctly):</span>
<span id="cb18-4"></span>
<span id="cb18-5">    processor.run(code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/prepare_data.py'</span>,</span>
<span id="cb18-6">              inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb18-7">                    ProcessingInput(source<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb18-8">                                    destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data/'</span>,</span>
<span id="cb18-9">                                    s3_data_distribution_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ShardedByS3Key'</span>)</span>
<span id="cb18-10">              ],</span>
<span id="cb18-11">              outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb18-12">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-train'</span>,</span>
<span id="cb18-13">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/train'</span>,</span>
<span id="cb18-14">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb18-15">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-validation'</span>,</span>
<span id="cb18-16">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/validation'</span>,</span>
<span id="cb18-17">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb18-18">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-test'</span>,</span>
<span id="cb18-19">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/test'</span>,</span>
<span id="cb18-20">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>)</span>
<span id="cb18-21">              ],</span>
<span id="cb18-22">              arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'--train-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(train_split_percentage),</span>
<span id="cb18-23">                         <span class="st" style="color: #20794D;">'--validation-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(validation_split_percentage),</span>
<span id="cb18-24">                         <span class="st" style="color: #20794D;">'--test-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(test_split_percentage),</span>
<span id="cb18-25">                         <span class="st" style="color: #20794D;">'--balance-dataset'</span>, <span class="bu" style="color: null;">str</span>(balance_dataset),</span>
<span id="cb18-26">                         <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length),                         </span>
<span id="cb18-27">                         <span class="st" style="color: #20794D;">'--feature-store-offline-prefix'</span>, <span class="bu" style="color: null;">str</span>(feature_store_offline_prefix),</span>
<span id="cb18-28">                         <span class="st" style="color: #20794D;">'--feature-group-name'</span>, <span class="bu" style="color: null;">str</span>(feature_group_name)                         </span>
<span id="cb18-29">              ],</span>
<span id="cb18-30">              logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb18-31">              wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  sagemaker-scikit-learn-2023-02-07-19-57-59-405
Inputs:  [{'InputName': 'input-1', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://dlai-practical-data-science/data/raw/', 'LocalPath': '/opt/ml/processing/input/data/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'ShardedByS3Key', 'S3CompressionType': 'None'}}, {'InputName': 'code', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/input/code/prepare_data.py', 'LocalPath': '/opt/ml/processing/input/code', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'sentiment-train', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train', 'LocalPath': '/opt/ml/processing/output/sentiment/train', 'S3UploadMode': 'EndOfJob'}}, {'OutputName': 'sentiment-validation', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation', 'LocalPath': '/opt/ml/processing/output/sentiment/validation', 'S3UploadMode': 'EndOfJob'}}, {'OutputName': 'sentiment-test', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test', 'LocalPath': '/opt/ml/processing/output/sentiment/test', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<p>You can see the information about the processing jobs using the <code>describe</code> function. The result is in dictionary format. Let’s pull the processing job name:</p>
<div class="cell" data-outputid="30efa06b-9280-4261-e383-cfdb58d55f4d" data-scrolled="true">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">scikit_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobName'</span>]</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job name: sagemaker-scikit-learn-2023-02-07-19-57-59-405</code></pre>
</div>
</div>
<p>Let’s pull the processing job status from the processing job description.</p>
<div class="cell" data-outputid="bbb0d2fb-094a-4cbb-ad88-fc1dc5c6a48f" data-scrolled="true">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;">print</span>(processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['ProcessingInputs', 'ProcessingOutputConfig', 'ProcessingJobName', 'ProcessingResources', 'StoppingCondition', 'AppSpecification', 'Environment', 'RoleArn', 'ProcessingJobArn', 'ProcessingJobStatus', 'LastModifiedTime', 'CreationTime', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="f88ffba6-dd55-4c57-ff3e-60f28e7819ea" data-scrolled="true">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">scikit_processing_job_status <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobStatus'</span>]</span>
<span id="cb24-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job status: InProgress</code></pre>
</div>
</div>
<div class="cell" data-outputid="d7e17737-e44f-439d-e860-9ad9045b906b">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb26-2"></span>
<span id="cb26-3">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(</span>
<span id="cb26-4">    processing_job_name<span class="op" style="color: #5E5E5E;">=</span>scikit_processing_job_name,</span>
<span id="cb26-5">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb26-6">)</span>
<span id="cb26-7"></span>
<span id="cb26-8">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>....................................................................................................................................!CPU times: user 647 ms, sys: 44.3 ms, total: 691 ms
Wall time: 11min 13s</code></pre>
</div>
</div>
<p>Let’s inspect the transformed and balanced data in the S3 bucket.</p>
<div class="cell" data-outputid="5bd636b5-220b-4d92-e570-f61ef08ceaef">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb28-2"></span>
<span id="cb28-3">output_config <span class="op" style="color: #5E5E5E;">=</span> processing_job_description[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>]</span>
<span id="cb28-4"><span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> output_config[<span class="st" style="color: #20794D;">'Outputs'</span>]:</span>
<span id="cb28-5">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-train'</span>:</span>
<span id="cb28-6">        processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-validation'</span>:</span>
<span id="cb28-8">        processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-test'</span>:</span>
<span id="cb28-10">        processed_test_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-11">        </span>
<span id="cb28-12"><span class="bu" style="color: null;">print</span>(processed_train_data_s3_uri)</span>
<span id="cb28-13"><span class="bu" style="color: null;">print</span>(processed_validation_data_s3_uri)</span>
<span id="cb28-14"><span class="bu" style="color: null;">print</span>(processed_test_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train
s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation
s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test</code></pre>
</div>
</div>
<div class="cell" data-outputid="f11a5fe8-12f7-4997-ff23-bf263ad744f7" data-scrolled="true">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_train_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:54    4896333 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="0e77df43-82cf-4331-fca4-260076006e8d" data-scrolled="true">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_validation_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:54     269735 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="963692e4-adde-4975-e2a3-03af2ac7934c" data-scrolled="true">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_test_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:55     269933 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Now we copy the data into the folder <code>balanced</code>.</p>
<div class="cell" data-outputid="96f547ff-ca9e-4d69-b853-c28e53a957f1">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_train_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb36-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_validation_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_test_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv
download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Let’s review the training, validation and test data outputs:</p>
<div class="cell" data-outputid="627eb440-3ec3-4ecd-e7c0-e88c2920a4ce">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
15231   -1  0   [0, 100, 657, 13855, 27734, 111, 4682, 13, 42, 65, 4, 5, 10199, 16, 38596, 4, 24, 18, 227, 4136, 8, 5, 1468, 14, 51, 146, 9287, 66, 9, 4, 5, 5780, 16, 15652, 8, 5, 14893, 62, 5, 760, 32, 2422, 11962, 4, 5, 3318, 631, 14, 18, 95, 7209, 89, 116, 1437, 24, 18, 10, 3318, 631, 14, 95, 23835, 89, 4, 24, 630, 75, 1437, 356, 205, 7209, 1437, 8, 24, 630, 75, 356, 205, 3016, 4, 1437, 42, 13855, 6439, 56, 98, 203, 801, 4, 939, 437, 2299, 5779, 4, 1437, 13, 39328, 5135, 1437, 939, 524, 195, 108, 245, 113, 1437, 16157, 1437, 2631, 438, 8, 10, 650, 21, 1969, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   "I love jumpsuits - except for this one. the fabric is blah. it's between plastic and the material that they make flags out of. the print is adorable and the buttons up the front are super cute. the tie thing that's just hanging there?  it's a tie thing that just hangs there. it doesn't  look good hanging  and it doesn't look good tied.  this jumpsuit had so much potential. i'm definitely disappointed.  for sizing reference  i am 5'5""  135  34c and a small was perfect." 2023-02-07T20:04:40Z
8389    -1  0   [0, 100, 269, 770, 7, 101, 209, 1437, 53, 51, 95, 399, 75, 356, 235, 15, 127, 195, 108, 246, 2345, 102, 35156, 5120, 4, 939, 33, 380, 35841, 8, 460, 619, 66, 9, 317, 2498, 2084, 6149, 1033, 1437, 98, 2085, 939, 437, 95, 45, 5, 235, 1002, 13, 209, 1437, 53, 51, 1415, 98, 11962, 8, 939, 770, 7, 492, 106, 10, 860, 4, 5, 13977, 21, 350, 239, 13, 127, 25896, 1437, 8, 5, 2985, 18459, 58, 350, 380, 8, 851, 162, 10, 33062, 3786, 356, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I really wanted to like these  but they just didn't look right on my 5'3 sorta bulky frame. i have big thighs and always feel out of place wearing leggings  so maybe i'm just not the right target for these  but they looked so cute and i wanted to give them a try. the waist was too high for my liking  and the leg openings were too big and gave me a stumpified look.  2023-02-07T20:04:40Z
17752   1   2   [0, 713, 16, 10, 1528, 5262, 299, 42514, 571, 26875, 1827, 8, 1237, 650, 4, 939, 2333, 3568, 10, 650, 50, 4761, 11, 6215, 13657, 1437, 53, 15679, 219, 939, 460, 1836, 62, 4, 939, 437, 10, 2491, 438, 1437, 8, 10, 739, 10698, 1969, 4, 5, 760, 16, 10, 828, 11708, 1437, 53, 45, 98, 203, 47, 240, 10, 740, 5602, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   This is a true tiny top........gorgeous and runs small. i usually wear a small or medium in retailer tops  but timy i always size up. i'm a 36c  and a large fits perfect. the front is a bit sheer  but not so much you need a cami.   2023-02-07T20:04:40Z
65  1   2   [0, 100, 3584, 42, 299, 11, 41, 9876, 1001, 1400, 94, 186, 4, 5, 1318, 16, 4613, 8, 5, 2272, 1173, 2440, 3195, 16, 182, 2216, 4, 5, 3089, 11556, 34, 10, 2721, 4140, 219, 740, 7042, 1020, 459, 14, 16, 7391, 23, 5, 10762, 1437, 53, 64, 28, 2928, 30, 11803, 4, 939, 362, 29, 372, 77, 10610, 80, 430, 1319, 4, 939, 5328, 24, 19, 5, 2205, 4104, 66, 1437, 8, 24, 3723, 15390, 149, 5, 3089, 11556, 23, 5, 2576, 4, 24, 67, 1326, 372, 77, 5, 11021, 354, 4104, 16, 10610, 11, 4, 127, 129, 2813, 16, 14, 24, 74, 283, 11, 10, 4716, 1459, 1836, 25, 24, 18, 10, 2842, 380, 23, 5, 10762, 8, 5397, 3572, 2, 1, 1, 1, 1, 1]   I purchased this top in an antro store last week. the quality is wonderful and the greenish blue color is very unique. the blouse has a beautiful stretchy camsiole that is attached at the shoulders  but can be removed by snaps. i tooks great when worn two different ways. i wore it with the campole out  and it peeks through the blouse at the bottom. it also looks great when the camisole is worn in. my only wish is that it would come in a petite size as it's a touch big at the shoulders and neckli    2023-02-07T20:04:40Z</code></pre>
</div>
</div>
<div class="cell" data-outputid="fce03655-4455-476d-aeca-5e4b6e378f7a">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
5506    1   2   [0, 19065, 3588, 11, 1110, 9, 1468, 1437, 1318, 1437, 5780, 734, 18891, 59, 5, 2408, 19, 5, 14187, 156, 24, 45, 173, 13, 162, 4, 939, 2740, 65, 1836, 159, 25, 5131, 30, 97, 34910, 1437, 53, 14, 399, 75, 173, 131, 89, 21, 350, 203, 10199, 13, 5, 5933, 8, 5, 14187, 156, 24, 356, 19351, 4, 939, 2740, 10, 4761, 8, 939, 113, 119, 195, 108, 245, 113, 15, 5, 5350, 11454, 526, 4, 14223, 157, 4, 939, 348, 56, 98, 203, 6620, 19, 97, 6215, 3365, 98, 939, 437, 45, 350, 5779, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] "Great dress in terms of material  quality  print...something about the weight with the lining made it not work for me. i ordered one size down as recommended by other reviewers  but that didn't work; there was too much fabric for the length and the lining made it look heavier. i ordered a medium and i""m 5'5"" on the curvy side. oh well. i've had so much luck with other retailer orders so i'm not too disappointed." 2023-02-07T20:04:40Z
8480    0   1   [0, 713, 2170, 473, 45, 109, 42, 16576, 2427, 4, 24, 16, 12058, 4, 959, 1437, 5, 13977, 21, 98, 650, 14, 5, 16721, 1344, 11532, 88, 127, 13977, 442, 162, 206, 9, 10, 25818, 11809, 2187, 4, 9574, 1437, 24, 21, 5, 1154, 1836, 98, 939, 64, 75, 1836, 62, 4, 939, 437, 204, 108, 1225, 113, 98, 5, 5933, 21, 1969, 111, 24, 376, 7, 235, 1065, 127, 15145, 4, 939, 657, 5, 16576, 98, 203, 14, 939, 437, 2811, 11356, 366, 27345, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] "This picture does not do this skirt justice. it is gorgeous. however  the waist was so small that the sequins dug into my waist making me think of a medieval torture device. unfortunately  it was the largest size so i can't size up. i'm 4'11"" so the length was perfect - it came to right above my knees. i love the skirt so much that i'm considering liposuction."   2023-02-07T20:04:40Z
66  0   1   [0, 100, 829, 42, 6399, 11, 127, 6097, 3023, 29, 8, 24, 10698, 6683, 4, 939, 116, 119, 45, 5373, 11, 657, 19, 24, 53, 939, 67, 218, 116, 90, 28101, 4, 5, 6399, 16, 15, 5, 7174, 526, 4, 109, 939, 240, 7, 3568, 10, 740, 5602, 12213, 24, 1437, 117, 4, 127, 2212, 16, 6538, 4, 24, 473, 8736, 162, 9, 10, 1468, 14, 115, 2179, 103, 6538, 71, 103, 3568, 8, 21, 5065, 4, 19, 14, 145, 26, 939, 116, 890, 10397, 42, 6399, 11, 2569, 514, 8, 6713, 3841, 8, 5952, 14, 40, 2097, 6538, 31, 2623, 4, 5, 5933, 16, 2051, 8, 939, 109, 101, 5, 3369, 2629, 11, 760, 116, 405, 3639, 10, 410, 14548, 2, 1, 1, 1, 1, 1, 1]   I received this shirt in my typical xs and it fits perfectly. i?m not crazy in love with it but i also don?t dislike. the shirt is on the thin side. do i need to wear a cami underneath it  no. my concern is holes. it does remind me of a material that could develop some holes after some wear and washes. with that being said i?ll wash this shirt in cold water and hang dry and hopefully that will prevent holes from developing. the length is fine and i do like the slits in front?it adds a little dim    2023-02-07T20:04:40Z
10411   -1  0   [0, 100, 33, 57, 546, 23, 42, 23204, 804, 187, 24, 78, 376, 66, 8, 939, 1747, 2740, 24, 77, 24, 21, 843, 207, 160, 4, 939, 2740, 10, 1836, 475, 4716, 1459, 1437, 16748, 77, 24, 2035, 8, 939, 1381, 24, 15, 1437, 24, 21, 182, 2233, 219, 1437, 13116, 101, 1437, 8, 222, 45, 3041, 101, 24, 1415, 15, 5, 1421, 804, 98, 939, 1051, 24, 124, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I have been looking at this sweater online since it first came out and i finally ordered it when it was 40% off. i ordered a size m petite  sadly when it arrived and i tried it on  it was very boxy  stiff like  and did not flow like it looked on the model online so i sent it back.   2023-02-07T20:04:40Z</code></pre>
</div>
</div>
<div class="cell" data-outputid="dfa07e96-7f91-4be6-afdc-e98a520bce67">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
4815    0   1   [0, 100, 300, 5, 1275, 1437, 61, 21, 765, 30145, 5202, 4, 5, 6399, 1495, 21, 98, 11962, 1437, 53, 5, 2564, 16, 182, 2233, 219, 4, 939, 300, 10, 650, 8, 24, 21, 169, 350, 1810, 4, 444, 6012, 8, 10941, 11, 5, 13977, 87, 5, 2170, 924, 4, 939, 524, 5074, 7, 671, 1437, 53, 24, 817, 162, 356, 101, 10, 3925, 4, 36, 43882, 14, 16, 43, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I got the red  which was short sleeved. the shirt itself was so cute  but the fit is very boxy. i got a small and it was way too wide. far wider and shorter in the waist than the picture shows. i am sad to return  but it makes me look like a square. (shape that is)   2023-02-07T20:04:40Z
1933    1   2   [0, 1708, 5, 124, 9, 24, 1437, 30, 5, 13977, 1437, 15713, 5559, 95, 10, 5262, 828, 4, 114, 939, 120, 2671, 1437, 24, 40, 28, 350, 251, 4, 53, 939, 657, 5, 16576, 1437, 24, 16, 34203, 8, 11962, 4, 45, 24, 17414, 13, 162, 190, 114, 5, 1270, 161, 24787, 4, 939, 2740, 5, 16273, 642, 8, 5, 5933, 16, 1256, 203, 25, 7092, 1437, 95, 874, 5, 4117, 11, 760, 4, 5, 13977, 16, 41783, 1437, 2671, 24, 74, 1136, 55, 15, 127, 28097, 36, 2457, 1755, 5, 350, 251, 1129, 656, 4, 36, 15314, 23246, 1437, 973, 12, 2518, 11, 13977, 1437, 765, 5856, 41137, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   But the back of it  by the waist  bunches just a tiny bit. if i get bigger  it will be too long. but i love the skirt  it is flattering and cute. not itchy for me even if the title says wool. i ordered the 00p and the length is pretty much as pictured  just below the knee in front. the waist is snug  bigger it would fall more on my hips (hence the too long comment earlier. (115 lbs  26-27 in waist  short legs...)    2023-02-07T20:04:40Z
14029   -1  0   [0, 100, 269, 657, 5, 6184, 8, 5, 356, 15, 5, 1421, 1437, 8, 939, 802, 939, 74, 657, 24, 4, 939, 2740, 804, 1437, 98, 939, 222, 45, 860, 15, 11, 1400, 4, 77, 939, 1381, 24, 15, 1437, 24, 34, 169, 350, 203, 10199, 198, 5, 13977, 8, 16576, 4, 24, 16, 7992, 10199, 25, 157, 1437, 8, 34, 10, 14187, 1437, 8, 5, 13977, 34, 1823, 10199, 13, 5, 1521, 1437, 8, 24, 34, 12189, 1437, 98, 24, 70, 3639, 62, 7, 28, 169, 350, 35156, 4, 24, 16, 45, 34203, 23, 70, 8, 156, 162, 356, 158, 2697, 19351, 4, 939, 524, 3357, 42, 3588, 4, 5074, 1437, 142, 24, 1326, 98, 9869, 15, 5, 1421, 4, 939, 524, 2, 1, 1, 1, 1] I really love the pattern and the look on the model  and i thought i would love it. i ordered online  so i did not try on in store. when i tried it on  it has way too much fabric around the waist and skirt. it is thick fabric as well  and has a lining  and the waist has extra fabric for the design  and it has pockets  so it all adds up to be way too bulky. it is not flattering at all and made me look 10 pounds heavier. i am returning this dress. sad  because it looks so lovely on the model. i am    2023-02-07T20:04:40Z
10468   0   1   [0, 713, 6966, 18605, 16, 182, 157, 156, 8, 190, 39083, 906, 11, 621, 4, 939, 437, 195, 108, 398, 113, 8, 59, 17445, 2697, 4, 939, 2333, 3568, 10, 1836, 231, 4, 939, 3568, 10, 2631, 417, 11689, 4, 939, 303, 5, 3235, 7, 422, 10, 828, 650, 4, 939, 1835, 24, 142, 1437, 1135, 141, 203, 939, 6640, 5, 2496, 1437, 24, 95, 938, 75, 34203, 15, 127, 809, 1907, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]    "This swimsuit is very well made and even prettier in person. i'm 5'8"" and about 145 pounds. i usually wear a size 6. i wear a 34d bra. i found the suit to run a bit small. i returned it because  despite how much i liked the style  it just wasn't flattering on my body type."    2023-02-07T20:04:40Z</code></pre>
</div>
</div>
</section>
<section id="query-the-feature-store" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="query-the-feature-store"><span class="header-section-number">7</span> Query the Feature Store</h2>
<p>In addition to transforming the data and saving in S3 bucket, the processing job populates the feature store with the transformed and balanced data. Let’s query this data using Amazon Athena.</p>
<section id="export-training-validation-and-test-datasets-from-the-feature-store" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="export-training-validation-and-test-datasets-from-the-feature-store"><span class="header-section-number">7.1</span> Export training, validation, and test datasets from the Feature Store</h3>
<p>Here we will do the export only for the training dataset, as an example.</p>
<p>We will use the <code>athena_query()</code> function to create an Athena query for the defined above Feature Group. Then we can pull the table name of the Amazon Glue Data Catalog table which is auto-generated by Feature Store.</p>
<div class="cell" data-outputid="5d8077d0-a8b9-4e3a-920c-643ba37e4265">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">feature_store_query <span class="op" style="color: #5E5E5E;">=</span> feature_group.athena_query()</span>
<span id="cb44-2"></span>
<span id="cb44-3">feature_store_table <span class="op" style="color: #5E5E5E;">=</span> feature_store_query.table_name</span>
<span id="cb44-4"></span>
<span id="cb44-5">query_string <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb44-6"><span class="st" style="color: #20794D;">    SELECT date,</span></span>
<span id="cb44-7"><span class="st" style="color: #20794D;">        review_id,</span></span>
<span id="cb44-8"><span class="st" style="color: #20794D;">        sentiment, </span></span>
<span id="cb44-9"><span class="st" style="color: #20794D;">        label_id,</span></span>
<span id="cb44-10"><span class="st" style="color: #20794D;">        input_ids,</span></span>
<span id="cb44-11"><span class="st" style="color: #20794D;">        review_body</span></span>
<span id="cb44-12"><span class="st" style="color: #20794D;">    FROM "</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">" </span></span>
<span id="cb44-13"><span class="st" style="color: #20794D;">    WHERE split_type='train' </span></span>
<span id="cb44-14"><span class="st" style="color: #20794D;">    LIMIT 5</span></span>
<span id="cb44-15"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(feature_store_table)</span>
<span id="cb44-16"></span>
<span id="cb44-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Glue Catalog table name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_store_table))</span>
<span id="cb44-18"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Running query: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(query_string))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Glue Catalog table name: reviews-feature-group-1675799708-1675800251
Running query: 
    SELECT date,
        review_id,
        sentiment, 
        label_id,
        input_ids,
        review_body
    FROM "reviews-feature-group-1675799708-1675800251" 
    WHERE split_type='train' 
    LIMIT 5
</code></pre>
</div>
</div>
<p>Now we configure the S3 location for the query results. This allows us to re-use the query results for future queries if the data has not changed. We can even share this S3 location between team members to improve query performance for common queries on data that does not change often.</p>
<div class="cell" data-outputid="16e5dec6-907f-4617-c5b1-77c508a60490">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/query_results/</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/'</span>.<span class="bu" style="color: null;">format</span>(bucket, feature_store_offline_prefix)</span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(output_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-951182689916/query_results/reviews-feature-store-1675799708/</code></pre>
</div>
</div>
<p>Let’s query the feature store.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">feature_store_query.run(</span>
<span id="cb48-2">    query_string<span class="op" style="color: #5E5E5E;">=</span>query_string,</span>
<span id="cb48-3">    output_location<span class="op" style="color: #5E5E5E;">=</span>output_s3_uri </span>
<span id="cb48-4">)</span>
<span id="cb48-5"></span>
<span id="cb48-6">feature_store_query.wait()</span></code></pre></div>
</div>
<div class="cell" data-outputid="94020c99-585a-4aff-dd74-d988b35e3177">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb49-2">pd.set_option(<span class="st" style="color: #20794D;">"max_colwidth"</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb49-3"></span>
<span id="cb49-4">df_feature_store <span class="op" style="color: #5E5E5E;">=</span> feature_store_query.as_dataframe()</span>
<span id="cb49-5">df_feature_store</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>date</th>
      <th>review_id</th>
      <th>sentiment</th>
      <th>label_id</th>
      <th>input_ids</th>
      <th>review_body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>3151</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 17425, 27941, 181, 267, 1318, 4, 939, 33, 10, 5342, 7174, 5120, 8, 42, 10601, 15, 162, 101, ...</td>
      <td>Definitely pj quality. i have a fairly thin frame and this hung on me like a tent. and it's very...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>2313</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 713, 16, 10, 182, 11962, 3588, 4, 24, 21, 1969, 137, 939, 15158, 24, 4, 5, 1272, 939, 56, 71...</td>
      <td>This is a very cute dress. it was perfect before i washed it. the problems i had after washing i...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>10378</td>
      <td>1</td>
      <td>2</td>
      <td>[0, 100, 2162, 5, 10521, 1437, 61, 16, 10, 12058, 3195, 4, 939, 101, 5, 251, 5933, 11, 5, 3701, ...</td>
      <td>I bought the grey  which is a gorgeous color. i like the long length in the arms (though i tried...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>13251</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 37396, 299, 804, 111, 8578, 11, 621, 4, 1237, 650, 1437, 941, 15, 2576, 23385, 1902, 4, 802,...</td>
      <td>Pretty top online - okay in person. runs small  especially on bottom hemline. thought it would h...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>9286</td>
      <td>-1</td>
      <td>0</td>
      <td>[0, 713, 299, 16, 2721, 804, 8, 11, 621, 4, 939, 524, 11, 117, 169, 10, 739, 455, 11464, 22101, ...</td>
      <td>This top is beautiful online and in person. i am in no way a large full figured gal  but i did o...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="export-tsv-from-feature-store" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="export-tsv-from-feature-store"><span class="header-section-number">7.2</span> Export TSV from Feature Store</h3>
<p>Save the output as a TSV file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">df_feature_store.to_csv(<span class="st" style="color: #20794D;">'./feature_store_export.tsv'</span>,</span>
<span id="cb50-2">                        sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">'</span>,</span>
<span id="cb50-3">                        index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-4">                        header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="16035dde-6294-4b65-dbf0-bd405e1f1645">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>date    review_id   sentiment   label_id    input_ids   review_body
2023-02-07T20:04:40Z    3151    0   1   [0, 17425, 27941, 181, 267, 1318, 4, 939, 33, 10, 5342, 7174, 5120, 8, 42, 10601, 15, 162, 101, 10, 10178, 4, 8, 24, 18, 182, 7174, 1437, 98, 24, 1364, 25, 10, 6966, 1719, 1437, 53, 2299, 45, 10, 3588, 13, 932, 1493, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]    Definitely pj quality. i have a fairly thin frame and this hung on me like a tent. and it's very thin  so it works as a swim cover  but definitely not a dress for anything else.
2023-02-07T20:04:40Z    2313    0   1   [0, 713, 16, 10, 182, 11962, 3588, 4, 24, 21, 1969, 137, 939, 15158, 24, 4, 5, 1272, 939, 56, 71, 14784, 24, 21, 5, 15705, 13178, 10490, 9, 5, 3588, 28704, 5933, 11036, 150, 5, 1025, 909, 14187, 222, 45, 1437, 98, 5, 909, 14187, 3723, 15390, 66, 10, 205, 10468, 50, 80, 4, 8, 187, 5, 3588, 16, 10941, 939, 64, 75, 269, 3568, 24, 396, 634, 741, 17625, 13344, 1437, 941, 13, 5, 124, 9, 5, 3588, 187, 24, 18, 10941, 89, 8, 114, 939, 18822, 81, 47, 115, 192, 960, 4, 939, 437, 98, 5779, 11, 5, 1318, 142, 24, 16, 10, 182, 11962, 1437, 4342, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  This is a very cute dress. it was perfect before i washed it. the problems i had after washing it was the outer cotton layer of the dress shrunk length wise while the inside black lining did not  so the black lining peeks out a good inch or two. and since the dress is shorter i can't really wear it without using biker shorts  especially for the back of the dress since it's shorter there and if i bent over you could see everything. i'm so disappointed in the quality because it is a very cute  ver
2023-02-07T20:04:40Z    10378   1   2   [0, 100, 2162, 5, 10521, 1437, 61, 16, 10, 12058, 3195, 4, 939, 101, 5, 251, 5933, 11, 5, 3701, 36, 18401, 939, 1381, 24, 15, 11, 430, 8089, 8, 5, 3124, 5933, 222, 182, 322, 3793, 8, 1256, 4, 939, 101, 5, 5933, 4, 5, 124, 473, 14902, 15673, 1437, 53, 939, 202, 101, 5, 6399, 4, 24, 18, 7082, 1437, 9881, 8, 34203, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I bought the grey  which is a gorgeous color. i like the long length in the arms (though i tried it on in different colors and the arm length did very). soft and pretty. i like the length. the back does wrinkle  but i still like the shirt. it's loose  casual and flattering.
2023-02-07T20:04:40Z    13251   0   1   [0, 37396, 299, 804, 111, 8578, 11, 621, 4, 1237, 650, 1437, 941, 15, 2576, 23385, 1902, 4, 802, 24, 74, 33, 10, 7021, 7, 24, 4, 24, 473, 45, 4, 55, 11708, 11, 621, 87, 939, 802, 24, 74, 28, 4, 14, 1979, 75, 912, 162, 31, 2396, 24, 600, 4, 24, 21, 5, 169, 24, 4976, 15, 127, 7050, 14, 21, 29747, 24203, 4, 1415, 101, 939, 21, 2498, 10, 741, 1452, 4, 939, 218, 75, 33, 10, 739, 7050, 1437, 95, 7735, 356, 15, 162, 4, 9327, 1437, 142, 24, 16, 41, 15652, 5780, 4, 299, 156, 13, 29284, 50, 10, 4716, 1459, 6429, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  Pretty top online - okay in person. runs small  especially on bottom hemline. thought it would have a swing to it. it does not. more sheer in person than i thought it would be. that wouldn't stop me from keeping it though. it was the way it laid on my chest that was unflattering. looked like i was wearing a bib. i don't have a large chest  just weird look on me. unfortunate  because it is an adorable print. top made for thinner or a petite lady.</code></pre>
</div>
</div>
<p>Upload TSV to the S3 bucket:</p>
<div class="cell" data-outputid="57290246-f471-4e48-b0e5-1b2a681773b8">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp .<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>feature_store<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: ./feature_store_export.tsv to s3://sagemaker-us-east-1-951182689916/feature_store/feature_store_export.tsv</code></pre>
</div>
</div>
<p>Check the file in the S3 bucket:</p>
<div class="cell" data-outputid="5640ed9c-5bee-410e-c22b-c1097ba6fb6b">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>feature_store<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:11:18       4714 feature_store/feature_store_export.tsv</code></pre>
</div>
</div>
</section>
<section id="check-that-the-dataset-in-the-feature-store-is-balanced-by-sentiment" class="level3" data-number="7.3">
<h3 data-number="7.3" class="anchored" data-anchor-id="check-that-the-dataset-in-the-feature-store-is-balanced-by-sentiment"><span class="header-section-number">7.3</span> Check that the dataset in the Feature Store is balanced by sentiment</h3>
<p>Now we can setup an Athena query to check that the stored dataset is balanced by the target class <code>sentiment</code>.</p>
<p>We will rrite an SQL query to count the total number of the reviews per <code>sentiment</code> stored in the Feature Group.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">feature_store_query_2 <span class="op" style="color: #5E5E5E;">=</span> feature_group.athena_query()</span>
<span id="cb57-2"></span>
<span id="cb57-3">query_string_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb57-4"><span class="st" style="color: #20794D;">SELECT sentiment, COUNT(*) AS count_reviews</span></span>
<span id="cb57-5"><span class="st" style="color: #20794D;">FROM "</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb57-6"><span class="st" style="color: #20794D;">GROUP BY sentiment</span></span>
<span id="cb57-7"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(feature_store_table)</span></code></pre></div>
</div>
<p>Now we query the feature store.</p>
<div class="cell" data-outputid="d812a8f3-720c-401a-9cd5-553a467cf07f">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">feature_store_query_2.run(</span>
<span id="cb58-2">    query_string<span class="op" style="color: #5E5E5E;">=</span>query_string_count_by_sentiment, </span>
<span id="cb58-3">    output_location<span class="op" style="color: #5E5E5E;">=</span>output_s3_uri </span>
<span id="cb58-4">)</span>
<span id="cb58-5"></span>
<span id="cb58-6">feature_store_query_2.wait()</span>
<span id="cb58-7"></span>
<span id="cb58-8">df_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> feature_store_query_2.as_dataframe()</span>
<span id="cb58-9">df_count_by_sentiment</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>count_reviews</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>2051</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>2051</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>2051</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s visualize the result of the query in the bar plot, showing the count of the reviews by sentiment value.</p>
<div class="cell" data-outputid="e4ec7bc7-058d-4ec5-be1c-d4cac2bc3728">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb59-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb59-3"></span>
<span id="cb59-4">sns.barplot(</span>
<span id="cb59-5">    data<span class="op" style="color: #5E5E5E;">=</span>df_count_by_sentiment, </span>
<span id="cb59-6">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb59-7">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_reviews'</span>, </span>
<span id="cb59-8">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span></span>
<span id="cb59-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9c4f4c9710&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store_files/figure-html/cell-36-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">8</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Creating a Sentiment Analysis Text Classification Model using AWS SageMaker BlazingText</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="https://livingdatalab.com/categories/#aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it could help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will use the AWS SageMaker BlazingText built-in deep learning model to predict the sentiment for customer text reviews. The model will analyze customer feedback and classify the messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>The dataset we will use is the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>In my <a href="https://livingdatalab.com/aws/cloud-data-science/natural-language-processing/2023/02/05/train-model-aws-sagemaker-autopilot.html">previous article</a> we saw how you could use AWS Sagemaker Autopilot (an AutoML method) to automatically choose an appropriate model and perform all the required steps of the Data Science workflow.</p>
<p>But sometimes, we may need to go beyond AutoML and do more customisation and human selection for the Data Science workflow, and even between AutoML and fully customised Models, there are a range of choices in between for example from most to least automated methods we could have:</p>
<ol type="1">
<li>AWS Sagemaker Autopilot (AutoML)</li>
<li>AWS Sagemaker Built-in Algorithms</li>
<li>AWS Sagemaker Bring your own script (import and define your own models)</li>
<li>AWS Sagemaker Bring your own container (i.e.&nbsp;docker image with models &amp; environment)</li>
</ol>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_built_in.png" title="AWS Degrees of Automation" class="img-fluid"></p>
<p>And of course, there are various pros and cons for each of the options for most automated to most customised.</p>
<p>So when would we use built-in algorithms? What would be the advantages for this?</p>
<ul>
<li>Implementations are highly-optimized and scalable</li>
<li>Focus more on domain-specific tasks rather than managing low-level model code and infrastructure</li>
<li>Trained model can be downloaded and re-used elsewhere</li>
</ul>
<p>So as mentioned previously we will be using the BlazingText built in deep learning language model. BlazingText is a variant of FastText which is based on word2vec created by the AWS team in 2017.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_lang_model_history.png" title="Deep Leaning Language Model History" class="img-fluid"></p>
<p>Key aspects of BlazingText are:</p>
<ul>
<li>Scales and accelerates Word2Vec using multiple CPUs or GPUs for training</li>
<li>Extends FastText to use GPU acceleration with custom CUDA kernels</li>
<li>Creates n-gram embeddings using CBOW and skip-gram</li>
<li>Saves money by early-stopping a training job when the validation accuracy stops increasing</li>
<li>Optimized I/O for datasets stored in Amazon S3</li>
</ul>
<p>For more information on BlazingText, see the documentation here: https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext.html</p>
<p>Let’s now install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w4'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-14">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-15"></span>
<span id="cb1-16">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-17">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-18"></span>
<span id="cb1-19">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-20">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-21">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="prepare-dataset" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="prepare-dataset"><span class="header-section-number">2</span> Prepare dataset</h2>
<p>Let’s adapt the dataset into a format that BlazingText understands. The BlazingText format is as follows:</p>
<pre><code>__label__&lt;label&gt; "&lt;features&gt;"</code></pre>
<p>Here are some examples:</p>
<pre><code>__label__-1 "this is bad"
__label__0 "this is ok"
__label__1 "this is great"</code></pre>
<p>Sentiment is one of three classes: negative (-1), neutral (0), or positive (1). BlazingText requires that <code>__label__</code> is prepended to each sentiment value.</p>
<p>We will tokenize the <code>review_body</code> with the Natural Language Toolkit (<code>nltk</code>) for the model training. We will also use <code>nltk</code> later to tokenize reviews to use as inputs to the deployed model.</p>
<section id="load-the-dataset" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="load-the-dataset"><span class="header-section-number">2.1</span> Load the dataset</h3>
<p>Upload the dataset into the Pandas dataframe:</p>
<div class="cell" data-outputid="34df5410-2390-4657-b19f-246e9c5fe266">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv to ./womens_clothing_ecommerce_reviews_balanced.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="0fd0d00a-5727-48e3-eb67-bb08b771cd5a">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb7-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1</td>
      <td>This suit did nothing for me. the top has zero...</td>
      <td>Swim</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Like other reviewers  i saw this dress on the ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>I wish i had read the reviews before purchasin...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>I ordered these pants in my usual size (xl) an...</td>
      <td>Legwear</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I noticed this top on one of the sales associa...</td>
      <td>Knits</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="transform-the-dataset" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="transform-the-dataset"><span class="header-section-number">2.2</span> Transform the dataset</h3>
<p>Now we will prepend <code>__label__</code> to each sentiment value and tokenize the review body using <code>nltk</code> module. Let’s import the module and download the tokenizer:</p>
<div class="cell" data-outputid="44ad1f28-d869-4615-eb2e-c8ac46c4c79a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> nltk</span>
<span id="cb8-2">nltk.download(<span class="st" style="color: #20794D;">'punkt'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package punkt to /root/nltk_data...
[nltk_data]   Unzipping tokenizers/punkt.zip.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>True</code></pre>
</div>
</div>
<p>To split a sentence into tokens we can use <code>word_tokenize</code> method. It will separate words, punctuation, and apply some stemming.</p>
<p>For example:</p>
<div class="cell" data-outputid="c70bb32b-97b3-42ec-be3d-53a7788ca2a6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">sentence <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"I'm not a fan of this product!"</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">tokens <span class="op" style="color: #5E5E5E;">=</span> nltk.word_tokenize(sentence)</span>
<span id="cb11-4"><span class="bu" style="color: null;">print</span>(tokens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['I', "'m", 'not', 'a', 'fan', 'of', 'this', 'product', '!']</code></pre>
</div>
</div>
<p>The output of word tokenization can be converted into a string separated by spaces and saved in the dataframe. The transformed sentences are prepared then for better text understending by the model.</p>
<p>Let’s define a <code>prepare_data</code> function which we will apply later to transform both training and validation datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">def</span> tokenize(review):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;"># delete commas and quotation marks, apply tokenization and join back into a string separating by spaces</span></span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">' '</span>.join([<span class="bu" style="color: null;">str</span>(token) <span class="cf" style="color: #003B4F;">for</span> token <span class="kw" style="color: #003B4F;">in</span> nltk.word_tokenize(<span class="bu" style="color: null;">str</span>(review).replace(<span class="st" style="color: #20794D;">','</span>, <span class="st" style="color: #20794D;">''</span>).replace(<span class="st" style="color: #20794D;">'"'</span>, <span class="st" style="color: #20794D;">''</span>).lower())])</span>
<span id="cb13-4">    </span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;">def</span> prepare_data(df):</span>
<span id="cb13-6">    df[<span class="st" style="color: #20794D;">'sentiment'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'sentiment'</span>].<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> sentiment : <span class="st" style="color: #20794D;">'__label__</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">str</span>(sentiment).replace(<span class="st" style="color: #20794D;">'__label__'</span>, <span class="st" style="color: #20794D;">''</span>)))</span>
<span id="cb13-7">    df[<span class="st" style="color: #20794D;">'review_body'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'review_body'</span>].<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> review : tokenize(review)) </span>
<span id="cb13-8">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<p>Test the prepared function and examine the result.</p>
<div class="cell" data-outputid="07e02f68-d47a-49d0-9623-b78450b91a6e">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># create a sample dataframe</span></span>
<span id="cb14-2">df_example <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'sentiment'</span>:[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], </span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'review_body'</span>:[</span>
<span id="cb14-5">        <span class="st" style="color: #20794D;">"I don't like this product!"</span>, </span>
<span id="cb14-6">        <span class="st" style="color: #20794D;">"this product is ok"</span>, </span>
<span id="cb14-7">        <span class="st" style="color: #20794D;">"I do like this product!"</span>]</span>
<span id="cb14-8">})</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;"># test the prepare_data function</span></span>
<span id="cb14-11"><span class="bu" style="color: null;">print</span>(prepare_data(df_example))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sentiment                   review_body
0  __label__-1  i do n't like this product !
1   __label__0            this product is ok
2   __label__1      i do like this product !</code></pre>
</div>
</div>
<p>Let’s apply the <code>prepare_data</code> function to the dataset.</p>
<div class="cell" data-outputid="671cfd5b-7e6b-49f4-c19f-fdda64e38fb9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df_blazingtext <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb16-2">df_blazingtext <span class="op" style="color: #5E5E5E;">=</span> prepare_data(df_blazingtext)</span>
<span id="cb16-3">df_blazingtext.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>__label__-1</td>
      <td>this suit did nothing for me . the top has zer...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>__label__-1</td>
      <td>like other reviewers i saw this dress on the c...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>__label__-1</td>
      <td>i wish i had read the reviews before purchasin...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>__label__-1</td>
      <td>i ordered these pants in my usual size ( xl ) ...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>__label__-1</td>
      <td>i noticed this top on one of the sales associa...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="split-the-dataset-into-train-and-validation-sets" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="split-the-dataset-into-train-and-validation-sets"><span class="header-section-number">2.3</span> Split the dataset into train and validation sets</h3>
<p>We will now split and visualize a pie chart of the train (90%) and validation (10%) sets.</p>
<div class="cell" data-outputid="4a37424f-56b0-42e8-d401-5d2c0eab7fbe">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;"># Split all data into 90% train and 10% holdout</span></span>
<span id="cb17-4">df_train, df_validation <span class="op" style="color: #5E5E5E;">=</span> train_test_split(df_blazingtext, </span>
<span id="cb17-5">                                           test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.10</span>,</span>
<span id="cb17-6">                                           stratify<span class="op" style="color: #5E5E5E;">=</span>df_blazingtext[<span class="st" style="color: #20794D;">'sentiment'</span>])</span>
<span id="cb17-7"></span>
<span id="cb17-8">labels <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'train'</span>, <span class="st" style="color: #20794D;">'validation'</span>]</span>
<span id="cb17-9">sizes <span class="op" style="color: #5E5E5E;">=</span> [<span class="bu" style="color: null;">len</span>(df_train.index), <span class="bu" style="color: null;">len</span>(df_validation.index)]</span>
<span id="cb17-10">explode <span class="op" style="color: #5E5E5E;">=</span> (<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">0</span>)  </span>
<span id="cb17-11"></span>
<span id="cb17-12">fig1, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb17-13"></span>
<span id="cb17-14">ax1.pie(sizes, explode<span class="op" style="color: #5E5E5E;">=</span>explode, labels<span class="op" style="color: #5E5E5E;">=</span>labels, autopct<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%1.1f%%</span><span class="st" style="color: #20794D;">'</span>, startangle<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;"># Equal aspect ratio ensures that pie is drawn as a circle.</span></span>
<span id="cb17-17">ax1.axis(<span class="st" style="color: #20794D;">'equal'</span>)  </span>
<span id="cb17-18"></span>
<span id="cb17-19">plt.show()</span>
<span id="cb17-20"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">len</span>(df_train))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>6399</code></pre>
</div>
</div>
<p>Save the results as CSV files.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">blazingtext_train_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./train.csv'</span></span>
<span id="cb19-2">df_train[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(blazingtext_train_path, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">blazingtext_validation_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./validation.csv'</span></span>
<span id="cb20-2">df_validation[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(blazingtext_validation_path, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span></code></pre></div>
</div>
</section>
<section id="upload-the-train-and-validation-datasets-to-s3-bucket" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="upload-the-train-and-validation-datasets-to-s3-bucket"><span class="header-section-number">2.4</span> Upload the <code>train</code> and <code>validation</code> datasets to S3 bucket</h3>
<p>We will use these to train and validate your model. Let’s save them to S3 bucket.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">train_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>blazingtext_train_path)</span>
<span id="cb21-2">validation_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>blazingtext_validation_path)</span></code></pre></div>
</div>
</section>
</section>
<section id="train-the-model" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="train-the-model"><span class="header-section-number">3</span> Train the model</h2>
<p>We will now setup the BlazingText estimator. For more information on Estimators, see the SageMaker Python SDK documentation here: https://sagemaker.readthedocs.io/.</p>
<p>We will setup the container image to use for training with the BlazingText algorithm.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb22-2">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb22-3">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext'</span> </span>
<span id="cb22-4">)</span></code></pre></div>
</div>
<p>Let’s now create an estimator instance passing the container image and other instance parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">estimator <span class="op" style="color: #5E5E5E;">=</span> sagemaker.estimator.Estimator(</span>
<span id="cb23-2">    image_uri<span class="op" style="color: #5E5E5E;">=</span>image_uri, </span>
<span id="cb23-3">    role<span class="op" style="color: #5E5E5E;">=</span>role, </span>
<span id="cb23-4">    instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb23-5">    instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb23-6">    volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb23-7">    max_run<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span>,</span>
<span id="cb23-8">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb23-9">)</span></code></pre></div>
</div>
<p>Now we need to configure the hyper-parameters for BlazingText. In our case we are using BlazingText for a supervised classification task.</p>
<p>Information on the hyper-parameters can be found in the documentation here: https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html</p>
<p>The hyperparameters that have the greatest impact on word2vec objective metrics are: <code>learning_rate</code> and <code>vector_dim</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">estimator.set_hyperparameters(mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'supervised'</span>,   <span class="co" style="color: #5E5E5E;"># supervised (text classification)</span></span>
<span id="cb24-2">                              epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>,           <span class="co" style="color: #5E5E5E;"># number of complete passes through the dataset: 5 - 15</span></span>
<span id="cb24-3">                              learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>,  <span class="co" style="color: #5E5E5E;"># step size for the  numerical optimizer: 0.005 - 0.01</span></span>
<span id="cb24-4">                              min_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,         <span class="co" style="color: #5E5E5E;"># discard words that appear less than this number: 0 - 100                              </span></span>
<span id="cb24-5">                              vector_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">300</span>,      <span class="co" style="color: #5E5E5E;"># number of dimensions in vector space: 32-300</span></span>
<span id="cb24-6">                              word_ngrams<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)       <span class="co" style="color: #5E5E5E;"># number of words in a word n-gram: 1 - 3</span></span></code></pre></div>
</div>
<p>To call the <code>fit</code> method for the created estimator instance we need to setup the input data channels. This can be organized as a dictionary</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb25-2">    <span class="st" style="color: #20794D;">'train'</span>: ..., <span class="co" style="color: #5E5E5E;"># training data</span></span>
<span id="cb25-3">    <span class="st" style="color: #20794D;">'validation'</span>: ... <span class="co" style="color: #5E5E5E;"># validation data</span></span>
<span id="cb25-4">}</span></code></pre></div>
<p>where training and validation data are the Amazon SageMaker channels for S3 input data sources.</p>
<p>Let’s create a train data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">train_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb26-2">    train_s3_uri, </span>
<span id="cb26-3">    distribution<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FullyReplicated'</span>, </span>
<span id="cb26-4">    content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/plain'</span>, </span>
<span id="cb26-5">    s3_data_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'S3Prefix'</span></span>
<span id="cb26-6">)</span></code></pre></div>
</div>
<p>Let’s create a validation data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">validation_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb27-2">    validation_s3_uri, </span>
<span id="cb27-3">    distribution<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FullyReplicated'</span>, </span>
<span id="cb27-4">    content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/plain'</span>, </span>
<span id="cb27-5">    s3_data_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'S3Prefix'</span></span>
<span id="cb27-6">)</span></code></pre></div>
</div>
<p>Let’s now organize the data channels defined above as a dictionary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb28-2">    <span class="st" style="color: #20794D;">'train'</span>: train_data, </span>
<span id="cb28-3">    <span class="st" style="color: #20794D;">'validation'</span>: validation_data </span>
<span id="cb28-4">}</span></code></pre></div>
</div>
<p>We will now start fitting the model to the dataset.</p>
<p>To do this we call the <code>fit</code> method of the estimator passing the configured train and validation inputs (data channels).</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">estimator.fit(</span>
<span id="cb29-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>..., <span class="co" style="color: #5E5E5E;"># train and validation input</span></span>
<span id="cb29-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># do not wait for the job to complete before continuing</span></span>
<span id="cb29-4">)</span></code></pre></div>
<div class="cell" data-outputid="5c73b989-aaef-4d66-a97a-071d5224e40e">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">estimator.fit(</span>
<span id="cb30-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb30-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb30-4">)</span>
<span id="cb30-5"></span>
<span id="cb30-6">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.name</span>
<span id="cb30-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job Name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job Name:  blazingtext-2023-02-06-12-48-14-823</code></pre>
</div>
</div>
<p>Let’s setup a watcher while we wait for the training job to complete.</p>
<div class="cell" data-outputid="ec783304-328a-45ae-acf2-366fa3db6a16">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb32-2"></span>
<span id="cb32-3">estimator.latest_training_job.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
2023-02-06 12:48:16 Starting - Starting the training job.........
2023-02-06 12:49:15 Starting - Preparing the instances for training..
2023-02-06 12:49:30 Downloading - Downloading input data.......
2023-02-06 12:50:10 Training - Downloading the training image..
2023-02-06 12:50:26 Training - Training image download completed. Training in progress.......
2023-02-06 12:51:02 Uploading - Uploading generated training model....................................................................
2023-02-06 12:56:53 Completed - Training job completed
CPU times: user 470 ms, sys: 76.5 ms, total: 547 ms
Wall time: 8min 28s</code></pre>
</div>
</div>
<p>Let’s now review the train and validation accuracy.</p>
<div class="cell" data-outputid="66ccfcce-3320-4916-9a33-163c920e81e9">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">estimator.training_job_analytics.dataframe()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: No metrics called train:mean_rho found</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>timestamp</th>
      <th>metric_name</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>train:accuracy</td>
      <td>0.5456</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.0</td>
      <td>validation:accuracy</td>
      <td>0.5021</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="deploy-the-model" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="deploy-the-model"><span class="header-section-number">4</span> Deploy the model</h2>
<p>Now lets deploy the trained model as an Endpoint.</p>
<div class="cell" data-outputid="81abb496-0741-4167-eb6d-4b97b85b78e4">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb36-2"></span>
<span id="cb36-3">text_classifier <span class="op" style="color: #5E5E5E;">=</span> estimator.deploy(initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb36-4">                                   instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb36-5">                                   serializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.serializers.JSONSerializer(),</span>
<span id="cb36-6">                                   deserializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.deserializers.JSONDeserializer())</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb36-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(text_classifier.endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-----!
Endpoint name:  blazingtext-2023-02-06-12-56-55-806
CPU times: user 124 ms, sys: 4.38 ms, total: 128 ms
Wall time: 2min 32s</code></pre>
</div>
</div>
</section>
<section id="test-the-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="test-the-model"><span class="header-section-number">5</span> Test the model</h2>
<p>Let’s now test the model to see if it makes reasonable predictions.</p>
<p>We need to import the <code>nltk</code> library to convert the raw reviews into tokens that BlazingText recognizes.</p>
<div class="cell" data-outputid="e58ccf0a-00bc-4b85-9dfe-3329f6f2528b">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">import</span> nltk</span>
<span id="cb38-2">nltk.download(<span class="st" style="color: #20794D;">'punkt'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package punkt to /root/nltk_data...
[nltk_data]   Package punkt is already up-to-date!</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>True</code></pre>
</div>
</div>
<p>Then we need to specify sample reviews to predict the sentiment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">reviews <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'This product is great!'</span>,</span>
<span id="cb41-2">           <span class="st" style="color: #20794D;">'OK, but not great'</span>,</span>
<span id="cb41-3">           <span class="st" style="color: #20794D;">'This is not the right product.'</span>] </span></code></pre></div>
</div>
<p>Next we tokenize the reviews and specify the payload to use when calling the REST API.</p>
<div class="cell" data-outputid="b5bae882-80a2-4667-a11f-89b0487e45d3">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">tokenized_reviews <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">' '</span>.join(nltk.word_tokenize(review)) <span class="cf" style="color: #003B4F;">for</span> review <span class="kw" style="color: #003B4F;">in</span> reviews]</span>
<span id="cb42-2"></span>
<span id="cb42-3">payload <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"instances"</span> : tokenized_reviews}</span>
<span id="cb42-4"><span class="bu" style="color: null;">print</span>(payload)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'instances': ['This product is great !', 'OK , but not great', 'This is not the right product .']}</code></pre>
</div>
</div>
<p>Now we can predict the sentiment for each review. Calling the <code>predict</code> method of the text classifier passing the tokenized sentence instances (<code>payload</code>) into the data argument.</p>
<div class="cell" data-outputid="46ce1f0a-67ac-44cc-ebe1-5fd7c02cd7f3">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">predictions <span class="op" style="color: #5E5E5E;">=</span> text_classifier.predict(data<span class="op" style="color: #5E5E5E;">=</span>payload)</span>
<span id="cb44-2"><span class="cf" style="color: #003B4F;">for</span> prediction <span class="kw" style="color: #003B4F;">in</span> predictions:</span>
<span id="cb44-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Predicted class: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(prediction[<span class="st" style="color: #20794D;">'label'</span>][<span class="dv" style="color: #AD0000;">0</span>].lstrip(<span class="st" style="color: #20794D;">'__label__'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class: 1
Predicted class: -1
Predicted class: -1</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">6</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext.html</guid>
  <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Train a model quickly with Amazon SageMaker Autopilot</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-05-train-model-aws-sagemaker-autopilot.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article we introduced AWS cloud services for data science</a>, and how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article, we will use <strong>Amazon Sagemaker Autopilot</strong> to train a natural language processing (NLP) model. The model will analyze customer feedback and classify the messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>Amazon SageMaker Autopilot automatically trains and tunes the best machine learning models for classification or regression, based on your data while allowing to maintain full control and visibility.</p>
<p>SageMaker Autopilot is an example of <strong>AutoML</strong>, much like <a href="https://livingdatalab.com/categories/#pycaret">Pycaret</a> which I have written about previously. In comparison, not only is Autopilot even more automated than Pycaret, it is also designed to work at large scale as is possible with <a href="https://livingdatalab.com/categories/#cloud-data-science">cloud data science solutions</a>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl.png" title="Amazon Sagemaker Autopilot - Solutions" class="img-fluid"></p>
<p>SageMaker Autopilot will inspect the raw dataset, apply feature processors, pick the best set of algorithms, train and tune multiple models, and then rank the models based on performance - all with just a few clicks. Autopilot transparently generates a set of Python scripts and notebooks for a complete end-to-end pipeline including data analysis, candidate generation, feature engineering, and model training/tuning.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl2.png" title="Amazon Sagemaker Autopilot - Details" class="img-fluid"></p>
<p>SageMaker Autopilot job consists of the following high-level steps: * <em>Data analysis</em> where the data is summarized and analyzed to determine which feature engineering techniques, hyper-parameters, and models to explore. * <em>Feature engineering</em> where the data is scrubbed, balanced, combined, and split into train and validation. * <em>Model training and tuning</em> where the top performing features, hyper-parameters, and models are selected and trained.</p>
<p>These re-usable scripts and notebooks give us full visibility into how the model candidates were created. Since Autopilot integrates natively with SageMaker Studio, we can visually explore the different models generated by SageMaker Autopilot.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl3.png" title="Amazon Sagemaker Autopilot - Overview" class="img-fluid"></p>
<p>SageMaker Autopilot can be used by people without machine learning experience to automatically train a model from a dataset. Additionally, experienced developers can use Autopilot to train a baseline model from which they can iterate and manually improve.</p>
<p>Autopilot is available through the SageMaker Studio UI and AWS Python SDK. In this project, we will use the AWS Python SDK to train a series of text-classification models and deploy the model with the highest accuracy.</p>
<p>For more details on Autopilot, please refer to this <a href="https://www.amazon.science/publications/amazon-sagemaker-autopilot-a-white-box-automl-solution-at-scale"><strong>Amazon Science Publication</strong></a>.</p>
</section>
<section id="use-case-analyze-customer-sentiment" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="use-case-analyze-customer-sentiment"><span class="header-section-number">2</span> Use case: Analyze Customer Sentiment</h2>
<p>Customer feedback appears across many channels including social media and partner websites. As a company, you want to capture this valuable product feedback to spot negative trends and improve the situation, if needed. Here we will train a model to classify the feedback messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>First, let’s install and import required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-8"></span>
<span id="cb1-9">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w3'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-12">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-13">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-14"></span>
<span id="cb1-15">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-16">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-17"></span>
<span id="cb1-18">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-19">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-20"></span>
<span id="cb1-21">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-22">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-23">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="review-transformed-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="review-transformed-dataset"><span class="header-section-number">3</span> Review transformed dataset</h2>
<p>Let’s transform the dataset into a format that Autopilot recognizes. Specifically, a comma-separated file of <code>label,features</code> as shown here:</p>
<pre><code>sentiment,review_body
-1,"this is bad"
0,"this is ok"
1,"this is great"
...</code></pre>
<p>Sentiment is one of three classes: negative (-1), neutral (0), or positive (1). Autopilot requires that the target variable, <code>sentiment</code> is first and the set of features, just <code>review_body</code> in this case, come next.</p>
<div class="cell" data-outputid="2e643d00-6040-4ae6-a4b1-2f4a51efd224">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv to ./womens_clothing_ecommerce_reviews_balanced.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="42205a63-3097-4dad-e034-b8e01f8bd90f">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb6-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1</td>
      <td>This suit did nothing for me. the top has zero...</td>
      <td>Swim</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Like other reviewers  i saw this dress on the ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>I wish i had read the reviews before purchasin...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>I ordered these pants in my usual size (xl) an...</td>
      <td>Legwear</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I noticed this top on one of the sales associa...</td>
      <td>Knits</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">path_autopilot <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">df[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(path_autopilot, </span>
<span id="cb7-4">                                        sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>, </span>
<span id="cb7-5">                                        index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="configure-the-autopilot-job" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="configure-the-autopilot-job"><span class="header-section-number">4</span> Configure the Autopilot job</h2>
<section id="upload-data-to-s3-bucket" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="upload-data-to-s3-bucket"><span class="header-section-number">4.1</span> Upload data to S3 bucket</h3>
<div class="cell" data-outputid="59b3ec83-60f1-496b-bd45-868a80710d3a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">autopilot_train_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'autopilot/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>path_autopilot)</span>
<span id="cb8-2">autopilot_train_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>'s3://sagemaker-us-east-1-491783890788/autopilot/data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'</code></pre>
</div>
</div>
<p>Check the existence of the dataset in this S3 bucket folder:</p>
<div class="cell" data-outputid="61202b74-cc95-4c4b-93b3-92194b0d4747">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $autopilot_train_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-05 14:47:43    2253749 womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv</code></pre>
</div>
</div>
</section>
<section id="s3-output-for-generated-assets" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="s3-output-for-generated-assets"><span class="header-section-number">4.2</span> S3 output for generated assets</h3>
<p>Set the S3 output path for the Autopilot outputs. This includes Jupyter notebooks (analysis), Python scripts (feature engineering), and trained models.</p>
<div class="cell" data-outputid="16db0f93-429d-49f1-9e7a-4747ef6796d6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model_output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/autopilot'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="bu" style="color: null;">print</span>(model_output_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-491783890788/autopilot</code></pre>
</div>
</div>
</section>
<section id="configure-the-autopilot-job-1" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="configure-the-autopilot-job-1"><span class="header-section-number">4.3</span> Configure the Autopilot job</h3>
<p>Let’s now create the Autopilot job name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb14-2"></span>
<span id="cb14-3">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb14-4"></span>
<span id="cb14-5">auto_ml_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'automl-dm-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span></code></pre></div>
</div>
<p>When configuring our Autopilot job, we need to specify the maximum number of candidates, <code>max_candidates</code>, to explore as well as the input/output S3 locations and target column to predict. In this case, we want to predict <code>sentiment</code> from the review text.</p>
<p>We will create an instance of the <code>sagemaker.automl.automl.AutoML</code> estimator class passing the required configuration parameters. Target attribute for predictions here is <code>sentiment</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">max_candidates <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">automl <span class="op" style="color: #5E5E5E;">=</span> sagemaker.automl.automl.AutoML(</span>
<span id="cb15-4">    target_attribute_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb15-5">    base_job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb15-6">    output_path<span class="op" style="color: #5E5E5E;">=</span>model_output_s3_uri, </span>
<span id="cb15-7">    max_candidates<span class="op" style="color: #5E5E5E;">=</span>max_candidates,</span>
<span id="cb15-8">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb15-9">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb15-10">    max_runtime_per_training_job_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1200</span>,</span>
<span id="cb15-11">    total_job_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb15-12">)</span></code></pre></div>
</div>
</section>
</section>
<section id="launch-the-autopilot-job" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="launch-the-autopilot-job"><span class="header-section-number">5</span> Launch the Autopilot job</h2>
<p>Now we call the <code>fit</code> function of the configured estimator passing the S3 bucket input data path and the Autopilot job name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">automl.fit(</span>
<span id="cb16-2">    autopilot_train_s3_uri, </span>
<span id="cb16-3">    job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb16-4">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, </span>
<span id="cb16-5">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb16-6">)</span></code></pre></div>
</div>
</section>
<section id="track-autopilot-job-progress" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="track-autopilot-job-progress"><span class="header-section-number">6</span> Track Autopilot job progress</h2>
<p>Once the Autopilot job has been launched, we can track the job progress directly from the notebook using the SDK capabilities.</p>
<section id="autopilot-job-description" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="autopilot-job-description"><span class="header-section-number">6.1</span> Autopilot job description</h3>
<p>Function <code>describe_auto_ml_job</code> of the Amazon SageMaker service returns the information about the AutoML job in dictionary format. We can review the response syntax and response elements in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html"><strong>documentation</strong></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span></code></pre></div>
</div>
</section>
<section id="autopilot-job-status" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="autopilot-job-status"><span class="header-section-number">6.2</span> Autopilot job status</h3>
<p>To track the job progress we can use two response elements: <code>AutoMLJobStatus</code> and <code>AutoMLJobSecondaryStatus</code>, which correspond to the primary (Completed | InProgress | Failed | Stopped | Stopping) and secondary (AnalyzingData | FeatureEngineering | ModelTuning etc.) job states respectively. To see if the AutoML job has started, we can check the existence of the <code>AutoMLJobStatus</code> and <code>AutoMLJobSecondaryStatus</code> elements in the job description response.</p>
<p>We will use the following scheme to track the job progress:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># check if the job is still at certain stage</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;">while</span> [check <span class="st" style="color: #20794D;">'AutoMLJobStatus'</span> <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>] <span class="kw" style="color: #003B4F;">in</span> job_description_response:</span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;"># update the job description response</span></span>
<span id="cb18-4">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(AutoMLJobName<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb18-5">    <span class="co" style="color: #5E5E5E;"># print the message the Autopilot job is in the stage ...</span></span>
<span id="cb18-6">    <span class="bu" style="color: null;">print</span>([message])</span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;"># get a time step to check the status again</span></span>
<span id="cb18-8">    sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb18-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Autopilot job complete..."</span>)</span></code></pre></div>
<div class="cell" data-outputid="d2833a5c-7825-4691-9c44-b00af74da0e0">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'AutoMLJobStatus'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys() <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys():</span>
<span id="cb19-2">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb19-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet started. Please wait. '</span>)</span>
<span id="cb19-4">    <span class="co" style="color: #5E5E5E;"># function `json.dumps` encodes JSON string for printing.</span></span>
<span id="cb19-5">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb19-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for Autopilot job to start...'</span>)</span>
<span id="cb19-7">    sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] AutoML job started.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] AutoML job started.</code></pre>
</div>
</div>
</section>
<section id="review-the-sagemaker-processing-jobs" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="review-the-sagemaker-processing-jobs"><span class="header-section-number">6.3</span> Review the SageMaker processing jobs</h3>
<p>The Autopilot creates the required SageMaker processing jobs during the run:</p>
<ul>
<li>First processing job (data splitter) checks the data sanity, performs stratified shuffling and splits the data into training and validation.</li>
<li>Second processing job (candidate generator) first streams through the data to compute statistics for the dataset. Then, uses these statistics to identify the problem type, and possible types of every column-predictor: numeric, categorical, natural language, etc.</li>
</ul>
</section>
<section id="wait-for-the-data-analysis-step-to-finish" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="wait-for-the-data-analysis-step-to-finish"><span class="header-section-number">6.4</span> Wait for the data analysis step to finish</h3>
<p>Here we will use the same scheme as above to check the completion of the data analysis step. This step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status values <code>Starting</code> and then <code>AnalyzingData</code>.</p>
<div class="cell" data-outputid="814b1f9a-e40a-4eae-9700-2f5bfe3c98da" data-scrolled="true">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb21-2"></span>
<span id="cb21-3">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb21-4">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Starting'</span>, <span class="st" style="color: #20794D;">'AnalyzingData'</span>):</span>
<span id="cb21-8">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb21-9">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb21-10">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb21-11">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb21-12">        time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb21-13">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Data analysis phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb21-14">    </span>
<span id="cb21-15"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress FeatureEngineering
[OK] Data analysis phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "FeatureEngineering",
    "AutoMLJobStatus": "InProgress",
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 14:56:15.134000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "1815",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 14:56:16 GMT",
            "x-amzn-requestid": "0faeba6e-7645-46d4-a41d-658ebc1167e8"
        },
        "HTTPStatusCode": 200,
        "RequestId": "0faeba6e-7645-46d4-a41d-658ebc1167e8",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 26.6 ms, sys: 43 µs, total: 26.7 ms
Wall time: 15.2 s</code></pre>
</div>
</div>
</section>
<section id="view-generated-notebooks" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="view-generated-notebooks"><span class="header-section-number">6.5</span> View generated notebooks</h3>
<p>Once data analysis is complete, SageMaker AutoPilot generates two notebooks: * <a href="https://nbviewer.org/github/pranath/pds/blob/main/SageMakerAutopilotDataExplorationNotebook.ipynb">Data exploration</a> * <a href="https://nbviewer.org/github/pranath/pds/blob/main/SageMakerAutopilotCandidateDefinitionNotebook.ipynb">Candidate definition</a></p>
<p>Notebooks are included in the AutoML job artifacts generated during the run. Before checking the existence of the notebooks, we can check if the artifacts have been generated.</p>
<p>We will use the status check scheme described above. The generation of artifacts can be identified by existence of <code>AutoMLJobArtifacts</code> element in the keys of the job description response.</p>
<div class="cell" data-outputid="ca0e1bec-c2ce-4006-92af-8d6948add323">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># get the information about the running Autopilot job</span></span>
<span id="cb23-2">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)  </span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;"># keep in the while loop until the Autopilot job artifacts will be generated</span></span>
<span id="cb23-5"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'AutoMLJobArtifacts'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys(): </span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;"># update the information about the running Autopilot job</span></span>
<span id="cb23-7">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb23-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet generated the artifacts. Please wait. '</span>)</span>
<span id="cb23-9">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb23-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for AutoMLJobArtifacts...'</span>)</span>
<span id="cb23-11">    time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb23-12"></span>
<span id="cb23-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] AutoMLJobArtifacts generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] AutoMLJobArtifacts generated.</code></pre>
</div>
</div>
<p>We need to wait for Autopilot to make the notebooks available.</p>
<p>We will again use the status check scheme described above. Notebooks creation can be identified by existence of <code>DataExplorationNotebookLocation</code> element in the keys of the <code>job_description_response['AutoMLJobArtifacts']</code> dictionary.</p>
<div class="cell" data-outputid="c0bb5e6e-367a-465e-8b9b-d50875e59e78">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># get the information about the running Autopilot job</span></span>
<span id="cb25-2">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;"># keep in the while loop until the notebooks will be created</span></span>
<span id="cb25-5"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'DataExplorationNotebookLocation'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobArtifacts'</span>].keys(): </span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;"># update the information about the running Autopilot job</span></span>
<span id="cb25-7">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb25-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet generated the notebooks. Please wait. '</span>)</span>
<span id="cb25-9">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb25-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for DataExplorationNotebookLocation...'</span>)</span>
<span id="cb25-11">    time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] DataExplorationNotebookLocation found.'</span>)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] DataExplorationNotebookLocation found.</code></pre>
</div>
</div>
<p>We could review the generated resources in S3 directly. We can find the notebooks in the folder <code>notebooks</code> and download them by clicking on object <code>Actions</code>/<code>Object actions</code> -&gt; <code>Download as</code>/<code>Download</code>.</p>
</section>
</section>
<section id="feature-engineering" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="feature-engineering"><span class="header-section-number">7</span> Feature engineering</h2>
<p>We will use the status check scheme described above. The feature engineering step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status value <code>FeatureEngineering</code>.</p>
<div class="cell" data-outputid="f9783f05-9391-4602-e13b-5897ee7abada" data-scrolled="true">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb27-2"></span>
<span id="cb27-3">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb27-4">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb27-5">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb27-6"><span class="bu" style="color: null;">print</span>(job_status)</span>
<span id="cb27-7"><span class="bu" style="color: null;">print</span>(job_sec_status)</span>
<span id="cb27-8"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb27-9">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'FeatureEngineering'</span>): </span>
<span id="cb27-10">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb27-11">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb27-12">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb27-13">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb27-14">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb27-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Feature engineering phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress
FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress ModelTuning
[OK] Feature engineering phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "ModelTuning",
    "AutoMLJobStatus": "InProgress",
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:04:28.632000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "1808",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 15:04:28 GMT",
            "x-amzn-requestid": "eecffe9b-ef5e-4e69-b4ca-d0b0b3a95be7"
        },
        "HTTPStatusCode": 200,
        "RequestId": "eecffe9b-ef5e-4e69-b4ca-d0b0b3a95be7",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 378 ms, sys: 49.3 ms, total: 427 ms
Wall time: 7min 7s</code></pre>
</div>
</div>
</section>
<section id="model-training-and-tuning" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="model-training-and-tuning"><span class="header-section-number">8</span> Model training and tuning</h2>
<p>We can use the status check scheme described above. the model tuning step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status value <code>ModelTuning</code>.</p>
<div class="cell" data-outputid="d2921959-8f60-49c9-e79a-17b7e0605d04" data-scrolled="true">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb29-2"></span>
<span id="cb29-3">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb29-4">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb29-5">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb29-6"><span class="bu" style="color: null;">print</span>(job_status)</span>
<span id="cb29-7"><span class="bu" style="color: null;">print</span>(job_sec_status)</span>
<span id="cb29-8"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb29-9">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'ModelTuning'</span>): </span>
<span id="cb29-10">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb29-11">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb29-12">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb29-13">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb29-14">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb29-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Model tuning phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb29-16">    </span>
<span id="cb29-17"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress
ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress MaxCandidatesReached
[OK] Model tuning phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "MaxCandidatesReached",
    "AutoMLJobStatus": "InProgress",
    "BestCandidate": {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6152600049972534
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6158699989318848
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.843940019607544
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6150500178337097
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:01+00:00",
        "EndTime": "2023-02-05 15:07:54+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6150500178337097
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:09:06.661000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "5731",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 15:09:06 GMT",
            "x-amzn-requestid": "d6af6156-cd79-4bf4-8025-52c85f36afa3"
        },
        "HTTPStatusCode": 200,
        "RequestId": "d6af6156-cd79-4bf4-8025-52c85f36afa3",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 241 ms, sys: 24.9 ms, total: 266 ms
Wall time: 4min 12s</code></pre>
</div>
</div>
<p>Finally, we can check the completion of the Autopilot job looking for the <code>Completed</code> job status.</p>
<div class="cell" data-outputid="49ad7397-10cf-4dcf-8d4c-3a8c849fc769">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb31-4"></span>
<span id="cb31-5">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb31-6">pprint(job_description_response)</span>
<span id="cb31-7">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb31-8">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb31-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_sec_status))</span>
<span id="cb31-11"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb31-12">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Completed'</span>):</span>
<span id="cb31-13">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb31-14">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb31-15">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb31-16">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_sec_status))        </span>
<span id="cb31-18">        time.sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb31-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Autopilot job completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb31-20"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb31-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-22">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AutoMLJobArn': 'arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463',
 'AutoMLJobArtifacts': {'CandidateDefinitionNotebookLocation': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb',
                        'DataExplorationNotebookLocation': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb'},
 'AutoMLJobConfig': {'CompletionCriteria': {'MaxAutoMLJobRuntimeInSeconds': 7200,
                                            'MaxCandidates': 3,
                                            'MaxRuntimePerTrainingJobInSeconds': 1200},
                     'SecurityConfig': {'EnableInterContainerTrafficEncryption': False}},
 'AutoMLJobName': 'automl-dm-1675608463',
 'AutoMLJobSecondaryStatus': 'MergingAutoMLTaskReports',
 'AutoMLJobStatus': 'InProgress',
 'BestCandidate': {'CandidateName': 'automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                   'CandidateProperties': {'CandidateMetrics': [{'MetricName': 'F1macro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'F1macro',
                                                                 'Value': 0.6152600049972534},
                                                                {'MetricName': 'PrecisionMacro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'PrecisionMacro',
                                                                 'Value': 0.6158699989318848},
                                                                {'MetricName': 'Accuracy',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'Accuracy',
                                                                 'Value': 0.6150500178337097},
                                                                {'MetricName': 'BalancedAccuracy',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'BalancedAccuracy',
                                                                 'Value': 0.6150500178337097},
                                                                {'MetricName': 'LogLoss',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'LogLoss',
                                                                 'Value': 0.843940019607544},
                                                                {'MetricName': 'RecallMacro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'RecallMacro',
                                                                 'Value': 0.6150500178337097}]},
                   'CandidateStatus': 'Completed',
                   'CandidateSteps': [{'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5',
                                       'CandidateStepName': 'automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5',
                                       'CandidateStepType': 'AWS::SageMaker::ProcessingJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a',
                                       'CandidateStepName': 'automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a',
                                       'CandidateStepType': 'AWS::SageMaker::TrainingJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd',
                                       'CandidateStepName': 'automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd',
                                       'CandidateStepType': 'AWS::SageMaker::TransformJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                                       'CandidateStepName': 'automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                                       'CandidateStepType': 'AWS::SageMaker::TrainingJob'}],
                   'CreationTime': datetime.datetime(2023, 2, 5, 15, 6, 1, tzinfo=tzlocal()),
                   'EndTime': datetime.datetime(2023, 2, 5, 15, 7, 54, tzinfo=tzlocal()),
                   'FinalAutoMLJobObjectiveMetric': {'MetricName': 'validation:accuracy',
                                                     'Value': 0.6150500178337097},
                   'InferenceContainers': [{'Environment': {'AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF': '1',
                                                            'AUTOML_TRANSFORM_MODE': 'feature-transform',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'application/x-recordio-protobuf',
                                                            'SAGEMAKER_PROGRAM': 'sagemaker_serve',
                                                            'SAGEMAKER_SUBMIT_DIRECTORY': '/opt/ml/model/code'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz'},
                                           {'Environment': {'MAX_CONTENT_LENGTH': '20971520',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'text/csv',
                                                            'SAGEMAKER_INFERENCE_OUTPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_SUPPORTED': 'predicted_label,probability,probabilities'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz'},
                                           {'Environment': {'AUTOML_TRANSFORM_MODE': 'inverse-label-transform',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'text/csv',
                                                            'SAGEMAKER_INFERENCE_INPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_OUTPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_SUPPORTED': 'predicted_label,probability,labels,probabilities',
                                                            'SAGEMAKER_PROGRAM': 'sagemaker_serve',
                                                            'SAGEMAKER_SUBMIT_DIRECTORY': '/opt/ml/model/code'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz'}],
                   'LastModifiedTime': datetime.datetime(2023, 2, 5, 15, 9, 6, 585000, tzinfo=tzlocal()),
                   'ObjectiveStatus': 'Succeeded'},
 'CreationTime': datetime.datetime(2023, 2, 5, 14, 47, 43, 853000, tzinfo=tzlocal()),
 'GenerateCandidateDefinitionsOnly': False,
 'InputDataConfig': [{'ChannelType': 'training',
                      'ContentType': 'text/csv;header=present',
                      'DataSource': {'S3DataSource': {'S3DataType': 'S3Prefix',
                                                      'S3Uri': 's3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'}},
                      'TargetAttributeName': 'sentiment'}],
 'LastModifiedTime': datetime.datetime(2023, 2, 5, 15, 9, 7, 862000, tzinfo=tzlocal()),
 'OutputDataConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-491783890788/autopilot'},
 'ResolvedAttributes': {'AutoMLJobObjective': {'MetricName': 'Accuracy'},
                        'CompletionCriteria': {'MaxAutoMLJobRuntimeInSeconds': 7200,
                                               'MaxCandidates': 3,
                                               'MaxRuntimePerTrainingJobInSeconds': 1200},
                        'ProblemType': 'MulticlassClassification'},
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '5735',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 05 Feb 2023 15:09:27 GMT',
                                      'x-amzn-requestid': '5577738e-56f0-40ea-8ae0-9f4f512ecae8'},
                      'HTTPStatusCode': 200,
                      'RequestId': '5577738e-56f0-40ea-8ae0-9f4f512ecae8',
                      'RetryAttempts': 0},
 'RoleArn': 'arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role'}
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  Completed
Secondary job status:  Completed
[OK] Autopilot job completed.

CPU times: user 719 ms, sys: 63.7 ms, total: 783 ms
Wall time: 7min 59s</code></pre>
</div>
</div>
<section id="compare-model-candidates" class="level3" data-number="8.1">
<h3 data-number="8.1" class="anchored" data-anchor-id="compare-model-candidates"><span class="header-section-number">8.1</span> Compare model candidates</h3>
<p>Once model tuning is complete, we can view all the candidates (pipeline evaluations with different hyperparameter combinations) that were explored by AutoML and sort them by their final performance metric.</p>
<p>We will list candidates generated by Autopilot sorted by accuracy from highest to lowest.</p>
<p>To do this we will use the <code>list_candidates</code> function passing the Autopilot job name <code>auto_ml_job_name</code> with the accuracy field <code>FinalObjectiveMetricValue</code>. It returns the list of candidates with the information about them.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(</span>
<span id="cb33-2">    job_name<span class="op" style="color: #5E5E5E;">=</span>..., <span class="co" style="color: #5E5E5E;"># Autopilot job name</span></span>
<span id="cb33-3">    sort_by<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'...'</span> <span class="co" style="color: #5E5E5E;"># accuracy field name</span></span>
<span id="cb33-4">)</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(</span>
<span id="cb34-2">    job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb34-3">    sort_by<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FinalObjectiveMetricValue'</span> </span>
<span id="cb34-4">)</span></code></pre></div>
</div>
<p>We can review the response syntax and response elements of the function <code>list_candidates</code> in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLCandidate.html"><strong>documentation</strong></a>. Now let’s put the candidate existence check into the loop:</p>
<div class="cell" data-outputid="de90b063-75f7-4e71-950b-77a0af2a7761">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">while</span> candidates <span class="op" style="color: #5E5E5E;">==</span> []:</span>
<span id="cb35-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb35-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating the candidates. Please wait.'</span>)</span>
<span id="cb35-4">    time.sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Candidates generated.'</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] Candidates generated.</code></pre>
</div>
</div>
<p>The information about each of the candidates is in the dictionary with the following keys:</p>
<div class="cell" data-outputid="138a0ce9-bff9-46e2-a0f7-c447f8e0244e">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;">print</span>(candidates[<span class="dv" style="color: #AD0000;">0</span>].keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['CandidateName', 'FinalAutoMLJobObjectiveMetric', 'ObjectiveStatus', 'CandidateSteps', 'CandidateStatus', 'InferenceContainers', 'CreationTime', 'EndTime', 'LastModifiedTime', 'CandidateProperties'])</code></pre>
</div>
</div>
<p><code>CandidateName</code> contains the candidate name and the <code>FinalAutoMLJobObjectiveMetric</code> element contains the metric information which can be used to identify the best candidate later. Let’s check that they were generated.</p>
<div class="cell" data-outputid="02f16f63-e28d-479f-d706-03fe90d71bd5">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'CandidateName'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> candidates[<span class="dv" style="color: #AD0000;">0</span>]:</span>
<span id="cb39-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb39-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating CandidateName. Please wait. '</span>)</span>
<span id="cb39-4">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] CandidateName generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] CandidateName generated.</code></pre>
</div>
</div>
<div class="cell" data-outputid="921a1c6b-73b3-4a1b-d268-5bfa8ad3d78b">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> candidates[<span class="dv" style="color: #AD0000;">0</span>]:</span>
<span id="cb41-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb41-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating FinalAutoMLJobObjectiveMetric. Please wait. '</span>)</span>
<span id="cb41-4">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] FinalAutoMLJobObjectiveMetric generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] FinalAutoMLJobObjectiveMetric generated.</code></pre>
</div>
</div>
<div class="cell" data-outputid="3abcb0b9-9173-4294-c91f-bf6a9ca334f9" data-scrolled="true">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;">print</span>(json.dumps(candidates, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
        "CandidateProperties": {
            "CandidateArtifactLocations": {
                "Explainability": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/explainability/output",
                "ModelInsights": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/model_monitor/output"
            },
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6152600049972534
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6158699989318848
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.843940019607544
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6150500178337097
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:01+00:00",
        "EndTime": "2023-02-05 15:07:54+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6150500178337097
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6157000064849854
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6168199777603149
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6149100065231323
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6149100065231323
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.8395400047302246
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6149100065231323
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e",
                "CandidateStepName": "automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp0-rpb-1-57a73878e9f24b9dbe23bf82b200317",
                "CandidateStepName": "automl-dm-1675608463-dpp0-rpb-1-57a73878e9f24b9dbe23bf82b200317",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:05:53+00:00",
        "EndTime": "2023-02-05 15:07:46+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6149100065231323
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp0-xgb/automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.515000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.39879000186920166
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.39879998564720154
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.3990600109100342
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.3990600109100342
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 1.2047499418258667
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.3990600109100342
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29",
                "CandidateStepName": "automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp1-csv-1-24672b27ae4440179a3b7b3070f05ec",
                "CandidateStepName": "automl-dm-1675608463-dpp1-csv-1-24672b27ae4440179a3b7b3070f05ec",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:13+00:00",
        "EndTime": "2023-02-05 15:08:50+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.3990600109100342
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp1-xgb/automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.513000+00:00",
        "ObjectiveStatus": "Succeeded"
    }
]</code></pre>
</div>
</div>
<p>You can print the names of the candidates with their metric values:</p>
<div class="cell" data-outputid="9b1e7165-6756-4011-d33c-1ff82e372aa7">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"metric "</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(candidates[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'MetricName'</span>]))</span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="cf" style="color: #003B4F;">for</span> index, candidate <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(candidates):</span>
<span id="cb45-4">    <span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">str</span>(index) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"  "</span> </span>
<span id="cb45-5">        <span class="op" style="color: #5E5E5E;">+</span> candidate[<span class="st" style="color: #20794D;">'CandidateName'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"  "</span> </span>
<span id="cb45-6">        <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'Value'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>metric validation:accuracy
0  automl-dm-1675608463sujxUg8wYQX0-002-657fba80  0.6150500178337097
1  automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b  0.6149100065231323
2  automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e  0.3990600109100342</code></pre>
</div>
</div>
</section>
<section id="review-best-candidate" class="level3" data-number="8.2">
<h3 data-number="8.2" class="anchored" data-anchor-id="review-best-candidate"><span class="header-section-number">8.2</span> Review best candidate</h3>
<p>Now that we have successfully completed the Autopilot job on the dataset and visualized the trials, we can get the information about the best candidate model and review it.</p>
<p>We can use the <code>best_candidate</code> function passing the Autopilot job name. <strong>Note</strong>: This function will give an error if candidates have not been generated.</p>
<div class="cell" data-outputid="a03972d5-a693-4093-ba59-7425af7a055a">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="cf" style="color: #003B4F;">if</span> candidates <span class="op" style="color: #5E5E5E;">!=</span> []:</span>
<span id="cb47-4">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(</span>
<span id="cb47-5">        job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name </span>
<span id="cb47-6">    )</span>
<span id="cb47-7">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
    "CandidateProperties": {
        "CandidateArtifactLocations": {
            "Explainability": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/explainability/output",
            "ModelInsights": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/model_monitor/output"
        },
        "CandidateMetrics": [
            {
                "MetricName": "F1macro",
                "Set": "Validation",
                "StandardMetricName": "F1macro",
                "Value": 0.6152600049972534
            },
            {
                "MetricName": "PrecisionMacro",
                "Set": "Validation",
                "StandardMetricName": "PrecisionMacro",
                "Value": 0.6158699989318848
            },
            {
                "MetricName": "Accuracy",
                "Set": "Validation",
                "StandardMetricName": "Accuracy",
                "Value": 0.6150500178337097
            },
            {
                "MetricName": "BalancedAccuracy",
                "Set": "Validation",
                "StandardMetricName": "BalancedAccuracy",
                "Value": 0.6150500178337097
            },
            {
                "MetricName": "LogLoss",
                "Set": "Validation",
                "StandardMetricName": "LogLoss",
                "Value": 0.843940019607544
            },
            {
                "MetricName": "RecallMacro",
                "Set": "Validation",
                "StandardMetricName": "RecallMacro",
                "Value": 0.6150500178337097
            }
        ]
    },
    "CandidateStatus": "Completed",
    "CandidateSteps": [
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
            "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
            "CandidateStepType": "AWS::SageMaker::ProcessingJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
            "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
            "CandidateStepType": "AWS::SageMaker::TrainingJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
            "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
            "CandidateStepType": "AWS::SageMaker::TransformJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
            "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
            "CandidateStepType": "AWS::SageMaker::TrainingJob"
        }
    ],
    "CreationTime": "2023-02-05 15:06:01+00:00",
    "EndTime": "2023-02-05 15:07:54+00:00",
    "FinalAutoMLJobObjectiveMetric": {
        "MetricName": "validation:accuracy",
        "Value": 0.6150500178337097
    },
    "InferenceContainers": [
        {
            "Environment": {
                "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                "AUTOML_TRANSFORM_MODE": "feature-transform",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                "SAGEMAKER_PROGRAM": "sagemaker_serve",
                "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
        },
        {
            "Environment": {
                "MAX_CONTENT_LENGTH": "20971520",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
        },
        {
            "Environment": {
                "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                "SAGEMAKER_PROGRAM": "sagemaker_serve",
                "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
    "ObjectiveStatus": "Succeeded"
}</code></pre>
</div>
</div>
<p>Check the existence of the candidate name for the best candidate.</p>
<div class="cell" data-outputid="3022057b-70ce-4f1d-beac-9a2e5d3f11e7">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'CandidateName'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> best_candidate:</span>
<span id="cb49-2">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb49-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot Job is generating BestCandidate CandidateName. Please wait. '</span>)</span>
<span id="cb49-4">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb49-5">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] BestCandidate CandidateName generated.'</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] BestCandidate CandidateName generated.</code></pre>
</div>
</div>
<p>Check the existence of the metric value for the best candidate.</p>
<div class="cell" data-outputid="74fdda50-1229-4e48-aa24-dc424b81294d">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> best_candidate:</span>
<span id="cb51-2">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb51-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot Job is generating BestCandidate FinalAutoMLJobObjectiveMetric. Please wait. '</span>)</span>
<span id="cb51-4">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb51-5">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb51-6"></span>
<span id="cb51-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] BestCandidate FinalAutoMLJobObjectiveMetric generated.'</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] BestCandidate FinalAutoMLJobObjectiveMetric generated.</code></pre>
</div>
</div>
<p>Print the information about the best candidate:</p>
<div class="cell" data-outputid="cdffee6b-633d-450d-d6f9-f39757ae553d">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">best_candidate_identifier <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'CandidateName'</span>]</span>
<span id="cb53-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Candidate name: "</span> <span class="op" style="color: #5E5E5E;">+</span> best_candidate_identifier)</span>
<span id="cb53-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Metric name: "</span> <span class="op" style="color: #5E5E5E;">+</span> best_candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'MetricName'</span>])</span>
<span id="cb53-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Metric value: "</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(best_candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'Value'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Candidate name: automl-dm-1675608463sujxUg8wYQX0-002-657fba80
Metric name: validation:accuracy
Metric value: 0.6150500178337097</code></pre>
</div>
</div>
</section>
</section>
<section id="review-all-output-in-s3-bucket" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="review-all-output-in-s3-bucket"><span class="header-section-number">9</span> Review all output in S3 bucket</h2>
<p>We can see the artifacts generated by Autopilot including the following:</p>
<pre><code>data-processor-models/        # "models" learned to transform raw data into features 
documentation/                # explainability and other documentation about your model
preprocessed-data/            # data for train and validation
sagemaker-automl-candidates/  # candidate models which autopilot compares
transformed-data/             # candidate-specific data for train and validation
tuning/                       # candidate-specific tuning results
validations/                  # validation results</code></pre>
</section>
<section id="deploy-and-test-best-candidate-model" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="deploy-and-test-best-candidate-model"><span class="header-section-number">10</span> Deploy and test best candidate model</h2>
<section id="deploy-best-candidate-model" class="level3" data-number="10.1">
<h3 data-number="10.1" class="anchored" data-anchor-id="deploy-best-candidate-model"><span class="header-section-number">10.1</span> Deploy best candidate model</h3>
<p>While batch transformations are supported, we will deploy our model as a REST Endpoint in this example.</p>
<p>First, we need to customize the inference response. The inference containers generated by SageMaker Autopilot allow you to select the response content for predictions. By default the inference containers are configured to generate the <code>predicted_label</code>. But we can add <code>probability</code> into the list of inference response keys.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">inference_response_keys <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'predicted_label'</span>, <span class="st" style="color: #20794D;">'probability'</span>]</span></code></pre></div>
</div>
<p>Now we will create a SageMaker endpoint from the best candidate generated by Autopilot. Wait for SageMaker to deploy the endpoint.</p>
<div class="cell" data-outputid="5f61b43c-9f4e-4371-c77f-7c11ea0844f6">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">autopilot_model <span class="op" style="color: #5E5E5E;">=</span> automl.deploy(</span>
<span id="cb57-2">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb57-3">    instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb57-4">    candidate<span class="op" style="color: #5E5E5E;">=</span>best_candidate,</span>
<span id="cb57-5">    inference_response_keys<span class="op" style="color: #5E5E5E;">=</span>inference_response_keys,</span>
<span id="cb57-6">    predictor_cls<span class="op" style="color: #5E5E5E;">=</span>sagemaker.predictor.Predictor,</span>
<span id="cb57-7">    serializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.serializers.JSONSerializer(),</span>
<span id="cb57-8">    deserializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.deserializers.JSONDeserializer()</span>
<span id="cb57-9">)</span>
<span id="cb57-10"></span>
<span id="cb57-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Endpoint name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(autopilot_model.endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-------!
Endpoint name:  sagemaker-sklearn-automl-2023-02-05-15-18-52-694</code></pre>
</div>
</div>
</section>
<section id="test-the-model" class="level3" data-number="10.2">
<h3 data-number="10.2" class="anchored" data-anchor-id="test-the-model"><span class="header-section-number">10.2</span> Test the model</h3>
<p>Let’s invoke a few predictions for the actual reviews using the deployed endpoint to test our model.</p>
<div class="cell" data-outputid="8d008785-db1d-427d-f09b-343c89c5668a">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;">#sm_runtime = boto3.client('sagemaker-runtime')</span></span>
<span id="cb59-2"></span>
<span id="cb59-3">review_list <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'This product is great!'</span>,</span>
<span id="cb59-4">               <span class="st" style="color: #20794D;">'OK, but not great.'</span>,</span>
<span id="cb59-5">               <span class="st" style="color: #20794D;">'This is not the right product.'</span>]</span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="cf" style="color: #003B4F;">for</span> review <span class="kw" style="color: #003B4F;">in</span> review_list:</span>
<span id="cb59-8">    </span>
<span id="cb59-9">    <span class="co" style="color: #5E5E5E;"># remove commas from the review since we're passing the inputs as a CSV</span></span>
<span id="cb59-10">    review <span class="op" style="color: #5E5E5E;">=</span> review.replace(<span class="st" style="color: #20794D;">","</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb59-11"></span>
<span id="cb59-12">    response <span class="op" style="color: #5E5E5E;">=</span> sm_runtime.invoke_endpoint(</span>
<span id="cb59-13">        EndpointName<span class="op" style="color: #5E5E5E;">=</span>autopilot_model.endpoint_name, <span class="co" style="color: #5E5E5E;"># endpoint name</span></span>
<span id="cb59-14">        ContentType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span>, <span class="co" style="color: #5E5E5E;"># type of input data</span></span>
<span id="cb59-15">        Accept<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span>, <span class="co" style="color: #5E5E5E;"># type of the inference in the response</span></span>
<span id="cb59-16">        Body<span class="op" style="color: #5E5E5E;">=</span>review <span class="co" style="color: #5E5E5E;"># review text</span></span>
<span id="cb59-17">        )</span>
<span id="cb59-18"></span>
<span id="cb59-19">    response_body<span class="op" style="color: #5E5E5E;">=</span>response[<span class="st" style="color: #20794D;">'Body'</span>].read().decode(<span class="st" style="color: #20794D;">'utf-8'</span>).strip().split(<span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb59-20"></span>
<span id="cb59-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Review: '</span>, review, <span class="st" style="color: #20794D;">' Predicated class: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(response_body[<span class="dv" style="color: #AD0000;">0</span>]))</span>
<span id="cb59-22"></span>
<span id="cb59-23"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"(-1 = Negative, 0=Neutral, 1=Positive)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Review:  This product is great!  Predicated class: 1
Review:  OK but not great.  Predicated class: 0
Review:  This is not the right product.  Predicated class: -1
(-1 = Negative, 0=Neutral, 1=Positive)</code></pre>
</div>
</div>
<p>So we used Amazon SageMaker Autopilot to automatically find the best model, hyper-parameters, and feature-engineering scripts for our dataset. Autopilot uses a uniquely-transparent approach to AutoML by generating re-usable Python scripts and notebooks.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">11</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-05-train-model-aws-sagemaker-autopilot.html</guid>
  <pubDate>Sun, 05 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Detect data bias with Amazon SageMaker Clarify</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In Data Science and machine learning, bias can be present in data before any model training occurs. Inspecting a dataset for bias can help detect collection gaps, inform your feature engineering, and understand biases the dataset may reflect. In this article we will analyze bias on a dataset, generate and analyze bias reports, and prepare the dataset for the model training.</p>
</section>
<section id="setup-aws-sagemaker" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="setup-aws-sagemaker"><span class="header-section-number">2</span> Setup AWS Sagemaker</h2>
<p>In an <a href="https://livingdatalab.com/aws/cloud-data-science/natural-language-processing/2023/02/03/loading-transforming-clothes-reviews-text-aws.html">earlier article we introduced AWS cloud services for data science</a>, and how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this project, we will be using AWS Sagemaker Clarify to explore the bias in a dataset.</p>
<p>Let’s now set up AWS sagemaker for this new project.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w2'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)</span>
<span id="cb1-14"></span>
<span id="cb1-15">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-16">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-17">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="analyze-the-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="analyze-the-dataset"><span class="header-section-number">3</span> Analyze the dataset</h2>
<p>As with our <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article using AWS</a> we will be using the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>It is shared in a public Amazon S3 bucket, and is available as a comma-separated value (CSV) text format:</p>
<section id="create-a-pandas-data-frame-from-the-csv-file" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="create-a-pandas-data-frame-from-the-csv-file"><span class="header-section-number">3.1</span> Create a pandas data frame from the CSV file</h3>
<p>Let’s create a pandas dataframe from each of the product categories and concatenate them into one.</p>
<div class="cell" data-outputid="7568fb40-e703-4b60-aed8-b173878c0179">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv to ./womens_clothing_ecommerce_reviews_transformed.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="fc28444e-e35b-409d-c5d5-ca00d8755d7a">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path)</span>
<span id="cb5-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>If this product was in petite  i would get the...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>Blouses</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>As we saw in the <a href="https://livingdatalab.com/aws/cloud-data-science/natural-language-processing/2023/02/03/loading-transforming-clothes-reviews-text-aws.html">earlier article</a>, there are way more positive reviews than negative or neutral. Such a dataset is called unbalanced.</p>
<p>In this case, using a relatively small data subset we could visualize the occurring unbalances. At scale, we would need to perform bias analysis. Let’s use this dataset as an example.</p>
<div class="cell" data-outputid="e59151d4-22b9-406d-b425-cce7c30d5e16">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb6-2"></span>
<span id="cb6-3">sns.countplot(data<span class="op" style="color: #5E5E5E;">=</span>df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper right'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.3</span>, <span class="fl" style="color: #AD0000;">1.1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fc9f6a32090&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="upload-the-dataset-to-s3-bucket" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="upload-the-dataset-to-s3-bucket"><span class="header-section-number">3.2</span> Upload the dataset to S3 bucket</h3>
<p>Now we will upload the dataset to a private S3 bucket in a folder called <code>bias/unbalanced</code>.</p>
<div class="cell" data-outputid="91f0862d-9e28-4b23-9cf6-e28e3d1cbc0a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">data_s3_uri_unbalanced <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, </span>
<span id="cb8-2">                               key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias/unbalanced'</span>, </span>
<span id="cb8-3">                               path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span>)</span>
<span id="cb8-4">data_s3_uri_unbalanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>'s3://sagemaker-us-east-1-763519884484/bias/unbalanced/womens_clothing_ecommerce_reviews_transformed.csv'</code></pre>
</div>
</div>
</section>
</section>
<section id="analyze-class-imbalance-on-the-dataset-with-amazon-sagemaker-clarify" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="analyze-class-imbalance-on-the-dataset-with-amazon-sagemaker-clarify"><span class="header-section-number">4</span> Analyze class imbalance on the dataset with Amazon SageMaker Clarify</h2>
<p>Let’s analyze bias in <code>sentiment</code> with respect to the <code>product_category</code> facet on the dataset.</p>
<section id="configure-a-dataconfig" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="configure-a-dataconfig"><span class="header-section-number">4.1</span> Configure a <code>DataConfig</code></h3>
<p>Information about the input data needs to be provided to the processor. This can be done with the <code>DataConfig</code> of the Clarify container. It stores information about the dataset to be analyzed, for example the dataset file, its format, headers and labels.</p>
<p>We can use <code>DataConfig</code> to configure the target column (<code>'sentiment'</code> label), data input (<code>data_s3_uri_unbalanced</code>) and output paths (<code>bias_report_unbalanced_output_path</code>) with their formats (header names and the dataset type):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sagemaker <span class="im" style="color: #00769E;">import</span> clarify</span>
<span id="cb10-2"></span>
<span id="cb10-3">bias_report_unbalanced_output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/bias/generated_bias_report/unbalanced'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb10-4"></span>
<span id="cb10-5">data_config_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.DataConfig(</span>
<span id="cb10-6">    s3_data_input_path<span class="op" style="color: #5E5E5E;">=</span>data_s3_uri_unbalanced, </span>
<span id="cb10-7">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span>bias_report_unbalanced_output_path, </span>
<span id="cb10-8">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb10-9">    headers<span class="op" style="color: #5E5E5E;">=</span>df.columns.to_list(),</span>
<span id="cb10-10">    dataset_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb10-11">)</span></code></pre></div>
</div>
</section>
<section id="configure-biasconfig" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="configure-biasconfig"><span class="header-section-number">4.2</span> Configure <code>BiasConfig</code></h3>
<p>Bias is measured by calculating a metric and comparing it across groups. To compute it, we will specify the required information in the <code>BiasConfig</code> API. SageMaker Clarify needs the sensitive columns (<code>facet_name</code>) and the desirable outcomes (<code>label_values_or_threshold</code>). Here <code>product_category</code> is the sensitive facet and the desired outcome is with the <code>sentiment==1</code>.</p>
<p>SageMaker Clarify can handle both categorical and continuous data for <code>label_values_or_threshold</code>. In this case we are using categorical data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">bias_config_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.BiasConfig(</span>
<span id="cb11-2">    label_values_or_threshold<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># desired sentiment</span></span>
<span id="cb11-3">    facet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span> <span class="co" style="color: #5E5E5E;"># sensitive column (facet)</span></span>
<span id="cb11-4">)</span></code></pre></div>
</div>
</section>
<section id="configure-amazon-sagemaker-clarify-as-a-processing-job" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="configure-amazon-sagemaker-clarify-as-a-processing-job"><span class="header-section-number">4.3</span> Configure Amazon SageMaker Clarify as a processing job</h3>
<p>Now we need to construct an object called <code>SageMakerClarifyProcessor</code>. This allows you to scale the process of data bias detection using two parameters, <code>instance_count</code> and <code>instance_type</code>.</p>
<p><code>Instance_count</code> represents how many nodes you want in the distributor cluster during the data detection. <code>Instance_type</code> specifies the processing capability (compute capacity, memory capacity) available for each one of those nodes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">clarify_processor_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.SageMakerClarifyProcessor(role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb12-2">                                                      instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb12-3">                                                      instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb12-4">                                                      sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job"><span class="header-section-number">4.4</span> Run the Amazon SageMaker Clarify processing job</h3>
<p>Let’s run the configured processing job to compute the requested bias <code>methods</code> of the input data.</p>
<p>We will apply the <code>run_pre_training_bias</code> method to the configured Clarify processor, passing the configured input/output data (<code>data_config_unbalanced</code>), configuration of sensitive groups (<code>bias_config_unbalanced</code>) with the other job setup parameters.</p>
<div class="cell" data-outputid="c641457e-8d33-42e4-83a9-ba493b264918">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">clarify_processor_unbalanced.run_pre_training_bias(</span>
<span id="cb13-2">    data_config<span class="op" style="color: #5E5E5E;">=</span>data_config_unbalanced, </span>
<span id="cb13-3">    data_bias_config<span class="op" style="color: #5E5E5E;">=</span>bias_config_unbalanced, </span>
<span id="cb13-4">    methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"CI"</span>, <span class="st" style="color: #20794D;">"DPL"</span>, <span class="st" style="color: #20794D;">"KL"</span>, <span class="st" style="color: #20794D;">"JS"</span>, <span class="st" style="color: #20794D;">"LP"</span>, <span class="st" style="color: #20794D;">"TVD"</span>, <span class="st" style="color: #20794D;">"KS"</span>],</span>
<span id="cb13-5">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb13-6">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb13-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  Clarify-Pretraining-Bias-2023-02-04-18-19-13-642
Inputs:  [{'InputName': 'dataset', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/unbalanced/womens_clothing_ecommerce_reviews_transformed.csv', 'LocalPath': '/opt/ml/processing/input/data', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'analysis_config', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis_config.json', 'LocalPath': '/opt/ml/processing/input/config', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'analysis_result', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced', 'LocalPath': '/opt/ml/processing/output', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<div class="cell" data-outputid="c49425e3-3a7b-4a10-fb42-29dcb1a5b670">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">run_unbalanced_bias_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> clarify_processor_unbalanced.latest_job.job_name</span>
<span id="cb15-2"><span class="bu" style="color: null;">print</span>(run_unbalanced_bias_processing_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Clarify-Pretraining-Bias-2023-02-04-18-19-13-642</code></pre>
</div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job-on-the-unbalanced-dataset" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job-on-the-unbalanced-dataset"><span class="header-section-number">4.5</span> Run the Amazon SageMaker Clarify processing job on the unbalanced dataset</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>run_unbalanced_bias_processing_job_name,</span>
<span id="cb17-2">                                                                            sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
<div class="cell" data-outputid="89c3b97e-f97f-49d6-c98a-30db64937351">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb18-2"></span>
<span id="cb18-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.............................................................................!CPU times: user 304 ms, sys: 55.6 ms, total: 360 ms
Wall time: 6min 30s</code></pre>
</div>
</div>
</section>
<section id="analyze-unbalanced-bias-report" class="level3" data-number="4.6">
<h3 data-number="4.6" class="anchored" data-anchor-id="analyze-unbalanced-bias-report"><span class="header-section-number">4.6</span> Analyze unbalanced bias report</h3>
<p>In this run, we analyzed bias for <code>sentiment</code> relative to the <code>product_category</code> for the unbalanced data. Let’s have a look at the bias report.</p>
<p>List the files in the output path <code>bias_report_unbalanced_output_path</code>:</p>
<div class="cell" data-outputid="071c0c96-8eb0-4284-f041-7eca7e395451">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $bias_report_unbalanced_output_path<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-04 18:25:39      31732 analysis.json
2023-02-04 18:19:14        346 analysis_config.json
2023-02-04 18:25:39     607108 report.html
2023-02-04 18:25:39     346473 report.ipynb
2023-02-04 18:25:39     326001 report.pdf</code></pre>
</div>
</div>
<p>Download generated bias report from S3 bucket:</p>
<div class="cell" data-outputid="db213745-8f79-439d-c566-58e83616e649">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive $bias_report_unbalanced_output_path .<span class="op" style="color: #5E5E5E;">/</span>generated_bias_report<span class="op" style="color: #5E5E5E;">/</span>unbalanced<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis_config.json to generated_bias_report/unbalanced/analysis_config.json
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis.json to generated_bias_report/unbalanced/analysis.json
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.pdf to generated_bias_report/unbalanced/report.pdf
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.ipynb to generated_bias_report/unbalanced/report.ipynb
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.html to generated_bias_report/unbalanced/report.html</code></pre>
</div>
</div>
<p>You can view the bias report <a href="https://pranath.github.io/pds/report_unbalanced.html">here</a>.</p>
<p>The bias report shows a number of metrics, but here we will focus on just two of them: - Class Imbalance (CI). Measures the imbalance in the number of members between different facet values. Answers the question, does a <code>product_category</code> have disproportionately more reviews than others? Values of CI will become equal for even distribution between facets. Here, different CI values show the existence of imbalance. - Difference in Positive Proportions in Labels (DPL). Measures the imbalance of positive outcomes between different facet values. Answers the question, does a <code>product_category</code> have disproportionately higher ratings than others? With the range over the interval from -1 to 1, if there is no bias, you want to see this value as close as possible to zero. Here, non-zero values indicate the imbalances.</p>
</section>
</section>
<section id="balance-the-dataset-by-product_category-and-sentiment" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="balance-the-dataset-by-product_category-and-sentiment"><span class="header-section-number">5</span> Balance the dataset by <code>product_category</code> and <code>sentiment</code></h2>
<p>Let’s balance the dataset by <code>product_category</code> and <code>sentiment</code>. Then we can configure and run SageMaker Clarify processing job to analyze the bias of it. Which metrics values do we expect to see in the bias report?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df_grouped_by <span class="op" style="color: #5E5E5E;">=</span> df.groupby([<span class="st" style="color: #20794D;">'product_category'</span>, <span class="st" style="color: #20794D;">'sentiment'</span>])</span>
<span id="cb24-2">df_balanced <span class="op" style="color: #5E5E5E;">=</span> df_grouped_by.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x.sample(df_grouped_by.size().<span class="bu" style="color: null;">min</span>()).reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
</div>
<div class="cell" data-outputid="0938f3c6-3893-4ce6-c7b9-401a42251c58">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df_balanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
    <tr>
      <th>product_category</th>
      <th>sentiment</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">Blouses</th>
      <th rowspan="5" valign="top">-1</th>
      <th>0</th>
      <td>-1</td>
      <td>I bought this top in the store  which was good...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Wow this is huge! i'm all for the tent-look wi...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>If you have anything larger than an a cup  thi...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>Like another reviewer mentioned  this shirt is...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I did not like this top at all-but had i looke...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="5" valign="top">Trend</th>
      <th rowspan="5" valign="top">1</th>
      <th>4</th>
      <td>1</td>
      <td>Never spent this much on a dress so it needs t...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>I love this sweatshirt! i truly did not pay mu...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>6</th>
      <td>1</td>
      <td>I am waist-challenged. i like a narrowly cut s...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>7</th>
      <td>1</td>
      <td>I love the style and look oft this blouse but ...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>8</th>
      <td>1</td>
      <td>I love this top  it is a cool style mix betwee...</td>
      <td>Trend</td>
    </tr>
  </tbody>
</table>
<p>486 rows × 3 columns</p>
</div>
</div>
</div>
<p>Let’s now visualize the distribution of review sentiment in the balanced dataset.</p>
<div class="cell" data-outputid="543ac772-98ee-4bbe-db6e-6455349fa8b4">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb26-2"></span>
<span id="cb26-3">sns.countplot(data<span class="op" style="color: #5E5E5E;">=</span>df_balanced, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper right'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.3</span>, <span class="fl" style="color: #AD0000;">1.1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fc9f52ca4d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="analyze-bias-on-balanced-dataset-with-aws-sagemaker-clarify" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="analyze-bias-on-balanced-dataset-with-aws-sagemaker-clarify"><span class="header-section-number">6</span> Analyze bias on balanced dataset with AWS SageMaker Clarify</h2>
<p>Let’s now analyze bias in <code>sentiment</code> with respect to the <code>product_category</code> facet on the balanced dataset.</p>
<p>We need to save and upload the balanced data to the S3 bucket.</p>
<div class="cell" data-outputid="4de7a09e-b535-4e53-fe8e-d63a5d3ac06e">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">path_balanced <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb28-2">df_balanced.to_csv(path_balanced, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4">data_s3_uri_balanced <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias/balanced'</span>, path<span class="op" style="color: #5E5E5E;">=</span>path_balanced)</span>
<span id="cb28-5">data_s3_uri_balanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>'s3://sagemaker-us-east-1-763519884484/bias/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</code></pre>
</div>
</div>
<section id="configure-a-dataconfig-1" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="configure-a-dataconfig-1"><span class="header-section-number">6.1</span> Configure a <code>DataConfig</code></h3>
<p>We need to configure a <code>DataConfig</code> for Clarify to analyze bias on the balanced dataset. To do this we pass the S3 object path containing the balanced dataset, the path to store the output (<code>bias_report_balanced_output_path</code>) and the target column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> sagemaker <span class="im" style="color: #00769E;">import</span> clarify</span>
<span id="cb30-2"></span>
<span id="cb30-3">bias_report_balanced_output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/bias/generated_bias_report/balanced'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb30-4"></span>
<span id="cb30-5">data_config_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.DataConfig(</span>
<span id="cb30-6">    s3_data_input_path<span class="op" style="color: #5E5E5E;">=</span>data_s3_uri_balanced, </span>
<span id="cb30-7">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span>bias_report_balanced_output_path,</span>
<span id="cb30-8">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb30-9">    headers<span class="op" style="color: #5E5E5E;">=</span>df_balanced.columns.to_list(),</span>
<span id="cb30-10">    dataset_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb30-11">)</span></code></pre></div>
</div>
</section>
<section id="configure-biasconfig-1" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="configure-biasconfig-1"><span class="header-section-number">6.2</span> Configure <code>BiasConfig</code></h3>
<p><code>BiasConfig</code> for the balanced dataset will have the same settings as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">bias_config_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.BiasConfig(</span>
<span id="cb31-2">    label_values_or_threshold<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># desired sentiment</span></span>
<span id="cb31-3">    facet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span> <span class="co" style="color: #5E5E5E;"># sensitive column (facet)</span></span>
<span id="cb31-4">)</span></code></pre></div>
</div>
</section>
<section id="configure-sagemaker-clarify-as-a-processing-job" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="configure-sagemaker-clarify-as-a-processing-job"><span class="header-section-number">6.3</span> Configure SageMaker Clarify as a processing job</h3>
<p><code>SageMakerClarifyProcessor</code> object will also have the same parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">clarify_processor_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.SageMakerClarifyProcessor(role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb32-2">                                                      instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb32-3">                                                      instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb32-4">                                                      sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job-1" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job-1"><span class="header-section-number">6.4</span> Run the Amazon SageMaker Clarify processing job</h3>
<p>Let’s run the configured processing job for the balanced dataset.</p>
<p>We will apply the <code>run_pre_training_bias</code> method to the configured Clarify processor, passing the input/output data, configuration of sensitive groups with the other job setup parameters.</p>
<div class="cell" data-outputid="92df7f72-40e4-4aa6-e8f6-535ce3f83be8">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">clarify_processor_balanced.run_pre_training_bias(</span>
<span id="cb33-2">    data_config<span class="op" style="color: #5E5E5E;">=</span>data_config_balanced, </span>
<span id="cb33-3">    data_bias_config<span class="op" style="color: #5E5E5E;">=</span>bias_config_balanced, </span>
<span id="cb33-4">    methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"CI"</span>, <span class="st" style="color: #20794D;">"DPL"</span>, <span class="st" style="color: #20794D;">"KL"</span>, <span class="st" style="color: #20794D;">"JS"</span>, <span class="st" style="color: #20794D;">"LP"</span>, <span class="st" style="color: #20794D;">"TVD"</span>, <span class="st" style="color: #20794D;">"KS"</span>],</span>
<span id="cb33-5">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb33-6">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb33-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  Clarify-Pretraining-Bias-2023-02-04-18-25-47-825
Inputs:  [{'InputName': 'dataset', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/balanced/womens_clothing_ecommerce_reviews_balanced.csv', 'LocalPath': '/opt/ml/processing/input/data', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'analysis_config', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/balanced/analysis_config.json', 'LocalPath': '/opt/ml/processing/input/config', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'analysis_result', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/balanced', 'LocalPath': '/opt/ml/processing/output', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<div class="cell" data-outputid="8c142b34-3dfd-493e-e85c-1f3cffabc19f">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">run_balanced_bias_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> clarify_processor_balanced.latest_job.job_name</span>
<span id="cb35-2"><span class="bu" style="color: null;">print</span>(run_balanced_bias_processing_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Clarify-Pretraining-Bias-2023-02-04-18-25-47-825</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>run_balanced_bias_processing_job_name,</span>
<span id="cb37-2">                                                                            sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
<div class="cell" data-outputid="e81cff0d-e4e8-4da8-d98f-f1ba48118438">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb38-2"></span>
<span id="cb38-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>...........................................................................!CPU times: user 312 ms, sys: 46.6 ms, total: 359 ms
Wall time: 6min 20s</code></pre>
</div>
</div>
</section>
<section id="analyze-balanced-bias-report" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="analyze-balanced-bias-report"><span class="header-section-number">6.5</span> Analyze balanced bias report</h3>
<p>Let’s see again the files created by the report.</p>
<div class="cell" data-outputid="d882e3fd-1d59-44b2-87e0-dbca4ba6caea">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $bias_report_balanced_output_path<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-04 18:32:02      29889 analysis.json
2023-02-04 18:25:48        346 analysis_config.json
2023-02-04 18:32:02     592454 report.html
2023-02-04 18:32:02     331819 report.ipynb
2023-02-04 18:32:02     320692 report.pdf</code></pre>
</div>
</div>
<p>We can view the report <a href="https://pranath.github.io/pds/report_balanced.html">here</a>.</p>
<p>In this run, we analyzed bias for <code>sentiment</code> relative to the <code>product_category</code> for the balanced data. Note that the Class Imbalance (CI) metric is equal across all product categories for the target label, <code>sentiment</code>. And Difference in Positive Proportions in Labels (DPL) metric values are zero.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">7</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify.html</guid>
  <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Loading &amp; Transforming Clothing Reviews Text Data with AWS</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this project we will ingest and transform a customer product reviews dataset using AWS (Amazon Web Services) cloud services. We will then use AWS data stack services such as AWS Glue and Amazon Athena for ingesting and querying the dataset. Finally we will use AWS Data Wrangler to analyze the dataset and plot some visuals extracting insights.</p>
<p>This exploration could be useful for a range of tasks, including creating a sentiment analysis text classification model - which is something we will explore in future articles.</p>
</section>
<section id="aws-cloud-services-for-data-science" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="aws-cloud-services-for-data-science"><span class="header-section-number">2</span> AWS &amp; Cloud Services for Data Science</h2>
<section id="why-use-the-cloud-for-data-science" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="why-use-the-cloud-for-data-science"><span class="header-section-number">2.1</span> Why use the Cloud for Data Science ?</h3>
<p>Data Science can be performed in a range of devices and environments, from local machines and laptops, to dedicated server centers, to cloud services such as <a href="https://livingdatalab.com/categories/#aws">AWS</a> or <a href="https://livingdatalab.com/categories/#azure-databricks">Azure Databricks</a>.</p>
<p>Why would you want to use cloud services for Data Science?</p>
<ul>
<li>Local machines or server centers have limited resources as they are specific machines and the only ones you have, which have limited computing power, disk space and memory which could make certain tasks and problems unfeasible to solve</li>
<li>Cloud services allow the storage of any amount of data</li>
<li>Cloud services allow you to <em>scale up</em> e.g.&nbsp;increase the processing or memory capacity of the machines you use in minutes</li>
<li>Cloud services allow you to <em>scale out</em> e.g.&nbsp;increase the number of machines you are able to use for a task</li>
<li>Cloud services provide a large range of data science tools already installed and maintained</li>
<li>Cloud services provide a flexible deployment platform for any products you develop, with a capacity able to scale with demand</li>
<li>Cloud services provide a more cost efficient and flexible solution for many tasks, you generally only pay for what you use and can increase or decrease options and capacity easily either by choice or even automatically based on need or demand</li>
</ul>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/practical_ds.png" title="Why use the cloud for Data Science" class="img-fluid"></p>
</section>
<section id="using-aws-for-cloud-data-science" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="using-aws-for-cloud-data-science"><span class="header-section-number">2.2</span> Using AWS for Cloud Data Science</h3>
<p>AWS offers a range of different services that can help at different stages of the machine learning development cycle.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will be demonstrating how we can use AWS for the <strong>Ingesting and Analysing stage</strong>, so we will be using the following services:</p>
<ul>
<li>Amazon S3: A simple storage service</li>
<li>AWS Glue: An ETL service that helps prepare, extract and load data</li>
<li>Amazon Athena: An interactive query service that uses SQL</li>
<li>Amazon Sagemaker: A cloud machine learning service</li>
</ul>
</section>
</section>
<section id="ingest-and-transform-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="ingest-and-transform-dataset"><span class="header-section-number">3</span> Ingest and transform Dataset</h2>
<p>The dataset we will use is the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>It is shared in a public Amazon S3 bucket, and is available as a comma-separated value (CSV) text format:</p>
<p><code>s3://dlai-practical-data-science/data/raw/womens_clothing_ecommerce_reviews.csv</code></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_s3.png" title="Amazon S3" class="img-fluid"></p>
<section id="list-the-dataset-files-in-the-public-s3-bucket" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="list-the-dataset-files-in-the-public-s3-bucket"><span class="header-section-number">3.1</span> List the dataset files in the public S3 bucket</h3>
<p>The <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/index.html">AWS Command Line Interface (CLI)</a> is a unified tool to manage AWS services. With just one tool, you can control multiple AWS services from the command line and automate them through scripts. We will use it to list the dataset files.</p>
<p><code>aws s3 ls [bucket_name]</code> is a function lists all objects in the S3 bucket. Let’s use it to view the reviews data files in CSV format.</p>
<div class="cell" data-outputid="7cc4b5c0-4e8d-4eab-a671-34f5faf79f5d">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls s3:<span class="op" style="color: #5E5E5E;">//</span>dlai<span class="op" style="color: #5E5E5E;">-</span>practical<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">-</span>science<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>raw<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="copy-the-data-locally-to-the-notebook" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="copy-the-data-locally-to-the-notebook"><span class="header-section-number">3.2</span> Copy the data locally to the notebook</h3>
<p><code>aws s3 cp [bucket_name/file_name] [file_name]</code> is a function that copies the file from the S3 bucket into the local environment or into another S3 bucket. Let’s use it to copy the file with the dataset locally.</p>
<div class="cell" data-outputid="862d14a1-53d7-43a5-b453-a36375749318">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp s3:<span class="op" style="color: #5E5E5E;">//</span>dlai<span class="op" style="color: #5E5E5E;">-</span>practical<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">-</span>science<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>raw<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/raw/womens_clothing_ecommerce_reviews.csv to ./womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
<p>Now we will use Pandas to load and preview the data.</p>
<div class="cell" data-outputid="c631958c-d885-455d-a09e-fa73d9ca8a44">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">import</span> csv</span>
<span id="cb5-3"></span>
<span id="cb5-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews.csv'</span>,</span>
<span id="cb5-5">                 index_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(23486, 10)</code></pre>
</div>
</div>
<div class="cell" data-outputid="1b21b49f-2b92-4ea0-c812-b982550de7fe">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Clothing ID</th>
      <th>Age</th>
      <th>Title</th>
      <th>Review Text</th>
      <th>Rating</th>
      <th>Recommended IND</th>
      <th>Positive Feedback Count</th>
      <th>Division Name</th>
      <th>Department Name</th>
      <th>Class Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>847</td>
      <td>33</td>
      <td>Cute, crisp shirt</td>
      <td>If this product was in petite  i would get the...</td>
      <td>4</td>
      <td>1</td>
      <td>2</td>
      <td>General</td>
      <td>Tops</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1080</td>
      <td>34</td>
      <td>NaN</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>5</td>
      <td>1</td>
      <td>4</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1077</td>
      <td>60</td>
      <td>Some major design flaws</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1049</td>
      <td>50</td>
      <td>My favorite buy!</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>5</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Bottoms</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>847</td>
      <td>47</td>
      <td>Flattering shirt</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>5</td>
      <td>1</td>
      <td>6</td>
      <td>General</td>
      <td>Tops</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23481</th>
      <td>1104</td>
      <td>34</td>
      <td>Great dress for many occasions</td>
      <td>I was very happy to snag this dress at such a ...</td>
      <td>5</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23482</th>
      <td>862</td>
      <td>48</td>
      <td>Wish it was made of cotton</td>
      <td>It reminds me of maternity clothes. soft  stre...</td>
      <td>3</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Tops</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>23483</th>
      <td>1104</td>
      <td>31</td>
      <td>Cute, but see through</td>
      <td>This fit well  but the top was very see throug...</td>
      <td>3</td>
      <td>0</td>
      <td>1</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23484</th>
      <td>1084</td>
      <td>28</td>
      <td>Very cute dress, perfect for summer parties an...</td>
      <td>I bought this dress for a wedding i have this ...</td>
      <td>3</td>
      <td>1</td>
      <td>2</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23485</th>
      <td>1104</td>
      <td>52</td>
      <td>Please make more like this one!</td>
      <td>This dress in a lovely platinum is feminine an...</td>
      <td>5</td>
      <td>1</td>
      <td>22</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
  </tbody>
</table>
<p>23486 rows × 10 columns</p>
</div>
</div>
</div>
</section>
<section id="transform-the-data" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="transform-the-data"><span class="header-section-number">3.3</span> Transform the data</h3>
<p>To simplify the task, we will transform the data into a comma-separated value (CSV) file that contains only a <code>review_body</code>, <code>product_category</code>, and <code>sentiment</code> derived from the original data.</p>
<div class="cell" data-outputid="3345c2d3-4ab3-4b26-98b0-cdff61f2992f">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_transformed <span class="op" style="color: #5E5E5E;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'Review Text'</span>: <span class="st" style="color: #20794D;">'review_body'</span>,</span>
<span id="cb8-2">                                    <span class="st" style="color: #20794D;">'Rating'</span>: <span class="st" style="color: #20794D;">'star_rating'</span>,</span>
<span id="cb8-3">                                    <span class="st" style="color: #20794D;">'Class Name'</span>: <span class="st" style="color: #20794D;">'product_category'</span>})</span>
<span id="cb8-4">df_transformed.drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Clothing ID'</span>, <span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'Title'</span>, <span class="st" style="color: #20794D;">'Recommended IND'</span>, <span class="st" style="color: #20794D;">'Positive Feedback Count'</span>, <span class="st" style="color: #20794D;">'Division Name'</span>, <span class="st" style="color: #20794D;">'Department Name'</span>],</span>
<span id="cb8-5">                    inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7">df_transformed.dropna(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">df_transformed.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(22628, 3)</code></pre>
</div>
</div>
<p>Now lets convert the <code>star_rating</code> into the <code>sentiment</code> (positive, neutral, negative), which later on we could use for a text classification model.</p>
<div class="cell" data-outputid="8f8db857-dc81-4e5e-c4df-907268dc1f7f">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;">def</span> to_sentiment(star_rating):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="kw" style="color: #003B4F;">in</span> {<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>}: <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb10-3">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">3</span>:      <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="kw" style="color: #003B4F;">in</span> {<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>}: <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># transform star_rating into the sentiment</span></span>
<span id="cb10-10">df_transformed[<span class="st" style="color: #20794D;">'sentiment'</span>] <span class="op" style="color: #5E5E5E;">=</span> df_transformed[<span class="st" style="color: #20794D;">'star_rating'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> star_rating: </span>
<span id="cb10-11">    to_sentiment(star_rating<span class="op" style="color: #5E5E5E;">=</span>star_rating) </span>
<span id="cb10-12">)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;"># drop the star rating column</span></span>
<span id="cb10-15">df_transformed.drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'star_rating'</span>],</span>
<span id="cb10-16">                    inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># remove reviews for product_categories with &lt; 10 reviews</span></span>
<span id="cb10-19">df_transformed <span class="op" style="color: #5E5E5E;">=</span> df_transformed.groupby(<span class="st" style="color: #20794D;">'product_category'</span>).<span class="bu" style="color: null;">filter</span>(<span class="kw" style="color: #003B4F;">lambda</span> reviews : <span class="bu" style="color: null;">len</span>(reviews) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>)[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>, <span class="st" style="color: #20794D;">'product_category'</span>]]</span>
<span id="cb10-20"></span>
<span id="cb10-21">df_transformed.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(22626, 3)</code></pre>
</div>
</div>
<div class="cell" data-outputid="0462fa50-7798-4440-daad-c4d615070f63">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># preview the results</span></span>
<span id="cb12-2">df_transformed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>If this product was in petite  i would get the...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23481</th>
      <td>1</td>
      <td>I was very happy to snag this dress at such a ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23482</th>
      <td>0</td>
      <td>It reminds me of maternity clothes. soft  stre...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>23483</th>
      <td>0</td>
      <td>This fit well  but the top was very see throug...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23484</th>
      <td>0</td>
      <td>I bought this dress for a wedding i have this ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23485</th>
      <td>1</td>
      <td>This dress in a lovely platinum is feminine an...</td>
      <td>Dresses</td>
    </tr>
  </tbody>
</table>
<p>22626 rows × 3 columns</p>
</div>
</div>
</div>
</section>
<section id="write-the-data-to-a-csv-file" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="write-the-data-to-a-csv-file"><span class="header-section-number">3.4</span> Write the data to a CSV file</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_transformed.to_csv(<span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span>, </span>
<span id="cb13-2">                      index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="fc0c8905-6380-4488-8915-546f55752f23">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sentiment,review_body,product_category
1,If this product was in petite  i would get the petite. the regular is a little long on me but a tailor can do a simple fix on that.     fits nicely! i'm 5'4  130lb and pregnant so i bough t medium to grow into.     the tie can be front or back so provides for some nice flexibility on form fitting.,Blouses
1,"Love this dress!  it's sooo pretty.  i happened to find it in a store  and i'm glad i did bc i never would have ordered it online bc it's petite.  i bought a petite and am 5'8"".  i love the length on me- hits just a little below the knee.  would definitely be a true midi on someone who is truly petite.",Dresses
0,I had such high hopes for this dress and really wanted it to work for me. i initially ordered the petite small (my usual size) but i found this to be outrageously small. so small in fact that i could not zip it up! i reordered it in petite medium  which was just ok. overall  the top half was comfortable and fit nicely  but the bottom half had a very tight under layer and several somewhat cheap (net) over layers. imo  a major design flaw was the net over layer sewn directly into the zipper - it c,Dresses
1,I love  love  love this jumpsuit. it's fun  flirty  and fabulous! every time i wear it  i get nothing but great compliments!,Pants</code></pre>
</div>
</div>
</section>
</section>
<section id="register-the-public-dataset-for-querying-and-visualizing" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="register-the-public-dataset-for-querying-and-visualizing"><span class="header-section-number">4</span> Register the public dataset for querying and visualizing</h2>
<p>We will now register the public dataset into an S3-backed database table so we can query and visualize our dataset at scale.</p>
<section id="register-s3-dataset-files-as-a-table-for-querying" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="register-s3-dataset-files-as-a-table-for-querying"><span class="header-section-number">4.1</span> Register S3 dataset files as a table for querying</h3>
<p>Before we can use Amazon Athena to query our data, we first need to get our data ‘registered’ so we can do this.</p>
<p>Let’s import some key modules.</p>
<p><code>boto3</code> is the AWS SDK for Python to create, configure, and manage AWS services, such as Amazon Elastic Compute Cloud (Amazon EC2) and Amazon Simple Storage Service (Amazon S3). The SDK provides an object-oriented API as well as low-level access to AWS services.</p>
<p><code>sagemaker</code> is the SageMaker Python SDK which provides several high-level abstractions for working with the Amazon SageMaker.</p>
<div class="cell" data-outputid="fa4f4313-0f69-426b-f22d-22291540a77b">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb16-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb16-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb16-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb16-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb16-6"></span>
<span id="cb16-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w1'</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb16-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb16-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb16-12"></span>
<span id="cb16-13">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)                         </span>
<span id="cb16-14"></span>
<span id="cb16-15">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb16-16">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb16-17">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span>
<span id="cb16-18">account_id <span class="op" style="color: #5E5E5E;">=</span> sess.account_id</span>
<span id="cb16-19"></span>
<span id="cb16-20"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'S3 Bucket: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(bucket))</span>
<span id="cb16-21"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Region: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(region))</span>
<span id="cb16-22"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Account ID: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(account_id))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>S3 Bucket: sagemaker-us-east-1-634231958143
Region: us-east-1
Account ID: &lt;bound method Session.account_id of &lt;sagemaker.session.Session object at 0x7f987cf24490&gt;&gt;</code></pre>
</div>
</div>
<p>Lets now copy the file into the S3 bucket.</p>
<div class="cell" data-outputid="25af66a5-66be-4cd9-b656-224dafc92c4d">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>transformed<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: ./womens_clothing_ecommerce_reviews_transformed.csv to s3://sagemaker-us-east-1-634231958143/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv</code></pre>
</div>
</div>
<p><strong>Import AWS Data Wrangler</strong></p>
<p><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> is an AWS Professional Service open source python initiative part of Amazon Sagemaker - that extends the power of Pandas library to AWS connecting dataframes and AWS data related services (Amazon Redshift, AWS Glue, Amazon Athena, Amazon EMR, Amazon QuickSight, etc).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_data_wrangler.png" title="AWS Data Wrangler" class="img-fluid"></p>
<p>Built on top of other open-source projects like Pandas, Apache Arrow, Boto3, SQLAlchemy, Psycopg2 and PyMySQL, it offers abstracted functions to execute usual ETL tasks like load/unload data from data lakes, data warehouses and databases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;">import</span> awswrangler <span class="im" style="color: #00769E;">as</span> wr</span></code></pre></div>
</div>
</section>
<section id="create-aws-glue-catalog-database" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="create-aws-glue-catalog-database"><span class="header-section-number">4.2</span> Create AWS Glue Catalog database</h3>
<p>The data catalog features of <strong>AWS Glue</strong> and the inbuilt integration to Amazon S3 simplify the process of identifying data and deriving the schema definition out of the discovered data. Using AWS Glue crawlers within our data catalog, we can traverse the data stored in Amazon S3 and build out the metadata tables that are defined in our data catalog.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_glue.png" title="AWS Glue" class="img-fluid"></p>
<p>Here we will use the <code>wr.catalog.create_database</code> function to create a database with the name <code>dsoaws_deep_learning</code> (“dsoaws” stands for “Data Science on AWS”).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">wr.catalog.create_database(</span>
<span id="cb21-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>,</span>
<span id="cb21-3">    exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb21-4">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="7e5143b1-a925-4177-d6bd-347f256665a7">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">dbs <span class="op" style="color: #5E5E5E;">=</span> wr.catalog.get_databases()</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;">for</span> db <span class="kw" style="color: #003B4F;">in</span> dbs:</span>
<span id="cb22-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Database name: "</span> <span class="op" style="color: #5E5E5E;">+</span> db[<span class="st" style="color: #20794D;">'Name'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Database name: dsoaws_deep_learning</code></pre>
</div>
</div>
</section>
<section id="register-csv-data-with-aws-glue-catalog" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="register-csv-data-with-aws-glue-catalog"><span class="header-section-number">4.3</span> Register CSV data with AWS Glue Catalog</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">wr.catalog.create_csv_table(</span>
<span id="cb24-2">    database<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>, </span>
<span id="cb24-3">    path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/transformed/'</span>.<span class="bu" style="color: null;">format</span>(bucket), </span>
<span id="cb24-4">    table<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews"</span>,    </span>
<span id="cb24-5">    columns_types<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb24-6">        <span class="st" style="color: #20794D;">'sentiment'</span>: <span class="st" style="color: #20794D;">'int'</span>,        </span>
<span id="cb24-7">        <span class="st" style="color: #20794D;">'review_body'</span>: <span class="st" style="color: #20794D;">'string'</span>,</span>
<span id="cb24-8">        <span class="st" style="color: #20794D;">'product_category'</span>: <span class="st" style="color: #20794D;">'string'</span>      </span>
<span id="cb24-9">    },</span>
<span id="cb24-10">    mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>,</span>
<span id="cb24-11">    skip_header_line_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb24-12">    sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span></span>
<span id="cb24-13">)</span></code></pre></div>
</div>
<p>Review the table shape:</p>
<div class="cell" data-outputid="120953c8-d8e6-49c3-e142-33fe75274bca">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">table <span class="op" style="color: #5E5E5E;">=</span> wr.catalog.table(database<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>,</span>
<span id="cb25-2">                         table<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews'</span>)</span>
<span id="cb25-3">table</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Column Name</th>
      <th>Type</th>
      <th>Partition</th>
      <th>Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>sentiment</td>
      <td>int</td>
      <td>False</td>
      <td></td>
    </tr>
    <tr>
      <th>1</th>
      <td>review_body</td>
      <td>string</td>
      <td>False</td>
      <td></td>
    </tr>
    <tr>
      <th>2</th>
      <td>product_category</td>
      <td>string</td>
      <td>False</td>
      <td></td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="create-default-s3-bucket-for-amazon-athena" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="create-default-s3-bucket-for-amazon-athena"><span class="header-section-number">4.4</span> Create default S3 bucket for Amazon Athena</h3>
<p>We can use Amazon Athena to query our results. Amazon Athena requires this S3 bucket to store temporary query results and improve performance of subsequent queries.</p>
<p>The contents of this bucket are mostly binary and human-unreadable.</p>
<div class="cell" data-outputid="7d9ec90b-876b-45cd-e8cb-af0c4a755682">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># S3 bucket name</span></span>
<span id="cb26-2">wr.athena.create_athena_bucket()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>'s3://aws-athena-query-results-634231958143-us-east-1/'</code></pre>
</div>
</div>
</section>
</section>
<section id="visualising-the-data-and-answering-questions" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="visualising-the-data-and-answering-questions"><span class="header-section-number">5</span> Visualising the Data and Answering Questions</h2>
<p>Let’s review the columns we have selected from our reviews dataset.</p>
<ul>
<li><code>sentiment</code>: The review’s sentiment (-1, 0, 1).</li>
<li><code>product_category</code>: Broad product category that can be used to group reviews (in this case digital videos).</li>
<li><code>review_body</code>: The text of the review.</li>
</ul>
<section id="preparation-for-data-visualization" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="preparation-for-data-visualization"><span class="header-section-number">5.1</span> Preparation for data visualization</h3>
<p><strong>Imports</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb28-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb28-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<p><strong>Settings</strong></p>
<p>We need to set an AWS Glue database and a table name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">database_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span></span>
<span id="cb29-2">table_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews'</span></span></code></pre></div>
</div>
<p>Let’s also define some seaborn config for our visualisations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">sns.set_style <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'seaborn-whitegrid'</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"font.style"</span>:<span class="st" style="color: #20794D;">"normal"</span>,</span>
<span id="cb30-4">            <span class="st" style="color: #20794D;">"axes.facecolor"</span>:<span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb30-5">            <span class="st" style="color: #20794D;">'grid.color'</span>: <span class="st" style="color: #20794D;">'.8'</span>,</span>
<span id="cb30-6">            <span class="st" style="color: #20794D;">'grid.linestyle'</span>: <span class="st" style="color: #20794D;">'-'</span>,</span>
<span id="cb30-7">            <span class="st" style="color: #20794D;">"figure.facecolor"</span>:<span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb30-8">            <span class="st" style="color: #20794D;">"figure.titlesize"</span>:<span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb30-9">            <span class="st" style="color: #20794D;">"text.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-10">            <span class="st" style="color: #20794D;">"xtick.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-11">            <span class="st" style="color: #20794D;">"ytick.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-12">            <span class="st" style="color: #20794D;">"axes.labelcolor"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-13">            <span class="st" style="color: #20794D;">"axes.grid"</span>:<span class="va" style="color: #111111;">True</span>,</span>
<span id="cb30-14">            <span class="st" style="color: #20794D;">'axes.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-15">            <span class="st" style="color: #20794D;">'xtick.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-16">            <span class="st" style="color: #20794D;">'font.size'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-17">            <span class="st" style="color: #20794D;">'ytick.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>})</span></code></pre></div>
</div>
</section>
<section id="plotting-key-stats-using-bar-charts" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="plotting-key-stats-using-bar-charts"><span class="header-section-number">5.2</span> Plotting key stats using bar charts</h3>
<p><strong>Amazon Athena</strong> lets you query data in Amazon S3 using a standard SQL interface. It reflects the databases and tables in the AWS Glue Catalog.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_athena2.png" title="AWS Athena - Overview" class="img-fluid"></p>
<p>You can create interactive queries and perform any data manipulations required for further downstream processing.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_athena1.png" title="AWS Athena - Overview" class="img-fluid"></p>
<p>A Standard SQL query can be saved as a string and then passed as a parameter into the Athena query. For example to count the total number of reviews by sentiment, the SQL query here will take the following form:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb31-1"><span class="kw" style="color: #003B4F;">SELECT</span> column_name, <span class="fu" style="color: #4758AB;">COUNT</span>(column_name) <span class="kw" style="color: #003B4F;">as</span> new_column_name</span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;">FROM</span> table_name</span>
<span id="cb31-3"><span class="kw" style="color: #003B4F;">GROUP</span> <span class="kw" style="color: #003B4F;">BY</span> column_name</span>
<span id="cb31-4"><span class="kw" style="color: #003B4F;">ORDER</span> <span class="kw" style="color: #003B4F;">BY</span> column_name</span></code></pre></div>
</section>
<section id="how-many-reviews-per-sentiment" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="how-many-reviews-per-sentiment"><span class="header-section-number">5.3</span> How many reviews per sentiment?</h3>
<div class="cell" data-outputid="6a908564-8c2e-43c0-eb0c-70ec4a19d4e7">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">statement_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb32-2"><span class="st" style="color: #20794D;">SELECT sentiment, COUNT(sentiment) AS count_sentiment</span></span>
<span id="cb32-3"><span class="st" style="color: #20794D;">FROM reviews</span></span>
<span id="cb32-4"><span class="st" style="color: #20794D;">GROUP BY sentiment</span></span>
<span id="cb32-5"><span class="st" style="color: #20794D;">ORDER BY sentiment</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="bu" style="color: null;">print</span>(statement_count_by_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT sentiment, COUNT(sentiment) AS count_sentiment
FROM reviews
GROUP BY sentiment
ORDER BY sentiment
</code></pre>
</div>
</div>
<p>Query data in Amazon Athena database cluster using the prepared SQL statement:</p>
<div class="cell" data-outputid="223abb7e-6ff3-4d27-e79d-3bdcddc61d42">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb34-2">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_sentiment,</span>
<span id="cb34-3">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb34-4">)</span>
<span id="cb34-5"></span>
<span id="cb34-6"><span class="bu" style="color: null;">print</span>(df_count_by_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sentiment  count_sentiment
0         -1             2370
1          0             2823
2          1            17433</code></pre>
</div>
</div>
<p>Preview the results of the query:</p>
<div class="cell" data-outputid="8c1baeae-65d9-488f-b6ae-b1141cd32dc1">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df_count_by_sentiment.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bar'</span>, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_sentiment'</span>, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;AxesSubplot:xlabel='sentiment'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>So we can see the positive sentiment (1) category has by far the most reviews.</p>
</section>
<section id="calculate-total-number-of-reviews-per-product-category" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="calculate-total-number-of-reviews-per-product-category"><span class="header-section-number">5.4</span> Calculate total number of reviews per product category</h3>
<p>Using an Amazon Athena query with the standard SQL statement passed as a parameter, we can calculate the total number of reviews per <code>product_category</code> in the table <code>reviews</code>.</p>
<p>We can create an SQL statement of the form</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb38-1"><span class="kw" style="color: #003B4F;">SELECT</span> category_column, <span class="fu" style="color: #4758AB;">COUNT</span>(column_name) <span class="kw" style="color: #003B4F;">AS</span> new_column_name</span>
<span id="cb38-2"><span class="kw" style="color: #003B4F;">FROM</span> table_name</span>
<span id="cb38-3"><span class="kw" style="color: #003B4F;">GROUP</span> <span class="kw" style="color: #003B4F;">BY</span> category_column</span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">ORDER</span> <span class="kw" style="color: #003B4F;">BY</span> new_column_name <span class="kw" style="color: #003B4F;">DESC</span></span></code></pre></div>
<p>as a triple quote string into the variable <code>statement_count_by_category</code>. We will also use the column <code>sentiment</code> in the <code>COUNT</code> function and give it a new name <code>count_sentiment</code>.</p>
<div class="cell" data-outputid="2dca4de6-d34f-4602-c37e-53966cc1c3d7">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">statement_count_by_category <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb39-2"><span class="st" style="color: #20794D;">SELECT product_category, COUNT(sentiment) AS count_sentiment</span></span>
<span id="cb39-3"><span class="st" style="color: #20794D;">FROM reviews</span></span>
<span id="cb39-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb39-5"><span class="st" style="color: #20794D;">ORDER BY count_sentiment DESC</span></span>
<span id="cb39-6"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb39-7"><span class="bu" style="color: null;">print</span>(statement_count_by_category)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, COUNT(sentiment) AS count_sentiment
FROM reviews
GROUP BY product_category 
ORDER BY count_sentiment DESC
</code></pre>
</div>
</div>
<p>Let’s query data in Amazon Athena database passing the prepared SQL statement:</p>
<div class="cell" data-outputid="bbb496c2-f765-4b59-f67b-c692b2bed41b">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb41-2">df_count_by_category <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb41-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category,</span>
<span id="cb41-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb41-5">)</span>
<span id="cb41-6"></span>
<span id="cb41-7">df_count_by_category</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 320 ms, sys: 24.5 ms, total: 345 ms
Wall time: 3.27 s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>product_category</th>
      <th>count_sentiment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Dresses</td>
      <td>6145</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Knits</td>
      <td>4626</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Blouses</td>
      <td>2983</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Sweaters</td>
      <td>1380</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Pants</td>
      <td>1350</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Jeans</td>
      <td>1104</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Fine gauge</td>
      <td>1059</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Skirts</td>
      <td>903</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Jackets</td>
      <td>683</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Lounge</td>
      <td>669</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Swim</td>
      <td>332</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Outerwear</td>
      <td>319</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Shorts</td>
      <td>304</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Sleep</td>
      <td>214</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Legwear</td>
      <td>158</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Intimates</td>
      <td>147</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Layering</td>
      <td>132</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Trend</td>
      <td>118</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="which-product-categories-are-highest-rated-by-average-sentiment" class="level3" data-number="5.5">
<h3 data-number="5.5" class="anchored" data-anchor-id="which-product-categories-are-highest-rated-by-average-sentiment"><span class="header-section-number">5.5</span> Which product categories are highest rated by average sentiment?</h3>
<p>We will set the SQL statement to find the average sentiment per product category, showing the results in the descending order.</p>
<div class="cell" data-outputid="3a8832c5-0db9-4b7a-beef-a617c2c94560">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">statement_avg_by_category <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb43-2"><span class="st" style="color: #20794D;">SELECT product_category, AVG(sentiment) AS avg_sentiment</span></span>
<span id="cb43-3"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> </span></span>
<span id="cb43-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb43-5"><span class="st" style="color: #20794D;">ORDER BY avg_sentiment DESC</span></span>
<span id="cb43-6"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="bu" style="color: null;">print</span>(statement_avg_by_category)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, AVG(sentiment) AS avg_sentiment
FROM reviews 
GROUP BY product_category 
ORDER BY avg_sentiment DESC
</code></pre>
</div>
</div>
<p>Lets query data in Amazon Athena database passing the prepared SQL statement:</p>
<div class="cell" data-outputid="32a30401-6472-4e46-d6ae-a8447213ae53">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb45-2">df_avg_by_category <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb45-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_avg_by_category,</span>
<span id="cb45-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb45-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 462 ms, sys: 16.5 ms, total: 478 ms
Wall time: 3.74 s</code></pre>
</div>
</div>
<p>Let’s now preview the query results in the temporary S3 bucket: <code>s3://aws-athena-query-results-ACCOUNT-REGION/</code></p>
<div class="cell" data-outputid="8b91eb80-2228-4cdb-9cb4-f49430d5665c">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">df_avg_by_category</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>product_category</th>
      <th>avg_sentiment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Layering</td>
      <td>0.780303</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Jeans</td>
      <td>0.746377</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Lounge</td>
      <td>0.745889</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Sleep</td>
      <td>0.710280</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Shorts</td>
      <td>0.707237</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Pants</td>
      <td>0.705185</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Intimates</td>
      <td>0.700680</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Jackets</td>
      <td>0.699854</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Skirts</td>
      <td>0.696567</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Legwear</td>
      <td>0.696203</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Fine gauge</td>
      <td>0.692162</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Outerwear</td>
      <td>0.683386</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Knits</td>
      <td>0.653913</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Swim</td>
      <td>0.644578</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Dresses</td>
      <td>0.643287</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Sweaters</td>
      <td>0.641304</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Blouses</td>
      <td>0.641301</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Trend</td>
      <td>0.483051</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><strong>Visualization</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;">def</span> show_values_barplot(axs, space):</span>
<span id="cb48-2">    <span class="kw" style="color: #003B4F;">def</span> _show_on_plot(ax):</span>
<span id="cb48-3">        <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> ax.patches:</span>
<span id="cb48-4">            _x <span class="op" style="color: #5E5E5E;">=</span> p.get_x() <span class="op" style="color: #5E5E5E;">+</span> p.get_width() <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">float</span>(space)</span>
<span id="cb48-5">            _y <span class="op" style="color: #5E5E5E;">=</span> p.get_y() <span class="op" style="color: #5E5E5E;">+</span> p.get_height()</span>
<span id="cb48-6">            value <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">round</span>(<span class="bu" style="color: null;">float</span>(p.get_width()),<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb48-7">            ax.text(_x, _y, value, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"left"</span>)</span>
<span id="cb48-8"></span>
<span id="cb48-9">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(axs, np.ndarray):</span>
<span id="cb48-10">        <span class="cf" style="color: #003B4F;">for</span> idx, ax <span class="kw" style="color: #003B4F;">in</span> np.ndenumerate(axs):</span>
<span id="cb48-11">            _show_on_plot(ax)</span>
<span id="cb48-12">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb48-13">        _show_on_plot(axs)</span></code></pre></div>
</div>
<div class="cell" data-outputid="499a9209-b8ea-4fbc-e1a2-3216e241cbaf">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># Create plot</span></span>
<span id="cb49-2">barplot <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(</span>
<span id="cb49-3">    data <span class="op" style="color: #5E5E5E;">=</span> df_avg_by_category, </span>
<span id="cb49-4">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>,</span>
<span id="cb49-5">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'avg_sentiment'</span>, </span>
<span id="cb49-6">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"b"</span>, </span>
<span id="cb49-7">    saturation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb49-8">)</span>
<span id="cb49-9"></span>
<span id="cb49-10"><span class="co" style="color: #5E5E5E;"># Set the size of the figure</span></span>
<span id="cb49-11">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="fl" style="color: #AD0000;">15.0</span>, <span class="fl" style="color: #AD0000;">10.0</span>)})</span>
<span id="cb49-12">    </span>
<span id="cb49-13"><span class="co" style="color: #5E5E5E;"># Set title and x-axis ticks </span></span>
<span id="cb49-14">plt.title(<span class="st" style="color: #20794D;">'Average sentiment by product category'</span>)</span>
<span id="cb49-15"><span class="co" style="color: #5E5E5E;">#plt.xticks([-1, 0, 1], ['Negative', 'Neutral', 'Positive'])</span></span>
<span id="cb49-16"></span>
<span id="cb49-17"><span class="co" style="color: #5E5E5E;"># Helper code to show actual values afters bars </span></span>
<span id="cb49-18">show_values_barplot(barplot, <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb49-19"></span>
<span id="cb49-20">plt.xlabel(<span class="st" style="color: #20794D;">"Average sentiment"</span>)</span>
<span id="cb49-21">plt.ylabel(<span class="st" style="color: #20794D;">"Product category"</span>)</span>
<span id="cb49-22"></span>
<span id="cb49-23">plt.tight_layout()</span>
<span id="cb49-24"></span>
<span id="cb49-25"><span class="co" style="color: #5E5E5E;"># Show graphic</span></span>
<span id="cb49-26">plt.show(barplot)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="which-product-categories-have-the-most-reviews" class="level3" data-number="5.6">
<h3 data-number="5.6" class="anchored" data-anchor-id="which-product-categories-have-the-most-reviews"><span class="header-section-number">5.6</span> Which product categories have the most reviews?</h3>
<p>Let’s create an SQL statement to find the count of sentiment per product category, showing the results in the descending order.</p>
<div class="cell" data-outputid="f2568c3d-d2e9-46a4-c837-9e36d6ffe6ea">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">statement_count_by_category_desc <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb50-2"><span class="st" style="color: #20794D;">SELECT product_category, COUNT(*) AS count_reviews </span></span>
<span id="cb50-3"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb50-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb50-5"><span class="st" style="color: #20794D;">ORDER BY count_reviews DESC</span></span>
<span id="cb50-6"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb50-7"></span>
<span id="cb50-8"><span class="bu" style="color: null;">print</span>(statement_count_by_category_desc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, COUNT(*) AS count_reviews 
FROM reviews
GROUP BY product_category 
ORDER BY count_reviews DESC
</code></pre>
</div>
</div>
<p>Now lets query data in Amazon Athena database passing the prepared SQL statement.</p>
<div class="cell" data-outputid="607b59d9-f9d8-4671-a27f-45422d2dc9ee">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb52-2">df_count_by_category_desc <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb52-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category_desc,</span>
<span id="cb52-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb52-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 360 ms, sys: 22.6 ms, total: 382 ms
Wall time: 4.38 s</code></pre>
</div>
</div>
<p>Let’s store maximum number of sentiment for the visualization plot.</p>
<div class="cell" data-outputid="58d816a8-053f-4a0e-8254-78e71ee6bde7">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">max_sentiment <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_desc[<span class="st" style="color: #20794D;">'count_reviews'</span>].<span class="bu" style="color: null;">max</span>()</span>
<span id="cb54-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Highest number of reviews (in a single category): </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(max_sentiment))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest number of reviews (in a single category): 6145</code></pre>
</div>
</div>
<p>Let’s now plot this as a bar chart.</p>
<div class="cell" data-outputid="49aa5fc4-9c2f-4f65-dbbf-68eb18d4a4c0">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># Create seaborn barplot</span></span>
<span id="cb56-2">barplot <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(</span>
<span id="cb56-3">    data<span class="op" style="color: #5E5E5E;">=</span>df_count_by_category_desc, </span>
<span id="cb56-4">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>, </span>
<span id="cb56-5">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_reviews'</span>, </span>
<span id="cb56-6">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"b"</span>,</span>
<span id="cb56-7">    saturation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb56-8">)</span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="co" style="color: #5E5E5E;"># Set the size of the figure</span></span>
<span id="cb56-11">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="fl" style="color: #AD0000;">15.0</span>, <span class="fl" style="color: #AD0000;">10.0</span>)})</span>
<span id="cb56-12">    </span>
<span id="cb56-13"><span class="co" style="color: #5E5E5E;"># Set title</span></span>
<span id="cb56-14">plt.title(<span class="st" style="color: #20794D;">"Number of reviews per product category"</span>)</span>
<span id="cb56-15">plt.xlabel(<span class="st" style="color: #20794D;">"Number of reviews"</span>)</span>
<span id="cb56-16">plt.ylabel(<span class="st" style="color: #20794D;">"Product category"</span>)</span>
<span id="cb56-17"></span>
<span id="cb56-18">plt.tight_layout()</span>
<span id="cb56-19"></span>
<span id="cb56-20"><span class="co" style="color: #5E5E5E;"># Show the barplot</span></span>
<span id="cb56-21">plt.show(barplot)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="what-is-the-breakdown-of-sentiments-per-product-category" class="level3" data-number="5.7">
<h3 data-number="5.7" class="anchored" data-anchor-id="what-is-the-breakdown-of-sentiments-per-product-category"><span class="header-section-number">5.7</span> What is the breakdown of sentiments per product category?</h3>
<p>Let’s set the SQL statement to find the count of sentiment per product category and sentiment.</p>
<div class="cell" data-outputid="5dbd22ae-0041-4fdb-93d0-41253e311611">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">statement_count_by_category_and_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb57-2"><span class="st" style="color: #20794D;">SELECT product_category,</span></span>
<span id="cb57-3"><span class="st" style="color: #20794D;">         sentiment,</span></span>
<span id="cb57-4"><span class="st" style="color: #20794D;">         COUNT(*) AS count_reviews</span></span>
<span id="cb57-5"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb57-6"><span class="st" style="color: #20794D;">GROUP BY  product_category, sentiment</span></span>
<span id="cb57-7"><span class="st" style="color: #20794D;">ORDER BY  product_category ASC, sentiment DESC, count_reviews</span></span>
<span id="cb57-8"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb57-9"></span>
<span id="cb57-10"><span class="bu" style="color: null;">print</span>(statement_count_by_category_and_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category,
         sentiment,
         COUNT(*) AS count_reviews
FROM reviews
GROUP BY  product_category, sentiment
ORDER BY  product_category ASC, sentiment DESC, count_reviews
</code></pre>
</div>
</div>
<p>Now we query the data in Amazon Athena database passing the prepared SQL statement.</p>
<div class="cell" data-outputid="9a244d23-07ba-477a-8dbc-bcf48863b824">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb59-2">df_count_by_category_and_sentiment <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb59-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category_and_sentiment,</span>
<span id="cb59-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb59-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 482 ms, sys: 22 ms, total: 504 ms
Wall time: 3.56 s</code></pre>
</div>
</div>
<p>Let’s prepare for a stacked percentage horizontal bar plot showing proportion of sentiments per product category.</p>
<div class="cell" data-outputid="9443387b-b7a8-4e3f-987c-00b852468be5">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Create grouped dataframes by category and by sentiment</span></span>
<span id="cb61-2">grouped_category <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby(<span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb61-3">grouped_star <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby(<span class="st" style="color: #20794D;">'sentiment'</span>)</span>
<span id="cb61-4"></span>
<span id="cb61-5"><span class="co" style="color: #5E5E5E;"># Create sum of sentiments per star sentiment</span></span>
<span id="cb61-6">df_sum <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby([<span class="st" style="color: #20794D;">'sentiment'</span>]).<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb61-7"></span>
<span id="cb61-8"><span class="co" style="color: #5E5E5E;"># Calculate total number of sentiments</span></span>
<span id="cb61-9">total <span class="op" style="color: #5E5E5E;">=</span> df_sum[<span class="st" style="color: #20794D;">'count_reviews'</span>].<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb61-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total number of reviews: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(total))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total number of reviews: 22626</code></pre>
</div>
</div>
<p>And create a dictionary of product categories and array of star rating distribution per category.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">distribution <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb63-2">count_reviews_per_star <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb63-3">i<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb63-4"></span>
<span id="cb63-5"><span class="cf" style="color: #003B4F;">for</span> category, sentiments <span class="kw" style="color: #003B4F;">in</span> grouped_category:</span>
<span id="cb63-6">    count_reviews_per_star <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb63-7">    <span class="cf" style="color: #003B4F;">for</span> star <span class="kw" style="color: #003B4F;">in</span> sentiments[<span class="st" style="color: #20794D;">'sentiment'</span>]:</span>
<span id="cb63-8">        count_reviews_per_star.append(sentiments.at[i, <span class="st" style="color: #20794D;">'count_reviews'</span>])</span>
<span id="cb63-9">        i<span class="op" style="color: #5E5E5E;">=</span>i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb63-10">    distribution[category] <span class="op" style="color: #5E5E5E;">=</span> count_reviews_per_star</span></code></pre></div>
</div>
<p>Now let’s build an array per star across all categories.</p>
<div class="cell" data-outputid="1fb0704b-3db6-4f2d-d697-fe1b5fe47972">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">distribution</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>{'Blouses': [2256, 384, 343],
 'Dresses': [4634, 830, 681],
 'Fine gauge': [837, 118, 104],
 'Intimates': [117, 16, 14],
 'Jackets': [550, 61, 72],
 'Jeans': [909, 110, 85],
 'Knits': [3523, 605, 498],
 'Layering': [113, 9, 10],
 'Legwear': [126, 16, 16],
 'Lounge': [545, 78, 46],
 'Outerwear': [254, 29, 36],
 'Pants': [1074, 154, 122],
 'Shorts': [240, 39, 25],
 'Skirts': [714, 104, 85],
 'Sleep': [175, 16, 23],
 'Sweaters': [1036, 193, 151],
 'Swim': [252, 42, 38],
 'Trend': [78, 19, 21]}</code></pre>
</div>
</div>
<div class="cell" data-outputid="bd11465c-101d-42ea-809b-636d1804ec92">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">df_distribution_pct <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(distribution).transpose().<span class="bu" style="color: null;">apply</span>(</span>
<span id="cb66-2">    <span class="kw" style="color: #003B4F;">lambda</span> num_sentiments: num_sentiments<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">sum</span>(num_sentiments)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb66-3">)</span>
<span id="cb66-4">df_distribution_pct.columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'0'</span>, <span class="st" style="color: #20794D;">'-1'</span>]</span>
<span id="cb66-5">df_distribution_pct</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>0</th>
      <th>-1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Blouses</th>
      <td>75.628562</td>
      <td>12.872947</td>
      <td>11.498491</td>
    </tr>
    <tr>
      <th>Dresses</th>
      <td>75.410903</td>
      <td>13.506916</td>
      <td>11.082181</td>
    </tr>
    <tr>
      <th>Fine gauge</th>
      <td>79.036827</td>
      <td>11.142587</td>
      <td>9.820585</td>
    </tr>
    <tr>
      <th>Intimates</th>
      <td>79.591837</td>
      <td>10.884354</td>
      <td>9.523810</td>
    </tr>
    <tr>
      <th>Jackets</th>
      <td>80.527086</td>
      <td>8.931186</td>
      <td>10.541728</td>
    </tr>
    <tr>
      <th>Jeans</th>
      <td>82.336957</td>
      <td>9.963768</td>
      <td>7.699275</td>
    </tr>
    <tr>
      <th>Knits</th>
      <td>76.156507</td>
      <td>13.078253</td>
      <td>10.765240</td>
    </tr>
    <tr>
      <th>Layering</th>
      <td>85.606061</td>
      <td>6.818182</td>
      <td>7.575758</td>
    </tr>
    <tr>
      <th>Legwear</th>
      <td>79.746835</td>
      <td>10.126582</td>
      <td>10.126582</td>
    </tr>
    <tr>
      <th>Lounge</th>
      <td>81.464873</td>
      <td>11.659193</td>
      <td>6.875934</td>
    </tr>
    <tr>
      <th>Outerwear</th>
      <td>79.623824</td>
      <td>9.090909</td>
      <td>11.285266</td>
    </tr>
    <tr>
      <th>Pants</th>
      <td>79.555556</td>
      <td>11.407407</td>
      <td>9.037037</td>
    </tr>
    <tr>
      <th>Shorts</th>
      <td>78.947368</td>
      <td>12.828947</td>
      <td>8.223684</td>
    </tr>
    <tr>
      <th>Skirts</th>
      <td>79.069767</td>
      <td>11.517165</td>
      <td>9.413068</td>
    </tr>
    <tr>
      <th>Sleep</th>
      <td>81.775701</td>
      <td>7.476636</td>
      <td>10.747664</td>
    </tr>
    <tr>
      <th>Sweaters</th>
      <td>75.072464</td>
      <td>13.985507</td>
      <td>10.942029</td>
    </tr>
    <tr>
      <th>Swim</th>
      <td>75.903614</td>
      <td>12.650602</td>
      <td>11.445783</td>
    </tr>
    <tr>
      <th>Trend</th>
      <td>66.101695</td>
      <td>16.101695</td>
      <td>17.796610</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s plot the distributions of sentiments per product category.</p>
<div class="cell" data-outputid="25bec75a-75df-4fc6-9d67-67c6953b4431">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">categories <span class="op" style="color: #5E5E5E;">=</span> df_distribution_pct.index</span>
<span id="cb67-2"></span>
<span id="cb67-3"><span class="co" style="color: #5E5E5E;"># Plot bars</span></span>
<span id="cb67-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb67-5"></span>
<span id="cb67-6">df_distribution_pct.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"barh"</span>, </span>
<span id="cb67-7">                         stacked<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, </span>
<span id="cb67-8">                         edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb67-9">                         width<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb67-10">                         color<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'green'</span>, </span>
<span id="cb67-11">                                <span class="st" style="color: #20794D;">'orange'</span>, </span>
<span id="cb67-12">                                <span class="st" style="color: #20794D;">'blue'</span>])</span>
<span id="cb67-13"></span>
<span id="cb67-14">plt.title(<span class="st" style="color: #20794D;">"Distribution of reviews per sentiment per category"</span>, </span>
<span id="cb67-15">          fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'16'</span>)</span>
<span id="cb67-16"></span>
<span id="cb67-17">plt.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.04</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb67-18">           loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"upper left"</span>,</span>
<span id="cb67-19">           labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Positive'</span>, </span>
<span id="cb67-20">                   <span class="st" style="color: #20794D;">'Neutral'</span>, </span>
<span id="cb67-21">                   <span class="st" style="color: #20794D;">'Negative'</span>])</span>
<span id="cb67-22"></span>
<span id="cb67-23">plt.xlabel(<span class="st" style="color: #20794D;">"% Breakdown of sentiments"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb67-24">plt.gca().invert_yaxis()</span>
<span id="cb67-25">plt.tight_layout()</span>
<span id="cb67-26"></span>
<span id="cb67-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 1000x500 with 0 Axes&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-43-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="analyze-the-distribution-of-review-word-counts" class="level3" data-number="5.8">
<h3 data-number="5.8" class="anchored" data-anchor-id="analyze-the-distribution-of-review-word-counts"><span class="header-section-number">5.8</span> Analyze the distribution of review word counts</h3>
<p>Let’s now set the SQL statement to count the number of the words in each of the reviews.</p>
<div class="cell" data-outputid="dd6a2a1d-78e0-40cb-8095-6bd32edb4d31">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">statement_num_words <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb69-2"><span class="st" style="color: #20794D;">    SELECT CARDINALITY(SPLIT(review_body, ' ')) as num_words</span></span>
<span id="cb69-3"><span class="st" style="color: #20794D;">    FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb69-4"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb69-5"></span>
<span id="cb69-6"><span class="bu" style="color: null;">print</span>(statement_num_words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    SELECT CARDINALITY(SPLIT(review_body, ' ')) as num_words
    FROM reviews
</code></pre>
</div>
</div>
<p>Now query the data in Amazon Athena database passing the SQL statement.</p>
<div class="cell" data-outputid="452e8a65-c21a-4bbb-de47-f4bdeff4f3a7">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb71-2">df_num_words <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb71-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_num_words,</span>
<span id="cb71-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb71-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 286 ms, sys: 20.9 ms, total: 307 ms
Wall time: 3.25 s</code></pre>
</div>
</div>
<p>Let’s print out and analyse some descriptive statistics.</p>
<div class="cell" data-outputid="ae09e3c3-d0b4-41b6-e836-ceeda57eb6c1">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">summary <span class="op" style="color: #5E5E5E;">=</span> df_num_words[<span class="st" style="color: #20794D;">"num_words"</span>].describe(percentiles<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.10</span>, <span class="fl" style="color: #AD0000;">0.20</span>, <span class="fl" style="color: #AD0000;">0.30</span>, <span class="fl" style="color: #AD0000;">0.40</span>, <span class="fl" style="color: #AD0000;">0.50</span>, <span class="fl" style="color: #AD0000;">0.60</span>, <span class="fl" style="color: #AD0000;">0.70</span>, <span class="fl" style="color: #AD0000;">0.80</span>, <span class="fl" style="color: #AD0000;">0.90</span>, <span class="fl" style="color: #AD0000;">1.00</span>])</span>
<span id="cb73-2">summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>count    22626.000000
mean        62.709847
std         29.993735
min          2.000000
10%         22.000000
20%         33.000000
30%         42.000000
40%         51.000000
50%         61.000000
60%         72.000000
70%         86.000000
80%         97.000000
90%        103.000000
100%       122.000000
max        122.000000
Name: num_words, dtype: float64</code></pre>
</div>
</div>
<p>Now we will plot the distribution of the words number per review.</p>
<div class="cell" data-outputid="70a460d3-cf2d-4e89-fb74-0ca2b43ef362">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">df_num_words[<span class="st" style="color: #20794D;">"num_words"</span>].plot.hist(xticks<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">256</span>]).axvline(</span>
<span id="cb75-2">    x<span class="op" style="color: #5E5E5E;">=</span>summary[<span class="st" style="color: #20794D;">"100%"</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"red"</span></span>
<span id="cb75-3">)</span>
<span id="cb75-4"></span>
<span id="cb75-5">plt.xlabel(<span class="st" style="color: #20794D;">"Words number"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb75-6">plt.ylabel(<span class="st" style="color: #20794D;">"Frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb75-7">plt.savefig(<span class="st" style="color: #20794D;">'distribution_num_words_per_review.png'</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb75-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">6</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws.html</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Using Satellite Images and Deep Learning to Track Deforestation in the Amazon</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this project we will be using a deep learning model to help classify satellite images of the amazon rain forest. <strong>Here the main objective is not actually to get the best results for this task, rather to use this dataset to illustrate the use of the Fastai deep learning library</strong> - in particular to demonstrate the uses of the high-level api as well as the mid-level api and show how this can be used to configure different types of datasets for different types of problems.</p>
</section>
<section id="using-fastai-to-prepare-data-for-the-amazon-image-classification-task" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="using-fastai-to-prepare-data-for-the-amazon-image-classification-task"><span class="header-section-number">2</span> Using Fastai to prepare data for the Amazon Image classification task</h2>
<p>The amazon dataset comes from the <a href="https://www.kaggle.com/competitions/planet-understanding-the-amazon-from-space">Understanding the Amazon from Space</a> project, which aims:</p>
<blockquote class="blockquote">
<p>‘…to label satellite image chips with atmospheric conditions and various classes of land cover/land use. Resulting algorithms will help the global community better understand where, how, and why deforestation happens all over the world - and ultimately how to respond.’</p>
</blockquote>
<p>Key aspects of this task include.</p>
<ul>
<li>Our data consists of images as well as multiple labels for each image</li>
<li>Our task is <em>Multi-label Classification</em> i.e.&nbsp;to be able to predict one or more labels for a given image</li>
</ul>
<p>While the main dataset has over 40,000 images - we will be using a small subset of this of just 200 images.</p>
<p>In an earlier project I looked at a different dataset of satellite images, in this case for an <a href="2021-05-15-satellite-recognition-buildings-woodland-water-ai.html">image segmentation task rather than classification</a>.</p>
</section>
<section id="loading-and-examining-the-data" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="loading-and-examining-the-data"><span class="header-section-number">3</span> Loading and examining the data</h2>
<p>Let’s see how we can use the Fastai library to prepare our data to perform this task, and start by loading the data.</p>
<div class="cell" data-outputid="7a87a3fa-37ec-464d-c448-15885ffc1ce2" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">path <span class="op" style="color: #5E5E5E;">=</span> untar_data(URLs.PLANET_TINY)</span>
<span id="cb1-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(#3) [Path('/root/.fastai/data/planet_tiny/labels.csv'),Path('/root/.fastai/data/planet_tiny/models'),Path('/root/.fastai/data/planet_tiny/train')]</code></pre>
</div>
</div>
<p>So we have a folder called ‘train’ which we assume has the images, lets take a look to check.</p>
<div class="cell" data-outputid="dd002822-29a6-4111-a9b8-aafbbee59ebe" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"train"</span>).ls()[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(#5) [Path('/root/.fastai/data/planet_tiny/train/train_39223.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_5302.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_34793.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_28156.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_15839.jpg')]</code></pre>
</div>
</div>
<p>We also have a labels.csv file, which would normally have the image names and their associated labels, lets verify this.</p>
<div class="cell" data-outputid="daabefdb-3fe5-4b24-f79e-1bf2c1985215" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"labels.csv"</span>)</span>
<span id="cb5-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">


  <div id="df-9d5aa2e9-296f-4abc-8109-47ff26223573">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_name</th>
      <th>tags</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>train_31112</td>
      <td>clear primary</td>
    </tr>
    <tr>
      <th>1</th>
      <td>train_4300</td>
      <td>partly_cloudy primary water</td>
    </tr>
    <tr>
      <th>2</th>
      <td>train_39539</td>
      <td>clear primary water</td>
    </tr>
    <tr>
      <th>3</th>
      <td>train_12498</td>
      <td>agriculture clear primary road</td>
    </tr>
    <tr>
      <th>4</th>
      <td>train_9320</td>
      <td>clear primary</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-9d5aa2e9-296f-4abc-8109-47ff26223573')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-9d5aa2e9-296f-4abc-8109-47ff26223573 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-9d5aa2e9-296f-4abc-8109-47ff26223573');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Let’s check how many images we have.</p>
<div class="cell" data-outputid="45f3de6e-d8df-4613-e4be-9acaf5d095fa" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(200, 2)</code></pre>
</div>
</div>
<p>So this is a <em>multi-label classification</em> task, each image has one or more labels which we hope to predict. Lets get an idea of how many example images we have for each label.</p>
<div class="cell" data-outputid="77a3d10a-4a57-496a-ba16-37b5ce1b0805" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">new_df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'tags'</span>].<span class="bu" style="color: null;">str</span>.split(expand<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).stack().value_counts().reset_index()</span>
<span id="cb8-2">new_df.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Word'</span>, <span class="st" style="color: #20794D;">'Frequency'</span>] </span>
<span id="cb8-3"><span class="bu" style="color: null;">print</span>(new_df.shape)</span>
<span id="cb8-4">new_df.head(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(14, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">


  <div id="df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Word</th>
      <th>Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>primary</td>
      <td>190</td>
    </tr>
    <tr>
      <th>1</th>
      <td>clear</td>
      <td>139</td>
    </tr>
    <tr>
      <th>2</th>
      <td>agriculture</td>
      <td>61</td>
    </tr>
    <tr>
      <th>3</th>
      <td>partly_cloudy</td>
      <td>42</td>
    </tr>
    <tr>
      <th>4</th>
      <td>road</td>
      <td>41</td>
    </tr>
    <tr>
      <th>5</th>
      <td>water</td>
      <td>31</td>
    </tr>
    <tr>
      <th>6</th>
      <td>cultivation</td>
      <td>28</td>
    </tr>
    <tr>
      <th>7</th>
      <td>habitation</td>
      <td>19</td>
    </tr>
    <tr>
      <th>8</th>
      <td>haze</td>
      <td>11</td>
    </tr>
    <tr>
      <th>9</th>
      <td>cloudy</td>
      <td>8</td>
    </tr>
    <tr>
      <th>10</th>
      <td>bare_ground</td>
      <td>5</td>
    </tr>
    <tr>
      <th>11</th>
      <td>artisinal_mine</td>
      <td>4</td>
    </tr>
    <tr>
      <th>12</th>
      <td>blooming</td>
      <td>3</td>
    </tr>
    <tr>
      <th>13</th>
      <td>selective_logging</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>So we can see this is a very imbalanced dataset, some labels such as <em>primary</em> occur alot, wheras other labels such as <em>selective_logging</em> only occur twice.</p>
<p>As we are mainly focussing on the use of fastai not making the best model, we will be using the fastest method of creating a training &amp; validation datasets using the random split method. Given we have some categories that don’t have many examples, if we do a random split its possible we could have some labels only in the training or valdiation sets, and this will create an error as we can’t have labels in the validation set that are not in the training set.</p>
<p>Let’s deal with this by removing the images that have low-frequency labels, to try to reduce the risk of this error so we can focus on how to use the fastai library.</p>
<div class="cell" data-outputid="10cf63c9-722f-4607-9c39-bd9a8bd9af75" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df <span class="op" style="color: #5E5E5E;">=</span> df.copy()</span>
<span id="cb10-2">df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">"tags"</span>].<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">"haze|cloudy|bare_ground|artisinal_mine|blooming|selective_logging"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">False</span>]</span>
<span id="cb10-3">new_df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'tags'</span>].<span class="bu" style="color: null;">str</span>.split(expand<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).stack().value_counts().reset_index()</span>
<span id="cb10-4">new_df.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Word'</span>, <span class="st" style="color: #20794D;">'Frequency'</span>] </span>
<span id="cb10-5"><span class="bu" style="color: null;">print</span>(new_df.shape)</span>
<span id="cb10-6">new_df.head(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(7, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">


  <div id="df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Word</th>
      <th>Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>clear</td>
      <td>127</td>
    </tr>
    <tr>
      <th>1</th>
      <td>primary</td>
      <td>126</td>
    </tr>
    <tr>
      <th>2</th>
      <td>agriculture</td>
      <td>38</td>
    </tr>
    <tr>
      <th>3</th>
      <td>road</td>
      <td>26</td>
    </tr>
    <tr>
      <th>4</th>
      <td>water</td>
      <td>18</td>
    </tr>
    <tr>
      <th>5</th>
      <td>cultivation</td>
      <td>14</td>
    </tr>
    <tr>
      <th>6</th>
      <td>habitation</td>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>We now have a second issue to deal with, the image names in our labels.csv is not a complete file name, this will make it more difficult to read in the image files. Lets create a new column that has the complete image file name.</p>
<div class="cell" data-outputid="225a7282-926e-458d-edf6-c96d719a88e6" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df[<span class="st" style="color: #20794D;">'filename'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'image_name'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'.jpg'</span></span>
<span id="cb12-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">


  <div id="df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_name</th>
      <th>tags</th>
      <th>filename</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>train_31112</td>
      <td>clear primary</td>
      <td>train_31112.jpg</td>
    </tr>
    <tr>
      <th>2</th>
      <td>train_39539</td>
      <td>clear primary water</td>
      <td>train_39539.jpg</td>
    </tr>
    <tr>
      <th>3</th>
      <td>train_12498</td>
      <td>agriculture clear primary road</td>
      <td>train_12498.jpg</td>
    </tr>
    <tr>
      <th>4</th>
      <td>train_9320</td>
      <td>clear primary</td>
      <td>train_9320.jpg</td>
    </tr>
    <tr>
      <th>5</th>
      <td>train_28430</td>
      <td>agriculture clear cultivation primary road</td>
      <td>train_28430.jpg</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
</section>
<section id="the-fastai-layered-api" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="the-fastai-layered-api"><span class="header-section-number">4</span> The Fastai layered API</h2>
<p>In a previous article i gave an introduction to the <a href="https://livingdatalab.com/fastai/2021/05/30/fastai-midlevel-api.html">Fastai layered API</a></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/fastai-layered.png" title="The Fastai layered API" class="img-fluid"></p>
<p>In this article we will make use of the High &amp; Mid level API.</p>
<section id="using-the-high-level-api" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="using-the-high-level-api"><span class="header-section-number">4.1</span> Using the High Level API</h3>
<p>This level API is the simplest to use, having many preset defaults that make it easy to load and setup data for a range of deep learning tasks.</p>
<p>Let’s use it now to set up our amazon image data.</p>
<div class="cell" data-outputid="677d2a11-f292-4d4a-d198-58a75e09da3c" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_df(df, path, fn_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>, label_delim<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>,</span>
<span id="cb13-2">                               item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">460</span>), batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb13-3">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So a few things to note which the Fastai high level api has done:</p>
<ul>
<li>It’s used our dataframe to load the data</li>
<li>It uses the <em>path</em> variable to know which file path the images are located</li>
<li>The ‘fn_col’ parameter tells it which column to use for the filenames, in this case column 2 is the new column we created for the complete filename</li>
<li>The <em>folder</em> parameter tells it where the images are located under <em>path</em></li>
<li>The <em>label_delim</em> parameter tells it how to split the labels, in this case separated by spaces</li>
<li><em>item_tfms</em> a list of one or several transforms applied to the items before batching them for model training</li>
<li><em>batch_tfms</em> a list of one or several transforms applied to batches of images once they are formed during model training</li>
</ul>
<p>So we can see we have a good level of configurability even at the high level api.</p>
<p><a href="https://docs.fast.ai/vision.data.html">There are many other high level api functions for Fastai vision applications for loading different types of data</a>.</p>
<p>It will also be helpful to set up some metrics to measure our progress during training, specific to being a multi labelled classification task, and having an unbalanced dataset. A Good metric for this situation would be an F1 score for multiple classes, so lets set up some metrics for this now.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">f1_macro <span class="op" style="color: #5E5E5E;">=</span> F1ScoreMulti(thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, average<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'macro'</span>)</span>
<span id="cb14-2">f1_macro.name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'F1(macro)'</span></span>
<span id="cb14-3">f1_samples <span class="op" style="color: #5E5E5E;">=</span> F1ScoreMulti(thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, average<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'samples'</span>)</span>
<span id="cb14-4">f1_samples.name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'F1(samples)'</span></span></code></pre></div>
</div>
<p>So we are almost ready to create our model and start training.</p>
<p>One consideration we have when creating a model is which model to use? as of date of this article, there are many pre-trained deep learning vision models, and many new ones being added. Which should we use?</p>
<p>Jeremy Howard, one of the co-founders of FastAI completed <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">a project where he looked at a number recent of vision models and evaluated and ranked them by different criteria</a>.</p>
<p>These were based on Ros Wightmanns list of Pytorch state of the art image models library <a href="https://timm.fast.ai/">timm</a>.</p>
<p>Looking at these models and considering this use case: i’d like the best performing model but the best <em>smallest</em> model as we are not focussing here on getting the best results, rather to just demonstrate the usage of the Fastai library.</p>
<p>So looking with this criteria, i’ve selected the ‘convnext_small_in22k’ pre-trained image model to use.</p>
<p>Let’s now create the model using the high-level api function <em>vision_learner</em>.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;">'convnext_small_in22k'</span>, metrics<span class="op" style="color: #5E5E5E;">=</span>[partial(accuracy_multi, thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>), f1_macro, f1_samples])</span></code></pre></div>
</div>
<p>So we have created our model, using our data, and added the metrics to use.</p>
<p>But what about the model learning rate? for this we can use another great Fastai api function <em>lr_find()</em>.</p>
<p>For more information on this concept and the research behind it, including discriminative learning rates this is a <a href="https://towardsdatascience.com/why-i-use-fastai-and-you-should-too-a421f6c99508">great article</a>.</p>
<div class="cell" data-outputid="9d92276c-99aa-4944-c346-1d452ebf0266" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">learn.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>SuggestedLRs(valley=0.0008317637839354575)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-13-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>So this gives us a good idea of the a good learning rate to use, lets set this and train the model for 2 epochs.</p>
<div class="cell" data-outputid="9c62fa39-a651-4ae7-8200-91be3a84fb1d" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">learn.fine_tune(<span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">3e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.044040</td>
      <td>2.020892</td>
      <td>0.497143</td>
      <td>0.312559</td>
      <td>0.430190</td>
      <td>00:02</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.955900</td>
      <td>1.813314</td>
      <td>0.411429</td>
      <td>0.347462</td>
      <td>0.411784</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.914945</td>
      <td>1.890064</td>
      <td>0.554286</td>
      <td>0.363607</td>
      <td>0.453518</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>We can see our model is slowly starting to improve.</p>
<p>Let’s see how our model is predicting labels for our satellite images.</p>
<div class="cell" data-outputid="8d84cc30-51ed-4674-878d-e24705bc762a" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-15-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We can also get an idea of which images the model finds hardest to predict by using the <em>plot_top_losses()</em> function.</p>
<div class="cell" data-outputid="69e82aa9-9fe4-4974-9c95-507cc216f538" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">interp <span class="op" style="color: #5E5E5E;">=</span> Interpretation.from_learner(learn)</span>
<span id="cb20-2">interp.plot_top_losses(<span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>target</th>
      <th>predicted</th>
      <th>probabilities</th>
      <th>loss</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>clear;habitation;primary;road;water</td>
      <td>agriculture;cultivation;habitation;road;water</td>
      <td>TensorBase([1.0000e+00, 5.3429e-10, 9.1896e-01, 5.3812e-01, 1.8748e-02,\n            9.9999e-01, 9.9779e-01])</td>
      <td>5.9950785636901855</td>
    </tr>
    <tr>
      <th>1</th>
      <td>agriculture;clear;habitation;primary;road</td>
      <td>agriculture;cultivation;habitation;primary;road;water</td>
      <td>TensorBase([1.0000e+00, 1.3865e-08, 9.7993e-01, 9.4586e-01, 5.2794e-01,\n            9.9999e-01, 9.9923e-01])</td>
      <td>4.266438961029053</td>
    </tr>
    <tr>
      <th>2</th>
      <td>clear;primary;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9979e-01, 5.7836e-05, 1.7540e-01, 7.1101e-01, 5.7885e-01,\n            9.9740e-01, 9.9980e-01])</td>
      <td>3.7381298542022705</td>
    </tr>
    <tr>
      <th>3</th>
      <td>clear;cultivation;primary</td>
      <td>agriculture;road;water</td>
      <td>TensorBase([9.9726e-01, 3.5533e-04, 2.8459e-01, 3.0627e-01, 3.5213e-01,\n            9.9678e-01, 9.3701e-01])</td>
      <td>3.573106050491333</td>
    </tr>
    <tr>
      <th>4</th>
      <td>agriculture;clear;habitation;primary;road;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9999e-01, 6.4912e-11, 1.6498e-01, 8.6925e-01, 8.6978e-01,\n            1.0000e+00, 9.9922e-01])</td>
      <td>3.4169580936431885</td>
    </tr>
    <tr>
      <th>5</th>
      <td>agriculture;clear;primary;road</td>
      <td>agriculture;cultivation;habitation;road;water</td>
      <td>TensorBase([9.9999e-01, 3.5587e-06, 6.8011e-01, 5.0741e-01, 3.6172e-02,\n            9.9992e-01, 9.7514e-01])</td>
      <td>3.058271884918213</td>
    </tr>
    <tr>
      <th>6</th>
      <td>clear;primary;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9094e-01, 1.3812e-04, 4.5300e-01, 6.2815e-01, 6.4152e-01,\n            7.7717e-01, 8.5307e-01])</td>
      <td>2.4697818756103516</td>
    </tr>
    <tr>
      <th>7</th>
      <td>clear;primary</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([0.9377, 0.0013, 0.1471, 0.7862, 0.9317, 0.9659, 0.6219])</td>
      <td>2.221360206604004</td>
    </tr>
    <tr>
      <th>8</th>
      <td>clear;primary</td>
      <td>agriculture;road</td>
      <td>TensorBase([6.0217e-01, 3.6376e-04, 3.3483e-02, 3.6663e-01, 4.4091e-01,\n            5.4576e-01, 9.7288e-02])</td>
      <td>1.5774089097976685</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-16-output-6.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-1" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="using-the-mid-level-api---version-1"><span class="header-section-number">4.2</span> Using the Mid Level API - Version 1</h3>
<p>Using the mid-level api can give us more control over how the dataset is constructed, which will be determined by the task.</p>
<p>The <a href="https://docs.fast.ai/tutorial.datablock.html">Fastai data block tutorial</a> is a great way to understand the methodology behind what the mid level api can do.</p>
<p>So there are many ways we could construct the data using the mid level api, however JH encourages us to consider a list of questions that can be helpful for choosing the best method which are:</p>
<ul>
<li>what are the types of our inputs and targets? Images and multiple labels.</li>
<li>where is the data? In a dataframe.</li>
<li>how do we know if a sample is in the training or the validation set? A column of our dataframe.</li>
<li>how do we get an image? By looking at the column ‘filename’.</li>
<li>how do we know the label of an image? By looking at the column ‘tags’.</li>
<li>do we want to apply a function to a given sample? Yes, we need to resize everything to a given size.</li>
<li>do we want to apply a function to a batch after it’s created? Yes, we want data augmentation.</li>
</ul>
<p>So while our model input (x -images) and outputs (y - labels) are in the dataframe, we need to do need to do a little processing on these dataframe columns before being able to use them, for example the filenames need filepaths added, and the labels need splitting.</p>
<p>We can create a datablock this way to address these needs.</p>
<div class="cell" data-outputid="067639e7-c4b1-4ad5-fa47-ba5c41a945cd" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb21-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span>ColReader(<span class="st" style="color: #20794D;">'filename'</span>, pref<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train'</span>) <span class="op" style="color: #5E5E5E;">+</span> os.path.sep),</span>
<span id="cb21-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span>ColReader(<span class="st" style="color: #20794D;">'tags'</span>, label_delim<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>),</span>
<span id="cb21-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb21-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb21-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb21-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see we used the <em>get_x &amp; get_y</em> parameters to process the images and labels columns using the <em>ColReader()</em> function. We can also see how the answers to those questions directly translates to different parameters in the DataBlock function.</p>
</section>
<section id="using-the-mid-level-api---version-2" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="using-the-mid-level-api---version-2"><span class="header-section-number">4.3</span> Using the Mid Level API - Version 2</h3>
<p>Another way we could approach this, for getting our images and labels correctly processed is by defining our own functions for doing this using a <em>lambda function</em>.</p>
<div class="cell" data-outputid="cf143791-6590-42ad-acb3-60ce4d9fe18b" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb22-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"train"</span><span class="op" style="color: #5E5E5E;">/</span><span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>x[<span class="dv" style="color: #AD0000;">2</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>,</span>
<span id="cb22-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="dv" style="color: #AD0000;">1</span>].split(<span class="st" style="color: #20794D;">' '</span>),</span>
<span id="cb22-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb22-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb22-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb22-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-3" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="using-the-mid-level-api---version-3"><span class="header-section-number">4.4</span> Using the Mid Level API - Version 3</h3>
<p>Alternatively, for our lambda functions we could use the column names rather than the indexes.</p>
<div class="cell" data-outputid="639fac1a-af05-4f2c-d9ad-6ebddd083f9e" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb23-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> o:<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/train/'</span><span class="op" style="color: #5E5E5E;">+</span>o.filename,</span>
<span id="cb23-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> o:o.tags.split(),</span>
<span id="cb23-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb23-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb23-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb23-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-4" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="using-the-mid-level-api---version-4"><span class="header-section-number">4.5</span> Using the Mid Level API - Version 4</h3>
<p>Both of these previous methods would involve iterating over all the rows of the dataframe. For large datasets &amp; dataframes, this could prove very costly in terms of time - not the ideal way for Fastai !</p>
<p>A better and faster way would be to use the <em>from_columns()</em> Datablock method. This uses a user-defined function passed in the <em>get_items</em> parameter to convert the columns into numpy arrays and work with these which would be quicker.</p>
<div class="cell" data-outputid="808dee54-2c83-40e5-8aec-8e1ac592ebd2" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;">def</span> _amazon_items(x): <span class="cf" style="color: #003B4F;">return</span> (</span>
<span id="cb24-2">    <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/train/'</span><span class="op" style="color: #5E5E5E;">+</span>x.filename, x.tags.<span class="bu" style="color: null;">str</span>.split())</span>
<span id="cb24-3"></span>
<span id="cb24-4">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock.from_columns(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb24-5">                   get_items<span class="op" style="color: #5E5E5E;">=</span>_amazon_items,</span>
<span id="cb24-6">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb24-7">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb24-8">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb24-9">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="training-our-model-more" class="level3" data-number="4.6">
<h3 data-number="4.6" class="anchored" data-anchor-id="training-our-model-more"><span class="header-section-number">4.6</span> Training our Model More</h3>
<p>Let’s now train our model for a few more epochs and observe the progress.</p>
<div class="cell" data-outputid="05a48846-d149-43b5-c1a0-e43e98284a50" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">learn.fine_tune(<span class="dv" style="color: #AD0000;">12</span>, <span class="fl" style="color: #AD0000;">1e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.839966</td>
      <td>1.319353</td>
      <td>0.628571</td>
      <td>0.423056</td>
      <td>0.526470</td>
      <td>00:02</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.816123</td>
      <td>0.863024</td>
      <td>0.662857</td>
      <td>0.434543</td>
      <td>0.519232</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.743988</td>
      <td>0.717785</td>
      <td>0.714286</td>
      <td>0.561080</td>
      <td>0.625896</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.748999</td>
      <td>0.740482</td>
      <td>0.645714</td>
      <td>0.488145</td>
      <td>0.593423</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.726016</td>
      <td>0.943211</td>
      <td>0.605714</td>
      <td>0.451780</td>
      <td>0.529645</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.710094</td>
      <td>1.014733</td>
      <td>0.622857</td>
      <td>0.514764</td>
      <td>0.472312</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>5</td>
      <td>0.707066</td>
      <td>0.860917</td>
      <td>0.697143</td>
      <td>0.643097</td>
      <td>0.563126</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>6</td>
      <td>0.692620</td>
      <td>0.711039</td>
      <td>0.702857</td>
      <td>0.556803</td>
      <td>0.558268</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>7</td>
      <td>0.679113</td>
      <td>0.690488</td>
      <td>0.691429</td>
      <td>0.542517</td>
      <td>0.570459</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>8</td>
      <td>0.668592</td>
      <td>0.613841</td>
      <td>0.720000</td>
      <td>0.580288</td>
      <td>0.608078</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>9</td>
      <td>0.664969</td>
      <td>0.561042</td>
      <td>0.748571</td>
      <td>0.617624</td>
      <td>0.648078</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>10</td>
      <td>0.652281</td>
      <td>0.525281</td>
      <td>0.760000</td>
      <td>0.630952</td>
      <td>0.665602</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>11</td>
      <td>0.635785</td>
      <td>0.508053</td>
      <td>0.754286</td>
      <td>0.626052</td>
      <td>0.635316</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">5</span> Conclusion</h2>
<p>In this article we used the Amazon images dataset to illustrate the different ways we can use the Fastai library to prepare the data for the task. We used both the high &amp; mid level api, and in particular explored the many options the mid level api offers to make it easy and fast to prepare data for deep learning model training.</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon.html</guid>
  <pubDate>Sun, 15 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/amazon_deforrest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>From Machine Learning to Deep Learning From Scratch</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> course for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>. This article covers lesson 5 of this years course, where we will look at the fundemental details and differences between machine learning (ml) and deep learning (dl).</p>
<p>If you don’t understand the difference between ml and dl or were too afraid to ask - this is the article for you!</p>
</section>
<section id="machine-learning-vs-deep-learning" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="machine-learning-vs-deep-learning"><span class="header-section-number">2</span> Machine Learning vs Deep Learning</h2>
<p><a href="https://en.wikipedia.org/wiki/Machine_learning">Machine Learning</a> is a branch of computer science that seeks to create systems (often called ‘models’) that learn how to perform a task, without being given explicit instructions of how to perform that task. These models learn for themselves how to perform a task. Machine Learning includes a wide range of different types of models, for example linear regression, random forrests, and more.</p>
<p><a href="https://en.wikipedia.org/wiki/Deep_learning">Deep learning</a> is a sub-branch of machine learning, which uses <strong>multi-layered artifical neural networks</strong> as models that learn how to perform a task, without being given explicit instructions of how to perform that task.</p>
<p>Other notable differences between machine learning and deep learning include:</p>
<ul>
<li>Machine learning models tend to be easier to understand and explain why they do what they do, deep learning models tend to be more difficult to understand the reasons for their behaviour</li>
<li>Machine learning models tend to require the data they use to be more carefully constructed, deep learning models tend to be able to work with data that does not need to be so carefully created</li>
<li>Deep learning models are much more powerful and succesful than machine learning models at solving problems that use images or text</li>
</ul>
<p><a href="https://www.zendesk.co.uk/blog/machine-learning-and-deep-learning/">This article</a> also further explains these differences.</p>
<p>In this project we will construct from scratch a very simple machine learning model called <em>linear regression</em>. We will then gradually develop a deep learning model from scratch, and we will illustrate the technical differences between these types of models, which also demonstrates the reasons for the differences between the two types of models highlighted above.</p>
<p>We will not use any machine learning libraries, which often obscure the details of how these models are implemented. <strong>In this project, we will expose the fundemental details of these models by coding them manually and illustrating the mathematics behind them.</strong></p>
</section>
<section id="the-dataset-the-kaggle-titanic-passenger-suvival-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-dataset-the-kaggle-titanic-passenger-suvival-dataset"><span class="header-section-number">3</span> The Dataset: The Kaggle Titanic passenger suvival dataset</h2>
<p>For our project we will use the famous <a href="https://www.kaggle.com/competitions/titanic/data">Titanic - Machine Learning from Disaster dataset</a>. This is a dataset of the passengers from the Titanic disaster, and the task is to predict which of these passengers died and which survived.</p>
<p>This is a very simple and well known dataset, and is chosen not because it’s an especially challenging task, but more to allow us to understand the differences between machine learning and deep learning.</p>
</section>
<section id="import-libraries" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">4</span> Import Libraries</h2>
<p>First we will import the required libraries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> tensor</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> fastai.data.transforms <span class="im" style="color: #00769E;">import</span> RandomSplitter</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> sympy</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># Set some useful display settings</span></span>
<span id="cb1-10">np.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>)</span>
<span id="cb1-11">torch.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, edgeitems<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;">'display.width'</span>, <span class="dv" style="color: #AD0000;">140</span>)</span></code></pre></div>
</div>
</section>
<section id="get-clean-data" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="get-clean-data"><span class="header-section-number">5</span> Get &amp; Clean Data</h2>
<p>Let’s now extract the data and examine what it looks like.</p>
<div class="cell" data-outputid="6e4b2b46-40b2-4879-fd50-0ed4961334c1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>unzip titanic.<span class="bu" style="color: null;">zip</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Archive:  titanic.zip
  inflating: gender_submission.csv   
  inflating: test.csv                
  inflating: train.csv               
drive  gender_submission.csv  sample_data  test.csv  titanic.zip  train.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="21387c3e-f4de-4354-b6d3-21ae2edcd8d9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb4-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">


  <div id="df-867e4e87-7df7-47b4-8bb4-e7597a986f45">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-867e4e87-7df7-47b4-8bb4-e7597a986f45')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-867e4e87-7df7-47b4-8bb4-e7597a986f45 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-867e4e87-7df7-47b4-8bb4-e7597a986f45');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Here we can see the different columns in our passenger dataset, for example Name, Sex, Age etc. The <strong>Survived</strong> column tells us if that passenger survived the disaster, with a value of 1 if they did and a value of 0 if they died. This is the value we want our model to predict, given the other data in the dataset. In other words, we want to create a model to predict <strong>Survived</strong> based on Name, Age, Ticket, Fare etc.</p>
<p>Machine learning models require the data to be all numbers, they can’t work with missing values. Let’s check to see if we have any missing values in our dataet the textual columns of the data. The <em>isna()</em> function will do this for us in python.</p>
<div class="cell" data-outputid="83adbebf-a2d0-4152-c063-f1b18b0433ea">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.isna().<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64</code></pre>
</div>
</div>
<p>We can see that the Age, Cabin and Embarked columns have missing values, so we will need to do something about these. Let’s replace the missing values with the most common value in that column, this is known in statistics as the <em>mode</em>.</p>
<p>Lets calculate the mode for each column.</p>
<div class="cell" data-outputid="8356598d-615e-4680-b0f6-417a936d8984">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">modes <span class="op" style="color: #5E5E5E;">=</span> df.mode().iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-2">modes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>PassengerId                      1
Survived                       0.0
Pclass                         3.0
Name           Abbing, Mr. Anthony
Sex                           male
Age                           24.0
SibSp                          0.0
Parch                          0.0
Ticket                        1601
Fare                          8.05
Cabin                      B96 B98
Embarked                         S
Name: 0, dtype: object</code></pre>
</div>
</div>
<p>Now that we have the mode of each column, we can use these to fill in the missing values of any column using the <em>fillna()</em> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>Let’s check to see we no longer have any missing values.</p>
<div class="cell" data-outputid="37031443-4887-47f5-9828-cd081619e024">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df.isna().<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          0
Embarked       0
dtype: int64</code></pre>
</div>
</div>
<p>As mentioned earlier, machine learning models require numbers as inputs - so we will need to convert our text fields into numeric fields. We can do this using a standard technique called <a href="https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/">one-hot encoding</a> which creates a numeric column for each text value which are called <em>dummy variables</em> which has a value of 1 or zero depending if that text/category value is present or not. We can create these fields using the <em>get_dummies()</em> method.</p>
<div class="cell" data-outputid="8065df3a-6d78-4339-f6a7-73450b9b49f4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(df, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Sex"</span>,<span class="st" style="color: #20794D;">"Pclass"</span>,<span class="st" style="color: #20794D;">"Embarked"</span>])</span>
<span id="cb12-2">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>Index(['PassengerId', 'Survived', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'LogFare', 'Sex_female', 'Sex_male',
       'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S'],
      dtype='object')</code></pre>
</div>
</div>
<p>Let’s see what these dummy variable columns look like.</p>
<div class="cell" data-outputid="fd4a90d4-9023-4d99-97d8-5fa4639a78de">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">added_cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Sex_male'</span>, <span class="st" style="color: #20794D;">'Sex_female'</span>, <span class="st" style="color: #20794D;">'Pclass_1'</span>, <span class="st" style="color: #20794D;">'Pclass_2'</span>, <span class="st" style="color: #20794D;">'Pclass_3'</span>, <span class="st" style="color: #20794D;">'Embarked_C'</span>, <span class="st" style="color: #20794D;">'Embarked_Q'</span>, <span class="st" style="color: #20794D;">'Embarked_S'</span>]</span>
<span id="cb14-2">df[added_cols].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">


  <div id="df-98862631-ba13-4396-a92b-487ebc4f9bd5">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sex_male</th>
      <th>Sex_female</th>
      <th>Pclass_1</th>
      <th>Pclass_2</th>
      <th>Pclass_3</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-98862631-ba13-4396-a92b-487ebc4f9bd5')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-98862631-ba13-4396-a92b-487ebc4f9bd5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-98862631-ba13-4396-a92b-487ebc4f9bd5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>So we will need to convert our model variables into Pytorch tensors, which will enable us to use our data for both machine learning and deep learning later on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">t_dep <span class="op" style="color: #5E5E5E;">=</span> tensor(df.Survived)</span></code></pre></div>
</div>
<div class="cell" data-outputid="fa8e710b-ea4b-4520-ad14-04596771f951">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">indep_cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'SibSp'</span>, <span class="st" style="color: #20794D;">'Parch'</span>, <span class="st" style="color: #20794D;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;">+</span> added_cols</span>
<span id="cb16-2"></span>
<span id="cb16-3">t_indep <span class="op" style="color: #5E5E5E;">=</span> tensor(df[indep_cols].values, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb16-4">t_indep</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor([[22.0000,  1.0000,  0.0000,  2.1102,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [38.0000,  1.0000,  0.0000,  4.2806,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000],
        [26.0000,  0.0000,  0.0000,  2.1889,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [35.0000,  1.0000,  0.0000,  3.9908,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [35.0000,  0.0000,  0.0000,  2.2028,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [24.0000,  0.0000,  0.0000,  2.2469,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000],
        [54.0000,  0.0000,  0.0000,  3.9677,  1.0000,  0.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        ...,
        [25.0000,  0.0000,  0.0000,  2.0857,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [39.0000,  0.0000,  5.0000,  3.4054,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000],
        [27.0000,  0.0000,  0.0000,  2.6391,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [19.0000,  0.0000,  0.0000,  3.4340,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [24.0000,  1.0000,  2.0000,  3.1966,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [26.0000,  0.0000,  0.0000,  3.4340,  1.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000],
        [32.0000,  0.0000,  0.0000,  2.1691,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="da6b3213-858b-4494-96c0-95a8fd68c932">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">t_indep.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>torch.Size([891, 12])</code></pre>
</div>
</div>
</section>
<section id="creating-a-linear-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="creating-a-linear-model"><span class="header-section-number">6</span> Creating a Linear Model</h2>
<p>A simple linear regression model attempts to capture a linear relationship betweeen one independant variable and a dependant variable, so that you can predict the latter using the former. In our example below, the independant variable model coefficient is <img src="https://latex.codecogs.com/png.latex?b_%7B1%7D">. A constant value is also added, in this case <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D">. This is basically the equation of a line.</p>
<p>A multiple linear regression model attempts to capture a linear relationship betweeen <strong>multiple</strong> independant variables and a dependant variable, so that you can predict the latter using the former. In our example below, the independant variable model coefficients are <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D"> to <img src="https://latex.codecogs.com/png.latex?b_%7Bn%7D">. This is basically the equation of a <a href="https://kindsonthegenius.com/blog/what-is-a-linear-seperator-what-is-a-hyperplane-simple-and-brief-explanation/">hyperplane</a> which is a line in multiple dimensions, in this case that number is the number of independant variables.</p>
<p>The values of the independant variables themselves are represented by <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> to <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D">.</p>
<p>Linear models generate their predictions by multiplying the values of each variable by its coefficient, then summing the values. So for our multiple linear regression model that would mean summing <img src="https://latex.codecogs.com/png.latex?b_%7B1%7D"> * <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> to <img src="https://latex.codecogs.com/png.latex?b_%7Bn%7D"> * <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D"> then adding the constant term <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D"> to get the value for the dependant variable y.</p>
<p>You can read more about <a href="https://levelup.gitconnected.com/beginners-guide-to-simple-and-multiple-linear-regression-models-d2d5dbe9e704">linear regression here</a>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/linear_reg.png" title="Simple &amp; Multiple Linear Regression" class="img-fluid"></p>
<p>For our titanic dataset, we have multiple independant variables such as passenger id, name, fare etc - so we will need to use a multiple linear regression model, which will have a coefficient for each variable we have.</p>
<p>Let’s set up some coefficient’s for each variable with some random initial values.</p>
<div class="cell" data-outputid="28e5d7ac-09ff-4d3e-9f4f-76f60f8504b9">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">442</span>)</span>
<span id="cb20-2"></span>
<span id="cb20-3">n_coeff <span class="op" style="color: #5E5E5E;">=</span> t_indep.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb20-4">coeffs <span class="op" style="color: #5E5E5E;">=</span> torch.rand(n_coeff)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb20-5">coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625])</code></pre>
</div>
</div>
<p>Interestingly we don’t need to add a constant term as per the linear regression model equation. Why? because our dummy variables already cover the whole dataset, everyone is already within one existing value eg male or female. So we don’t need a separate constant term to cover any rows not included.</p>
<p>As mentioned, a linear model will calculate its predictions by multiplying the independant variables by their corresponding coefficients so lets see what that looks like. Remember we have multiple values of our independant variables, one row per passenger, so a matrix. So we will expect from linear algebra, when we multiply a vector (coefficients) by a matrix we should end up with a new matrix.</p>
<div class="cell" data-outputid="b8aab69b-61bc-422c-f20b-ad1e3cf71522">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>tensor([[-10.1838,   0.1386,   0.0000,  -0.4772,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-17.5902,   0.1386,   0.0000,  -0.9681,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-12.0354,   0.0000,   0.0000,  -0.4950,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.1386,   0.0000,  -0.9025,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.0000,   0.0000,  -0.4982,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.0000,   0.0000,  -0.5081,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-24.9966,   0.0000,   0.0000,  -0.8973,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        ...,
        [-11.5725,   0.0000,   0.0000,  -0.4717,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-18.0531,   0.0000,   1.2045,  -0.7701,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-12.4983,   0.0000,   0.0000,  -0.5968,  -0.2632,  -0.0000,   0.0000,   0.3136,   0.0000,  -0.0000,   0.0000,   0.3625],
        [ -8.7951,   0.0000,   0.0000,  -0.7766,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.1386,   0.4818,  -0.7229,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-12.0354,   0.0000,   0.0000,  -0.7766,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-14.8128,   0.0000,   0.0000,  -0.4905,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000]])</code></pre>
</div>
</div>
<p>So there is a bit of an issue here, we notice the first column has much bigger values? this is for the column age, which has bigger numbers than all other numeric columns. This can create problems for machine learning, as many models will treat the column with bigger numbers as more important than other columns.</p>
<p>We can address this issue by <em>normalising</em> all the values i.e.&nbsp;dividing each column by its maximum value. This will result in all values being bewteen 1 and 0 and so all variables being treated with equal importance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">vals,indices <span class="op" style="color: #5E5E5E;">=</span> t_indep.<span class="bu" style="color: null;">max</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb24-2">t_indep <span class="op" style="color: #5E5E5E;">=</span> t_indep <span class="op" style="color: #5E5E5E;">/</span> vals</span></code></pre></div>
</div>
<div class="cell" data-outputid="74d78f65-e317-4fde-a0b8-ab1f088d61d9">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor([[-0.1273,  0.0173,  0.0000, -0.0765, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2199,  0.0173,  0.0000, -0.1551, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1504,  0.0000,  0.0000, -0.0793, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0173,  0.0000, -0.1446, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0000,  0.0000, -0.0798, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0000,  0.0000, -0.0814, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.3125,  0.0000,  0.0000, -0.1438, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        ...,
        [-0.1447,  0.0000,  0.0000, -0.0756, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2257,  0.0000,  0.2008, -0.1234, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.1562,  0.0000,  0.0000, -0.0956, -0.2632, -0.0000,  0.0000,  0.3136,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1099,  0.0000,  0.0000, -0.1244, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0173,  0.0803, -0.1158, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1504,  0.0000,  0.0000, -0.1244, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1852,  0.0000,  0.0000, -0.0786, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000]])</code></pre>
</div>
</div>
<p>We can now create predictions from our linear model, by adding up the rows of the product:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">preds <span class="op" style="color: #5E5E5E;">=</span> (t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Let’s take a look at the first few:</p>
<div class="cell" data-outputid="1563a027-03a1-4a6c-bba5-407f39d7f033">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">preds[:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor([ 0.1927, -0.6239,  0.0979,  0.2056,  0.0968,  0.0066,  0.1306,  0.3476,  0.1613, -0.6285])</code></pre>
</div>
</div>
<section id="how-our-linear-model-learns---adding-gradient-descent" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="how-our-linear-model-learns---adding-gradient-descent"><span class="header-section-number">6.1</span> How our Linear Model Learns - Adding Gradient Descent</h3>
<p>So currently we have a basic linear model, but it is’nt predicting very well because the model coefficients are still random values. How can make these coefficients better so our model predictions can get better? we can use a algorithm called <strong>Gradient Descent (or GD)</strong>.</p>
<p><a href="https://builtin.com/data-science/gradient-descent">This article explains the fundamentals of GD</a>. And <a href="https://towardsdatascience.com/understanding-the-mathematics-behind-gradient-descent-dde5dc9be06e">this article</a> as well as <a href="https://medium.com/geekculture/mathematics-behind-gradient-descent-f2a49a0b714f">this one</a> explain more the mathematics of GD.</p>
<p>In essence, <strong>Gradient Descent is an algorithm that can be used to find values for the coefficients of a function that reduce a separate loss function</strong>. So as long as we can define an appropriate loss function, we can use this algorithm.</p>
<p>What would be an appropriate loss function that we would want to minimise the value of? Well we would like our predictions ultimately to be as close to the actual values we want to predict. So here the loss would be <em>a measure of how wrong our predictions are</em>. A high loss value would mean many mistakes, and a low loss value would mean fewer mistakes. This would then be a good function for us to minimise using Gradient Descent.</p>
<p>So in our case, a good loss function might be:</p>
<p><em>Loss = predictions - values we want to predict</em></p>
<p>So we will have a different loss value for each value and its prediction, so if we took the mean value of all of these different loss values, that would be a way to capture the overall loss for all predictions. It would also be helpful for these differences to be always positive values.</p>
<p>Lets calculate what this loss would be on our current predictions.</p>
<div class="cell" data-outputid="7324fd70-ae28-4e76-b45a-d04a52112d57">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">loss <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">abs</span>(preds<span class="op" style="color: #5E5E5E;">-</span>t_dep).mean()</span>
<span id="cb30-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor(0.5382)</code></pre>
</div>
</div>
<p>Since for Gradient Descent we will need to repeatedly use this loss function, lets define some functions to calculate our predictions as well as the loss.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb32-2">  <span class="cf" style="color: #003B4F;">return</span> (indeps<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="kw" style="color: #003B4F;">def</span> calc_loss(coeffs, indeps, deps): </span>
<span id="cb32-5">  <span class="cf" style="color: #003B4F;">return</span> torch.<span class="bu" style="color: null;">abs</span>(calc_preds(coeffs, indeps)<span class="op" style="color: #5E5E5E;">-</span>deps).mean()</span></code></pre></div>
</div>
<p>Gradient Descent requires us to calculate gradients. These are the values of the derivatives of the functions that generate the predictions so in our case the derviatives of the multiple linear regression function seen earlier. The Pytorch module can calculate these gradients for us every time the linear regression function is used if we set <em>requires_grad()</em> on the model coefficients. Lets do that now.</p>
<div class="cell" data-outputid="16fa5da9-5166-4b0b-91b9-8cd9bb138021">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">coeffs.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625], requires_grad=True)</code></pre>
</div>
</div>
<p>Let’s now calculate the loss for our current predictions again using our new function.</p>
<div class="cell" data-outputid="4fe84325-6209-435b-db00-9472481bc3c3">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb35-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor(0.5382, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<p>We can now ask Pytorch to calculate our gradients now using <em>backward()</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">loss.backward()</span></code></pre></div>
</div>
<p>Let’s have a look at the gradients calculated for our model coefficients.</p>
<div class="cell" data-outputid="8a8ce06f-d544-4fb3-96bb-fdc3df4cfae3">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor([-0.0106,  0.0129, -0.0041, -0.0484,  0.2099, -0.2132, -0.1212, -0.0247,  0.1425, -0.1886, -0.0191,  0.2043])</code></pre>
</div>
</div>
<p>These gradients tell us how much we need to change each model coefficient to reduce the loss function i.e.&nbsp;to improve the predictions.</p>
<p>So putting these steps together:</p>
<div class="cell" data-outputid="f4360546-5f28-4262-d6d9-65802e6f880f">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb40-2">loss.backward()</span>
<span id="cb40-3">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>tensor([-0.0212,  0.0258, -0.0082, -0.0969,  0.4198, -0.4265, -0.2424, -0.0494,  0.2851, -0.3771, -0.0382,  0.4085])</code></pre>
</div>
</div>
<p>We can see our gradient values have doubled? this ie because every time <em>backward()</em> is called it adds the new gradients to the previous ones. We don’t want this, as we only want the gradients that pertain to the current model coefficients, not the previous ones.</p>
<p>So what we really want to do is reset the gradient values to zero after each step of the gradient descent process.</p>
<p>Lets define some code to put this all together, and print our current loss value.</p>
<div class="cell" data-outputid="d328cc3d-af3d-4a6a-aab4-129e9728f98b">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;"># Calculate loss</span></span>
<span id="cb42-3">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;"># Calculate gradients of linear model e.g. coeffs * inputs</span></span>
<span id="cb42-5">loss.backward()</span>
<span id="cb42-6"><span class="co" style="color: #5E5E5E;"># Don't calculate any gradients here</span></span>
<span id="cb42-7"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb42-8">    <span class="co" style="color: #5E5E5E;"># Subtract the gradients from the model coeffcients to improve them, but scale this update by 0.1 called the 'learning rate'</span></span>
<span id="cb42-9">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb42-10">    <span class="co" style="color: #5E5E5E;"># Set gradients to zero</span></span>
<span id="cb42-11">    coeffs.grad.zero_()</span>
<span id="cb42-12">    <span class="co" style="color: #5E5E5E;"># Print current loss</span></span>
<span id="cb42-13">    <span class="bu" style="color: null;">print</span>(calc_loss(coeffs, t_indep, t_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.4945)</code></pre>
</div>
</div>
<p>The learning rate i used to ensure we take small steps of improvement for the cofficients, rather than big steps. To better understand why and how gradient decent works in more detail <a href="https://builtin.com/data-science/gradient-descent">this article explains the fundamentals of GD</a>. And <a href="https://towardsdatascience.com/understanding-the-mathematics-behind-gradient-descent-dde5dc9be06e">this article</a> as well as <a href="https://medium.com/geekculture/mathematics-behind-gradient-descent-f2a49a0b714f">this one</a> explain more the mathematics of GD.</p>
</section>
<section id="training-the-linear-model" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="training-the-linear-model"><span class="header-section-number">6.2</span> Training the Linear Model</h3>
<p>Before we can train our model we need to split our data into training and validation sets. We can use <em>RandomSplitter()</em> to do this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">trn_split,val_split<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)(df)</span></code></pre></div>
</div>
<div class="cell" data-outputid="19915c2e-3052-479c-f28c-ace964df4be0">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">trn_indep,val_indep <span class="op" style="color: #5E5E5E;">=</span> t_indep[trn_split],t_indep[val_split]</span>
<span id="cb45-2">trn_dep,val_dep <span class="op" style="color: #5E5E5E;">=</span> t_dep[trn_split],t_dep[val_split]</span>
<span id="cb45-3"><span class="bu" style="color: null;">len</span>(trn_indep),<span class="bu" style="color: null;">len</span>(val_indep)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>(713, 178)</code></pre>
</div>
</div>
<p>We’ll also create functions for the three things we did manually above: updating coeffs, doing one full gradient descent step, and initilising coeffs to random numbers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb47-2">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb47-3">    coeffs.grad.zero_()</span>
<span id="cb47-4"></span>
<span id="cb47-5"><span class="kw" style="color: #003B4F;">def</span> one_epoch(coeffs, lr):</span>
<span id="cb47-6">    loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, trn_indep, trn_dep)</span>
<span id="cb47-7">    loss.backward()</span>
<span id="cb47-8">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): update_coeffs(coeffs, lr)</span>
<span id="cb47-9">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">:.3f}</span><span class="ss" style="color: #20794D;">"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"; "</span>)</span>
<span id="cb47-10"></span>
<span id="cb47-11"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(): </span>
<span id="cb47-12">    <span class="cf" style="color: #003B4F;">return</span> (torch.rand(n_coeff)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>).requires_grad_()</span></code></pre></div>
</div>
<p>Let’s now create a function do train the model. We will initialise the model coefficients to random values, then loop through one epoch to calculate the loss and gradients, and update the coefficients. An <em>epoch</em> is the model generating precdictions for the entire training dataet. So the training process is multiple epochs/loops over the training data, updating the model coefficients in each loop. <strong>This is the gradient descent algorithm</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;">def</span> train_model(epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>):</span>
<span id="cb48-2">    torch.manual_seed(<span class="dv" style="color: #AD0000;">442</span>)</span>
<span id="cb48-3">    coeffs <span class="op" style="color: #5E5E5E;">=</span> init_coeffs()</span>
<span id="cb48-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(epochs): one_epoch(coeffs, lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb48-5">    <span class="cf" style="color: #003B4F;">return</span> coeffs</span></code></pre></div>
</div>
<p>Lets choose a learning rate of 0.2 and train our model for 18 epochs. What we hope to see is out loss value go down in each epoch, as the model coefficients are updated to get better and improve the predictions.</p>
<div class="cell" data-outputid="66e8aa0c-93c2-4b57-96ed-5f4f9dd3bdd1">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(<span class="dv" style="color: #AD0000;">18</span>, lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.536; 0.502; 0.477; 0.454; 0.431; 0.409; 0.388; 0.367; 0.349; 0.336; 0.330; 0.326; 0.329; 0.304; 0.314; 0.296; 0.300; 0.289; </code></pre>
</div>
</div>
<p>We can see here as expected, the loss is going down and the predictions are improving with each epoch.</p>
<p>This means that the model coefficients for each of the input variables is getting better, or more accurate. Lets have a look at the improved coefficients so far.</p>
<div class="cell" data-outputid="86c094ea-83cd-4934-8161-1a833e3b6eaa">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;">def</span> show_coeffs(): </span>
<span id="cb51-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">zip</span>(indep_cols, coeffs.requires_grad_(<span class="va" style="color: #111111;">False</span>)))</span>
<span id="cb51-3">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>{'Age': tensor(-0.2694),
 'SibSp': tensor(0.0901),
 'Parch': tensor(0.2359),
 'LogFare': tensor(0.0280),
 'Sex_male': tensor(-0.3990),
 'Sex_female': tensor(0.2345),
 'Pclass_1': tensor(0.7232),
 'Pclass_2': tensor(0.4112),
 'Pclass_3': tensor(0.3601),
 'Embarked_C': tensor(0.0955),
 'Embarked_Q': tensor(0.2395),
 'Embarked_S': tensor(0.2122)}</code></pre>
</div>
</div>
</section>
<section id="checking-model-accuracy" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="checking-model-accuracy"><span class="header-section-number">6.3</span> Checking Model Accuracy</h3>
<p>So the loss value is giving us a good indication of how well our model is improving. But it’s not perhaps what we want as our ultimate measure of the model performance. For the kaggle competition, the desire measure of performance is <em>accuracy</em> i.e.</p>
<p>Accuracy = Correct Predictions / Total Predictions</p>
<p>Lets first get the predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">preds <span class="op" style="color: #5E5E5E;">=</span> calc_preds(coeffs, val_indep)</span></code></pre></div>
</div>
<p>We want a simple category of True if the passenger died, and False if they survived. To convert our predictions into these values we will use a threshold of 0.5 to decide which converts to which.</p>
<div class="cell" data-outputid="a8067b15-9666-41ab-d96a-30c2f1d00201">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">results <span class="op" style="color: #5E5E5E;">=</span> val_dep.<span class="bu" style="color: null;">bool</span>()<span class="op" style="color: #5E5E5E;">==</span>(preds<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb54-2">results[:<span class="dv" style="color: #AD0000;">16</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True, False, False, False,  True,  True, False])</code></pre>
</div>
</div>
<p>Let’s now calculate the accuracy.</p>
<div class="cell" data-outputid="4ed619e6-4691-4cdd-a5e3-b5143162cd29">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;">def</span> acc(coeffs): </span>
<span id="cb56-2">    <span class="cf" style="color: #003B4F;">return</span> (val_dep.<span class="bu" style="color: null;">bool</span>()<span class="op" style="color: #5E5E5E;">==</span>(calc_preds(coeffs, val_indep)<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.5</span>)).<span class="bu" style="color: null;">float</span>().mean()</span>
<span id="cb56-3">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>tensor(0.7865)</code></pre>
</div>
</div>
</section>
<section id="improving-model-predictions-with-a-sigmoid-function" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="improving-model-predictions-with-a-sigmoid-function"><span class="header-section-number">6.4</span> Improving Model Predictions with a Sigmoid Function</h3>
<p>If we look at our predictions, they could easily have values bigger that 1 or less than zero.</p>
<div class="cell" data-outputid="791efb08-5065-40db-a890-1ae08c16a4d4">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">preds[:<span class="dv" style="color: #AD0000;">28</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>tensor([ 0.8160,  0.1295, -0.0148,  0.1831,  0.1520,  0.1350,  0.7279,  0.7754,  0.3222,  0.6740,  0.0753,  0.0389,  0.2216,  0.7631,
         0.0678,  0.3997,  0.3324,  0.8278,  0.1078,  0.7126,  0.1023,  0.3627,  0.9937,  0.8050,  0.1153,  0.1455,  0.8652,  0.3425])</code></pre>
</div>
</div>
<p>We want these predictions to be only from 0-1. If we pass these predictions through a <em>sigmoid function</em> that will achieve this.</p>
<div class="cell" data-outputid="04784176-daea-42c4-e6e7-beecbd444018">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">sympy.plot(<span class="st" style="color: #20794D;">"1/(1+exp(-x))"</span>, xlim<span class="op" style="color: #5E5E5E;">=</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch_files/figure-html/cell-40-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s now improve our predictions function using this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb61-2">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid((indeps<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>And now lets train the model again.</p>
<div class="cell" data-outputid="202df3fe-f005-49be-940e-dc0f8f473167">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.510; 0.327; 0.294; 0.207; 0.201; 0.199; 0.198; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
<p>This has really improved the loss which is falling much more. Let’s check the accuracy.</p>
<div class="cell" data-outputid="daca6c85-a636-4355-faac-64cbd23c8c15">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>This has also improved a lot.</p>
<p>Lets look at the model coefficients.</p>
<div class="cell" data-outputid="9168e1ce-0ac2-4209-dc03-73ea0707939e">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>{'Age': tensor(-1.5061),
 'SibSp': tensor(-1.1575),
 'Parch': tensor(-0.4267),
 'LogFare': tensor(0.2543),
 'Sex_male': tensor(-10.3320),
 'Sex_female': tensor(8.4185),
 'Pclass_1': tensor(3.8389),
 'Pclass_2': tensor(2.1398),
 'Pclass_3': tensor(-6.2331),
 'Embarked_C': tensor(1.4771),
 'Embarked_Q': tensor(2.1168),
 'Embarked_S': tensor(-4.7958)}</code></pre>
</div>
</div>
<p>Do these values make sense? these coefficients suggest what are the most important features useful for predicting survival. We can see that Sex_male has a big negative value, which implies a negative association. We can also see age is negatively associated. Taken together, these two coefficients suggest that males and older people were less likely to survive the titantic disaster.</p>
</section>
<section id="improving-the-maths---using-matrix-multiplications" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="improving-the-maths---using-matrix-multiplications"><span class="header-section-number">6.5</span> Improving the Maths - Using Matrix Multiplications</h3>
<p>Is there a way we can improve the calculations to make things more efficient? if we look again at the biggest calculation to make predictions.</p>
<div class="cell" data-outputid="01050ced-6828-4780-d2b1-2c07491ded72">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">(val_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3512, -13.6469,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310])</code></pre>
</div>
</div>
<p>So we are multiplying elements together then summing accross rows. This is identical to the linear algebra operation of a <em>matrix-vector product</em>. This operation has been implemented in Pytorch and uses the ‘@’ symbol, so we can write the above in a simpler way as:</p>
<div class="cell" data-outputid="2ab7fa87-9638-44ef-ddc7-8b20c369bf22">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">val_indep<span class="op" style="color: #5E5E5E;">@</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3511, -13.6468,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310])</code></pre>
</div>
</div>
<p>Not only is this simpler, but matrix-vector products in PyTorch have been highly optimised to make them much faster. So not only is the code for this more compact, this actually runs much faster than using the normal multiplication and sum.</p>
<p>Let’s update our predictions function with this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb72-2">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(indeps<span class="op" style="color: #5E5E5E;">@</span>coeffs)</span></code></pre></div>
</div>
</section>
</section>
<section id="creating-a-neural-network-model" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="creating-a-neural-network-model"><span class="header-section-number">7</span> Creating a Neural Network Model</h2>
<p>We will now transition to creating a simple neural network model, which will build on what we have used to make our linear model.</p>
<p>For this type of model we will need to perform <em>matrix-matrix products</em> and to do this we will need to turn the coefficients into a column vector i.e.&nbsp;a matrix with a single column which we can do by passing a second argument 1 to torch.rand(), indicating that we want our coefficients to have one column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(): </span>
<span id="cb73-2">    <span class="cf" style="color: #003B4F;">return</span> (torch.rand(n_coeff, <span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.1</span>).requires_grad_()</span></code></pre></div>
</div>
<p>We’ll also need to turn our dependent variable into a column vector, which we can do by indexing the column dimension with the special value None, which tells PyTorch to add a new dimension in this position:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">trn_dep <span class="op" style="color: #5E5E5E;">=</span> trn_dep[:,<span class="va" style="color: #111111;">None</span>]</span>
<span id="cb74-2">val_dep <span class="op" style="color: #5E5E5E;">=</span> val_dep[:,<span class="va" style="color: #111111;">None</span>]</span></code></pre></div>
</div>
<p>We can now train our model as before and confirm we get identical outputs…</p>
<div class="cell" data-outputid="47d216e8-2efa-4670-87df-b81c882ee982">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.512; 0.323; 0.290; 0.205; 0.200; 0.198; 0.197; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
<p>…and identical accuracy:</p>
<div class="cell" data-outputid="31cf89de-9c91-43cd-8e15-02518073c826">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>So what is a Neural Network? In <a href="https://en.wikipedia.org/wiki/Artificial_neural_network">simple terms</a></p>
<blockquote class="blockquote">
<p><em>Artificial neural networks (ANNs), usually simply called neural networks (NNs) or neural nets are computing systems inspired by the biological neural networks that constitute animal brains. An ANN is based on a collection of connected units or nodes called artificial neurons, which loosely model the neurons in a biological brain</em></p>
</blockquote>
<p><strong>One key difference between Neural Networks (NN) and Linear Regression (LR), is that while LR has model parameters/coefficients one for each input variable, NN’s have many model parameters, many of which do not correspond to specific input variables which are often called ‘hidden layers’</strong>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/simple_nn.png" title="A Simple Neural Network" class="img-fluid"></p>
<p>You can read more about <a href="https://www.investopedia.com/terms/n/neuralnetwork.asp#:~:text=A%20neural%20network%20is%20a,organic%20or%20artificial%20in%20nature.">Neural Networks here</a>.</p>
<p>To create a Neural Network we’ll need to create coefficients for each of our layers. Our first set of coefficients will take our n_coeff inputs, and create n_hidden outputs for our hidden layers. We can choose whatever n_hidden we like – a higher number gives our network more flexibility, but makes it slower and harder to train. So we need a matrix of size n_coeff by n_hidden. We’ll divide these coefficients by n_hidden so that when we sum them up in the next layer we’ll end up with similar magnitude numbers to what we started with.</p>
<p>Then our second layer will need to take the n_hidden inputs and create a single output, so that means we need a n_hidden by 1 matrix there. The second layer will also need a constant term added.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(n_hidden<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb79-2">    layer1 <span class="op" style="color: #5E5E5E;">=</span> (torch.rand(n_coeff, n_hidden)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>)<span class="op" style="color: #5E5E5E;">/</span>n_hidden</span>
<span id="cb79-3">    layer2 <span class="op" style="color: #5E5E5E;">=</span> torch.rand(n_hidden, <span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb79-4">    const <span class="op" style="color: #5E5E5E;">=</span> torch.rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb79-5">    <span class="cf" style="color: #003B4F;">return</span> layer1.requires_grad_(),layer2.requires_grad_(),const.requires_grad_()</span></code></pre></div>
</div>
<p>Now we have our coefficients, we can create our neural net. The key steps are the two matrix products, indeps@l1 and res@l2 (where res is the output of the first layer). The first layer output is passed to F.relu (that’s our non-linearity), and the second is passed to torch.sigmoid as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb80-2">    l1,l2,const <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb80-3">    res <span class="op" style="color: #5E5E5E;">=</span> F.relu(indeps<span class="op" style="color: #5E5E5E;">@</span>l1)</span>
<span id="cb80-4">    res <span class="op" style="color: #5E5E5E;">=</span> res<span class="op" style="color: #5E5E5E;">@</span>l2 <span class="op" style="color: #5E5E5E;">+</span> const</span>
<span id="cb80-5">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<p>Finally, now that we have more than one set of coefficients, we need to add a loop to update each one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb81-2">    <span class="cf" style="color: #003B4F;">for</span> layer <span class="kw" style="color: #003B4F;">in</span> coeffs:</span>
<span id="cb81-3">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb81-4">        layer.grad.zero_()</span></code></pre></div>
</div>
<p>Let’s train our model.</p>
<div class="cell" data-outputid="c35f96aa-e660-4f7b-9daa-690797bc826d">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.532; 0.520; 0.505; 0.487; 0.466; 0.439; 0.407; 0.373; 0.343; 0.319; 0.301; 0.286; 0.274; 0.264; 0.256; 0.250; 0.245; 0.240; 0.237; 0.234; 0.231; 0.229; 0.227; 0.226; 0.224; 0.223; 0.222; 0.221; 0.220; </code></pre>
</div>
</div>
<div class="cell" data-outputid="aabf0252-124c-4f2f-8705-1873c58f4ea1">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.400; 0.260; 0.390; 0.221; 0.211; 0.197; 0.195; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; </code></pre>
</div>
</div>
<div class="cell" data-outputid="4f3675be-2c83-446b-a36c-992abb3024dd">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>In this case our neural net isn’t showing better results than the linear model. That’s not surprising; this dataset is very small and very simple, and isn’t the kind of thing we’d expect to see neural networks excel at. Furthermore, our validation set is too small to reliably see much accuracy difference. But the key thing is that we now know exactly what a real neural net looks like, and can see how it relates to a linear regression model.</p>
</section>
<section id="creating-a-deep-learning-model" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="creating-a-deep-learning-model"><span class="header-section-number">8</span> Creating a Deep Learning Model</h2>
<p>The neural net in the previous section only uses one hidden layer, so it doesn’t count as “deep” learning. But we can use the exact same technique to make our neural net deep, by adding more ‘hidden layers’.</p>
<p>First, we’ll need to create additional coefficients for each layer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs():</span>
<span id="cb88-2">    hiddens <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>]  <span class="co" style="color: #5E5E5E;"># &lt;-- set this to the size of each hidden layer you want</span></span>
<span id="cb88-3">    sizes <span class="op" style="color: #5E5E5E;">=</span> [n_coeff] <span class="op" style="color: #5E5E5E;">+</span> hiddens <span class="op" style="color: #5E5E5E;">+</span> [<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb88-4">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(sizes)</span>
<span id="cb88-5">    layers <span class="op" style="color: #5E5E5E;">=</span> [(torch.rand(sizes[i], sizes[i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>)<span class="op" style="color: #5E5E5E;">/</span>sizes[i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">4</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb88-6">    consts <span class="op" style="color: #5E5E5E;">=</span> [(torch.rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.1</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb88-7">    <span class="cf" style="color: #003B4F;">for</span> l <span class="kw" style="color: #003B4F;">in</span> layers<span class="op" style="color: #5E5E5E;">+</span>consts: l.requires_grad_()</span>
<span id="cb88-8">    <span class="cf" style="color: #003B4F;">return</span> layers,consts</span></code></pre></div>
</div>
<p>You’ll notice here that there’s a lot of messy constants to get the random numbers in just the right ranges. When we train the model in a moment, you’ll see that the tiniest changes to these initialisations can cause our model to fail to train at all.</p>
<p><strong>This is a key reason that deep learning failed to make much progress in the early days - it’s very finicky to get a good starting point for our coefficients. Nowadays, we have better ways to deal with that.</strong></p>
<p>Our deep learning calc_preds looks much the same as before, but now we loop through each layer, instead of listing them separately:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb89-2">    layers,consts <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb89-3">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(layers)</span>
<span id="cb89-4">    res <span class="op" style="color: #5E5E5E;">=</span> indeps</span>
<span id="cb89-5">    <span class="cf" style="color: #003B4F;">for</span> i,l <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(layers):</span>
<span id="cb89-6">        res <span class="op" style="color: #5E5E5E;">=</span> res<span class="op" style="color: #5E5E5E;">@</span>l <span class="op" style="color: #5E5E5E;">+</span> consts[i]</span>
<span id="cb89-7">        <span class="cf" style="color: #003B4F;">if</span> i<span class="op" style="color: #5E5E5E;">!=</span>n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>: res <span class="op" style="color: #5E5E5E;">=</span> F.relu(res)</span>
<span id="cb89-8">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<p>We also need a minor update to update_coeffs since we’ve got layers and consts separated now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb90-2">    layers,consts <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb90-3">    <span class="cf" style="color: #003B4F;">for</span> layer <span class="kw" style="color: #003B4F;">in</span> layers<span class="op" style="color: #5E5E5E;">+</span>consts:</span>
<span id="cb90-4">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb90-5">        layer.grad.zero_()</span></code></pre></div>
</div>
<p>Let’s train our model…</p>
<div class="cell" data-outputid="e5d0def9-bfa1-4ac4-97ce-336a4ef57d37">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.521; 0.483; 0.427; 0.379; 0.379; 0.379; 0.379; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.377; 0.376; 0.371; 0.333; 0.239; 0.224; 0.208; 0.204; 0.203; 0.203; 0.207; 0.197; 0.196; 0.195; </code></pre>
</div>
</div>
<div class="cell" data-outputid="60c72964-b1bd-4741-f15e-6c6324c89fc2">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>The “real” deep learning models that are used in research and industry look very similar to this, and in fact if you look inside the source code of any deep learning model you’ll recognise the basic steps are the same.</p>
<p>The biggest differences in practical models to what we have above are:</p>
<ul>
<li>How initialisation and normalisation is done to ensure the model trains correctly every time</li>
<li>Regularization (to avoid over-fitting)</li>
<li>Modifying the neural net itself to take advantage of knowledge of the problem domain</li>
<li>Doing gradient descent steps on smaller batches, rather than the whole dataset</li>
</ul>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch.html</guid>
  <pubDate>Sat, 17 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ml_v_dl.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>US Patent Phrase to Phrase Matching</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-10-us-patent-phrase-to-phrase-matching.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> course for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>. This article covers lesson 4 of this years course, which I will use to create model that can associate short phrases with the correct US patent classification.</p>
<p>While this is based on a fastai training course, in this particular project we will not actually be using the fastai library, we will be using the <a href="https://huggingface.co/docs/transformers/index">Hugging Face Transformers Library</a> which is a python library of state of the art deep learning models, including the very powerful <a href="https://www.quantamagazine.org/will-transformers-take-over-artificial-intelligence-20220310/">transformers model architecture</a> behind so many of the recent advances in AI. Fastai does also integrate <a href="https://docs.fast.ai/tutorial.transformers.html">transfomer models</a> as well.</p>
<p>First we will import the required libraries.</p>
</section>
<section id="import-libraries" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">2</span> Import Libraries</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> Dataset,DatasetDict</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForSequenceClassification,AutoTokenizer,TrainingArguments,Trainer</span></code></pre></div>
</div>
</section>
<section id="the-project-us-patent-phrase-to-phrase-matching" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-project-us-patent-phrase-to-phrase-matching"><span class="header-section-number">3</span> The Project: US Patent Phrase to Phrase Matching</h2>
<p>The U.S. Patent and Trademark Office (USPTO) offers one of the largest repositories of scientific, technical, and commercial information in the world through its Open Data Portal. Patents are a form of intellectual property granted in exchange for the public disclosure of new and useful inventions. Because patents undergo an intensive vetting process prior to grant, and because the history of U.S. innovation spans over two centuries and 11 million patents, the U.S. patent archives stand as a rare combination of data volume, quality, and diversity.</p>
<p>In this project, I will train a model on a novel semantic similarity dataset to extract relevant information by matching key phrases in patent documents. Determining the semantic similarity between phrases is critically important during the patent search and examination process to determine if an invention has been described before.</p>
<p>For example, if one invention claims “television set” and a prior publication describes “TV set”, a model would ideally recognize these are the same and assist a patent attorney or examiner in retrieving relevant documents. This extends beyond paraphrase identification; if one invention claims a “strong material” and another uses “steel”, that may also be a match. What counts as a “strong material” varies per domain (it may be steel in one domain and ripstop fabric in another, but you wouldn’t want your parachute made of steel).</p>
<p>We will seek to build a model to match phrases in order to extract contextual information, which could help the patent community connect the dots between millions of patent documents.</p>
<p>Specifically, we will be comparing two words or short phrases, and scoring them based on whether they’re similar or not, based on which patent class they were used in. With a score of 1 it is considered that the two inputs have identical meaning, and 0 means they have totally different meaning. For instance, <em>abatement</em> and <em>eliminating process</em> have a score of 0.5, meaning they’re somewhat similar, but not identical.</p>
<p>It turns out that this can be represented as a classification problem. How? By representing the question like this:</p>
<blockquote class="blockquote">
<p>For the following text…: “TEXT1: abatement; TEXT2: eliminating process” …chose a category of meaning similarity: “Different; Similar; Identical”.</p>
</blockquote>
<p>In this project we’ll see how to solve the Patent Phrase Matching problem by treating it as a classification task, by representing it in a very similar way to that shown above.</p>
<p>The dataset comes from <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching">this kaggle project</a>.</p>
</section>
<section id="get-data" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="get-data"><span class="header-section-number">4</span> Get Data</h2>
<p>Let’s first download and extract our data.</p>
<div class="cell" data-outputid="994ec26d-2589-42c7-e7b8-258ad524b21f">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>unzip us<span class="op" style="color: #5E5E5E;">-</span>patent<span class="op" style="color: #5E5E5E;">-</span>phrase<span class="op" style="color: #5E5E5E;">-</span>to<span class="op" style="color: #5E5E5E;">-</span>phrase<span class="op" style="color: #5E5E5E;">-</span>matching.<span class="bu" style="color: null;">zip</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Archive:  us-patent-phrase-to-phrase-matching.zip
  inflating: sample_submission.csv   
  inflating: test.csv                
  inflating: train.csv               
drive        sample_submission.csv  train.csv
sample_data  test.csv           us-patent-phrase-to-phrase-matching.zip</code></pre>
</div>
</div>
<div class="cell" data-outputid="1c55912b-5d5e-46f4-e2fe-0b201ce78fbb">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb4-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">


  <div id="df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
      <th>score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>37d61fd2272659b1</td>
      <td>abatement</td>
      <td>abatement of pollution</td>
      <td>A47</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7b9652b17b68b7a4</td>
      <td>abatement</td>
      <td>act of abating</td>
      <td>A47</td>
      <td>0.75</td>
    </tr>
    <tr>
      <th>2</th>
      <td>36d72442aefd8232</td>
      <td>abatement</td>
      <td>active catalyst</td>
      <td>A47</td>
      <td>0.25</td>
    </tr>
    <tr>
      <th>3</th>
      <td>5296b0c19e1ce60e</td>
      <td>abatement</td>
      <td>eliminating process</td>
      <td>A47</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>54c1e3b9184cb5b6</td>
      <td>abatement</td>
      <td>forest region</td>
      <td>A47</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>The <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching/data">dataset description</a> gives a clearer idea of what these different fields mean.</p>
<p>For example:</p>
<ul>
<li>id - a unique identifier for a pair of phrases</li>
<li>anchor - the first phrase</li>
<li>target - the second phrase</li>
<li>context - the CPC classification (version 2021.05), which indicates the subject within which the similarity is to be scored</li>
<li>score - the similarity. This is sourced from a combination of one or more manual expert ratings.</li>
</ul>
<p>Lets generate some basic summary stats for each field.</p>
<div class="cell" data-outputid="04c33028-57d9-4934-a7f7-af97c11374c9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.describe(include<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'object'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">


  <div id="df-ebd58c4d-8058-424e-91f1-9e8e5711d66a">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>36473</td>
      <td>36473</td>
      <td>36473</td>
      <td>36473</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>36473</td>
      <td>733</td>
      <td>29340</td>
      <td>106</td>
    </tr>
    <tr>
      <th>top</th>
      <td>37d61fd2272659b1</td>
      <td>component composite coating</td>
      <td>composition</td>
      <td>H01</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>152</td>
      <td>24</td>
      <td>2186</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-ebd58c4d-8058-424e-91f1-9e8e5711d66a')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-ebd58c4d-8058-424e-91f1-9e8e5711d66a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-ebd58c4d-8058-424e-91f1-9e8e5711d66a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>We can see that we have far fewer anchors than targets, and that some of these anchors are very common for example ‘component composite coating’ is associated with 152 different targets.</p>
<p>It was suggested earlier that we could represent the input to the model as something like “TEXT1: abatement; TEXT2: eliminating process”. We’ll need to add the context to this too. In Pandas, we just use + to concatenate, like so:</p>
<div class="cell" data-outputid="4ea27036-5cb3-4eaf-9309-6ea068360470">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df[<span class="st" style="color: #20794D;">'input'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'TEXT1: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.context <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.target <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; ANC1: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.anchor</span>
<span id="cb6-2">df[<span class="st" style="color: #20794D;">'input'</span>].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>0    TEXT1: A47; TEXT2: abatement of pollution; ANC...
1    TEXT1: A47; TEXT2: act of abating; ANC1: abate...
2    TEXT1: A47; TEXT2: active catalyst; ANC1: abat...
3    TEXT1: A47; TEXT2: eliminating process; ANC1: ...
4    TEXT1: A47; TEXT2: forest region; ANC1: abatement
Name: input, dtype: object</code></pre>
</div>
</div>
</section>
<section id="text-data-transformation" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="text-data-transformation"><span class="header-section-number">5</span> Text Data Transformation</h2>
<p>The Hugging Face transformers library uses the <em>Dataset</em> object to store data, lets create one for our data.</p>
<div class="cell" data-outputid="99fdcfa6-de63-46c1-893a-665f76aec537">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(df)</span>
<span id="cb8-2">ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Dataset({
    features: ['id', 'anchor', 'target', 'context', 'score', 'input'],
    num_rows: 36473
})</code></pre>
</div>
</div>
<p>So we have our text data, but there is a problem. Machine learning and AI models don’t actually understand text! They can only understand numbers. So we need a way to convert our text data into a numerical representation.</p>
<p>The branch of machine learning and AI concerned with understanding language is called <em>Natural Language Processing or NLP</em>. In NLP we prepare text data for machine learning by converting it into numbers, two common steps are followed:</p>
<ul>
<li><strong>Tokenization</strong>: Split each text up into words (or actually, as we’ll see, into tokens)</li>
<li><strong>Numericalization</strong>: Convert each word (or token) into a number.</li>
</ul>
<p>The details about how this is done actually depends on the particular model we use. So first we’ll need to pick a model. There are thousands of models available, but a reasonable starting point for nearly any NLP problem is to use a smaller model, then working up to a bigger model later.</p>
<p>Why? It’s true that in deep learning and AI, a larger model generally does better than a smaller model. However a smaller model is quicker to train and experiment with multiple times which is better when we are just trying things out at the start and need to iterate rapidly, and can give an idea of some kind of baseline we can expect to improve on with a bigger model.</p>
<p>We will use this small model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model_nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'microsoft/deberta-v3-small'</span></span></code></pre></div>
</div>
<p><em>AutoTokenizer</em> will create a tokenizer appropriate for a given model:</p>
<div class="cell" data-outputid="cd0a9bb9-1902-4ecf-cebe-a73c23c468b3">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">tokz <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_nm)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6583b3bf366d4e2abef054d6c06120a9","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5d375ef026614846a4a9079d4212aab5","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1c1068ad5976450a8460fb74aea3dd1c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
/usr/local/lib/python3.8/dist-packages/transformers/convert_slow_tokenizer.py:446: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.
  warnings.warn(
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.</code></pre>
</div>
</div>
<p>Here’s an example of how the tokenizer splits a text into “tokens” (which are like words, but can be sub-word pieces, as you see below):</p>
<div class="cell" data-outputid="0c424420-5159-41be-ade2-e85037aea09a">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">tokz.tokenize(<span class="st" style="color: #20794D;">"Hi my name is Pranath !"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>['▁Hi', '▁my', '▁name', '▁is', '▁Prana', 'th', '▁!']</code></pre>
</div>
</div>
<p>Uncommon words will be split into pieces. The start of a new word is represented by ▁:</p>
<div class="cell" data-outputid="b9a2ba19-4830-44e3-9820-d0c9346021b0">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tokz.tokenize(<span class="st" style="color: #20794D;">"A platypus is an ornithorhynchus anatinus."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>['▁A',
 '▁platypus',
 '▁is',
 '▁an',
 '▁or',
 'ni',
 'tho',
 'rhynch',
 'us',
 '▁an',
 'at',
 'inus',
 '.']</code></pre>
</div>
</div>
<p>Here’s a simple function which tokenizes our inputs:</p>
<div class="cell" data-outputid="778923db-d625-45e5-b6c1-5dee66138bb6">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> tok_func(x): <span class="cf" style="color: #003B4F;">return</span> tokz(x[<span class="st" style="color: #20794D;">"input"</span>])</span>
<span id="cb17-2"></span>
<span id="cb17-3">tok_ds <span class="op" style="color: #5E5E5E;">=</span> ds.<span class="bu" style="color: null;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8551069b5c3544fa81ce2f9e751c9413","version_major":2,"version_minor":0}
</script>
</div>
</div>
<p>This adds a new item to our dataset called input_ids. For instance, here is the input and IDs for the first row of our data:</p>
<div class="cell" data-outputid="bbf33ef0-dd9e-46b8-e24f-761ec9aeb494">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">row <span class="op" style="color: #5E5E5E;">=</span> tok_ds[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb18-2">row[<span class="st" style="color: #20794D;">'input'</span>], row[<span class="st" style="color: #20794D;">'input_ids'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>('TEXT1: A47; TEXT2: abatement of pollution; ANC1: abatement',
 [1,
  54453,
  435,
  294,
  336,
  5753,
  346,
  54453,
  445,
  294,
  47284,
  265,
  6435,
  346,
  23702,
  435,
  294,
  47284,
  2])</code></pre>
</div>
</div>
<p>So, what are those IDs and where do they come from? The secret is that there’s a list called vocab in the tokenizer which contains a unique integer for every possible token string. We can look them up like this, for instance to find the token for the word “of”:</p>
<div class="cell" data-outputid="806a06e1-cb5b-4221-8d79-d5a0ed527a48">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">tokz.vocab[<span class="st" style="color: #20794D;">'▁of'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>265</code></pre>
</div>
</div>
<p>Looking above at our input IDs, we see that 265 appears as expected.</p>
<p>Finally, we need to prepare our labels. Transformers always assumes that your labels has the column name <strong>labels</strong>, but in our dataset it’s currently called score. Therefore, we need to rename it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">tok_ds <span class="op" style="color: #5E5E5E;">=</span> tok_ds.rename_columns({<span class="st" style="color: #20794D;">'score'</span>:<span class="st" style="color: #20794D;">'labels'</span>})</span></code></pre></div>
</div>
<p>Now that we’ve prepared our tokens and labels, we need to create our validation set.</p>
</section>
<section id="test-and-validation-sets" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="test-and-validation-sets"><span class="header-section-number">6</span> Test and Validation Sets</h2>
<p>You may have noticed that our directory contained another file for our test set.</p>
<div class="cell" data-outputid="a8c1475c-0206-49c0-c541-9791eac07057">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">eval_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'test.csv'</span>)</span>
<span id="cb23-2">eval_df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">


  <div id="df-f7dd49a1-7732-4dde-ae68-09eaa9820990">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>36</td>
      <td>36</td>
      <td>36</td>
      <td>36</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>36</td>
      <td>34</td>
      <td>36</td>
      <td>29</td>
    </tr>
    <tr>
      <th>top</th>
      <td>4112d61851461f60</td>
      <td>el display</td>
      <td>inorganic photoconductor drum</td>
      <td>G02</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>2</td>
      <td>1</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-f7dd49a1-7732-4dde-ae68-09eaa9820990')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-f7dd49a1-7732-4dde-ae68-09eaa9820990 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-f7dd49a1-7732-4dde-ae68-09eaa9820990');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Transformers uses a <em>DatasetDict</em> for holding your training and validation sets. To create one that contains 25% of our data for the validation set, and 75% for the training set, we use train_test_split:</p>
<div class="cell" data-outputid="33d57732-7935-4203-a661-d541e250f734">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dds <span class="op" style="color: #5E5E5E;">=</span> tok_ds.train_test_split(<span class="fl" style="color: #AD0000;">0.25</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb24-2">dds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 27354
    })
    test: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 9119
    })
})</code></pre>
</div>
</div>
<p>As you see above, the validation set here is called test and not validate, so we need to be careful we don’t confuse ourselves with terminology!</p>
<p>We will use the separate test set at the end to check our predictions, whereas the validation set will be used during the model training to check our progress.</p>
<p>We’ll use <strong>eval</strong> as our name for the test set, to avoid confusion with the test dataset that was created above.</p>
<div class="cell" data-outputid="84481660-4351-4bd4-a15c-dec69df8a6c8">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">eval_df[<span class="st" style="color: #20794D;">'input'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'TEXT1: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.context <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.target <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; ANC1: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.anchor</span>
<span id="cb26-2">eval_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(eval_df).<span class="bu" style="color: null;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9ae9031952424fe58b0c3763e16efaf4","version_major":2,"version_minor":0}
</script>
</div>
</div>
</section>
<section id="model-training" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="model-training"><span class="header-section-number">7</span> Model Training</h2>
<p>To train our model we need to pick a batch size that fits our GPU, and small number of epochs so we can run experiments quickly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">128</span></span>
<span id="cb27-2">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb27-3">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">8e-5</span></span></code></pre></div>
</div>
<p>The most important hyperparameter for model training is the learning rate. Fastai provides a learning rate finder to help you figure this out, but Hugging Face Transformers doesn’t, so we just have to use trial and error. The idea is to find the largest value you can, but which doesn’t result in training failing.</p>
<p>We will also need to define some functions for our model metric, which is how we measure how well our model is performing. For this we will be using <em>Pearsons Correlation Coefficient</em> as a measure of similarity between the anchor and target texts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> corr(x,y): <span class="cf" style="color: #003B4F;">return</span> np.corrcoef(x,y)[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;">def</span> corr_d(eval_pred): <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'pearson'</span>: corr(<span class="op" style="color: #5E5E5E;">*</span>eval_pred)}</span></code></pre></div>
</div>
<p>Transformers uses the <em>TrainingArguments</em> class to set up model training hyper-parameter arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">args <span class="op" style="color: #5E5E5E;">=</span> TrainingArguments(<span class="st" style="color: #20794D;">'outputs'</span>, learning_rate<span class="op" style="color: #5E5E5E;">=</span>lr, warmup_ratio<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, lr_scheduler_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cosine'</span>, fp16<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb29-2">    evaluation_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"epoch"</span>, per_device_train_batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, per_device_eval_batch_size<span class="op" style="color: #5E5E5E;">=</span>bs<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb29-3">    num_train_epochs<span class="op" style="color: #5E5E5E;">=</span>epochs, weight_decay<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>, report_to<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
</div>
<p>We can now create our model, and Trainer, which is a class which combines the data and model together (just like Learner in fastai):</p>
<div class="cell" data-outputid="09aa6249-4642-4d24-d1bb-06300fb1535b">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb30-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(model, args, train_dataset<span class="op" style="color: #5E5E5E;">=</span>dds[<span class="st" style="color: #20794D;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;">=</span>dds[<span class="st" style="color: #20794D;">'test'</span>],</span>
<span id="cb30-3">                  tokenizer<span class="op" style="color: #5E5E5E;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;">=</span>corr_d)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at microsoft/deberta-v3-small were not used when initializing DebertaV2ForSequenceClassification: ['mask_predictions.dense.bias', 'mask_predictions.LayerNorm.bias', 'lm_predictions.lm_head.dense.bias', 'lm_predictions.lm_head.bias', 'lm_predictions.lm_head.LayerNorm.weight', 'lm_predictions.lm_head.dense.weight', 'mask_predictions.dense.weight', 'mask_predictions.classifier.bias', 'mask_predictions.LayerNorm.weight', 'mask_predictions.classifier.weight', 'lm_predictions.lm_head.LayerNorm.bias']
- This IS expected if you are initializing DebertaV2ForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing DebertaV2ForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of DebertaV2ForSequenceClassification were not initialized from the model checkpoint at microsoft/deberta-v3-small and are newly initialized: ['pooler.dense.bias', 'classifier.weight', 'pooler.dense.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Using cuda_amp half precision backend</code></pre>
</div>
</div>
<p>Let’s train our model!</p>
<div class="cell" data-outputid="2420bd99-1a86-43d9-8bcd-5ae24bb154d6">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">trainer.train()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the training set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running training *****
  Num examples = 27354
  Num Epochs = 4
  Instantaneous batch size per device = 128
  Total train batch size (w. parallel, distributed &amp; accumulation) = 128
  Gradient Accumulation steps = 1
  Total optimization steps = 856
  Number of trainable parameters = 141895681</code></pre>
</div>
<div class="cell-output cell-output-display">


    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:39, Epoch 4/4]
    </div>
    <table class="dataframe table table-sm table-striped">
  <thead>
 <tr>
      <th>Epoch</th>
      <th>Training Loss</th>
      <th>Validation Loss</th>
      <th>Pearson</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>No log</td>
      <td>0.023299</td>
      <td>0.827306</td>
    </tr>
    <tr>
      <td>2</td>
      <td>No log</td>
      <td>0.022970</td>
      <td>0.831413</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.014000</td>
      <td>0.022094</td>
      <td>0.831611</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.014000</td>
      <td>0.022278</td>
      <td>0.831688</td>
    </tr>
  </tbody>
</table><p>
</p></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256</code></pre>
</div>
<div class="cell-output cell-output-display">


    <div>
      
      <progress value="215" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [215/856 00:52 &lt; 02:37, 4.08 it/s, Epoch 1/4]
    </div>
    <table class="dataframe table table-sm table-striped">
  <thead>
 <tr>
      <th>Epoch</th>
      <th>Training Loss</th>
      <th>Validation Loss</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table><p>
    </p><div>
      
      <progress value="108" max="36" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [36/36 03:48]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256
Saving model checkpoint to outputs/checkpoint-500
Configuration saved in outputs/checkpoint-500/config.json
Model weights saved in outputs/checkpoint-500/pytorch_model.bin
tokenizer config file saved in outputs/checkpoint-500/tokenizer_config.json
Special tokens file saved in outputs/checkpoint-500/special_tokens_map.json
The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256
The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256


Training completed. Do not forget to share your model on huggingface.co/models =)

</code></pre>
</div>
</div>
<p>Lots of warning messages from Transformers – we can ignore these.</p>
<p>The key thing to look at is the “Pearson” value in table above. As we can see, it’s increasing, and is already above 0.8. It looks like we have a model that can predict with high accuracy for these patent text phrases.</p>
</section>
<section id="generate-predictions-for-us-patent-phrases" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="generate-predictions-for-us-patent-phrases"><span class="header-section-number">8</span> Generate Predictions for US Patent Phrases</h2>
<p>Let’s get some predictions on the test set.</p>
<div class="cell" data-outputid="90bdbf74-595c-4f9b-de5f-666406022fc3">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">preds <span class="op" style="color: #5E5E5E;">=</span> trainer.predict(eval_ds).predictions.astype(<span class="bu" style="color: null;">float</span>)</span>
<span id="cb36-2">preds</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the test set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Prediction *****
  Num examples = 36
  Batch size = 256</code></pre>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array([[ 5.01464844e-01],
       [ 6.09863281e-01],
       [ 6.35742188e-01],
       [ 2.67578125e-01],
       [-2.59160995e-04],
       [ 5.31738281e-01],
       [ 4.78515625e-01],
       [-4.77981567e-03],
       [ 2.24121094e-01],
       [ 1.07910156e+00],
       [ 2.25463867e-01],
       [ 2.15087891e-01],
       [ 7.56347656e-01],
       [ 8.77929688e-01],
       [ 7.44628906e-01],
       [ 3.58642578e-01],
       [ 2.76855469e-01],
       [-7.08770752e-03],
       [ 6.49414062e-01],
       [ 3.75488281e-01],
       [ 4.80468750e-01],
       [ 2.20336914e-01],
       [ 2.38159180e-01],
       [ 1.93481445e-01],
       [ 5.60546875e-01],
       [ 1.14746094e-02],
       [-7.29751587e-03],
       [-9.97924805e-03],
       [-8.94165039e-03],
       [ 6.04492188e-01],
       [ 3.15673828e-01],
       [ 1.96685791e-02],
       [ 7.78808594e-01],
       [ 4.83886719e-01],
       [ 4.22363281e-01],
       [ 1.96655273e-01]])</code></pre>
</div>
</div>
<p>Looking at these predictions something is not quite right. The Pearson’s correlation coefficient should have a value (for our case) between 0 and 1, but some values of our predictions are less than zero and bigger than 1.</p>
<p>This once again shows the value of remembering to actually look at your data. Let’s fix those out-of-bounds predictions:</p>
<div class="cell" data-outputid="5a9651f1-9ce0-4de5-fed2-ef0fc0d9932f">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">preds <span class="op" style="color: #5E5E5E;">=</span> np.clip(preds, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb39-2">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>array([[0.50146484],
       [0.60986328],
       [0.63574219],
       [0.26757812],
       [0.        ],
       [0.53173828],
       [0.47851562],
       [0.        ],
       [0.22412109],
       [1.        ],
       [0.22546387],
       [0.21508789],
       [0.75634766],
       [0.87792969],
       [0.74462891],
       [0.35864258],
       [0.27685547],
       [0.        ],
       [0.64941406],
       [0.37548828],
       [0.48046875],
       [0.22033691],
       [0.23815918],
       [0.19348145],
       [0.56054688],
       [0.01147461],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.60449219],
       [0.31567383],
       [0.01966858],
       [0.77880859],
       [0.48388672],
       [0.42236328],
       [0.19665527]])</code></pre>
</div>
</div>
<p>We now have our predictions for the patent phrase pairs which should have a high accruacy from our results.</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2022-12-10-us-patent-phrase-to-phrase-matching.html</guid>
  <pubDate>Sat, 10 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ai_text.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using AI to Identify Galaxies</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>.</p>
<p>This article covers lesson 1 of this years course, which I will use to create model that can identify different types of galaxies. I will also highlight some notable differences from earlier versions of the fastai course and library.</p>
<p>First we will import the required libraries.</p>
</section>
<section id="import-libraries" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">2</span> Import Libraries</h2>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> duckduckgo_search <span class="im" style="color: #00769E;">import</span> ddg_images</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> fastdownload <span class="im" style="color: #00769E;">import</span> download_url</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastcore.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>The first notable difference from earlier versions of fastai is that its now much easier to download images from a search engine to create a dataset from, by default this uses the search engine duck duck go. Lets define a short function that will gather images for us.</p>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb2-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;">{</span>term<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'"</span>)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;">'image'</span>)</span></code></pre></div>
</div>
</section>
<section id="the-project-recognise-spiral-vs-irregular-galaxies" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-project-recognise-spiral-vs-irregular-galaxies"><span class="header-section-number">3</span> The Project: Recognise Spiral vs Irregular Galaxies</h2>
<p>Two of the main types of galaxies are <a href="https://hubblesite.org/science/galaxies"><em>spiral and irregular galaxies</em></a>. Lets use our previous function to first download some examples of spiral galaxy images to see what they look like.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;">=</span> search_images(<span class="st" style="color: #20794D;">'spiral galaxy photos'</span>)</span></code></pre></div>
</div>
<p>Let’s now grab one of these images and have a look.</p>
<div class="cell" data-outputid="38e60321-9c24-4074-ed64-f6379bbd8203" data-execution_count="49">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">dest <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral_galaxy.jpg'</span></span>
<span id="cb4-2">download_url(urls[<span class="dv" style="color: #AD0000;">2</span>], dest, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb4-3">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(dest)</span>
<span id="cb4-4">im.to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So we can see spiral galaxies have a spiral structure to them, they are relatively flat and have distinctive arms, with a bulge concerntrated at the center.</p>
<p>Let’s now download some irregular galaxies and have a look at one.</p>
<div class="cell" data-outputid="39de9a78-f8d0-4670-c254-0601be11578a" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">download_url(search_images(<span class="st" style="color: #20794D;">'irregular galaxy photos'</span>)[<span class="dv" style="color: #AD0000;">3</span>], <span class="st" style="color: #20794D;">'irregular_galaxy.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb5-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'irregular_galaxy.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'irregular galaxy photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="50">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Irregular galaxies have no obvious structure, and are not flat like spiral galaxies. These are often some of the oldest galaxies in the universe, which were abundant in the early universe before spirals and other types of galaxies developed.</p>
</section>
<section id="download-galaxy-images" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="download-galaxy-images"><span class="header-section-number">4</span> Download Galaxy Images</h2>
<p>So it looks like our images correspond to the types of galaxy images we want, so we will now grab some examples of each to create our dataset.</p>
<div class="cell" data-outputid="87c35ba4-1794-4c9a-deea-b30aa3c0ad8f" data-execution_count="51">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">searches <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral galaxy'</span>,<span class="st" style="color: #20794D;">'irregular galaxy'</span></span>
<span id="cb7-2">path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'spiral_or_irregular'</span>)</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">from</span> time <span class="im" style="color: #00769E;">import</span> sleep</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> searches:</span>
<span id="cb7-6">    dest <span class="op" style="color: #5E5E5E;">=</span> (path<span class="op" style="color: #5E5E5E;">/</span>o)</span>
<span id="cb7-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, parents<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;">=</span>search_images(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>o<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> photo'</span>))</span>
<span id="cb7-9">    sleep(<span class="dv" style="color: #AD0000;">10</span>)  <span class="co" style="color: #5E5E5E;"># Pause between searches to avoid over-loading server</span></span>
<span id="cb7-10">    resize_images(path<span class="op" style="color: #5E5E5E;">/</span>o, max_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400</span>, dest<span class="op" style="color: #5E5E5E;">=</span>path<span class="op" style="color: #5E5E5E;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'spiral galaxy photo'
Searching for 'irregular galaxy photo'</code></pre>
</div>
</div>
<p>Another nice new fastai feature is the ability to check the images we have download have valid paths and delete any that are not valid images.</p>
<div class="cell" data-outputid="7c091515-fb40-4a99-c4d6-c58177f12ef3" data-execution_count="52">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">failed <span class="op" style="color: #5E5E5E;">=</span> verify_images(get_image_files(path))</span>
<span id="cb9-2">failed.<span class="bu" style="color: null;">map</span>(Path.unlink)</span>
<span id="cb9-3"><span class="bu" style="color: null;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>0</code></pre>
</div>
</div>
</section>
<section id="create-dataset" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="create-dataset"><span class="header-section-number">5</span> Create Dataset</h2>
<p>We will now create a DataLoader object using the DataBlock object. This is very much the way it was done in fastai the last time i did this course.</p>
<div class="cell" data-outputid="12ce2465-e003-419d-b4ac-d53c3f539cc9" data-execution_count="53">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dls <span class="op" style="color: #5E5E5E;">=</span> DataBlock(</span>
<span id="cb11-2">    blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, CategoryBlock), </span>
<span id="cb11-3">    get_items<span class="op" style="color: #5E5E5E;">=</span>get_image_files, </span>
<span id="cb11-4">    splitter<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>),</span>
<span id="cb11-5">    get_y<span class="op" style="color: #5E5E5E;">=</span>parent_label,</span>
<span id="cb11-6">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>[Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>)]</span>
<span id="cb11-7">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see we have some nice examples of each type of galaxy.</p>
</section>
<section id="train-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="train-model"><span class="header-section-number">6</span> Train Model</h2>
<p>Now we have our data ready we can create our vision model and train it. We will train a ResNet18 model for just 3 epochs (or 3 complete passes over the entire dataset).</p>
<div class="cell" data-outputid="5df23929-c673-4d2d-987f-c5e3e9b4ec7d" data-execution_count="70">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate)</span>
<span id="cb12-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.071076</td>
      <td>0.766020</td>
      <td>0.391304</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.594808</td>
      <td>0.279009</td>
      <td>0.173913</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.417826</td>
      <td>0.361526</td>
      <td>0.086957</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.303060</td>
      <td>0.362775</td>
      <td>0.086957</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="test-model" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="test-model"><span class="header-section-number">7</span> Test Model</h2>
<p>We will now test our model by picking an example image for each type of galaxy and see how well it can predict which type of galaxy it is.</p>
<div class="cell" data-outputid="bb4698f0-125a-400f-cda9-b5c021525b0c" data-execution_count="64">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dest <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral_galaxy2.jpg'</span></span>
<span id="cb13-2">download_url(urls[<span class="dv" style="color: #AD0000;">3</span>], dest, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb13-3">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(dest)</span>
<span id="cb13-4">im.to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="eb3913b2-0831-4be7-a422-97c0634c2c5a" data-execution_count="71">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">is_spiral_galaxy,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'spiral_galaxy2.jpg'</span>))</span>
<span id="cb14-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_spiral_galaxy<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb14-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability it's a spiral galaxy: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: spiral galaxy.
Probability it's a spiral galaxy: 0.9313</code></pre>
</div>
</div>
<div class="cell" data-outputid="257915b0-f1e2-46af-e7f9-c222e0d8158d" data-execution_count="67">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">download_url(search_images(<span class="st" style="color: #20794D;">'irregular galaxy photos'</span>)[<span class="dv" style="color: #AD0000;">6</span>], <span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb16-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'irregular galaxy photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="67">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="194cba53-ac6b-43b1-f1d7-3c135b1af893" data-execution_count="72">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">is_irregular_galaxy,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>))</span>
<span id="cb18-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_irregular_galaxy<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability it's a irregular galaxy: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: irregular galaxy.
Probability it's a irregular galaxy: 0.8309</code></pre>
</div>
</div>
<p>After training the model for just 3 epochs the model has achieved an excellent accuracy, probably if it had trained for a few more epochs it would have had near perfect accuracy in correctly distingushing these 2 different types of galaxy.</p>
</section>
<section id="conclusion" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">8</span> Conclusion</h2>
<p>It’s worth stepping back for a moment just to appreciate how incredible this achievement is - with just a few lines of code, we have trained a model with around 31 million artifical neurons to recognise a galaxy with around 100 <em>billion</em> stars in a matter of a few seconds.</p>
<p>The fastai library just becomes easier and easier to use over time with continual improvements, automatically using the best methods and practices in deep learning in an easy to use library.</p>
<p>Lesson 2 of 2022 coming up !</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies.html</guid>
  <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/spiral_galaxy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Predicting 10 Year Death Risk from Health Data</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this article we will build a model to predict the 10-year risk of death of individuals from the <a href="https://wwwn.cdc.gov/nchs/nhanes/nhefs/default.aspx/">NHANES I epidemiology dataset</a>.</p>
<p>Topics we will cover will include:</p>
<ul>
<li>Dealing with Missing Data
<ul>
<li>Complete Case Analysis.</li>
<li>Imputation</li>
</ul></li>
<li>Decision Trees
<ul>
<li>Evaluation.</li>
<li>Regularization.</li>
</ul></li>
<li>Random Forests
<ul>
<li>Hyperparameter Tuning.</li>
</ul></li>
</ul>
</section>
<section id="import-packages" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-packages"><span class="header-section-number">2</span> Import Packages</h2>
<ul>
<li><code>shap</code> is a library that explains predictions made by machine learning models.</li>
<li><code>sklearn</code> is one of the most popular machine learning libraries.</li>
<li><code>itertools</code> allows us to conveniently manipulate iterable objects such as lists.</li>
<li><code>pydotplus</code> is used together with <code>IPython.display.Image</code> to visualize graph structures such as decision trees.</li>
<li><code>numpy</code> is a fundamental package for scientific computing in Python.</li>
<li><code>pandas</code> is what we’ll use to manipulate our data.</li>
<li><code>seaborn</code> is a plotting library which has some convenient functions for visualizing missing data.</li>
<li><code>matplotlib</code> is a plotting library.</li>
</ul>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> shap</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sklearn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> itertools</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pydotplus</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> Image </span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> export_graphviz</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> sklearn.externals.six <span class="im" style="color: #00769E;">import</span> StringIO</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;">import</span> RandomForestClassifier</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> sklearn.experimental <span class="im" style="color: #00769E;">import</span> enable_iterative_imputer</span>
<span id="cb1-18"><span class="im" style="color: #00769E;">from</span> sklearn.impute <span class="im" style="color: #00769E;">import</span> IterativeImputer, SimpleImputer</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;"># We'll also import some helper functions that will be useful later on.</span></span>
<span id="cb1-21"><span class="im" style="color: #00769E;">from</span> util <span class="im" style="color: #00769E;">import</span> load_data, cindex</span>
<span id="cb1-22"><span class="im" style="color: #00769E;">from</span> public_tests <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p><a name="2"></a> ## The Dataset</p>
<p>This dataset contains various features of hospital patients as well as their outcomes, i.e.&nbsp;whether or not they died within 10 years.</p>
<div class="cell" data-outputid="53895f4d-48f8-429f-b447-e175a80472d9" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">X_dev, X_test, y_dev, y_test <span class="op" style="color: #5E5E5E;">=</span> load_data(<span class="dv" style="color: #AD0000;">10</span>, <span class="st" style="color: #20794D;">'data/NHANESI_subset_X.csv'</span>, <span class="st" style="color: #20794D;">'data/NHANESI_subset_y.csv'</span>)</span></code></pre></div>
</div>
<p>The dataset has been split into a development set (or dev set), which we will use to develop our risk models, and a test set, which we will use to test our models.</p>
<p>We further split the dev set into a training and validation set, respectively to train and tune our models, using a 75/25 split (note that we set a random state to make this split repeatable).</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X_dev, y_dev, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</div>
<p><a name="2-1"></a> ### Explore the Dataset</p>
<div class="cell" data-outputid="b8e98069-70a6-425c-b26e-fc18571c2233" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"X_train shape: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(X_train.shape))</span>
<span id="cb4-2">X_train.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X_train shape: (5147, 18)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Age</th>
      <th>Diastolic BP</th>
      <th>Poverty index</th>
      <th>Race</th>
      <th>Red blood cells</th>
      <th>Sedimentation rate</th>
      <th>Serum Albumin</th>
      <th>Serum Cholesterol</th>
      <th>Serum Iron</th>
      <th>Serum Magnesium</th>
      <th>Serum Protein</th>
      <th>Sex</th>
      <th>Systolic BP</th>
      <th>TIBC</th>
      <th>TS</th>
      <th>White blood cells</th>
      <th>BMI</th>
      <th>Pulse pressure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1599</th>
      <td>43.0</td>
      <td>84.0</td>
      <td>637.0</td>
      <td>1.0</td>
      <td>49.3</td>
      <td>10.0</td>
      <td>5.0</td>
      <td>253.0</td>
      <td>134.0</td>
      <td>1.59</td>
      <td>7.7</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>490.0</td>
      <td>27.3</td>
      <td>9.1</td>
      <td>25.803007</td>
      <td>34.0</td>
    </tr>
    <tr>
      <th>2794</th>
      <td>72.0</td>
      <td>96.0</td>
      <td>154.0</td>
      <td>2.0</td>
      <td>43.4</td>
      <td>23.0</td>
      <td>4.3</td>
      <td>265.0</td>
      <td>106.0</td>
      <td>1.66</td>
      <td>6.8</td>
      <td>2.0</td>
      <td>208.0</td>
      <td>301.0</td>
      <td>35.2</td>
      <td>6.0</td>
      <td>33.394319</td>
      <td>112.0</td>
    </tr>
    <tr>
      <th>1182</th>
      <td>54.0</td>
      <td>78.0</td>
      <td>205.0</td>
      <td>1.0</td>
      <td>43.8</td>
      <td>12.0</td>
      <td>4.2</td>
      <td>206.0</td>
      <td>180.0</td>
      <td>1.67</td>
      <td>6.6</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>363.0</td>
      <td>49.6</td>
      <td>5.9</td>
      <td>20.278410</td>
      <td>34.0</td>
    </tr>
    <tr>
      <th>6915</th>
      <td>59.0</td>
      <td>90.0</td>
      <td>417.0</td>
      <td>1.0</td>
      <td>43.4</td>
      <td>9.0</td>
      <td>4.5</td>
      <td>327.0</td>
      <td>114.0</td>
      <td>1.65</td>
      <td>7.6</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>347.0</td>
      <td>32.9</td>
      <td>6.1</td>
      <td>32.917744</td>
      <td>78.0</td>
    </tr>
    <tr>
      <th>500</th>
      <td>34.0</td>
      <td>80.0</td>
      <td>385.0</td>
      <td>1.0</td>
      <td>77.7</td>
      <td>9.0</td>
      <td>4.1</td>
      <td>197.0</td>
      <td>64.0</td>
      <td>1.74</td>
      <td>7.3</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>376.0</td>
      <td>17.0</td>
      <td>8.2</td>
      <td>30.743489</td>
      <td>30.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Our targets <code>y</code> will be whether or not the target died within 10 years.</p>
<div class="cell" data-outputid="b7178c14-f6b1-4d24-e8d1-7fb77c241b9f" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">y_train.head(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>1599    False
2794     True
1182    False
6915    False
500     False
1188     True
9739    False
3266    False
6681    False
8822    False
5856     True
3415    False
9366    False
7975    False
1397    False
6809    False
9461    False
9374    False
1170     True
158     False
Name: time, dtype: bool</code></pre>
</div>
</div>
<div class="cell" data-outputid="485fe24d-947c-4ae0-aaa9-63ef3f1eb318" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(X_train.iloc[i,:])</span>
<span id="cb8-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Died within 10 years? </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(y_train.loc[y_train.index[i]]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Age                    67.000000
Diastolic BP           94.000000
Poverty index         114.000000
Race                    1.000000
Red blood cells        43.800000
Sedimentation rate     12.000000
Serum Albumin           3.700000
Serum Cholesterol     178.000000
Serum Iron             73.000000
Serum Magnesium         1.850000
Serum Protein           7.000000
Sex                     1.000000
Systolic BP           140.000000
TIBC                  311.000000
TS                     23.500000
White blood cells       4.300000
BMI                    17.481227
Pulse pressure         46.000000
Name: 5856, dtype: float64

Died within 10 years? True</code></pre>
</div>
</div>
<p><a name="2-2"></a> ### Dealing with Missing Data</p>
<p>Looking at our data in <code>X_train</code>, we see that some of the data is missing: some values in the output of the previous cell are marked as <code>NaN</code> (“not a number”).</p>
<p>Missing data is a common occurrence in data analysis, that can be due to a variety of reasons, such as measuring instrument malfunction, respondents not willing or not able to supply information, and errors in the data collection process.</p>
<p>Let’s examine the missing data pattern. <code>seaborn</code> is an alternative to <code>matplotlib</code> that has some convenient plotting functions for data analysis. We can use its <code>heatmap</code> function to easily visualize the missing data pattern.</p>
<div class="cell" data-outputid="14cc7dc6-49af-4e42-b9fe-7d4a935dd135" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sns.heatmap(X_train.isnull(), cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb10-2">plt.title(<span class="st" style="color: #20794D;">"Training"</span>)</span>
<span id="cb10-3">plt.show()</span>
<span id="cb10-4"></span>
<span id="cb10-5">sns.heatmap(X_val.isnull(), cbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb10-6">plt.title(<span class="st" style="color: #20794D;">"Validation"</span>)</span>
<span id="cb10-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>For each feature, represented as a column, values that are present are shown in black, and missing values are set in a light color.</p>
<p>From this plot, we can see that many values are missing for systolic blood pressure (<code>Systolic BP</code>).</p>
<p>We will write a function to compute the fraction of cases with missing data. This will help us decide how we handle this missing data in the future.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> fraction_rows_missing(df):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;">'''</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">    Return percent of rows with any missing</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">    data in the dataframe. </span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">    Input:</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">        df (dataframe): a pandas dataframe with potentially missing data</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">    Output:</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">        frac_missing (float): fraction of rows with missing data</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">    '''</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">sum</span>(df.isnull().<span class="bu" style="color: null;">any</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(df)</span></code></pre></div>
</div>
<div class="cell" data-outputid="cf128645-a131-4891-9aa8-7cd5934b432d" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">### test cell </span></span>
<span id="cb12-2">fraction_rows_missing_test(fraction_rows_missing, X_train, X_val, X_test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Example dataframe:

      a    b
0  NaN  1.0
1  1.0  NaN
2  1.0  0.0
3  NaN  1.0 

Computed fraction missing:  0.75
Fraction of rows missing from X_train:  0.6986594132504371
Fraction of rows missing from X_val:  0.703962703962704
Fraction of rows missing from X_test:  0.0
 All tests passed.</code></pre>
</div>
</div>
<p>We see that our train and validation sets have missing values, but luckily our test set has complete cases.</p>
<p>As a first pass, we will begin with a <strong>complete case analysis</strong>, dropping all of the rows with any missing data.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">X_train_dropped <span class="op" style="color: #5E5E5E;">=</span> X_train.dropna(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rows'</span>)</span>
<span id="cb14-2">y_train_dropped <span class="op" style="color: #5E5E5E;">=</span> y_train.loc[X_train_dropped.index]</span>
<span id="cb14-3">X_val_dropped <span class="op" style="color: #5E5E5E;">=</span> X_val.dropna(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rows'</span>)</span>
<span id="cb14-4">y_val_dropped <span class="op" style="color: #5E5E5E;">=</span> y_val.loc[X_val_dropped.index]</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"X_train_dropped shape: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(X_train_dropped.shape))</span>
<span id="cb14-7">X_train_dropped.head() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X_train_dropped shape: (1551, 18)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Age</th>
      <th>Diastolic BP</th>
      <th>Poverty index</th>
      <th>Race</th>
      <th>Red blood cells</th>
      <th>Sedimentation rate</th>
      <th>Serum Albumin</th>
      <th>Serum Cholesterol</th>
      <th>Serum Iron</th>
      <th>Serum Magnesium</th>
      <th>Serum Protein</th>
      <th>Sex</th>
      <th>Systolic BP</th>
      <th>TIBC</th>
      <th>TS</th>
      <th>White blood cells</th>
      <th>BMI</th>
      <th>Pulse pressure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2794</th>
      <td>72.0</td>
      <td>96.0</td>
      <td>154.0</td>
      <td>2.0</td>
      <td>43.4</td>
      <td>23.0</td>
      <td>4.3</td>
      <td>265.0</td>
      <td>106.0</td>
      <td>1.66</td>
      <td>6.8</td>
      <td>2.0</td>
      <td>208.0</td>
      <td>301.0</td>
      <td>35.2</td>
      <td>6.0</td>
      <td>33.394319</td>
      <td>112.0</td>
    </tr>
    <tr>
      <th>5856</th>
      <td>67.0</td>
      <td>94.0</td>
      <td>114.0</td>
      <td>1.0</td>
      <td>43.8</td>
      <td>12.0</td>
      <td>3.7</td>
      <td>178.0</td>
      <td>73.0</td>
      <td>1.85</td>
      <td>7.0</td>
      <td>1.0</td>
      <td>140.0</td>
      <td>311.0</td>
      <td>23.5</td>
      <td>4.3</td>
      <td>17.481227</td>
      <td>46.0</td>
    </tr>
    <tr>
      <th>9374</th>
      <td>68.0</td>
      <td>80.0</td>
      <td>201.0</td>
      <td>1.0</td>
      <td>46.2</td>
      <td>20.0</td>
      <td>4.1</td>
      <td>223.0</td>
      <td>204.0</td>
      <td>1.54</td>
      <td>7.2</td>
      <td>1.0</td>
      <td>140.0</td>
      <td>275.0</td>
      <td>74.2</td>
      <td>17.2</td>
      <td>20.690581</td>
      <td>60.0</td>
    </tr>
    <tr>
      <th>8819</th>
      <td>68.0</td>
      <td>80.0</td>
      <td>651.0</td>
      <td>1.0</td>
      <td>47.7</td>
      <td>16.0</td>
      <td>4.3</td>
      <td>178.0</td>
      <td>168.0</td>
      <td>1.97</td>
      <td>7.3</td>
      <td>1.0</td>
      <td>102.0</td>
      <td>339.0</td>
      <td>49.6</td>
      <td>10.2</td>
      <td>27.719091</td>
      <td>22.0</td>
    </tr>
    <tr>
      <th>7331</th>
      <td>73.0</td>
      <td>88.0</td>
      <td>68.0</td>
      <td>2.0</td>
      <td>42.1</td>
      <td>19.0</td>
      <td>3.6</td>
      <td>215.0</td>
      <td>64.0</td>
      <td>1.59</td>
      <td>5.7</td>
      <td>2.0</td>
      <td>190.0</td>
      <td>334.0</td>
      <td>19.2</td>
      <td>6.6</td>
      <td>31.880432</td>
      <td>102.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><a name="3"></a> ## Decision Trees</p>
<p>We will use scikit-learn to build a decision tree for the hospital dataset using the train set.</p>
<div class="cell" data-outputid="44f1e245-de92-4028-af9a-87d4bf4c5285" data-execution_count="15">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">dt <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_depth<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb16-2">dt.fit(X_train_dropped, y_train_dropped)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=10, splitter='best')</code></pre>
</div>
</div>
<p>Next we will evaluate our model. We’ll use C-Index for evaluation.</p>
<blockquote class="blockquote">
<p>The C-Index evaluates the ability of a model to differentiate between different classes, by quantifying how often, when considering all pairs of patients (A, B), the model says that patient A has a higher risk score than patient B when, in the observed data, patient A actually died and patient B actually lived. In our case, our model is a binary classifier, where each risk score is either 1 (the model predicts that the patient will die) or 0 (the patient will live).</p>
<p>More formally, defining <em>permissible pairs</em> of patients as pairs where the outcomes are different, <em>concordant pairs</em> as permissible pairs where the patient that died had a higher risk score (i.e.&nbsp;our model predicted 1 for the patient that died and 0 for the one that lived), and <em>ties</em> as permissible pairs where the risk scores were equal (i.e.&nbsp;our model predicted 1 for both patients or 0 for both patients), the C-Index is equal to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BC-Index%7D%20=%20%5Cfrac%7B%5C#%5Ctext%7Bconcordant%20pairs%7D%20+%200.5%5Ctimes%20%5C#%5Ctext%7Bties%7D%7D%7B%5C#%5Ctext%7Bpermissible%20pairs%7D%7D"></p>
</blockquote>
<div class="cell" data-outputid="6470e060-3efe-487a-e107-85d0fd0f1b92" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">y_train_preds <span class="op" style="color: #5E5E5E;">=</span> dt.predict_proba(X_train_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb18-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train_dropped.values, y_train_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4"></span>
<span id="cb18-5">y_val_preds <span class="op" style="color: #5E5E5E;">=</span> dt.predict_proba(X_val_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb18-6"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val_dropped.values, y_val_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train C-Index: 1.0
Val C-Index: 0.5629321808510638</code></pre>
</div>
</div>
<p>Unfortunately the tree seems to be overfitting: it fits the training data so closely that it doesn’t generalize well to other samples such as those from the validation set.</p>
<blockquote class="blockquote">
<p>The training C-index comes out to 1.0 because, when initializing <code>DecisionTreeClasifier</code>, we have left <code>max_depth</code> and <code>min_samples_split</code> unspecified. The resulting decision tree will therefore keep splitting as far as it can, which pretty much guarantees a pure fit to the training data.</p>
</blockquote>
<p>To handle this, we can change some of the hyperparameters of our tree.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">dt_hyperparams <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb20-2">    <span class="st" style="color: #20794D;">'max_depth'</span>: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">dt_reg <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(<span class="op" style="color: #5E5E5E;">**</span>dt_hyperparams, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb21-2">dt_reg.fit(X_train_dropped, y_train_dropped)</span>
<span id="cb21-3"></span>
<span id="cb21-4">y_train_preds <span class="op" style="color: #5E5E5E;">=</span> dt_reg.predict_proba(X_train_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-5">y_val_preds <span class="op" style="color: #5E5E5E;">=</span> dt_reg.predict_proba(X_val_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-6"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train_dropped.values, y_train_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb21-7"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Val C-Index (expected &gt; 0.6): </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val_dropped.values, y_val_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train C-Index: 0.688738755448391
Val C-Index (expected &gt; 0.6): 0.6302692819148936</code></pre>
</div>
</div>
<p>As we have a low <code>max_depth</code> we can print the entire tree. This allows for easy interpretability.</p>
<div class="cell" data-outputid="c902a2fc-f679-46d3-a4e2-900c0e3f7c17" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">dot_data <span class="op" style="color: #5E5E5E;">=</span> StringIO()</span>
<span id="cb23-2">export_graphviz(dt_reg, feature_names<span class="op" style="color: #5E5E5E;">=</span>X_train_dropped.columns, out_file<span class="op" style="color: #5E5E5E;">=</span>dot_data,  </span>
<span id="cb23-3">                filled<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rounded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, proportion<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, special_characters<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb23-4">                impurity<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, class_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'neg'</span>, <span class="st" style="color: #20794D;">'pos'</span>], precision<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb23-5">graph <span class="op" style="color: #5E5E5E;">=</span> pydotplus.graph_from_dot_data(dot_data.getvalue())  </span>
<span id="cb23-6">Image(graph.create_png())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Overfitting, underfitting, and the bias-variance tradeoff</strong></p>
<p>We can see a max_depth value of <code>3</code> gives training and validation C-Indices of about <code>0.689</code> and <code>0.630</code>, and that a <code>max_depth</code> of <code>2</code> gives better agreement with values of about <code>0.653</code> and <code>0.607</code>. In the latter case, we have further reduced overfitting, at the cost of a minor loss in predictive performance.</p>
<p>Contrast this with a <code>max_depth</code> value of <code>1</code>, which results in C-Indices of about <code>0.597</code> for the training set and <code>0.598</code> for the validation set: we have eliminated overfitting but with a much stronger degradation of predictive performance.</p>
<p>Lower predictive performance on the training and validation sets is indicative of the model <em>underfitting</em> the data: it neither learns enough from the training data nor is able to generalize to unseen data (the validation data in our case).</p>
<p>Finding a model that minimizes and acceptably balances underfitting and overfitting (e.g.&nbsp;selecting the model with a <code>max_depth</code> of <code>2</code> over the other values) is a common problem in machine learning that is known as the <em>bias-variance tradeoff</em>.</p>
</blockquote>
<p><a name="4"></a> ## Random Forests</p>
<p>No matter how you choose hyperparameters, a single decision tree is prone to overfitting. To solve this problem, we can try <strong>random forests</strong>, which combine predictions from many different trees to create a robust classifier.</p>
<p>As before, we will use scikit-learn to build a random forest for the data. We will use the default hyperparameters.</p>
<div class="cell" data-outputid="996f244e-5d96-4562-b17c-834986380dfe" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestClassifier(n_estimators<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-2">rf.fit(X_train_dropped, y_train_dropped)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='auto',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=None, oob_score=False, random_state=10, verbose=0,
                       warm_start=False)</code></pre>
</div>
</div>
<p>Now we compute and report the C-Index for the random forest on the training and validation set.</p>
<div class="cell" data-outputid="78624185-6943-405f-e2e6-c25627be66f4" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">y_train_rf_preds <span class="op" style="color: #5E5E5E;">=</span> rf.predict_proba(X_train_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb26-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train_dropped.values, y_train_rf_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb26-3"></span>
<span id="cb26-4">y_val_rf_preds <span class="op" style="color: #5E5E5E;">=</span> rf.predict_proba(X_val_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb26-5"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val_dropped.values, y_val_rf_preds)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train C-Index: 1.0
Val C-Index: 0.6660488696808511</code></pre>
</div>
</div>
<p>Training a random forest with the default hyperparameters results in a model that has better predictive performance than individual decision trees as in the previous section, but this model is overfitting.</p>
<p>We therefore need to tune (or optimize) the hyperparameters, to find a model that both has good predictive performance and minimizes overfitting.</p>
<p>The hyperparameters we choose to adjust will be:</p>
<ul>
<li><code>n_estimators</code>: the number of trees used in the forest.</li>
<li><code>max_depth</code>: the maximum depth of each tree.</li>
<li><code>min_samples_leaf</code>: the minimum number (if <code>int</code>) or proportion (if <code>float</code>) of samples in a leaf.</li>
</ul>
<p>The approach we implement to tune the hyperparameters is known as a grid search:</p>
<ul>
<li><p>We define a set of possible values for each of the target hyperparameters.</p></li>
<li><p>A model is trained and evaluated for every possible combination of hyperparameters.</p></li>
<li><p>The best performing set of hyperparameters is returned.</p></li>
</ul>
<p>The cell below implements a hyperparameter grid search, using the C-Index to evaluate each tested model.</p>
<div class="cell" data-outputid="24f2082c-7e52-4713-d83e-4cf77db767eb" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> holdout_grid_search(clf, X_train_hp, y_train_hp, X_val_hp, y_val_hp, hyperparams, fixed_hyperparams<span class="op" style="color: #5E5E5E;">=</span>{}):</span>
<span id="cb28-2">    <span class="co" style="color: #5E5E5E;">'''</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;">    Conduct hyperparameter grid search on hold out validation set. Use holdout validation.</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;">    Hyperparameters are input as a dictionary mapping each hyperparameter name to the</span></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;">    range of values they should iterate over. Use the cindex function as your evaluation</span></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;">    function.</span></span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;">    Input:</span></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;">        clf: sklearn classifier</span></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;">        X_train_hp (dataframe): dataframe for training set input variables</span></span>
<span id="cb28-11"><span class="co" style="color: #5E5E5E;">        y_train_hp (dataframe): dataframe for training set targets</span></span>
<span id="cb28-12"><span class="co" style="color: #5E5E5E;">        X_val_hp (dataframe): dataframe for validation set input variables</span></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;">        y_val_hp (dataframe): dataframe for validation set targets</span></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;">        hyperparams (dict): hyperparameter dictionary mapping hyperparameter</span></span>
<span id="cb28-15"><span class="co" style="color: #5E5E5E;">                            names to range of values for grid search</span></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;">        fixed_hyperparams (dict): dictionary of fixed hyperparameters that</span></span>
<span id="cb28-17"><span class="co" style="color: #5E5E5E;">                                  are not included in the grid search</span></span>
<span id="cb28-18"></span>
<span id="cb28-19"><span class="co" style="color: #5E5E5E;">    Output:</span></span>
<span id="cb28-20"><span class="co" style="color: #5E5E5E;">        best_estimator (sklearn classifier): fitted sklearn classifier with best performance on</span></span>
<span id="cb28-21"><span class="co" style="color: #5E5E5E;">                                             validation set</span></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;">        best_hyperparams (dict): hyperparameter dictionary mapping hyperparameter</span></span>
<span id="cb28-23"><span class="co" style="color: #5E5E5E;">                                 names to values in best_estimator</span></span>
<span id="cb28-24"><span class="co" style="color: #5E5E5E;">    '''</span></span>
<span id="cb28-25">    best_estimator <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb28-26">    best_hyperparams <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb28-27">    </span>
<span id="cb28-28">    <span class="co" style="color: #5E5E5E;"># hold best running score</span></span>
<span id="cb28-29">    best_score <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb28-30"></span>
<span id="cb28-31">    <span class="co" style="color: #5E5E5E;"># get list of param values</span></span>
<span id="cb28-32">    lists <span class="op" style="color: #5E5E5E;">=</span> hyperparams.values()</span>
<span id="cb28-33">    </span>
<span id="cb28-34">    <span class="co" style="color: #5E5E5E;"># get all param combinations</span></span>
<span id="cb28-35">    param_combinations <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(itertools.product(<span class="op" style="color: #5E5E5E;">*</span>lists))</span>
<span id="cb28-36">    total_param_combinations <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(param_combinations)</span>
<span id="cb28-37"></span>
<span id="cb28-38">    <span class="co" style="color: #5E5E5E;"># iterate through param combinations</span></span>
<span id="cb28-39">    <span class="cf" style="color: #003B4F;">for</span> i, params <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(param_combinations, <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb28-40">        <span class="co" style="color: #5E5E5E;"># fill param dict with params</span></span>
<span id="cb28-41">        param_dict <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb28-42">        <span class="cf" style="color: #003B4F;">for</span> param_index, param_name <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(hyperparams):</span>
<span id="cb28-43">            param_dict[param_name] <span class="op" style="color: #5E5E5E;">=</span> params[param_index]</span>
<span id="cb28-44">            </span>
<span id="cb28-45">        <span class="co" style="color: #5E5E5E;"># create estimator with specified params</span></span>
<span id="cb28-46">        estimator <span class="op" style="color: #5E5E5E;">=</span> clf(<span class="op" style="color: #5E5E5E;">**</span>param_dict, <span class="op" style="color: #5E5E5E;">**</span>fixed_hyperparams)</span>
<span id="cb28-47"></span>
<span id="cb28-48">        <span class="co" style="color: #5E5E5E;"># fit estimator</span></span>
<span id="cb28-49">        estimator.fit(X_train_hp, y_train_hp)</span>
<span id="cb28-50">        </span>
<span id="cb28-51">        <span class="co" style="color: #5E5E5E;"># get predictions on validation set</span></span>
<span id="cb28-52">        preds <span class="op" style="color: #5E5E5E;">=</span> estimator.predict_proba(X_val_hp)</span>
<span id="cb28-53">        </span>
<span id="cb28-54">        <span class="co" style="color: #5E5E5E;"># compute cindex for predictions</span></span>
<span id="cb28-55">        estimator_score <span class="op" style="color: #5E5E5E;">=</span> cindex(y_val_hp, preds[:,<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb28-56"></span>
<span id="cb28-57">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>total_param_combinations<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">] </span><span class="sc" style="color: #5E5E5E;">{</span>param_dict<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb28-58">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>estimator_score<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb28-59"></span>
<span id="cb28-60">        <span class="co" style="color: #5E5E5E;"># if new high score, update high score, best estimator</span></span>
<span id="cb28-61">        <span class="co" style="color: #5E5E5E;"># and best params </span></span>
<span id="cb28-62">        <span class="cf" style="color: #003B4F;">if</span> estimator_score <span class="op" style="color: #5E5E5E;">&gt;=</span> best_score:</span>
<span id="cb28-63">                best_score <span class="op" style="color: #5E5E5E;">=</span> estimator_score</span>
<span id="cb28-64">                best_estimator <span class="op" style="color: #5E5E5E;">=</span> estimator</span>
<span id="cb28-65">                best_hyperparams <span class="op" style="color: #5E5E5E;">=</span> param_dict</span>
<span id="cb28-66"></span>
<span id="cb28-67">    <span class="co" style="color: #5E5E5E;"># add fixed hyperparamters to best combination of variable hyperparameters</span></span>
<span id="cb28-68">    best_hyperparams.update(fixed_hyperparams)</span>
<span id="cb28-69">    </span>
<span id="cb28-70">    <span class="cf" style="color: #003B4F;">return</span> best_estimator, best_hyperparams</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;">def</span> random_forest_grid_search(X_train_dropped, y_train_dropped, X_val_dropped, y_val_dropped):</span>
<span id="cb29-2"></span>
<span id="cb29-3">    <span class="co" style="color: #5E5E5E;"># Define ranges for the chosen random forest hyperparameters </span></span>
<span id="cb29-4">    hyperparams <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb29-5"></span>
<span id="cb29-6">        <span class="co" style="color: #5E5E5E;"># how many trees should be in the forest (int)</span></span>
<span id="cb29-7">        <span class="st" style="color: #20794D;">'n_estimators'</span>: [<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">300</span>],</span>
<span id="cb29-8"></span>
<span id="cb29-9">        <span class="co" style="color: #5E5E5E;"># the maximum depth of trees in the forest (int)</span></span>
<span id="cb29-10">        </span>
<span id="cb29-11">        <span class="st" style="color: #20794D;">'max_depth'</span>: [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>],</span>
<span id="cb29-12">        </span>
<span id="cb29-13">        <span class="co" style="color: #5E5E5E;"># the minimum number of samples in a leaf as a fraction</span></span>
<span id="cb29-14">        <span class="co" style="color: #5E5E5E;"># of the total number of samples in the training set</span></span>
<span id="cb29-15">        <span class="co" style="color: #5E5E5E;"># Can be int (in which case that is the minimum number)</span></span>
<span id="cb29-16">        <span class="co" style="color: #5E5E5E;"># or float (in which case the minimum is that fraction of the</span></span>
<span id="cb29-17">        <span class="co" style="color: #5E5E5E;"># number of training set samples)</span></span>
<span id="cb29-18">         <span class="st" style="color: #20794D;">'min_samples_leaf'</span>: [<span class="fl" style="color: #AD0000;">0.25</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>],</span>
<span id="cb29-19">    }</span>
<span id="cb29-20"></span>
<span id="cb29-21">    </span>
<span id="cb29-22">    fixed_hyperparams <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb29-23">        <span class="st" style="color: #20794D;">'random_state'</span>: <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb29-24">    }</span>
<span id="cb29-25">    </span>
<span id="cb29-26">    rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestClassifier</span>
<span id="cb29-27"></span>
<span id="cb29-28">    best_rf, best_hyperparams <span class="op" style="color: #5E5E5E;">=</span> holdout_grid_search(rf, X_train_dropped, y_train_dropped,</span>
<span id="cb29-29">                                                    X_val_dropped, y_val_dropped, hyperparams,</span>
<span id="cb29-30">                                                    fixed_hyperparams)</span>
<span id="cb29-31"></span>
<span id="cb29-32">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Best hyperparameters:</span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>best_hyperparams<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb29-33"></span>
<span id="cb29-34">    </span>
<span id="cb29-35">    y_train_best <span class="op" style="color: #5E5E5E;">=</span> best_rf.predict_proba(X_train_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb29-36">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train_dropped, y_train_best)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb29-37"></span>
<span id="cb29-38">    y_val_best <span class="op" style="color: #5E5E5E;">=</span> best_rf.predict_proba(X_val_dropped)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb29-39">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val_dropped, y_val_best)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb29-40">    </span>
<span id="cb29-41">    <span class="co" style="color: #5E5E5E;"># add fixed hyperparamters to best combination of variable hyperparameters</span></span>
<span id="cb29-42">    best_hyperparams.update(fixed_hyperparams)</span>
<span id="cb29-43">    </span>
<span id="cb29-44">    <span class="cf" style="color: #003B4F;">return</span> best_rf, best_hyperparams</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">best_rf, best_hyperparams <span class="op" style="color: #5E5E5E;">=</span> random_forest_grid_search(X_train_dropped, y_train_dropped, X_val_dropped, y_val_dropped)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1/27] {'n_estimators': 100, 'max_depth': 3, 'min_samples_leaf': 0.25}
Val C-Index: 0.6639793882978723

[2/27] {'n_estimators': 100, 'max_depth': 3, 'min_samples_leaf': 1}
Val C-Index: 0.6782579787234042

[3/27] {'n_estimators': 100, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.6772273936170212

[4/27] {'n_estimators': 100, 'max_depth': 4, 'min_samples_leaf': 0.25}
Val C-Index: 0.6639793882978723

[5/27] {'n_estimators': 100, 'max_depth': 4, 'min_samples_leaf': 1}
Val C-Index: 0.668783244680851

[6/27] {'n_estimators': 100, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.6712599734042554

[7/27] {'n_estimators': 100, 'max_depth': 5, 'min_samples_leaf': 0.25}
Val C-Index: 0.6639793882978723

[8/27] {'n_estimators': 100, 'max_depth': 5, 'min_samples_leaf': 1}
Val C-Index: 0.6687666223404255

[9/27] {'n_estimators': 100, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.6697972074468085

[10/27] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 0.25}
Val C-Index: 0.6729637632978723

[11/27] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 1}
Val C-Index: 0.6811502659574468

[12/27] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.6809175531914894

[13/27] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 0.25}
Val C-Index: 0.6729637632978723

[14/27] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 1}
Val C-Index: 0.6758477393617022

[15/27] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.6752659574468085

[16/27] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 0.25}
Val C-Index: 0.6729637632978723

[17/27] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 1}
Val C-Index: 0.6765458776595744

[18/27] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.6745844414893617

[19/27] {'n_estimators': 300, 'max_depth': 3, 'min_samples_leaf': 0.25}
Val C-Index: 0.6700880984042553

[20/27] {'n_estimators': 300, 'max_depth': 3, 'min_samples_leaf': 1}
Val C-Index: 0.6796542553191489

[21/27] {'n_estimators': 300, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.6793716755319149

[22/27] {'n_estimators': 300, 'max_depth': 4, 'min_samples_leaf': 0.25}
Val C-Index: 0.6700880984042553

[23/27] {'n_estimators': 300, 'max_depth': 4, 'min_samples_leaf': 1}
Val C-Index: 0.6776761968085107

[24/27] {'n_estimators': 300, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.6777260638297873

[25/27] {'n_estimators': 300, 'max_depth': 5, 'min_samples_leaf': 0.25}
Val C-Index: 0.6700880984042553

[26/27] {'n_estimators': 300, 'max_depth': 5, 'min_samples_leaf': 1}
Val C-Index: 0.6775764627659574

[27/27] {'n_estimators': 300, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.6730385638297872

Best hyperparameters:
{'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 1, 'random_state': 10}
Train C-Index: 0.7801762032829453
Val C-Index: 0.6811502659574468</code></pre>
</div>
</div>
<p>Finally, we will evaluate the model on the test set. This is a crucial step, as trying out many combinations of hyperparameters and evaluating them on the validation set could result in a model that ends up overfitting the validation set. We therefore need to check if the model performs well on unseen data, which is the role of the test set, which we have held out until now.</p>
<div class="cell" data-outputid="204242c9-993e-4133-bcf4-c7040f72d3c3" data-execution_count="25">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">y_test_best <span class="op" style="color: #5E5E5E;">=</span> best_rf.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Test C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_test.values, y_test_best)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test C-Index: 0.7019872579216067</code></pre>
</div>
</div>
<p><a name="5"></a> ## Imputation</p>
<p>We’ve now built and optimized a random forest model on our data. However, there was still a drop in test C-Index. This might be because we threw away more than half of the data of our data because of missing values for systolic blood pressure. Instead, we can try filling in, or imputing, these values.</p>
<p>First, let’s explore to see if our data is missing at random or not. Let’s plot histograms of the dropped rows against each of the covariates (aside from systolic blood pressure) to see if there is a trend. Compare these to the histograms of the feature in the entire dataset. Lets see if one of the covariates has a signficantly different distribution in the two subsets.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dropped_rows <span class="op" style="color: #5E5E5E;">=</span> X_train[X_train.isnull().<span class="bu" style="color: null;">any</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb34-2"></span>
<span id="cb34-3">columns_except_Systolic_BP <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> X_train.columns <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'Systolic BP'</span>]]</span>
<span id="cb34-4"></span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> columns_except_Systolic_BP:</span>
<span id="cb34-6">    sns.distplot(X_train.loc[:, col], norm_hist<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, kde<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'full data'</span>)</span>
<span id="cb34-7">    sns.distplot(dropped_rows.loc[:, col], norm_hist<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, kde<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'without missing data'</span>)</span>
<span id="cb34-8">    plt.legend()</span>
<span id="cb34-9"></span>
<span id="cb34-10">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-6.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-7.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-8.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-9.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-10.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-11.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-12.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-13.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-14.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-15.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-16.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-23-output-17.png" class="img-fluid"></p>
</div>
</div>
<p>Most of the covariates are distributed similarly whether or not we have discarded rows with missing data. In other words missingness of the data is independent of these covariates.</p>
<p>If this had been true across <em>all</em> covariates, then the data would have been said to be <strong>missing completely at random (MCAR)</strong>.</p>
<p>But when considering the age covariate, we see that much more data tends to be missing for patients over 65. The reason could be that blood pressure was measured less frequently for old people to avoid placing additional burden on them.</p>
<p>As missingness is related to one or more covariates, the missing data is said to be <strong>missing at random (MAR)</strong>.</p>
<p>Based on the information we have, there is however no reason to believe that the <em>values</em> of the missing data — or specifically the values of the missing systolic blood pressures — are related to the age of the patients. If this was the case, then this data would be said to be <strong>missing not at random (MNAR)</strong>.</p>
<div class="cell" data-outputid="551875f2-8deb-497f-dd47-4edf86ca635f" data-execution_count="27">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;">def</span> bad_subset(forest, X_test, y_test):</span>
<span id="cb35-2">    <span class="co" style="color: #5E5E5E;"># define mask to select large subset with poor performance</span></span>
<span id="cb35-3">    <span class="co" style="color: #5E5E5E;"># currently mask defines the entire set</span></span>
<span id="cb35-4">    </span>
<span id="cb35-5">    mask <span class="op" style="color: #5E5E5E;">=</span> X_test[<span class="st" style="color: #20794D;">'Age'</span>] <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb35-6"></span>
<span id="cb35-7">    X_subgroup <span class="op" style="color: #5E5E5E;">=</span> X_test[mask]</span>
<span id="cb35-8">    y_subgroup <span class="op" style="color: #5E5E5E;">=</span> y_test[mask]</span>
<span id="cb35-9">    subgroup_size <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(X_subgroup)</span>
<span id="cb35-10"></span>
<span id="cb35-11">    y_subgroup_preds <span class="op" style="color: #5E5E5E;">=</span> forest.predict_proba(X_subgroup)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb35-12">    performance <span class="op" style="color: #5E5E5E;">=</span> cindex(y_subgroup.values, y_subgroup_preds)</span>
<span id="cb35-13">    </span>
<span id="cb35-14">    <span class="cf" style="color: #003B4F;">return</span> performance, subgroup_size</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">#### Test </span></span>
<span id="cb36-2">performance, subgroup_size <span class="op" style="color: #5E5E5E;">=</span> bad_subset(best_rf, X_test, y_test)</span>
<span id="cb36-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Subgroup size should greater than 250, performance should be less than 0.69"</span>)</span>
<span id="cb36-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Subgroup size: </span><span class="sc" style="color: #5E5E5E;">{</span>subgroup_size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, and your C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>performance<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Subgroup size should greater than 250, performance should be less than 0.69
Your Subgroup size: 294, and your C-Index: 0.5225123355263158</code></pre>
</div>
</div>
<p><a name="5-2"></a> ### Imputation Approaches</p>
<p>Seeing that our data is not missing completely at random, we can handle the missing values by replacing them with substituted values based on the other values that we have. This is known as imputation.</p>
<p>The first imputation strategy that we will use is <strong>mean substitution</strong>: we will replace the missing values for each feature with the mean of the available values. In the next cell, use the <code>SimpleImputer</code> from <code>sklearn</code> to use mean imputation for the missing values.</p>
<div class="cell" data-outputid="c6e4aabc-7d7a-4ceb-f781-18d95a7048b9" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Impute values using the mean</span></span>
<span id="cb38-2">imputer <span class="op" style="color: #5E5E5E;">=</span> SimpleImputer(strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'mean'</span>)</span>
<span id="cb38-3">imputer.fit(X_train)</span>
<span id="cb38-4">X_train_mean_imputed <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(imputer.transform(X_train), columns<span class="op" style="color: #5E5E5E;">=</span>X_train.columns)</span>
<span id="cb38-5">X_val_mean_imputed <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(imputer.transform(X_val), columns<span class="op" style="color: #5E5E5E;">=</span>X_val.columns)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Define ranges for the random forest hyperparameter search </span></span>
<span id="cb39-2">hyperparams <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb39-3"></span>
<span id="cb39-4">    <span class="co" style="color: #5E5E5E;"># how many trees should be in the forest (int)</span></span>
<span id="cb39-5">    <span class="st" style="color: #20794D;">'n_estimators'</span>: [<span class="dv" style="color: #AD0000;">150</span>, <span class="dv" style="color: #AD0000;">200</span>],</span>
<span id="cb39-6"></span>
<span id="cb39-7">    <span class="co" style="color: #5E5E5E;"># the maximum depth of trees in the forest (int)</span></span>
<span id="cb39-8">    <span class="st" style="color: #20794D;">'max_depth'</span>: [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>],</span>
<span id="cb39-9"></span>
<span id="cb39-10">    <span class="co" style="color: #5E5E5E;"># the minimum number of samples in a leaf as a fraction</span></span>
<span id="cb39-11">    <span class="co" style="color: #5E5E5E;"># of the total number of samples in the training set</span></span>
<span id="cb39-12">    <span class="co" style="color: #5E5E5E;"># Can be int (in which case that is the minimum number)</span></span>
<span id="cb39-13">    <span class="co" style="color: #5E5E5E;"># or float (in which case the minimum is that fraction of the</span></span>
<span id="cb39-14">    <span class="co" style="color: #5E5E5E;"># number of training set samples)</span></span>
<span id="cb39-15">    <span class="st" style="color: #20794D;">'min_samples_leaf'</span>: [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>],</span>
<span id="cb39-16">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestClassifier</span>
<span id="cb40-2"></span>
<span id="cb40-3">rf_mean_imputed, best_hyperparams_mean_imputed <span class="op" style="color: #5E5E5E;">=</span> holdout_grid_search(rf, X_train_mean_imputed, y_train,</span>
<span id="cb40-4">                                                                     X_val_mean_imputed, y_val,</span>
<span id="cb40-5">                                                                     hyperparams, {<span class="st" style="color: #20794D;">'random_state'</span>: <span class="dv" style="color: #AD0000;">10</span>})</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Performance for best hyperparameters:"</span>)</span>
<span id="cb40-8"></span>
<span id="cb40-9">y_train_best <span class="op" style="color: #5E5E5E;">=</span> rf_mean_imputed.predict_proba(X_train_mean_imputed)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb40-10"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train, y_train_best)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb40-11"></span>
<span id="cb40-12">y_val_best <span class="op" style="color: #5E5E5E;">=</span> rf_mean_imputed.predict_proba(X_val_mean_imputed)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb40-13"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val, y_val_best)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb40-14"></span>
<span id="cb40-15">y_test_imp <span class="op" style="color: #5E5E5E;">=</span> rf_mean_imputed.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb40-16"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Test C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_test, y_test_imp)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1/12] {'n_estimators': 150, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.737671510990383

[2/12] {'n_estimators': 150, 'max_depth': 3, 'min_samples_leaf': 4}
Val C-Index: 0.7375510000238851

[3/12] {'n_estimators': 150, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.745231131348268

[4/12] {'n_estimators': 150, 'max_depth': 4, 'min_samples_leaf': 4}
Val C-Index: 0.7450291940530552

[5/12] {'n_estimators': 150, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.7483622451084491

[6/12] {'n_estimators': 150, 'max_depth': 5, 'min_samples_leaf': 4}
Val C-Index: 0.7477325481663877

[7/12] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.7396604847797906

[8/12] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 4}
Val C-Index: 0.7393901493684574

[9/12] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.745559008031893

[10/12] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 4}
Val C-Index: 0.7454830101250925

[11/12] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.7495499838233027

[12/12] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 4}
Val C-Index: 0.7489767424691502

Performance for best hyperparameters:
- Train C-Index: 0.8109
- Val C-Index: 0.7495
- Test C-Index: 0.7805</code></pre>
</div>
</div>
<p>Next, we will apply another imputation strategy, known as <strong>multivariate feature imputation</strong>, using scikit-learn’s <code>IterativeImputer</code> class (see the <a href="https://scikit-learn.org/stable/modules/impute.html#iterative-imputer">documentation</a>).</p>
<p>With this strategy, for each feature that is missing values, a regression model is trained to predict observed values based on all of the other features, and the missing values are inferred using this model. As a single iteration across all features may not be enough to impute all missing values, several iterations may be performed, hence the name of the class <code>IterativeImputer</code>.</p>
<div class="cell" data-outputid="c6e4aabc-7d7a-4ceb-f781-18d95a7048b9" data-execution_count="32">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Impute using regression on other covariates</span></span>
<span id="cb42-2">imputer <span class="op" style="color: #5E5E5E;">=</span> IterativeImputer(random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, sample_posterior<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, max_iter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, min_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb42-3">imputer.fit(X_train)</span>
<span id="cb42-4">X_train_imputed <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(imputer.transform(X_train), columns<span class="op" style="color: #5E5E5E;">=</span>X_train.columns)</span>
<span id="cb42-5">X_val_imputed <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(imputer.transform(X_val), columns<span class="op" style="color: #5E5E5E;">=</span>X_val.columns)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># Define ranges for the random forest hyperparameter search </span></span>
<span id="cb43-2">hyperparams <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb43-3"></span>
<span id="cb43-4">    <span class="co" style="color: #5E5E5E;"># how many trees should be in the forest (int)</span></span>
<span id="cb43-5">    <span class="st" style="color: #20794D;">'n_estimators'</span>: [<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">150</span>, <span class="dv" style="color: #AD0000;">200</span>],</span>
<span id="cb43-6"></span>
<span id="cb43-7">    <span class="co" style="color: #5E5E5E;"># the maximum depth of trees in the forest (int)</span></span>
<span id="cb43-8">    <span class="st" style="color: #20794D;">'max_depth'</span>: [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>],</span>
<span id="cb43-9"></span>
<span id="cb43-10">    <span class="co" style="color: #5E5E5E;"># the minimum number of samples in a leaf as a fraction</span></span>
<span id="cb43-11">    <span class="co" style="color: #5E5E5E;"># of the total number of samples in the training set</span></span>
<span id="cb43-12">    <span class="co" style="color: #5E5E5E;"># Can be int (in which case that is the minimum number)</span></span>
<span id="cb43-13">    <span class="co" style="color: #5E5E5E;"># or float (in which case the minimum is that fraction of the</span></span>
<span id="cb43-14">    <span class="co" style="color: #5E5E5E;"># number of training set samples)</span></span>
<span id="cb43-15">    <span class="st" style="color: #20794D;">'min_samples_leaf'</span>: [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>],</span>
<span id="cb43-16">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestClassifier</span>
<span id="cb44-2"></span>
<span id="cb44-3">rf_imputed, best_hyperparams_imputed <span class="op" style="color: #5E5E5E;">=</span> holdout_grid_search(rf, X_train_imputed, y_train,</span>
<span id="cb44-4">                                                           X_val_imputed, y_val,</span>
<span id="cb44-5">                                                           hyperparams, {<span class="st" style="color: #20794D;">'random_state'</span>: <span class="dv" style="color: #AD0000;">10</span>})</span>
<span id="cb44-6"></span>
<span id="cb44-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Performance for best hyperparameters:"</span>)</span>
<span id="cb44-8"></span>
<span id="cb44-9">y_train_best <span class="op" style="color: #5E5E5E;">=</span> rf_imputed.predict_proba(X_train_imputed)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb44-10"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Train C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_train, y_train_best)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb44-11"></span>
<span id="cb44-12">y_val_best <span class="op" style="color: #5E5E5E;">=</span> rf_imputed.predict_proba(X_val_imputed)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb44-13"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Val C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_val, y_val_best)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb44-14"></span>
<span id="cb44-15">y_test_imp <span class="op" style="color: #5E5E5E;">=</span> rf_imputed.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb44-16"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"- Test C-Index: </span><span class="sc" style="color: #5E5E5E;">{</span>cindex(y_test, y_test_imp)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1/18] {'n_estimators': 100, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.7329770117188772

[2/18] {'n_estimators': 100, 'max_depth': 3, 'min_samples_leaf': 4}
Val C-Index: 0.7325264526999885

[3/18] {'n_estimators': 100, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.7406224011430085

[4/18] {'n_estimators': 100, 'max_depth': 4, 'min_samples_leaf': 4}
Val C-Index: 0.7401512141208454

[5/18] {'n_estimators': 100, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.7439022536636419

[6/18] {'n_estimators': 100, 'max_depth': 5, 'min_samples_leaf': 4}
Val C-Index: 0.7433290123094896

[7/18] {'n_estimators': 150, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.7338140743780657

[8/18] {'n_estimators': 150, 'max_depth': 3, 'min_samples_leaf': 4}
Val C-Index: 0.7336707640395276

[9/18] {'n_estimators': 150, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.7409926195175653

[10/18] {'n_estimators': 150, 'max_depth': 4, 'min_samples_leaf': 4}
Val C-Index: 0.7403889790006927

[11/18] {'n_estimators': 150, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.7430380488948819

[12/18] {'n_estimators': 150, 'max_depth': 5, 'min_samples_leaf': 4}
Val C-Index: 0.7422932694082369

[13/18] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 3}
Val C-Index: 0.7356792801478268

[14/18] {'n_estimators': 200, 'max_depth': 3, 'min_samples_leaf': 4}
Val C-Index: 0.735444772321128

[15/18] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 3}
Val C-Index: 0.7429316518253611

[16/18] {'n_estimators': 200, 'max_depth': 4, 'min_samples_leaf': 4}
Val C-Index: 0.7425451481850615

[17/18] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 3}
Val C-Index: 0.7453787844243376

[18/18] {'n_estimators': 200, 'max_depth': 5, 'min_samples_leaf': 4}
Val C-Index: 0.7451247342787473

Performance for best hyperparameters:
- Train C-Index: 0.8131
- Val C-Index: 0.7454
- Test C-Index: 0.7797</code></pre>
</div>
</div>
<p><a name="6"></a> ## Comparison</p>
<p>For good measure, lets retest on the subgroup from before to see if our new models do better.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">performance, subgroup_size <span class="op" style="color: #5E5E5E;">=</span> bad_subset(best_rf, X_test, y_test)</span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"C-Index (no imputation): </span><span class="sc" style="color: #5E5E5E;">{</span>performance<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4">performance, subgroup_size <span class="op" style="color: #5E5E5E;">=</span> bad_subset(rf_mean_imputed, X_test, y_test)</span>
<span id="cb46-5"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"C-Index (mean imputation): </span><span class="sc" style="color: #5E5E5E;">{</span>performance<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb46-6"></span>
<span id="cb46-7">performance, subgroup_size <span class="op" style="color: #5E5E5E;">=</span> bad_subset(rf_imputed, X_test, y_test)</span>
<span id="cb46-8"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"C-Index (multivariate feature imputation): </span><span class="sc" style="color: #5E5E5E;">{</span>performance<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C-Index (no imputation): 0.5225123355263158
C-Index (mean imputation): 0.5373149671052632
C-Index (multivariate feature imputation): 0.5447162828947368</code></pre>
</div>
</div>
<p>We see that avoiding complete case analysis (i.e.&nbsp;analysis only on observations for which there is no missing data) allows our model to generalize a bit better.</p>
<p><a name="7"></a> ## Explanations: SHAP</p>
<p>Using a random forest has improved results, but we’ve lost some of the natural interpretability of trees. In this section we’ll try to explain the predictions using slightly more sophisticated techniques.</p>
<p><strong>SHAP (SHapley Additive exPlanations)</strong>, is a cutting edge method that explains predictions made by black-box machine learning models (i.e.&nbsp;models which are too complex to be understandable by humans as is).</p>
<blockquote class="blockquote">
<p>Given a prediction made by a machine learning model, SHAP values explain the prediction by quantifying the additive importance of each feature to the prediction. SHAP values have their roots in cooperative game theory, where Shapley values are used to quantify the contribution of each player to the game.</p>
<p>Although it is computationally expensive to compute SHAP values for general black-box models, in the case of trees and forests there exists a fast polynomial-time algorithm. For more details, see the <a href="https://arxiv.org/pdf/1802.03888.pdf">TreeShap paper</a>.</p>
</blockquote>
<p>We’ll use the <a href="https://github.com/slundberg/shap">shap library</a> to do this for our random forest model.</p>
<div class="cell" data-outputid="5de57232-6d03-4c0f-d438-ba4ad393d6af" data-execution_count="36">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">X_test_risk <span class="op" style="color: #5E5E5E;">=</span> X_test.copy(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-2">X_test_risk.loc[:, <span class="st" style="color: #20794D;">'risk'</span>] <span class="op" style="color: #5E5E5E;">=</span> rf_imputed.predict_proba(X_test_risk)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb48-3">X_test_risk <span class="op" style="color: #5E5E5E;">=</span> X_test_risk.sort_values(by<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'risk'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb48-4">X_test_risk.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Age</th>
      <th>Diastolic BP</th>
      <th>Poverty index</th>
      <th>Race</th>
      <th>Red blood cells</th>
      <th>Sedimentation rate</th>
      <th>Serum Albumin</th>
      <th>Serum Cholesterol</th>
      <th>Serum Iron</th>
      <th>Serum Magnesium</th>
      <th>Serum Protein</th>
      <th>Sex</th>
      <th>Systolic BP</th>
      <th>TIBC</th>
      <th>TS</th>
      <th>White blood cells</th>
      <th>BMI</th>
      <th>Pulse pressure</th>
      <th>risk</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5493</th>
      <td>67.0</td>
      <td>80.0</td>
      <td>30.0</td>
      <td>1.0</td>
      <td>77.7</td>
      <td>59.0</td>
      <td>3.4</td>
      <td>231.0</td>
      <td>36.0</td>
      <td>1.40</td>
      <td>6.3</td>
      <td>1.0</td>
      <td>170.0</td>
      <td>202.0</td>
      <td>17.8</td>
      <td>8.4</td>
      <td>17.029470</td>
      <td>90.0</td>
      <td>0.619022</td>
    </tr>
    <tr>
      <th>1017</th>
      <td>65.0</td>
      <td>98.0</td>
      <td>16.0</td>
      <td>1.0</td>
      <td>49.4</td>
      <td>30.0</td>
      <td>3.4</td>
      <td>124.0</td>
      <td>129.0</td>
      <td>1.59</td>
      <td>7.7</td>
      <td>1.0</td>
      <td>184.0</td>
      <td>293.0</td>
      <td>44.0</td>
      <td>5.9</td>
      <td>30.858853</td>
      <td>86.0</td>
      <td>0.545443</td>
    </tr>
    <tr>
      <th>2050</th>
      <td>66.0</td>
      <td>100.0</td>
      <td>69.0</td>
      <td>2.0</td>
      <td>42.9</td>
      <td>47.0</td>
      <td>3.8</td>
      <td>233.0</td>
      <td>170.0</td>
      <td>1.42</td>
      <td>8.6</td>
      <td>1.0</td>
      <td>180.0</td>
      <td>411.0</td>
      <td>41.4</td>
      <td>7.2</td>
      <td>22.129498</td>
      <td>80.0</td>
      <td>0.527768</td>
    </tr>
    <tr>
      <th>6337</th>
      <td>69.0</td>
      <td>80.0</td>
      <td>233.0</td>
      <td>1.0</td>
      <td>77.7</td>
      <td>48.0</td>
      <td>4.2</td>
      <td>159.0</td>
      <td>87.0</td>
      <td>1.81</td>
      <td>6.9</td>
      <td>1.0</td>
      <td>146.0</td>
      <td>291.0</td>
      <td>29.9</td>
      <td>15.2</td>
      <td>17.931276</td>
      <td>66.0</td>
      <td>0.526019</td>
    </tr>
    <tr>
      <th>2608</th>
      <td>71.0</td>
      <td>80.0</td>
      <td>104.0</td>
      <td>1.0</td>
      <td>43.8</td>
      <td>23.0</td>
      <td>4.0</td>
      <td>201.0</td>
      <td>119.0</td>
      <td>1.60</td>
      <td>7.0</td>
      <td>1.0</td>
      <td>166.0</td>
      <td>311.0</td>
      <td>38.3</td>
      <td>6.3</td>
      <td>17.760766</td>
      <td>86.0</td>
      <td>0.525624</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can use SHAP values to try and understand the model output on specific individuals using force plots. Run the cell below to see a force plot on the riskiest individual.</p>
<div class="cell" data-outputid="7c97d958-9383-4d7a-bb2b-e61af5ecf47f" data-execution_count="37">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">explainer <span class="op" style="color: #5E5E5E;">=</span> shap.TreeExplainer(rf_imputed)</span>
<span id="cb49-2">i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb49-3">shap_value <span class="op" style="color: #5E5E5E;">=</span> explainer.shap_values(X_test.loc[X_test_risk.index[i], :])[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb49-4">shap.force_plot(explainer.expected_value[<span class="dv" style="color: #AD0000;">1</span>], shap_value, feature_names<span class="op" style="color: #5E5E5E;">=</span>X_test.columns, matplotlib<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-34-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>How to read this chart: - The red sections on the left are features which push the model towards the final prediction in the positive direction (i.e.&nbsp;a higher Age increases the predicted risk). - The blue sections on the right are features that push the model towards the final prediction in the negative direction (if an increase in a feature leads to a lower risk, it will be shown in blue). - Note that the exact output of your chart will differ depending on the hyper-parameters that you choose for your model.</p>
<p>We can also use SHAP values to understand the model output in aggregate. Run the next cell to initialize the SHAP values (this may take a few minutes).</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">shap_values <span class="op" style="color: #5E5E5E;">=</span> shap.TreeExplainer(rf_imputed).shap_values(X_test)[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<p>Summary plot of the SHAP values for each feature on each of the test examples. The colors indicate the value of the feature.</p>
<div class="cell" data-outputid="d7f397c7-2487-4700-b4f5-8076cf3fada5" data-execution_count="39">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">shap.summary_plot(shap_values, X_test)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Clearly we see that being a woman (<code>sex = 2.0</code>, as opposed to men for which <code>sex = 1.0</code>) has a negative SHAP value, meaning that it reduces the risk of dying within 10 years. High age and high systolic blood pressure have positive SHAP values, and are therefore related to increased mortality.</p>
<p>We can see how features interact using dependence plots. These plot the SHAP value for a given feature for each data point, and color the points in using the value for another feature. This lets us begin to explain the variation in SHAP value for a single value of the main feature.</p>
<p>Run the next cell to see the interaction between Age and Sex.</p>
<div class="cell" data-outputid="1bef0e51-3659-4bd3-d728-ee4d10894cd4" data-execution_count="40">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">shap.dependence_plot(<span class="st" style="color: #20794D;">'Age'</span>, shap_values, X_test, interaction_index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Sex'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We see that while Age &gt; 50 is generally bad (positive SHAP value), being a woman generally reduces the impact of age. This makes sense since we know that women generally live longer than men.</p>
<p>Let’s now look at poverty index and age.</p>
<div class="cell" data-outputid="3427d6ba-0334-4fc5-baa3-44af277e033c" data-execution_count="41">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">shap.dependence_plot(<span class="st" style="color: #20794D;">'Poverty index'</span>, shap_values, X_test, interaction_index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Age'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data_files/figure-html/cell-38-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We see that the impact of poverty index drops off quickly, and for higher income individuals age begins to explain much of variation in the impact of poverty index.</p>


</section>

 ]]></description>
  <category>health</category>
  <guid>http://livingdatalab.com/posts/2022-08-06-predicting-10-year-death-risk-health-data.html</guid>
  <pubDate>Fri, 05 Aug 2022 23:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/epidemiology2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Prognostic Risk Score Model for Retinopathy in Diabetes Patients</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this project, we will build a risk score model for retinopathy in diabetes patients using logistic regression. This will be a <strong>Prognostic</strong> model for disease rather than a Diagnostic model. A Prognostic model predicts the <em>future risk of a disease</em> as opposed to a Diagnositic model, which would predict the presence of a disease now.</p>
<p>As we develop the model, we will consider the following topics:</p>
<ul>
<li>Data preprocessing
<ul>
<li>Log transformations</li>
<li>Standardization</li>
</ul></li>
<li>Basic Risk Models
<ul>
<li>Logistic Regression</li>
<li>C-index</li>
<li>Interactions Terms</li>
</ul></li>
</ul>
<section id="diabetic-retinopathy" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="diabetic-retinopathy"><span class="header-section-number">1.1</span> Diabetic Retinopathy</h3>
<p>Retinopathy is an eye condition that causes changes to the blood vessels in the part of the eye called the retina. This often leads to vision changes or blindness. Diabetic patients are known to be at high risk for retinopathy.</p>
</section>
<section id="logistic-regression" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="logistic-regression"><span class="header-section-number">1.2</span> Logistic Regression</h3>
<p>Logistic regression is an appropriate analysis to use for predicting the probability of a binary outcome. In our case, this would be the probability of having or not having diabetic retinopathy. Logistic Regression is one of the most commonly used algorithms for binary classification. It is used to find the best fitting model to describe the relationship between a set of features (also referred to as input, independent, predictor, or explanatory variables) and a binary outcome label (also referred to as an output, dependent, or response variable). Logistic regression has the property that the output prediction is always in the range <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">. Sometimes this output is used to represent a probability from 0%-100%, but for straight binary classification, the output is converted to either <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?1"> depending on whether it is below or above a certain threshold, usually <img src="https://latex.codecogs.com/png.latex?0.5">.</p>
<p><a name="2"></a> ## Load Data</p>
<p>First we will load in the dataset that we will use for training and testing our model.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> utils <span class="im" style="color: #00769E;">import</span> load_data</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># This function creates randomly generated data</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># X, y = load_data(6000)</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># For stability, load data from files that were generated using the load_data</span></span>
<span id="cb1-8">X <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'X_data.csv'</span>,index_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-9">y_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'y_data.csv'</span>,index_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-10">y <span class="op" style="color: #5E5E5E;">=</span> y_df[<span class="st" style="color: #20794D;">'y'</span>]</span></code></pre></div>
</div>
<p><code>X</code> and <code>y</code> are Pandas DataFrames that hold the data for 6,000 diabetic patients.</p>
<p><a name="3"></a> ## Explore the Dataset</p>
<p>The features (<code>X</code>) include the following fields: * Age: (years) * Systolic_BP: Systolic blood pressure (mmHg) * Diastolic_BP: Diastolic blood pressure (mmHg) * Cholesterol: (mg/DL)</p>
<p>We can use the <code>head()</code> method to display the first few records of each.</p>
<div class="cell" data-outputid="3ff454c2-65fb-4fea-858a-647c7a5d750d" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">X.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Age</th>
      <th>Systolic_BP</th>
      <th>Diastolic_BP</th>
      <th>Cholesterol</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>77.196340</td>
      <td>85.288742</td>
      <td>80.021878</td>
      <td>79.957109</td>
    </tr>
    <tr>
      <th>1</th>
      <td>63.529850</td>
      <td>99.379736</td>
      <td>84.852361</td>
      <td>110.382411</td>
    </tr>
    <tr>
      <th>2</th>
      <td>69.003986</td>
      <td>111.349455</td>
      <td>109.850616</td>
      <td>100.828246</td>
    </tr>
    <tr>
      <th>3</th>
      <td>82.638210</td>
      <td>95.056128</td>
      <td>79.666851</td>
      <td>87.066303</td>
    </tr>
    <tr>
      <th>4</th>
      <td>78.346286</td>
      <td>109.154591</td>
      <td>90.713220</td>
      <td>92.511770</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>The target (<code>y</code>) is an indicator of whether or not the patient developed retinopathy.</p>
<ul>
<li>y = 1 : patient has retinopathy.</li>
<li>y = 0 : patient does not have retinopathy.</li>
</ul>
<div class="cell" data-outputid="1b58dfe9-178e-491d-e2cb-738b083a1db7" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">y.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>0    1.0
1    1.0
2    1.0
3    1.0
4    1.0
Name: y, dtype: float64</code></pre>
</div>
</div>
<p>Before we build a model, let’s take a closer look at the distribution of our training data. To do this, we will split the data into train and test sets using a 75/25 split.</p>
<p>For this, we can use the built in function provided by sklearn library.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">X_train_raw, X_test_raw, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>Plot the histograms of each column of <code>X_train</code> below:</p>
<div class="cell" data-outputid="2e987230-a0eb-40d1-f3a6-ac943cbedf4d" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> X.columns:</span>
<span id="cb7-3">    X_train_raw.loc[:, col].hist()</span>
<span id="cb7-4">    plt.title(col)</span>
<span id="cb7-5">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-8-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-8-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>As we can see, the distributions have a generally bell shaped distribution, but with slight rightward skew.</p>
<p>Many statistical models assume that the data is normally distributed, forming a symmetric Gaussian bell shape (with no skew) more like the example below.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="im" style="color: #00769E;">from</span> scipy.stats <span class="im" style="color: #00769E;">import</span> norm</span>
<span id="cb8-3"></span>
<span id="cb8-4">data <span class="op" style="color: #5E5E5E;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;">50</span>,<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb8-5">fitting_params <span class="op" style="color: #5E5E5E;">=</span> norm.fit(data)</span>
<span id="cb8-6">norm_dist_fitted <span class="op" style="color: #5E5E5E;">=</span> norm(<span class="op" style="color: #5E5E5E;">*</span>fitting_params)</span>
<span id="cb8-7">t <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-8">plt.hist(data, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>, density<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-9">plt.plot(t, norm_dist_fitted.pdf(t))</span>
<span id="cb8-10">plt.title(<span class="st" style="color: #20794D;">'Example of Normally Distributed Data'</span>)</span>
<span id="cb8-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can transform our data to be closer to a normal distribution by removing the skew. One way to remove the skew is by applying the log function to the data.</p>
<p>Let’s plot the log of the feature variables to see that it produces the desired effect.</p>
<div class="cell" data-outputid="c46e9627-4db9-4992-8736-ba974ffadde0" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> X_train_raw.columns:</span>
<span id="cb9-3">    np.log(X_train_raw.loc[:, col]).hist()</span>
<span id="cb9-4">    plt.title(col)</span>
<span id="cb9-5">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-10-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-10-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that the data is more symmetric after taking the log.</p>
<p><a name="4"></a> ## Mean-Normalize the Data</p>
<p>Let’s now transform our data so that the distributions are closer to standard normal distributions.</p>
<p>First we will remove some of the skew from the distribution by using the log transformation. Then we will “standardize” the distribution so that it has a mean of zero and standard deviation of 1. Recall that a standard normal distribution has mean of zero and standard deviation of 1.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> make_standard_normal(df_train, df_test):</span>
<span id="cb10-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">    In order to make the data closer to a normal distribution, take log</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">    transforms to reduce the skew.</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;">    Then standardize the distribution with a mean of zero and standard deviation of 1. </span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;">  </span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;">      df_train (dataframe): unnormalized training data.</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;">      df_test (dataframe): unnormalized test data.</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;">  </span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;">      df_train_normalized (dateframe): normalized training data.</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;">      df_test_normalized (dataframe): normalized test data.</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb10-16">    </span>
<span id="cb10-17">    <span class="co" style="color: #5E5E5E;"># Remove skew by applying the log function to the train set, and to the test set</span></span>
<span id="cb10-18">    train_cols <span class="op" style="color: #5E5E5E;">=</span> df_train.columns</span>
<span id="cb10-19">    test_cols <span class="op" style="color: #5E5E5E;">=</span> df_test.columns</span>
<span id="cb10-20">    df_train_unskewed <span class="op" style="color: #5E5E5E;">=</span> df_train[train_cols].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: np.log(x))</span>
<span id="cb10-21">    df_test_unskewed <span class="op" style="color: #5E5E5E;">=</span> df_test[test_cols].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: np.log(x))</span>
<span id="cb10-22">    </span>
<span id="cb10-23">    <span class="co" style="color: #5E5E5E;">#calculate the mean and standard deviation of the training set</span></span>
<span id="cb10-24">    mean <span class="op" style="color: #5E5E5E;">=</span> df_train_unskewed.mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb10-25">    stdev <span class="op" style="color: #5E5E5E;">=</span> df_train_unskewed.std(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb10-26">    </span>
<span id="cb10-27">    <span class="co" style="color: #5E5E5E;"># standardize the training set</span></span>
<span id="cb10-28">    df_train_standardized <span class="op" style="color: #5E5E5E;">=</span> (df_train_unskewed <span class="op" style="color: #5E5E5E;">-</span> mean) <span class="op" style="color: #5E5E5E;">/</span> stdev</span>
<span id="cb10-29">    </span>
<span id="cb10-30">    <span class="co" style="color: #5E5E5E;"># standardize the test set (see instructions and hints above)</span></span>
<span id="cb10-31">    df_test_standardized <span class="op" style="color: #5E5E5E;">=</span> (df_test_unskewed <span class="op" style="color: #5E5E5E;">-</span> mean) <span class="op" style="color: #5E5E5E;">/</span> stdev</span>
<span id="cb10-32">    </span>
<span id="cb10-33">    <span class="cf" style="color: #003B4F;">return</span> df_train_standardized, df_test_standardized</span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># test</span></span>
<span id="cb11-3">tmp_train <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'field1'</span>: [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">10</span>], <span class="st" style="color: #20794D;">'field2'</span>: [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">11</span>]})</span>
<span id="cb11-4">tmp_test <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'field1'</span>: [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">10</span>], <span class="st" style="color: #20794D;">'field2'</span>: [<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">11</span>]})</span>
<span id="cb11-5">tmp_train_transformed, tmp_test_transformed <span class="op" style="color: #5E5E5E;">=</span> make_standard_normal(tmp_train,tmp_test)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Training set transformed field1 has mean </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_train_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;"> and standard deviation </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_train_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>std(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;"> "</span>)</span>
<span id="cb11-8"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Test set transformed, field1 has mean </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_test_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>mean(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;"> and standard deviation </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_test_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>std(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb11-9"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Skew of training set field1 before transformation: </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_train[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>skew(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb11-10"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Skew of training set field1 after transformation: </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_train_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>skew(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb11-11"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Skew of test set field1 before transformation: </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_test[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>skew(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb11-12"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Skew of test set field1 after transformation: </span><span class="sc" style="color: #5E5E5E;">{</span>tmp_test_transformed[<span class="st" style="color: #20794D;">'field1'</span>]<span class="sc" style="color: #5E5E5E;">.</span>skew(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training set transformed field1 has mean -0.0000 and standard deviation 1.0000 
Test set transformed, field1 has mean 0.1144 and standard deviation 0.9749
Skew of training set field1 before transformation: 1.6523
Skew of training set field1 after transformation: 1.0857
Skew of test set field1 before transformation: 1.3896
Skew of test set field1 after transformation: 0.1371</code></pre>
</div>
</div>
<section id="transform-training-and-test-data" class="level4">
<h4 class="anchored" data-anchor-id="transform-training-and-test-data">Transform training and test data</h4>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2">X_train, X_test <span class="op" style="color: #5E5E5E;">=</span> make_standard_normal(X_train_raw, X_test_raw)</span></code></pre></div>
</div>
<p>After transforming the training and test sets, we’ll expect the training set to be centered at zero with a standard deviation of <img src="https://latex.codecogs.com/png.latex?1">.</p>
<p>We will avoid observing the test set during model training in order to avoid biasing the model training process, but let’s have a look at the distributions of the transformed training data.</p>
<div class="cell" data-outputid="213ebd54-8d2b-4317-9f78-d946bd7fff49" data-execution_count="39">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> X_train.columns:</span>
<span id="cb14-3">    X_train[col].hist()</span>
<span id="cb14-4">    plt.title(col)</span>
<span id="cb14-5">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-14-output-4.png" class="img-fluid"></p>
</div>
</div>
<p><a name="5"></a> ## Build the Model</p>
<p>Now we are ready to build the risk model by training logistic regression with our data.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">def</span> lr_model(X_train, y_train):</span>
<span id="cb15-3">    </span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;"># import the LogisticRegression class</span></span>
<span id="cb15-5">    <span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression</span>
<span id="cb15-6">    </span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;"># create the model object</span></span>
<span id="cb15-8">    model <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression()</span>
<span id="cb15-9">    </span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;"># fit the model to the training data</span></span>
<span id="cb15-11">    model.fit(X_train, y_train)</span>
<span id="cb15-12">    </span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;">#return the fitted model</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;">return</span> model</span></code></pre></div>
</div>
<div class="cell" data-outputid="68ba88ab-be91-4543-8c2c-481bdb3a3f84" data-execution_count="41">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Test</span></span>
<span id="cb16-3">tmp_model <span class="op" style="color: #5E5E5E;">=</span> lr_model(X_train[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>], y_train[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>] )</span>
<span id="cb16-4"><span class="bu" style="color: null;">print</span>(tmp_model.predict(X_train[<span class="dv" style="color: #AD0000;">4</span>:<span class="dv" style="color: #AD0000;">5</span>]))</span>
<span id="cb16-5"><span class="bu" style="color: null;">print</span>(tmp_model.predict(X_train[<span class="dv" style="color: #AD0000;">5</span>:<span class="dv" style="color: #AD0000;">6</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1.]
[1.]</code></pre>
</div>
</div>
<p>Now that we’ve tested our model, we can go ahead and build it.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2">model_X <span class="op" style="color: #5E5E5E;">=</span> lr_model(X_train, y_train)</span></code></pre></div>
</div>
<p><a name="6"></a> ## Evaluate the Model Using the C-index</p>
<p>Now that we have a model, we need to evaluate it. We’ll do this using the c-index. * The c-index measures the discriminatory power of a risk score. * Intuitively, a higher c-index indicates that the model’s prediction is in agreement with the actual outcomes of a pair of patients. * The formula for the c-index is: cindex = (concordant + 0.5 * ties) / permissible * A permissible pair is a pair of patients who have different outcomes. * A concordant pair is a permissible pair in which the patient with the higher risk score also has the worse outcome. * A tie is a permissible pair where the patients have the same risk score.</p>
<div class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">def</span> cindex(y_true, scores):</span>
<span id="cb19-3">    <span class="co" style="color: #5E5E5E;">'''</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;">    Input:</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;">    y_true (np.array): a 1-D array of true binary outcomes (values of zero or one)</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;">        0: patient does not get the disease</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;">        1: patient does get the disease</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;">    scores (np.array): a 1-D array of corresponding risk scores output by the model</span></span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;">    Output:</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;">    c_index (float): (concordant pairs + 0.5*ties) / number of permissible pairs</span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;">    '''</span></span>
<span id="cb19-14">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(y_true)</span>
<span id="cb19-15">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(scores) <span class="op" style="color: #5E5E5E;">==</span> n</span>
<span id="cb19-16"></span>
<span id="cb19-17">    concordant <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-18">    permissible <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-19">    ties <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-20">    </span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;"># Two nested for loops to go through all unique pairs of patients</span></span>
<span id="cb19-22">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n):</span>
<span id="cb19-23">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, n): <span class="co" style="color: #5E5E5E;">#choose the range of j so that j&gt;i</span></span>
<span id="cb19-24">            </span>
<span id="cb19-25">            <span class="co" style="color: #5E5E5E;"># Check if the pair is permissible (the patient outcomes are different)</span></span>
<span id="cb19-26">            <span class="cf" style="color: #003B4F;">if</span> y_true[i] <span class="op" style="color: #5E5E5E;">!=</span> y_true[j]:</span>
<span id="cb19-27">                <span class="co" style="color: #5E5E5E;"># Count the pair if it's permissible</span></span>
<span id="cb19-28">                permissible <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-29"></span>
<span id="cb19-30">                <span class="co" style="color: #5E5E5E;"># For permissible pairs, check if they are concordant or are ties</span></span>
<span id="cb19-31"></span>
<span id="cb19-32">                <span class="co" style="color: #5E5E5E;"># check for ties in the score</span></span>
<span id="cb19-33">                <span class="cf" style="color: #003B4F;">if</span> scores[i] <span class="op" style="color: #5E5E5E;">==</span> scores[j]:</span>
<span id="cb19-34">                    <span class="co" style="color: #5E5E5E;"># count the tie</span></span>
<span id="cb19-35">                    ties <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-36">                    <span class="co" style="color: #5E5E5E;"># if it's a tie, we don't need to check patient outcomes, continue to the top of the for loop.</span></span>
<span id="cb19-37">                    <span class="cf" style="color: #003B4F;">continue</span></span>
<span id="cb19-38"></span>
<span id="cb19-39">                <span class="co" style="color: #5E5E5E;"># case 1: patient i doesn't get the disease, patient j does</span></span>
<span id="cb19-40">                <span class="cf" style="color: #003B4F;">if</span> y_true[i] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="kw" style="color: #003B4F;">and</span> y_true[j] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb19-41">                    <span class="co" style="color: #5E5E5E;"># Check if patient i has a lower risk score than patient j</span></span>
<span id="cb19-42">                    <span class="cf" style="color: #003B4F;">if</span> scores[i] <span class="op" style="color: #5E5E5E;">&lt;</span> scores[j]:</span>
<span id="cb19-43">                        <span class="co" style="color: #5E5E5E;"># count the concordant pair</span></span>
<span id="cb19-44">                        concordant <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-45">                    <span class="co" style="color: #5E5E5E;"># Otherwise if patient i has a higher risk score, it's not a concordant pair.</span></span>
<span id="cb19-46">                    <span class="co" style="color: #5E5E5E;"># Already checked for ties earlier</span></span>
<span id="cb19-47"></span>
<span id="cb19-48">                <span class="co" style="color: #5E5E5E;"># case 2: patient i gets the disease, patient j does not</span></span>
<span id="cb19-49">                <span class="cf" style="color: #003B4F;">if</span> y_true[i] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> y_true[j] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb19-50">                    <span class="co" style="color: #5E5E5E;"># Check if patient i has a higher risk score than patient j</span></span>
<span id="cb19-51">                    <span class="cf" style="color: #003B4F;">if</span> scores[i] <span class="op" style="color: #5E5E5E;">&gt;</span> scores[j]:</span>
<span id="cb19-52">                        <span class="co" style="color: #5E5E5E;">#count the concordant pair</span></span>
<span id="cb19-53">                        concordant <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-54">                    <span class="co" style="color: #5E5E5E;"># Otherwise if patient i has a lower risk score, it's not a concordant pair.</span></span>
<span id="cb19-55">                    <span class="co" style="color: #5E5E5E;"># We already checked for ties earlier</span></span>
<span id="cb19-56"></span>
<span id="cb19-57">    <span class="co" style="color: #5E5E5E;"># calculate the c-index using the count of permissible pairs, concordant pairs, and tied pairs.</span></span>
<span id="cb19-58">    c_index <span class="op" style="color: #5E5E5E;">=</span> (concordant <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">*</span> ties) <span class="op" style="color: #5E5E5E;">/</span> permissible</span>
<span id="cb19-59">    </span>
<span id="cb19-60">    <span class="cf" style="color: #003B4F;">return</span> c_index</span></code></pre></div>
</div>
<div class="cell" data-outputid="6e4af0e8-1666-4704-f83a-a27b90ce7103" data-execution_count="92">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;"># test</span></span>
<span id="cb20-3">y_true <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>])</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;"># Case 1</span></span>
<span id="cb20-6">scores <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Case 1 Output: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(cindex(y_true, scores)))</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;"># Case 2</span></span>
<span id="cb20-10">scores <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb20-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Case 2 Output: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(cindex(y_true, scores)))</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;"># Case 3</span></span>
<span id="cb20-14">scores <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>])</span>
<span id="cb20-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Case 3 Output: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(cindex(y_true, scores)))</span>
<span id="cb20-16">cindex(y_true, scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Case 1 Output: 0.0
Case 2 Output: 1.0
Case 3 Output: 0.875</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>0.875</code></pre>
</div>
</div>
<p><a name="7"></a> ## Evaluate the Model on the Test Set</p>
<p>Now, we can evaluate your trained model on the test set.</p>
<p>To get the predicted probabilities, we use the <code>predict_proba</code> method. This method will return the result from the model <em>before</em> it is converted to a binary 0 or 1. For each input case, it returns an array of two values which represent the probabilities for both the negative case (patient does not get the disease) and positive case (patient the gets the disease).</p>
<div class="cell" data-outputid="e5b8802a-8c41-4f7f-e3ba-428c6cfb5f87" data-execution_count="93">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"></span>
<span id="cb23-2">scores <span class="op" style="color: #5E5E5E;">=</span> model_X.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb23-3">c_index_X_test <span class="op" style="color: #5E5E5E;">=</span> cindex(y_test.values, scores)</span>
<span id="cb23-4"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"c-index on test set is </span><span class="sc" style="color: #5E5E5E;">{</span>c_index_X_test<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>c-index on test set is 0.8182</code></pre>
</div>
</div>
<p>Let’s plot the coefficients to see which variables (patient features) are having the most effect.</p>
<div class="cell" data-outputid="613b4ce8-2d04-40b1-e2ce-d2232a62005f" data-execution_count="94">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"></span>
<span id="cb25-2">coeffs <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(data <span class="op" style="color: #5E5E5E;">=</span> model_X.coef_, columns <span class="op" style="color: #5E5E5E;">=</span> X_train.columns)</span>
<span id="cb25-3">coeffs.T.plot.bar(legend<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><a name="8"></a> ## Improve the Model</p>
<p>We can try to improve the model by including interaction terms. * An interaction term is the product of two variables. * For example, if we have data <img src="https://latex.codecogs.com/png.latex?%20x%20=%20%5Bx_1,%20x_2%5D"> * We could add the product so that: <img src="https://latex.codecogs.com/png.latex?%20%5Chat%7Bx%7D%20=%20%5Bx_1,%20x_2,%20x_1*x_2%5D"></p>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;">def</span> add_interactions(X):</span>
<span id="cb26-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;">    Add interaction terms between columns to dataframe.</span></span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;">    X (dataframe): Original data</span></span>
<span id="cb26-8"></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;">    X_int (dataframe): Original data with interaction terms appended. </span></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb26-12">    features <span class="op" style="color: #5E5E5E;">=</span> X.columns</span>
<span id="cb26-13">    m <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(features)</span>
<span id="cb26-14">    X_int <span class="op" style="color: #5E5E5E;">=</span> X.copy(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb26-15"></span>
<span id="cb26-16">    <span class="co" style="color: #5E5E5E;"># 'i' loops through all features in the original dataframe X</span></span>
<span id="cb26-17">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(m):</span>
<span id="cb26-18">        </span>
<span id="cb26-19">        <span class="co" style="color: #5E5E5E;"># get the name of feature 'i'</span></span>
<span id="cb26-20">        feature_i_name <span class="op" style="color: #5E5E5E;">=</span> features[i]</span>
<span id="cb26-21">        </span>
<span id="cb26-22">        <span class="co" style="color: #5E5E5E;"># get the data for feature 'i'</span></span>
<span id="cb26-23">        feature_i_data <span class="op" style="color: #5E5E5E;">=</span> X[feature_i_name]</span>
<span id="cb26-24">        </span>
<span id="cb26-25">        <span class="co" style="color: #5E5E5E;"># choose the index of column 'j' to be greater than column i</span></span>
<span id="cb26-26">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, m):</span>
<span id="cb26-27">            </span>
<span id="cb26-28">            <span class="co" style="color: #5E5E5E;"># get the name of feature 'j'</span></span>
<span id="cb26-29">            feature_j_name <span class="op" style="color: #5E5E5E;">=</span> features[j]</span>
<span id="cb26-30">            </span>
<span id="cb26-31">            <span class="co" style="color: #5E5E5E;"># get the data for feature j'</span></span>
<span id="cb26-32">            feature_j_data <span class="op" style="color: #5E5E5E;">=</span> X[feature_j_name]</span>
<span id="cb26-33">            </span>
<span id="cb26-34">            <span class="co" style="color: #5E5E5E;"># create the name of the interaction feature by combining both names</span></span>
<span id="cb26-35">            <span class="co" style="color: #5E5E5E;"># example: "apple" and "orange" are combined to be "apple_x_orange"</span></span>
<span id="cb26-36">            feature_i_j_name <span class="op" style="color: #5E5E5E;">=</span> feature_i_name <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_x_'</span> <span class="op" style="color: #5E5E5E;">+</span> feature_j_name</span>
<span id="cb26-37">            </span>
<span id="cb26-38">            <span class="co" style="color: #5E5E5E;"># Multiply the data for feature 'i' and feature 'j'</span></span>
<span id="cb26-39">            <span class="co" style="color: #5E5E5E;"># store the result as a column in dataframe X_int</span></span>
<span id="cb26-40">            X_int[feature_i_j_name] <span class="op" style="color: #5E5E5E;">=</span> X_int[feature_i_name] <span class="op" style="color: #5E5E5E;">*</span> X_int[feature_j_name]</span>
<span id="cb26-41">        </span>
<span id="cb26-42">    <span class="cf" style="color: #003B4F;">return</span> X_int</span></code></pre></div>
</div>
<div class="cell" data-outputid="18722d74-ce4c-4b36-ca29-196b4010ed06" data-execution_count="105">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;"># Test</span></span>
<span id="cb27-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Original Data"</span>)</span>
<span id="cb27-4"><span class="bu" style="color: null;">print</span>(X_train.loc[:, [<span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'Systolic_BP'</span>]].head())</span>
<span id="cb27-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Data w/ Interactions"</span>)</span>
<span id="cb27-6"><span class="bu" style="color: null;">print</span>(add_interactions(X_train.loc[:, [<span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'Systolic_BP'</span>]].head()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Data
           Age  Systolic_BP
1824 -0.912451    -0.068019
253  -0.302039     1.719538
1114  2.576274     0.155962
3220  1.163621    -2.033931
2108 -0.446238    -0.054554
Data w/ Interactions
           Age  Systolic_BP  Age_x_Systolic_BP
1824 -0.912451    -0.068019           0.062064
253  -0.302039     1.719538          -0.519367
1114  2.576274     0.155962           0.401800
3220  1.163621    -2.033931          -2.366725
2108 -0.446238    -0.054554           0.024344</code></pre>
</div>
</div>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"></span>
<span id="cb29-2">X_train_int <span class="op" style="color: #5E5E5E;">=</span> add_interactions(X_train)</span>
<span id="cb29-3">X_test_int <span class="op" style="color: #5E5E5E;">=</span> add_interactions(X_test)</span></code></pre></div>
</div>
<p><a name="9"></a> ## Evaluate the Improved Model</p>
<p>Now we can train the new and improved version of the model.</p>
<div class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2">model_X_int <span class="op" style="color: #5E5E5E;">=</span> lr_model(X_train_int, y_train)</span></code></pre></div>
</div>
<p>Let’s evaluate our new model on the test set.</p>
<div class="cell" data-outputid="d43fe99f-e3c0-4575-b44c-93efe24917bb" data-execution_count="108">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"></span>
<span id="cb31-2">scores_X <span class="op" style="color: #5E5E5E;">=</span> model_X.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb31-3">c_index_X_int_test <span class="op" style="color: #5E5E5E;">=</span> cindex(y_test.values, scores_X)</span>
<span id="cb31-4"></span>
<span id="cb31-5">scores_X_int <span class="op" style="color: #5E5E5E;">=</span> model_X_int.predict_proba(X_test_int)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb31-6">c_index_X_int_test <span class="op" style="color: #5E5E5E;">=</span> cindex(y_test.values, scores_X_int)</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"c-index on test set without interactions is </span><span class="sc" style="color: #5E5E5E;">{</span>c_index_X_test<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb31-9"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"c-index on test set with interactions is </span><span class="sc" style="color: #5E5E5E;">{</span>c_index_X_int_test<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>c-index on test set without interactions is 0.8182
c-index on test set with interactions is 0.8281</code></pre>
</div>
</div>
<p>We can see that the model with interaction terms performs a bit better than the model without interactions.</p>
<p>Now let’s take another look at the model coefficients to try and see which variables made a difference.</p>
<div class="cell" data-outputid="9cc3ce2c-3a8a-4d3a-cf76-bef5862cc6c3" data-execution_count="109">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"></span>
<span id="cb33-2">int_coeffs <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(data <span class="op" style="color: #5E5E5E;">=</span> model_X_int.coef_, columns <span class="op" style="color: #5E5E5E;">=</span> X_train_int.columns)</span>
<span id="cb33-3">int_coeffs.T.plot.bar()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that Age, Systolic_BP, and Cholesterol have a positive coefficient. This means that a higher value in these three features leads to a higher prediction probability for the disease. You also may notice that the interaction of Age x Cholesterol has a negative coefficient. This means that a higher value for the Age x Cholesterol product reduces the prediction probability for the disease.</p>
<p>To understand the effect of interaction terms, let’s compare the output of the model we’ve trained on sample cases with and without the interaction.</p>
<div class="cell" data-outputid="0d80937f-7645-4e68-eafa-766b228ed981" data-execution_count="110">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"></span>
<span id="cb34-2">index <span class="op" style="color: #5E5E5E;">=</span> index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3432</span></span>
<span id="cb34-3">case <span class="op" style="color: #5E5E5E;">=</span> X_train_int.iloc[index, :]</span>
<span id="cb34-4"><span class="bu" style="color: null;">print</span>(case)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Age                           2.502061
Systolic_BP                   1.713547
Diastolic_BP                  0.268265
Cholesterol                   2.146349
Age_x_Systolic_BP             4.287400
Age_x_Diastolic_BP            0.671216
Age_x_Cholesterol             5.370296
Systolic_BP_x_Diastolic_BP    0.459685
Systolic_BP_x_Cholesterol     3.677871
Diastolic_BP_x_Cholesterol    0.575791
Name: 5970, dtype: float64</code></pre>
</div>
</div>
<p>We can see that they have above average Age and Cholesterol. We can now see what our original model would have output by zero-ing out the value for Cholesterol and Age.</p>
<div class="cell" data-outputid="8570702b-9b8d-4420-a2dc-0913bc4d84f9" data-execution_count="111">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"></span>
<span id="cb36-2">new_case <span class="op" style="color: #5E5E5E;">=</span> case.copy(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb36-3">new_case.loc[<span class="st" style="color: #20794D;">"Age_x_Cholesterol"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb36-4">new_case</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>Age                           2.502061
Systolic_BP                   1.713547
Diastolic_BP                  0.268265
Cholesterol                   2.146349
Age_x_Systolic_BP             4.287400
Age_x_Diastolic_BP            0.671216
Age_x_Cholesterol             0.000000
Systolic_BP_x_Diastolic_BP    0.459685
Systolic_BP_x_Cholesterol     3.677871
Diastolic_BP_x_Cholesterol    0.575791
Name: 5970, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-outputid="5c7d8884-ae10-4453-9717-d4818d45f0d7" data-execution_count="112">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"></span>
<span id="cb38-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Output with interaction: </span><span class="ch" style="color: #20794D;">\t</span><span class="sc" style="color: #5E5E5E;">{</span>model_X_int<span class="sc" style="color: #5E5E5E;">.</span>predict_proba([case.values])[:, <span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Output without interaction: </span><span class="ch" style="color: #20794D;">\t</span><span class="sc" style="color: #5E5E5E;">{</span>model_X_int<span class="sc" style="color: #5E5E5E;">.</span>predict_proba([new_case.values])[:, <span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Output with interaction:    0.9448
Output without interaction:     0.9965</code></pre>
</div>
</div>
<p>We see that the model is less confident in its prediction with the interaction term than without (the prediction value is lower when including the interaction term). With the interaction term, the model has adjusted for the fact that the effect of high cholesterol becomes less important for older patients compared to younger patients.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">2</span> Conclusion</h2>
<p>In this project, we will built a prognostic risk score model for retinopathy in diabetes patients using logistic regression.</p>
<p>We considered the following topics:</p>
<ul>
<li>Data preprocessing
<ul>
<li>Log transformations</li>
<li>Standardization</li>
</ul></li>
<li>Basic Risk Models
<ul>
<li>Logistic Regression</li>
<li>C-index</li>
<li>Interactions Terms</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>health</category>
  <guid>http://livingdatalab.com/posts/2022-06-11-a-prognostic-risk-score-model-for-retinopathy-in-diabetes-patients.html</guid>
  <pubDate>Fri, 10 Jun 2022 23:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/artificial-intelligence-medical.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Evaluating Healthcare Diagnostic Models</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In my previous article <a href="2022-05-15-medical-diagnosis-chest-xrays.html">I developed a deep learning model able to classify 14 different diseases using chest x-rays</a>. There are various meterics available to help evaluate model performance, but there are specific metrics that are of particular relevance to evaluating models for medical diagnosis. These metrics which we will be covering in this article are:</p>
<ol type="1">
<li>Accuracy</li>
<li>Prevalence</li>
<li>Specificity &amp; Sensitivity</li>
<li>PPV and NPV</li>
<li>ROC curve and AUCROC (c-statistic)</li>
<li>Confidence Intervals</li>
</ol>
</section>
<section id="overview" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="overview"><span class="header-section-number">2</span> Overview</h2>
<p>Let’s take a look at our dataset. The data is stored in two CSV files called <code>train_preds.csv</code> and <code>valid_preds.csv</code>. We have precomputed the model outputs for our test cases. We’ll work with these predictions and the true class labels throughout this article.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2">train_results <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/train_preds.csv"</span>)</span>
<span id="cb1-3">valid_results <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/valid_preds.csv"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># the labels in our dataset</span></span>
<span id="cb1-6">class_labels <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Cardiomegaly'</span>,</span>
<span id="cb1-7"> <span class="st" style="color: #20794D;">'Emphysema'</span>,</span>
<span id="cb1-8"> <span class="st" style="color: #20794D;">'Effusion'</span>,</span>
<span id="cb1-9"> <span class="st" style="color: #20794D;">'Hernia'</span>,</span>
<span id="cb1-10"> <span class="st" style="color: #20794D;">'Infiltration'</span>,</span>
<span id="cb1-11"> <span class="st" style="color: #20794D;">'Mass'</span>,</span>
<span id="cb1-12"> <span class="st" style="color: #20794D;">'Nodule'</span>,</span>
<span id="cb1-13"> <span class="st" style="color: #20794D;">'Atelectasis'</span>,</span>
<span id="cb1-14"> <span class="st" style="color: #20794D;">'Pneumothorax'</span>,</span>
<span id="cb1-15"> <span class="st" style="color: #20794D;">'Pleural_Thickening'</span>,</span>
<span id="cb1-16"> <span class="st" style="color: #20794D;">'Pneumonia'</span>,</span>
<span id="cb1-17"> <span class="st" style="color: #20794D;">'Fibrosis'</span>,</span>
<span id="cb1-18"> <span class="st" style="color: #20794D;">'Edema'</span>,</span>
<span id="cb1-19"> <span class="st" style="color: #20794D;">'Consolidation'</span>]</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># the labels for prediction values in our dataset</span></span>
<span id="cb1-22">pred_labels <span class="op" style="color: #5E5E5E;">=</span> [l <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_pred"</span> <span class="cf" style="color: #003B4F;">for</span> l <span class="kw" style="color: #003B4F;">in</span> class_labels]</span></code></pre></div>
</div>
<p>Extract the labels (y) and the predictions (pred).</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">y <span class="op" style="color: #5E5E5E;">=</span> valid_results[class_labels].values</span>
<span id="cb2-3">pred <span class="op" style="color: #5E5E5E;">=</span> valid_results[pred_labels].values</span></code></pre></div>
</div>
<p>Run the next cell to view them side by side.</p>
<div class="cell" data-outputid="f521ab94-fb5d-4ba6-e8e4-8b0a0ca22863" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># let's take a peek at our dataset</span></span>
<span id="cb3-3">valid_results[np.concatenate([class_labels, pred_labels])].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Cardiomegaly</th>
      <th>Emphysema</th>
      <th>Effusion</th>
      <th>Hernia</th>
      <th>Infiltration</th>
      <th>Mass</th>
      <th>Nodule</th>
      <th>Atelectasis</th>
      <th>Pneumothorax</th>
      <th>Pleural_Thickening</th>
      <th>...</th>
      <th>Infiltration_pred</th>
      <th>Mass_pred</th>
      <th>Nodule_pred</th>
      <th>Atelectasis_pred</th>
      <th>Pneumothorax_pred</th>
      <th>Pleural_Thickening_pred</th>
      <th>Pneumonia_pred</th>
      <th>Fibrosis_pred</th>
      <th>Edema_pred</th>
      <th>Consolidation_pred</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0.256020</td>
      <td>0.266928</td>
      <td>0.312440</td>
      <td>0.460342</td>
      <td>0.079453</td>
      <td>0.271495</td>
      <td>0.276861</td>
      <td>0.398799</td>
      <td>0.015867</td>
      <td>0.156320</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0.382199</td>
      <td>0.176825</td>
      <td>0.465807</td>
      <td>0.489424</td>
      <td>0.084595</td>
      <td>0.377318</td>
      <td>0.363582</td>
      <td>0.638024</td>
      <td>0.025948</td>
      <td>0.144419</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0.427727</td>
      <td>0.115513</td>
      <td>0.249030</td>
      <td>0.035105</td>
      <td>0.238761</td>
      <td>0.167095</td>
      <td>0.166389</td>
      <td>0.262463</td>
      <td>0.007758</td>
      <td>0.125790</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0.158596</td>
      <td>0.259460</td>
      <td>0.334870</td>
      <td>0.266489</td>
      <td>0.073371</td>
      <td>0.229834</td>
      <td>0.191281</td>
      <td>0.344348</td>
      <td>0.008559</td>
      <td>0.119153</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0.536762</td>
      <td>0.198797</td>
      <td>0.273110</td>
      <td>0.186771</td>
      <td>0.242122</td>
      <td>0.309786</td>
      <td>0.411771</td>
      <td>0.244666</td>
      <td>0.126930</td>
      <td>0.342409</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>To further understand our dataset details, here’s a histogram of the number of samples for each label in the validation dataset:</p>
<div class="cell" data-outputid="3780bec9-f9da-4e6f-a775-35db3c91af45" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">plt.xticks(rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb4-3">plt.bar(x <span class="op" style="color: #5E5E5E;">=</span> class_labels, height<span class="op" style="color: #5E5E5E;">=</span> y.<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It seem like our dataset has an imbalanced population of samples. Specifically, our dataset has a small number of patients diagnosed with a <code>Hernia</code>.</p>
</section>
<section id="metrics" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="metrics"><span class="header-section-number">3</span> Metrics</h2>
<section id="true-positives-false-positives-true-negatives-and-false-negatives" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="true-positives-false-positives-true-negatives-and-false-negatives"><span class="header-section-number">3.1</span> True Positives, False Positives, True Negatives and False Negatives</h3>
<p>The most basic statistics to compute from the model predictions are the true positives, true negatives, false positives, and false negatives.</p>
<p>As the name suggests - True Positive (TP): The model classifies the example as positive, and the actual label also positive. - False Positive (FP): The model classifies the example as positive, <strong>but</strong> the actual label is negative. - True Negative (TN): The model classifies the example as negative, and the actual label is also negative. - False Negative (FN): The model classifies the example as negative, <strong>but</strong> the label is actually positive.</p>
<p>We will count the number of TP, FP, TN and FN in the given data. All of our metrics can be built off of these four statistics.</p>
<p>Recall that the model outputs real numbers between 0 and 1. * To compute binary class predictions, we need to convert these to either 0 or 1. * We’ll do this using a threshold value <img src="https://latex.codecogs.com/png.latex?th">. * Any model outputs above <img src="https://latex.codecogs.com/png.latex?th"> are set to 1, and below <img src="https://latex.codecogs.com/png.latex?th"> are set to 0.</p>
<p>All of our metrics (except for AUC at the end) will depend on the choice of this threshold.</p>
<p>Let’s define some functions for computing each of these basic statistics.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> true_positives(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">    Count true positives.</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;">        TP (int): true positives</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-13">    TP <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-14">    </span>
<span id="cb5-15">    <span class="co" style="color: #5E5E5E;"># get thresholded predictions</span></span>
<span id="cb5-16">    thresholded_preds <span class="op" style="color: #5E5E5E;">=</span> pred <span class="op" style="color: #5E5E5E;">&gt;=</span> th</span>
<span id="cb5-17"></span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;"># compute TP</span></span>
<span id="cb5-19">    TP <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (thresholded_preds <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb5-20">    </span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;">return</span> TP</span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="kw" style="color: #003B4F;">def</span> true_negatives(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;">    Count true negatives.</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb5-29"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb5-31"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-32"><span class="co" style="color: #5E5E5E;">        TN (int): true negatives</span></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-34">    TN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-35">    </span>
<span id="cb5-36">    <span class="co" style="color: #5E5E5E;"># get thresholded predictions</span></span>
<span id="cb5-37">    thresholded_preds <span class="op" style="color: #5E5E5E;">=</span> pred <span class="op" style="color: #5E5E5E;">&gt;=</span> th</span>
<span id="cb5-38">    </span>
<span id="cb5-39">    <span class="co" style="color: #5E5E5E;"># compute TN</span></span>
<span id="cb5-40">    TN <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (thresholded_preds <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-41">    </span>
<span id="cb5-42">    <span class="cf" style="color: #003B4F;">return</span> TN</span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="kw" style="color: #003B4F;">def</span> false_positives(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb5-45">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-46"><span class="co" style="color: #5E5E5E;">    Count false positives.</span></span>
<span id="cb5-47"></span>
<span id="cb5-48"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-49"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb5-50"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb5-51"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb5-52"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-53"><span class="co" style="color: #5E5E5E;">        FP (int): false positives</span></span>
<span id="cb5-54"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-55">    FP <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-56">    </span>
<span id="cb5-57">    <span class="co" style="color: #5E5E5E;"># get thresholded predictions</span></span>
<span id="cb5-58">    thresholded_preds <span class="op" style="color: #5E5E5E;">=</span> pred <span class="op" style="color: #5E5E5E;">&gt;=</span> th</span>
<span id="cb5-59">    </span>
<span id="cb5-60">    <span class="co" style="color: #5E5E5E;"># compute FP</span></span>
<span id="cb5-61">    FP <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (thresholded_preds <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb5-62">    </span>
<span id="cb5-63">    <span class="cf" style="color: #003B4F;">return</span> FP</span>
<span id="cb5-64"></span>
<span id="cb5-65"><span class="kw" style="color: #003B4F;">def</span> false_negatives(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb5-66">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-67"><span class="co" style="color: #5E5E5E;">    Count false positives.</span></span>
<span id="cb5-68"></span>
<span id="cb5-69"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-70"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb5-71"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb5-72"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb5-73"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-74"><span class="co" style="color: #5E5E5E;">        FN (int): false negatives</span></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-76">    FN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-77">    </span>
<span id="cb5-78">    <span class="co" style="color: #5E5E5E;"># get thresholded predictions</span></span>
<span id="cb5-79">    thresholded_preds <span class="op" style="color: #5E5E5E;">=</span> pred <span class="op" style="color: #5E5E5E;">&gt;=</span> th</span>
<span id="cb5-80">    </span>
<span id="cb5-81">    <span class="co" style="color: #5E5E5E;"># compute FN</span></span>
<span id="cb5-82">    FN <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>((y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (thresholded_preds <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-83">    </span>
<span id="cb5-84">    <span class="cf" style="color: #003B4F;">return</span> FN</span></code></pre></div>
</div>
<div class="cell" data-outputid="acc0073e-17b3-458f-cdda-f99a26ac1b02" data-execution_count="9">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># Test functions </span></span>
<span id="cb6-3">get_tp_tn_fp_fn_test(true_positives, true_negatives, false_positives, false_negatives)    </span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>y_test</th>
      <th>preds_test</th>
      <th>category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0.8</td>
      <td>TP</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0.7</td>
      <td>TP</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>0.4</td>
      <td>TN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>0.3</td>
      <td>TN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>0.2</td>
      <td>TN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0</td>
      <td>0.5</td>
      <td>FP</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0</td>
      <td>0.6</td>
      <td>FP</td>
    </tr>
    <tr>
      <th>7</th>
      <td>0</td>
      <td>0.7</td>
      <td>FP</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0</td>
      <td>0.8</td>
      <td>FP</td>
    </tr>
    <tr>
      <th>9</th>
      <td>1</td>
      <td>0.1</td>
      <td>FN</td>
    </tr>
    <tr>
      <th>10</th>
      <td>1</td>
      <td>0.2</td>
      <td>FN</td>
    </tr>
    <tr>
      <th>11</th>
      <td>1</td>
      <td>0.3</td>
      <td>FN</td>
    </tr>
    <tr>
      <th>12</th>
      <td>1</td>
      <td>0.4</td>
      <td>FN</td>
    </tr>
    <tr>
      <th>13</th>
      <td>1</td>
      <td>0.0</td>
      <td>FN</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Your functions calcualted: 
    TP: 2
    TN: 3
    FP: 4
    FN: 5
    
 All tests passed.
 All tests passed.
 All tests passed.
 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output" class="level5">
<h5 class="anchored" data-anchor-id="expected-output">Expected output</h5>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">Your functions calcualted: </span>
<span id="cb8-2">    TP: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-3">    TN: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb8-4">    FP: <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb8-5">    FN: <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<pre><code> All tests passed.
 All tests passed.
 All tests passed.
 All tests passed.</code></pre>
<div class="cell" data-outputid="52807e22-3463-46f8-c03b-92097b10ae0d" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># Add these to a table for each disease</span></span>
<span id="cb10-3">util.get_performance_metrics(y, pred, class_labels)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Right now it only has TP, TN, FP, FN. Throughout this article we’ll fill in all the other metrics to learn more about our model performance.</p>
</section>
</section>
<section id="accuracy" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="accuracy"><span class="header-section-number">3.2</span> Accuracy</h3>
<p>Let’s use a threshold of .5 for the probability cutoff for our predictions for all classes and calculate our model’s accuracy as we would normally do in a machine learning problem.</p>
<p><img src="https://latex.codecogs.com/png.latex?accuracy%20=%20%5Cfrac%7B%5Ctext%7Btrue%20positives%7D%20+%20%5Ctext%7Btrue%20negatives%7D%7D%7B%5Ctext%7Btrue%20positives%7D%20+%20%5Ctext%7Btrue%20negatives%7D%20+%20%5Ctext%7Bfalse%20positives%7D%20+%20%5Ctext%7Bfalse%20negatives%7D%7D"></p>
<p>Let’s define a function to calculate this.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">def</span> get_accuracy(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">    Compute accuracy of predictions at threshold.</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;">        accuracy (float): accuracy of predictions at threshold</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-13">    accuracy <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb11-14">    </span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;"># get TP, FP, TN, FN using our previously defined functions</span></span>
<span id="cb11-16">    TP <span class="op" style="color: #5E5E5E;">=</span> true_positives(y, pred, th)</span>
<span id="cb11-17">    FP <span class="op" style="color: #5E5E5E;">=</span> false_positives(y, pred, th)</span>
<span id="cb11-18">    TN <span class="op" style="color: #5E5E5E;">=</span> true_negatives(y, pred, th)</span>
<span id="cb11-19">    FN <span class="op" style="color: #5E5E5E;">=</span> false_negatives(y, pred, th)</span>
<span id="cb11-20"></span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;"># Compute accuracy using TP, FP, TN, FN</span></span>
<span id="cb11-22">    accuracy <span class="op" style="color: #5E5E5E;">=</span> (TP <span class="op" style="color: #5E5E5E;">+</span> TN) <span class="op" style="color: #5E5E5E;">/</span> (TP <span class="op" style="color: #5E5E5E;">+</span> FP <span class="op" style="color: #5E5E5E;">+</span> TN <span class="op" style="color: #5E5E5E;">+</span> FN)</span>
<span id="cb11-23">    </span>
<span id="cb11-24">    <span class="cf" style="color: #003B4F;">return</span> accuracy</span></code></pre></div>
</div>
<div class="cell" data-outputid="a2a37bdc-7ef4-4824-9ea2-9678f6b0ccfb" data-execution_count="16">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;"># Test function</span></span>
<span id="cb12-3">get_accuracy_test(get_accuracy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Case:

Test Labels:       [1 0 0 1 1]
Test Predictions:  [0.8 0.8 0.4 0.6 0.3]
Threshold:     0.5
Computed Accuracy: 0.6 

 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output-1" class="level4">
<h4 class="anchored" data-anchor-id="expected-output-1">Expected output:</h4>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">Test Case:</span>
<span id="cb14-2"></span>
<span id="cb14-3">Test Labels:       [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb14-4">Test Predictions:  [<span class="fl" style="color: #AD0000;">0.8</span> <span class="fl" style="color: #AD0000;">0.8</span> <span class="fl" style="color: #AD0000;">0.4</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb14-5">Threshold:       <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb14-6">Computed Accuracy: <span class="fl" style="color: #AD0000;">0.6</span> </span></code></pre></div>
<pre><code> All tests passed.</code></pre>
<p>Let’s compute this for each disease.</p>
<div class="cell" data-outputid="7210644a-5bd9-4862-ca2b-4475f23e4515" data-execution_count="17">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>If we were to judge our model’s performance based on the accuracy metric, we would say that our model is not very accurate for detecting the <code>Infiltration</code> cases (accuracy of 0.657) but pretty accurate for detecting <code>Emphysema</code> (accuracy of 0.889).</p>
<p><strong>But is that really the case?…</strong></p>
<p>Let’s imagine a model that simply predicts that any patient does <strong>Not</strong> have <code>Emphysema</code>, regardless of patient’s measurements. Let’s calculate the accuracy for such a model.</p>
<div class="cell" data-outputid="840e3863-17e1-4905-9575-a7fd73367137" data-execution_count="18">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2">get_accuracy(valid_results[<span class="st" style="color: #20794D;">"Emphysema"</span>].values, np.zeros(<span class="bu" style="color: null;">len</span>(valid_results)))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0.972</code></pre>
</div>
</div>
<p>As you can see above, such a model would be 97% accurate! Even better than our deep learning based model.</p>
<p>But is this really a good model? Wouldn’t this model be wrong 100% of the time if the patient actually had this condition?</p>
<p>This issue can be particularly common in cases where we have very imbalanced classes and few examples of a particular disease, in such cases accuracy can be very misleading for what we want to know.</p>
<p>In the following sections, we will address this concern with more advanced model measures - <strong>sensitivity and specificity</strong> - that evaluate how well the model predicts positives for patients with the condition and negatives for cases that actually do not have the condition.</p>
</section>
</section>
<section id="prevalence" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="prevalence"><span class="header-section-number">3.3</span> Prevalence</h3>
<p>Another important concept is <strong>prevalence</strong>. * In a medical context, prevalence is the proportion of people in the population who have the disease (or condition, etc). * In machine learning terms, this is the proportion of positive examples.</p>
<p>We encountered prevalence in a <a href="https://livingdatalab.com/health/epidemiology/2022/02/22/measuring-disease-in-epidemiology.html">previous article on measures of disease in epidemiology</a>.</p>
<p>The expression for prevalence is:</p>
<p><img src="https://latex.codecogs.com/png.latex?prevalence%20=%20%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi%7D%20y_i"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?y_i%20=%201"> when the example is ‘positive’ (has the disease).</p>
<p>Let’s define a function to measure prevalence for each disease.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">def</span> get_prevalence(y):</span>
<span id="cb19-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;">    Compute prevalence.</span></span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;">        prevalence (float): prevalence of positive cases</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb19-11">    prevalence <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb19-12">    prevalence <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(y) <span class="op" style="color: #5E5E5E;">/</span> y.size</span>
<span id="cb19-13">    </span>
<span id="cb19-14">    <span class="cf" style="color: #003B4F;">return</span> prevalence</span></code></pre></div>
</div>
<div class="cell" data-outputid="a3888472-26c5-4340-e310-026d98a5fe2d" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;"># Test function</span></span>
<span id="cb20-3">get_prevalence_test(get_prevalence)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Case:

Test Labels:          [1 0 0 1 1 0 0 0 0 1]
Computed Prevalence:  0.4 

 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output-2" class="level4">
<h4 class="anchored" data-anchor-id="expected-output-2">Expected output:</h4>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">Test Case:</span>
<span id="cb22-2"></span>
<span id="cb22-3">Test Labels:          [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb22-4">Computed Prevalence:  <span class="fl" style="color: #AD0000;">0.4</span>  </span></code></pre></div>
<pre><code> All tests passed.</code></pre>
<div class="cell" data-outputid="d9ce79fb-8222-43bf-fcef-1e3fdbbc8d66" data-execution_count="21">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;"># Calculate this for each disease</span></span>
<span id="cb24-3">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy, prevalence<span class="op" style="color: #5E5E5E;">=</span>get_prevalence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>0.017</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>0.028</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>0.114</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>0.002</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>0.192</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>0.053</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>0.049</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>0.094</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>0.032</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>0.028</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>0.019</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>0.014</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>0.02</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>0.045</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><code>Hernia</code> has a prevalence 0.002, which is the rarest among the studied conditions in our dataset.</p>
</section>
</section>
<section id="sensitivity-and-specificity" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="sensitivity-and-specificity"><span class="header-section-number">3.4</span> Sensitivity and Specificity</h3>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sens_spec.png" title="Sensitivity and Specificity" class="img-fluid"></p>
<p>Sensitivity and specificity are two of the most prominent numbers that are used to measure diagnostics tests. - Sensitivity is the probability that our test outputs positive given that the case is actually positive. - Specificity is the probability that the test outputs negative given that the case is actually negative.</p>
<p>We can phrase this easily in terms of true positives, true negatives, false positives, and false negatives:</p>
<p><img src="https://latex.codecogs.com/png.latex?sensitivity%20=%20%5Cfrac%7B%5Ctext%7Btrue%20positives%7D%7D%7B%5Ctext%7Btrue%20positives%7D%20+%20%5Ctext%7Bfalse%20negatives%7D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?specificity%20=%20%5Cfrac%7B%5Ctext%7Btrue%20negatives%7D%7D%7B%5Ctext%7Btrue%20negatives%7D%20+%20%5Ctext%7Bfalse%20positives%7D%7D"></p>
<p>Let’s calculate sensitivity and specificity for our model.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">def</span> get_sensitivity(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb25-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;">    Compute sensitivity of predictions at threshold.</span></span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;">        sensitivity (float): probability that our test outputs positive given that the case is actually positive</span></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb25-13">    sensitivity <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb25-14">    </span>
<span id="cb25-15">    <span class="co" style="color: #5E5E5E;"># get TP and FN using our previously defined functions</span></span>
<span id="cb25-16">    TP <span class="op" style="color: #5E5E5E;">=</span> true_positives(y, pred, th)</span>
<span id="cb25-17">    FN <span class="op" style="color: #5E5E5E;">=</span> false_negatives(y, pred, th)</span>
<span id="cb25-18"></span>
<span id="cb25-19">    <span class="co" style="color: #5E5E5E;"># use TP and FN to compute sensitivity</span></span>
<span id="cb25-20">    sensitivity <span class="op" style="color: #5E5E5E;">=</span> TP <span class="op" style="color: #5E5E5E;">/</span> (TP <span class="op" style="color: #5E5E5E;">+</span> FN)</span>
<span id="cb25-21">    </span>
<span id="cb25-22">    <span class="cf" style="color: #003B4F;">return</span> sensitivity</span>
<span id="cb25-23"></span>
<span id="cb25-24"><span class="kw" style="color: #003B4F;">def</span> get_specificity(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb25-25">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb25-26"><span class="co" style="color: #5E5E5E;">    Compute specificity of predictions at threshold.</span></span>
<span id="cb25-27"></span>
<span id="cb25-28"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb25-29"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb25-30"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb25-31"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb25-32"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb25-33"><span class="co" style="color: #5E5E5E;">        specificity (float): probability that the test outputs negative given that the case is actually negative</span></span>
<span id="cb25-34"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb25-35">    specificity <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb25-36">    </span>
<span id="cb25-37">    <span class="co" style="color: #5E5E5E;"># get TN and FP using our previously defined functions</span></span>
<span id="cb25-38">    TN <span class="op" style="color: #5E5E5E;">=</span> true_negatives(y, pred, th)</span>
<span id="cb25-39">    FP <span class="op" style="color: #5E5E5E;">=</span> false_positives(y, pred, th)</span>
<span id="cb25-40">    </span>
<span id="cb25-41">    <span class="co" style="color: #5E5E5E;"># use TN and FP to compute specificity </span></span>
<span id="cb25-42">    specificity <span class="op" style="color: #5E5E5E;">=</span> TN <span class="op" style="color: #5E5E5E;">/</span> (TN <span class="op" style="color: #5E5E5E;">+</span> FP)</span>
<span id="cb25-43">    </span>
<span id="cb25-44">    <span class="cf" style="color: #003B4F;">return</span> specificity</span></code></pre></div>
</div>
<div class="cell" data-outputid="1915ff27-1701-4ee7-ddf7-5a058faee29c" data-execution_count="23">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;"># Test function</span></span>
<span id="cb26-3">get_sensitivity_specificity_test(get_sensitivity, get_specificity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Case:

Test Labels:           [1 0 0 1 1]
Test Predictions:      [1 0 0 1 1]
Threshold:         0.5
Computed Sensitivity:  0.6666666666666666
Computed Specificity:  0.5 

 All tests passed.
 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output-3" class="level4">
<h4 class="anchored" data-anchor-id="expected-output-3">Expected output:</h4>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">Test Case:</span>
<span id="cb28-2"></span>
<span id="cb28-3">Test Labels:           [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-4">Test Predictions:      [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-5">Threshold:           <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb28-6">Computed Sensitivity:  <span class="fl" style="color: #AD0000;">0.6666666666666666</span></span>
<span id="cb28-7">Computed Specificity:  <span class="fl" style="color: #AD0000;">0.5</span> </span></code></pre></div>
<pre><code> All tests passed.
 All tests passed.
</code></pre>
<div class="cell" data-outputid="1f82e534-0353-406e-df6a-b5926db06803" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;"># Calculate for all diseases</span></span>
<span id="cb30-3">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy, prevalence<span class="op" style="color: #5E5E5E;">=</span>get_prevalence, </span>
<span id="cb30-4">                        sens<span class="op" style="color: #5E5E5E;">=</span>get_sensitivity, spec<span class="op" style="color: #5E5E5E;">=</span>get_specificity)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>0.017</td>
      <td>0.941</td>
      <td>0.828</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>0.028</td>
      <td>0.714</td>
      <td>0.894</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>0.114</td>
      <td>0.868</td>
      <td>0.779</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>0.002</td>
      <td>0.5</td>
      <td>0.744</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>0.192</td>
      <td>0.594</td>
      <td>0.672</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>0.053</td>
      <td>0.755</td>
      <td>0.833</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>0.049</td>
      <td>0.571</td>
      <td>0.769</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>0.094</td>
      <td>0.681</td>
      <td>0.725</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>0.032</td>
      <td>0.75</td>
      <td>0.811</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>0.028</td>
      <td>0.857</td>
      <td>0.734</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>0.019</td>
      <td>0.737</td>
      <td>0.674</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>0.014</td>
      <td>0.714</td>
      <td>0.735</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>0.02</td>
      <td>0.75</td>
      <td>0.783</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>0.045</td>
      <td>0.8</td>
      <td>0.689</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Note that specificity and sensitivity do not depend on the prevalence of the positive class in the dataset. * This is because the statistics are only computed within people of the same class * Sensitivity only considers output on people in the positive class * Similarly, specificity only considers output on people in the negative class.</p>
<p><a name="3-5"></a> ### PPV and NPV</p>
<p>Diagnostically, however, sensitivity and specificity are not helpful. Sensitivity, for example, tells us the probability our test outputs positive given that the person already has the condition. Here, we are conditioning on the thing we would like to find out (whether the patient has the condition)!</p>
<p>What would be more helpful is the probability that the person has the disease given that our test outputs positive. That brings us to positive predictive value (PPV) and negative predictive value (NPV).</p>
<ul>
<li>Positive predictive value (PPV) is the probability that subjects with a positive screening test truly have the disease.</li>
<li>Negative predictive value (NPV) is the probability that subjects with a negative screening test truly don’t have the disease.</li>
</ul>
<p>Again, we can formulate these in terms of true positives, true negatives, false positives, and false negatives:</p>
<p><img src="https://latex.codecogs.com/png.latex?PPV%20=%20%5Cfrac%7B%5Ctext%7Btrue%20positives%7D%7D%7B%5Ctext%7Btrue%20positives%7D%20+%20%5Ctext%7Bfalse%20positives%7D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?NPV%20=%20%5Cfrac%7B%5Ctext%7Btrue%20negatives%7D%7D%7B%5Ctext%7Btrue%20negatives%7D%20+%20%5Ctext%7Bfalse%20negatives%7D%7D"></p>
<p>We also encountered PPV and NPV in a <a href="2022-02-22-measuring-disease-in-epidemiology.html">previous article on measures of disease in epidemiology</a>.</p>
<p>Let’s calculate PPV &amp; NPV for our model.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;">def</span> get_ppv(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb31-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;">    Compute PPV of predictions at threshold.</span></span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;">        PPV (float): positive predictive value of predictions at threshold</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb31-13">    PPV <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb31-14">    </span>
<span id="cb31-15">    <span class="co" style="color: #5E5E5E;"># get TP and FP using our previously defined functions</span></span>
<span id="cb31-16">    TP <span class="op" style="color: #5E5E5E;">=</span> true_positives(y, pred, th)</span>
<span id="cb31-17">    FP <span class="op" style="color: #5E5E5E;">=</span> false_positives(y, pred, th)</span>
<span id="cb31-18"></span>
<span id="cb31-19">    <span class="co" style="color: #5E5E5E;"># use TP and FP to compute PPV</span></span>
<span id="cb31-20">    PPV <span class="op" style="color: #5E5E5E;">=</span> TP <span class="op" style="color: #5E5E5E;">/</span> (TP <span class="op" style="color: #5E5E5E;">+</span> FP)</span>
<span id="cb31-21">    </span>
<span id="cb31-22">    <span class="cf" style="color: #003B4F;">return</span> PPV</span>
<span id="cb31-23"></span>
<span id="cb31-24"><span class="kw" style="color: #003B4F;">def</span> get_npv(y, pred, th<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb31-26"><span class="co" style="color: #5E5E5E;">    Compute NPV of predictions at threshold.</span></span>
<span id="cb31-27"></span>
<span id="cb31-28"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb31-29"><span class="co" style="color: #5E5E5E;">        y (np.array): ground truth, size (n_examples)</span></span>
<span id="cb31-30"><span class="co" style="color: #5E5E5E;">        pred (np.array): model output, size (n_examples)</span></span>
<span id="cb31-31"><span class="co" style="color: #5E5E5E;">        th (float): cutoff value for positive prediction from model</span></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb31-33"><span class="co" style="color: #5E5E5E;">        NPV (float): negative predictive value of predictions at threshold</span></span>
<span id="cb31-34"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb31-35">    NPV <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb31-36">    </span>
<span id="cb31-37">    <span class="co" style="color: #5E5E5E;"># get TN and FN using our previously defined functions</span></span>
<span id="cb31-38">    TN <span class="op" style="color: #5E5E5E;">=</span> true_negatives(y, pred, th)</span>
<span id="cb31-39">    FN <span class="op" style="color: #5E5E5E;">=</span> false_negatives(y, pred, th)</span>
<span id="cb31-40"></span>
<span id="cb31-41">    <span class="co" style="color: #5E5E5E;"># use TN and FN to compute NPV</span></span>
<span id="cb31-42">    NPV <span class="op" style="color: #5E5E5E;">=</span> TN <span class="op" style="color: #5E5E5E;">/</span> (TN <span class="op" style="color: #5E5E5E;">+</span> FN)</span>
<span id="cb31-43">    </span>
<span id="cb31-44">    <span class="cf" style="color: #003B4F;">return</span> NPV</span></code></pre></div>
</div>
<div class="cell" data-outputid="e9759c8f-17ef-47df-c612-d7c3b46970ab" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;"># Test function</span></span>
<span id="cb32-3">get_ppv_npv_test(get_ppv, get_npv)    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Case:

Test Labels:       [1 0 0 1 1]
Test Predictions:  [1 0 0 1 1]
Threshold:     0.5
Computed PPV:      0.6666666666666666
Computed NPV:      0.5 

 All tests passed.
 All tests passed.</code></pre>
</div>
</div>
</section>
<section id="expected-output-4" class="level4">
<h4 class="anchored" data-anchor-id="expected-output-4">Expected output:</h4>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">Test Case:</span>
<span id="cb34-2"></span>
<span id="cb34-3">Test Labels:       [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb34-4">Test Predictions:  [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb34-5">Threshold:       <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb34-6">Computed PPV:     <span class="fl" style="color: #AD0000;">0.6666666666666666</span></span>
<span id="cb34-7">Computed NPV:     <span class="fl" style="color: #AD0000;">0.5</span> </span></code></pre></div>
<pre><code> All tests passed.
 All tests passed.</code></pre>
<div class="cell" data-outputid="e8fe9db4-f7a3-4403-c36e-60cfb84385c3" data-execution_count="27">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># Calculate for all diseases</span></span>
<span id="cb36-3">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy, prevalence<span class="op" style="color: #5E5E5E;">=</span>get_prevalence, </span>
<span id="cb36-4">                        sens<span class="op" style="color: #5E5E5E;">=</span>get_sensitivity, spec<span class="op" style="color: #5E5E5E;">=</span>get_specificity, ppv<span class="op" style="color: #5E5E5E;">=</span>get_ppv, npv<span class="op" style="color: #5E5E5E;">=</span>get_npv)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>0.017</td>
      <td>0.941</td>
      <td>0.828</td>
      <td>0.086</td>
      <td>0.999</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>0.028</td>
      <td>0.714</td>
      <td>0.894</td>
      <td>0.163</td>
      <td>0.991</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>0.114</td>
      <td>0.868</td>
      <td>0.779</td>
      <td>0.336</td>
      <td>0.979</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>0.002</td>
      <td>0.5</td>
      <td>0.744</td>
      <td>0.004</td>
      <td>0.999</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>0.192</td>
      <td>0.594</td>
      <td>0.672</td>
      <td>0.301</td>
      <td>0.874</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>0.053</td>
      <td>0.755</td>
      <td>0.833</td>
      <td>0.202</td>
      <td>0.984</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>0.049</td>
      <td>0.571</td>
      <td>0.769</td>
      <td>0.113</td>
      <td>0.972</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>0.094</td>
      <td>0.681</td>
      <td>0.725</td>
      <td>0.204</td>
      <td>0.956</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>0.032</td>
      <td>0.75</td>
      <td>0.811</td>
      <td>0.116</td>
      <td>0.99</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>0.028</td>
      <td>0.857</td>
      <td>0.734</td>
      <td>0.085</td>
      <td>0.994</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>0.019</td>
      <td>0.737</td>
      <td>0.674</td>
      <td>0.042</td>
      <td>0.992</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>0.014</td>
      <td>0.714</td>
      <td>0.735</td>
      <td>0.037</td>
      <td>0.995</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>0.02</td>
      <td>0.75</td>
      <td>0.783</td>
      <td>0.066</td>
      <td>0.994</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>0.045</td>
      <td>0.8</td>
      <td>0.689</td>
      <td>0.108</td>
      <td>0.987</td>
      <td>Not Defined</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Notice that despite having very high sensitivity and accuracy, the PPV of the predictions could still be very low.</p>
<p>This is the case with <code>Edema</code>, for example. * The sensitivity for <code>Edema</code> is 0.75. * However, given that the model predicted positive, the probability that a person has Edema (its PPV) is only 0.066!</p>
</section>
</section>
<section id="roc-curve" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="roc-curve"><span class="header-section-number">3.5</span> ROC Curve</h3>
<p>So far we have been operating under the assumption that our model’s prediction of <code>0.5</code> and above should be treated as positive and otherwise it should be treated as negative. This however was a rather arbitrary choice. One way to see this, is to look at a very informative visualization called the receiver operating characteristic (ROC) curve.</p>
<p>The ROC curve is created by plotting the true positive rate (TPR) against the false positive rate (FPR) at various threshold settings. The ideal point is at the top left, with a true positive rate of 1 and a false positive rate of 0. The various points on the curve are generated by gradually changing the threshold.</p>
<p>Let’s look at this curve for our model:</p>
<div class="cell" data-outputid="66725978-cb15-4ade-c4da-33deca6c509d" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">util.get_curve(y, pred, class_labels)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The area under the ROC curve is also called AUCROC or C-statistic and is a measure of goodness of fit. In medical literature this number also gives the probability that a randomly selected patient who experienced a condition had a higher risk score than a patient who had not experienced the event. This summarizes the model output across all thresholds, and provides a good sense of the discriminative power of a given model.</p>
<p>One important caveat to bear in mind with the ROC curve is that it implicitly assumes roughly equal numbers of positive and negative cases for each disease. This is because the false positive rate includes true negatives in its calculation. For a disease with many examples without the disease and few with the disease - this could lead to a misleading indication of model performance. In such cases, the <strong>precision-recall curve</strong> can be a better indication of performance, which we will cover shortly.</p>
<p>Let’s use the <code>sklearn</code> metric function of <code>roc_auc_score</code> to add this score to our metrics table.</p>
<div class="cell" data-outputid="a249365b-c1a9-45d5-943b-a63880a25a38" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"></span>
<span id="cb38-2"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> roc_auc_score</span>
<span id="cb38-3">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy, prevalence<span class="op" style="color: #5E5E5E;">=</span>get_prevalence, </span>
<span id="cb38-4">                        sens<span class="op" style="color: #5E5E5E;">=</span>get_sensitivity, spec<span class="op" style="color: #5E5E5E;">=</span>get_specificity, ppv<span class="op" style="color: #5E5E5E;">=</span>get_ppv, npv<span class="op" style="color: #5E5E5E;">=</span>get_npv, auc<span class="op" style="color: #5E5E5E;">=</span>roc_auc_score)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>0.017</td>
      <td>0.941</td>
      <td>0.828</td>
      <td>0.086</td>
      <td>0.999</td>
      <td>0.933</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>0.028</td>
      <td>0.714</td>
      <td>0.894</td>
      <td>0.163</td>
      <td>0.991</td>
      <td>0.935</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>0.114</td>
      <td>0.868</td>
      <td>0.779</td>
      <td>0.336</td>
      <td>0.979</td>
      <td>0.891</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>0.002</td>
      <td>0.5</td>
      <td>0.744</td>
      <td>0.004</td>
      <td>0.999</td>
      <td>0.644</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>0.192</td>
      <td>0.594</td>
      <td>0.672</td>
      <td>0.301</td>
      <td>0.874</td>
      <td>0.696</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>0.053</td>
      <td>0.755</td>
      <td>0.833</td>
      <td>0.202</td>
      <td>0.984</td>
      <td>0.888</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>0.049</td>
      <td>0.571</td>
      <td>0.769</td>
      <td>0.113</td>
      <td>0.972</td>
      <td>0.745</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>0.094</td>
      <td>0.681</td>
      <td>0.725</td>
      <td>0.204</td>
      <td>0.956</td>
      <td>0.781</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>0.032</td>
      <td>0.75</td>
      <td>0.811</td>
      <td>0.116</td>
      <td>0.99</td>
      <td>0.826</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>0.028</td>
      <td>0.857</td>
      <td>0.734</td>
      <td>0.085</td>
      <td>0.994</td>
      <td>0.868</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>0.019</td>
      <td>0.737</td>
      <td>0.674</td>
      <td>0.042</td>
      <td>0.992</td>
      <td>0.762</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>0.014</td>
      <td>0.714</td>
      <td>0.735</td>
      <td>0.037</td>
      <td>0.995</td>
      <td>0.801</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>0.02</td>
      <td>0.75</td>
      <td>0.783</td>
      <td>0.066</td>
      <td>0.994</td>
      <td>0.856</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>0.045</td>
      <td>0.8</td>
      <td>0.689</td>
      <td>0.108</td>
      <td>0.987</td>
      <td>0.799</td>
      <td>Not Defined</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="confidence-intervals" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="confidence-intervals"><span class="header-section-number">4</span> Confidence Intervals</h2>
<p>Of course our dataset is only a sample of the real world, and our calculated values for all above metrics is an estimate of the real world values. It would be good to quantify this uncertainty due to the sampling of our dataset. We’ll do this through the use of confidence intervals. A 95% confidence interval for an estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bs%7D"> of a parameter <img src="https://latex.codecogs.com/png.latex?s"> is an interval <img src="https://latex.codecogs.com/png.latex?I%20=%20(a,%20b)"> such that 95% of the time when the experiment is run, the true value <img src="https://latex.codecogs.com/png.latex?s"> is contained in <img src="https://latex.codecogs.com/png.latex?I">. More concretely, if we were to run the experiment many times, then the fraction of those experiments for which <img src="https://latex.codecogs.com/png.latex?I"> contains the true parameter would tend towards 95%.</p>
<p>While some estimates come with methods for computing the confidence interval analytically, more complicated statistics, such as the AUC for example, are difficult. For these we can use a method called the <em>bootstrap</em>. The bootstrap estimates the uncertainty by resampling the dataset with replacement. For each resampling <img src="https://latex.codecogs.com/png.latex?i">, we will get a new estimate, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bs%7D_i">. We can then estimate the distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bs%7D"> by using the distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bs%7D_i"> for our bootstrap samples.</p>
<p>The Bootstrap method has many advantages, one of which is that it does not assume the underlying distribution is normal.</p>
<p>In the code below, we create bootstrap samples and compute sample AUCs from those samples. Note that we use stratified random sampling (sampling from the positive and negative classes separately) to make sure that members of each class are represented.</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;">def</span> bootstrap_auc(y, pred, classes, bootstraps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span>, fold_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb39-3">    statistics <span class="op" style="color: #5E5E5E;">=</span> np.zeros((<span class="bu" style="color: null;">len</span>(classes), bootstraps))</span>
<span id="cb39-4"></span>
<span id="cb39-5">    <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(classes)):</span>
<span id="cb39-6">        df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'y'</span>, <span class="st" style="color: #20794D;">'pred'</span>])</span>
<span id="cb39-7">        df.loc[:, <span class="st" style="color: #20794D;">'y'</span>] <span class="op" style="color: #5E5E5E;">=</span> y[:, c]</span>
<span id="cb39-8">        df.loc[:, <span class="st" style="color: #20794D;">'pred'</span>] <span class="op" style="color: #5E5E5E;">=</span> pred[:, c]</span>
<span id="cb39-9">        <span class="co" style="color: #5E5E5E;"># get positive examples for stratified sampling</span></span>
<span id="cb39-10">        df_pos <span class="op" style="color: #5E5E5E;">=</span> df[df.y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb39-11">        df_neg <span class="op" style="color: #5E5E5E;">=</span> df[df.y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb39-12">        prevalence <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(df_pos) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(df)</span>
<span id="cb39-13">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bootstraps):</span>
<span id="cb39-14">            <span class="co" style="color: #5E5E5E;"># stratified sampling of positive and negative examples</span></span>
<span id="cb39-15">            pos_sample <span class="op" style="color: #5E5E5E;">=</span> df_pos.sample(n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(fold_size <span class="op" style="color: #5E5E5E;">*</span> prevalence), replace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb39-16">            neg_sample <span class="op" style="color: #5E5E5E;">=</span> df_neg.sample(n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(fold_size <span class="op" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>prevalence)), replace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb39-17"></span>
<span id="cb39-18">            y_sample <span class="op" style="color: #5E5E5E;">=</span> np.concatenate([pos_sample.y.values, neg_sample.y.values])</span>
<span id="cb39-19">            pred_sample <span class="op" style="color: #5E5E5E;">=</span> np.concatenate([pos_sample.pred.values, neg_sample.pred.values])</span>
<span id="cb39-20">            score <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_sample, pred_sample)</span>
<span id="cb39-21">            statistics[c][i] <span class="op" style="color: #5E5E5E;">=</span> score</span>
<span id="cb39-22">    <span class="cf" style="color: #003B4F;">return</span> statistics</span>
<span id="cb39-23"></span>
<span id="cb39-24">statistics <span class="op" style="color: #5E5E5E;">=</span> bootstrap_auc(y, pred, class_labels)</span></code></pre></div>
</div>
<p>Now we can compute confidence intervals from the sample statistics that we computed.</p>
<div class="cell" data-outputid="dbb0dca8-a4f2-460d-cf26-5b8d9a0e935b" data-execution_count="31">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"></span>
<span id="cb40-2">util.print_confidence_intervals(class_labels, statistics)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Mean AUC (CI 5%-95%)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>0.93 (0.90-0.96)</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>0.93 (0.91-0.96)</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>0.89 (0.87-0.91)</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>0.62 (0.29-0.98)</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>0.70 (0.66-0.74)</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>0.89 (0.85-0.92)</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>0.75 (0.69-0.80)</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>0.79 (0.75-0.83)</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>0.83 (0.76-0.90)</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>0.87 (0.82-0.91)</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>0.77 (0.68-0.84)</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>0.80 (0.73-0.86)</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>0.86 (0.82-0.89)</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>0.80 (0.74-0.86)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>As you can see, our confidence intervals are much wider for some classes than for others. Hernia, for example, has an interval around (0.30 - 0.98), indicating that we can’t be certain it is better than chance (at 0.5).</p>
</section>
<section id="precision-recall-curve" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="precision-recall-curve"><span class="header-section-number">5</span> Precision-Recall Curve</h2>
<p>Precision-Recall are informative prediction metrics when significant class imbalance are present in the data.</p>
<p>In information retrieval - Precision is a measure of result relevancy and that is equivalent to our previously defined PPV. - Recall is a measure of how many truly relevant results are returned and that is equivalent to our previously defined sensitivity measure.</p>
<p>The precision-recall curve (PRC) shows the trade-off between precision and recall for different thresholds. A high area under the curve represents both high recall and high precision, where high precision relates to a low false positive rate, and high recall relates to a low false negative rate.</p>
<p>High scores for both show that the classifier is returning accurate results (high precision), as well as returning a majority of all positive results (high recall).</p>
<div class="cell" data-outputid="c54c393a-bcc7-453f-f6ca-e0676328bd09" data-execution_count="32">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"></span>
<span id="cb41-2">util.get_curve(y, pred, class_labels, curve<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'prc'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="f1-score" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="f1-score"><span class="header-section-number">6</span> F1 Score</h2>
<p>F1 score is the harmonic mean of the precision and recall, where an F1 score reaches its best value at 1 (perfect precision and recall) and worst at 0. The harmonic mean differs from the more common arithmetic mean, in that it gives more weight to the lower value. This means the F1 score leads to a more modest score than would be given by the arithmetic mean, which can be skewed by extremely high values.</p>
<p>Again, we can simply use <code>sklearn</code>’s utility metric function of <code>f1_score</code> to add this measure to our performance table.</p>
<div class="cell" data-outputid="c3d45590-b4dc-4f05-827b-54961bd628ff" data-execution_count="33">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"></span>
<span id="cb42-2"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> f1_score</span>
<span id="cb42-3">util.get_performance_metrics(y, pred, class_labels, acc<span class="op" style="color: #5E5E5E;">=</span>get_accuracy, prevalence<span class="op" style="color: #5E5E5E;">=</span>get_prevalence, </span>
<span id="cb42-4">                        sens<span class="op" style="color: #5E5E5E;">=</span>get_sensitivity, spec<span class="op" style="color: #5E5E5E;">=</span>get_specificity, ppv<span class="op" style="color: #5E5E5E;">=</span>get_ppv, npv<span class="op" style="color: #5E5E5E;">=</span>get_npv, auc<span class="op" style="color: #5E5E5E;">=</span>roc_auc_score,f1<span class="op" style="color: #5E5E5E;">=</span>f1_score)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>TP</th>
      <th>TN</th>
      <th>FP</th>
      <th>FN</th>
      <th>Accuracy</th>
      <th>Prevalence</th>
      <th>Sensitivity</th>
      <th>Specificity</th>
      <th>PPV</th>
      <th>NPV</th>
      <th>AUC</th>
      <th>F1</th>
      <th>Threshold</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cardiomegaly</th>
      <td>16</td>
      <td>814</td>
      <td>169</td>
      <td>1</td>
      <td>0.83</td>
      <td>0.017</td>
      <td>0.941</td>
      <td>0.828</td>
      <td>0.086</td>
      <td>0.999</td>
      <td>0.933</td>
      <td>0.158</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Emphysema</th>
      <td>20</td>
      <td>869</td>
      <td>103</td>
      <td>8</td>
      <td>0.889</td>
      <td>0.028</td>
      <td>0.714</td>
      <td>0.894</td>
      <td>0.163</td>
      <td>0.991</td>
      <td>0.935</td>
      <td>0.265</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Effusion</th>
      <td>99</td>
      <td>690</td>
      <td>196</td>
      <td>15</td>
      <td>0.789</td>
      <td>0.114</td>
      <td>0.868</td>
      <td>0.779</td>
      <td>0.336</td>
      <td>0.979</td>
      <td>0.891</td>
      <td>0.484</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Hernia</th>
      <td>1</td>
      <td>743</td>
      <td>255</td>
      <td>1</td>
      <td>0.744</td>
      <td>0.002</td>
      <td>0.5</td>
      <td>0.744</td>
      <td>0.004</td>
      <td>0.999</td>
      <td>0.644</td>
      <td>0.008</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Infiltration</th>
      <td>114</td>
      <td>543</td>
      <td>265</td>
      <td>78</td>
      <td>0.657</td>
      <td>0.192</td>
      <td>0.594</td>
      <td>0.672</td>
      <td>0.301</td>
      <td>0.874</td>
      <td>0.696</td>
      <td>0.399</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Mass</th>
      <td>40</td>
      <td>789</td>
      <td>158</td>
      <td>13</td>
      <td>0.829</td>
      <td>0.053</td>
      <td>0.755</td>
      <td>0.833</td>
      <td>0.202</td>
      <td>0.984</td>
      <td>0.888</td>
      <td>0.319</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Nodule</th>
      <td>28</td>
      <td>731</td>
      <td>220</td>
      <td>21</td>
      <td>0.759</td>
      <td>0.049</td>
      <td>0.571</td>
      <td>0.769</td>
      <td>0.113</td>
      <td>0.972</td>
      <td>0.745</td>
      <td>0.189</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Atelectasis</th>
      <td>64</td>
      <td>657</td>
      <td>249</td>
      <td>30</td>
      <td>0.721</td>
      <td>0.094</td>
      <td>0.681</td>
      <td>0.725</td>
      <td>0.204</td>
      <td>0.956</td>
      <td>0.781</td>
      <td>0.314</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumothorax</th>
      <td>24</td>
      <td>785</td>
      <td>183</td>
      <td>8</td>
      <td>0.809</td>
      <td>0.032</td>
      <td>0.75</td>
      <td>0.811</td>
      <td>0.116</td>
      <td>0.99</td>
      <td>0.826</td>
      <td>0.201</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pleural_Thickening</th>
      <td>24</td>
      <td>713</td>
      <td>259</td>
      <td>4</td>
      <td>0.737</td>
      <td>0.028</td>
      <td>0.857</td>
      <td>0.734</td>
      <td>0.085</td>
      <td>0.994</td>
      <td>0.868</td>
      <td>0.154</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Pneumonia</th>
      <td>14</td>
      <td>661</td>
      <td>320</td>
      <td>5</td>
      <td>0.675</td>
      <td>0.019</td>
      <td>0.737</td>
      <td>0.674</td>
      <td>0.042</td>
      <td>0.992</td>
      <td>0.762</td>
      <td>0.079</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Fibrosis</th>
      <td>10</td>
      <td>725</td>
      <td>261</td>
      <td>4</td>
      <td>0.735</td>
      <td>0.014</td>
      <td>0.714</td>
      <td>0.735</td>
      <td>0.037</td>
      <td>0.995</td>
      <td>0.801</td>
      <td>0.07</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Edema</th>
      <td>15</td>
      <td>767</td>
      <td>213</td>
      <td>5</td>
      <td>0.782</td>
      <td>0.02</td>
      <td>0.75</td>
      <td>0.783</td>
      <td>0.066</td>
      <td>0.994</td>
      <td>0.856</td>
      <td>0.121</td>
      <td>0.5</td>
    </tr>
    <tr>
      <th>Consolidation</th>
      <td>36</td>
      <td>658</td>
      <td>297</td>
      <td>9</td>
      <td>0.694</td>
      <td>0.045</td>
      <td>0.8</td>
      <td>0.689</td>
      <td>0.108</td>
      <td>0.987</td>
      <td>0.799</td>
      <td>0.19</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="calibration" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="calibration"><span class="header-section-number">7</span> Calibration</h2>
<p>When performing classification we often want not only to predict the class label, but also obtain a probability of each label. This probability would ideally give us some kind of confidence on the prediction. In order to observe how our model’s generated probabilities are aligned with the real probabilities, we can plot what’s called a <em>calibration curve</em>.</p>
<p>In order to generate a calibration plot, we first bucketize our predictions to a fixed number of separate bins (e.g.&nbsp;5) between 0 and 1. We then calculate a point for each bin: the x-value for each point is the mean for the probability that our model has assigned to these points and the y-value for each point fraction of true positives in that bin. We then plot these points in a linear plot. A well-calibrated model has a calibration curve that almost aligns with the y=x line.</p>
<p>The <code>sklearn</code> library has a utility <code>calibration_curve</code> for generating a calibration plot. Let’s use it and take a look at our model’s calibration:</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"></span>
<span id="cb43-2"><span class="im" style="color: #00769E;">from</span> sklearn.calibration <span class="im" style="color: #00769E;">import</span> calibration_curve</span>
<span id="cb43-3"><span class="kw" style="color: #003B4F;">def</span> plot_calibration_curve(y, pred):</span>
<span id="cb43-4">    plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb43-5">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(class_labels)):</span>
<span id="cb43-6">        plt.subplot(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb43-7">        fraction_of_positives, mean_predicted_value <span class="op" style="color: #5E5E5E;">=</span> calibration_curve(y[:,i], pred[:,i], n_bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb43-8">        plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb43-9">        plt.plot(mean_predicted_value, fraction_of_positives, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'.'</span>)</span>
<span id="cb43-10">        plt.xlabel(<span class="st" style="color: #20794D;">"Predicted Value"</span>)</span>
<span id="cb43-11">        plt.ylabel(<span class="st" style="color: #20794D;">"Fraction of Positives"</span>)</span>
<span id="cb43-12">        plt.title(class_labels[i])</span>
<span id="cb43-13">    plt.tight_layout()</span>
<span id="cb43-14">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-outputid="b4a496d7-032f-42e2-a31e-b4913c982a94" data-execution_count="35">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"></span>
<span id="cb44-2">plot_calibration_curve(y, pred)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As the above plots show, for most predictions our model’s calibration plot does not resemble a well calibrated plot. How can we fix that?…</p>
<p>Thankfully, there is a very useful method called <a href="https://en.wikipedia.org/wiki/Platt_scaling">Platt scaling</a> which works by fitting a logistic regression model to our model’s scores. To build this model, we will be using the training portion of our dataset to generate the linear model and then will use the model to calibrate the predictions for our test portion.</p>
<div class="cell" data-scrolled="true" data-execution_count="36">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"></span>
<span id="cb45-2"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression <span class="im" style="color: #00769E;">as</span> LR </span>
<span id="cb45-3"></span>
<span id="cb45-4">y_train <span class="op" style="color: #5E5E5E;">=</span> train_results[class_labels].values</span>
<span id="cb45-5">pred_train <span class="op" style="color: #5E5E5E;">=</span> train_results[pred_labels].values</span>
<span id="cb45-6">pred_calibrated <span class="op" style="color: #5E5E5E;">=</span> np.zeros_like(pred)</span>
<span id="cb45-7"></span>
<span id="cb45-8"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(class_labels)):</span>
<span id="cb45-9">    lr <span class="op" style="color: #5E5E5E;">=</span> LR(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'liblinear'</span>, max_iter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb45-10">    lr.fit(pred_train[:, i].reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>), y_train[:, i])    </span>
<span id="cb45-11">    pred_calibrated[:, i] <span class="op" style="color: #5E5E5E;">=</span> lr.predict_proba(pred[:, i].reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))[:,<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<div class="cell" data-outputid="2cfe338a-6a19-4b34-a189-e5126d79e252" data-execution_count="37">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"></span>
<span id="cb46-2">plot_calibration_curve(y[:,], pred_calibrated)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusion" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">8</span> Conclusion</h2>
<p>In this article we covered specific metrics that are of particular relevance to evaluating models for medical diagnosis. These metrics were:</p>
<ol type="1">
<li>Accuracy</li>
<li>Prevalence</li>
<li>Specificity &amp; Sensitivity</li>
<li>PPV and NPV</li>
<li>ROC curve and AUCROC (c-statistic)</li>
<li>Confidence Intervals</li>
</ol>


</section>

 ]]></description>
  <category>health</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2022-05-22-evaluation-diagnostic-medical-models.html</guid>
  <pubDate>Sat, 21 May 2022 23:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ai_health.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Medical Diagnosis of 14 Diseases Using Chest X-Rays</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an earlier project <a href="2022-02-06-detect-pneumonia-chest-xrays.html">I developed a deep learning model that could detect and diagnose Pneumonia from Chest X-Rays</a>. In this project we will explore medical image diagnosis further by building a state-of-the-art chest X-ray classifier using Keras that can classify and diagnose 14 different diseases.</p>
<p>In particular, we will: - Pre-process and prepare a real-world X-ray dataset. - Use transfer learning to retrain a DenseNet model for X-ray image classification. - Learn a technique to handle class imbalance - Measure diagnostic performance by computing the AUC (Area Under the Curve) for the ROC (Receiver Operating Characteristic) curve. - Visualize model activity using GradCAMs.</p>
<p>In completing this project we will cover the following key topics in the use of deep learning in medical diagnosis:</p>
<ul>
<li>Data preparation
<ul>
<li>Visualizing data.</li>
<li>Preventing data leakage.</li>
</ul></li>
<li>Model Development
<ul>
<li>Addressing class imbalance.</li>
<li>Leveraging pre-trained models using transfer learning.</li>
</ul></li>
<li>Evaluation
<ul>
<li>AUC and ROC curves.</li>
</ul></li>
</ul>
</section>
<section id="load-the-datasets" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="load-the-datasets"><span class="header-section-number">2</span> Load the Datasets</h2>
<p>I will be using the <a href="https://arxiv.org/abs/1705.02315">ChestX-ray8 dataset</a> which contains 108,948 frontal-view X-ray images of 32,717 unique patients.</p>
<ul>
<li>Each image in the data set contains multiple text-mined labels identifying 14 different pathological conditions.</li>
<li>These in turn can be used by physicians to diagnose 8 different diseases.</li>
<li>We will use this data to develop a single model that will provide binary classification predictions for each of the 14 labeled pathologies.</li>
<li>In other words it will predict ‘positive’ or ‘negative’ for each of the pathologies.</li>
</ul>
<p>You can download the entire dataset for free <a href="https://nihcc.app.box.com/v/ChestXray-NIHCC">here</a>.</p>
<p>We have taken a subset of these images of around 1000 for the purposes of this project.</p>
<p>This dataset has been annotated by consensus among four different radiologists for 5 of our 14 pathologies: - <code>Consolidation</code> - <code>Edema</code> - <code>Effusion</code> - <code>Cardiomegaly</code> - <code>Atelectasis</code></p>
<p><a name="2-1"></a> ### Loading the Data</p>
<div class="cell" data-outputid="69830050-af47-4ebc-946d-d411d0cbdf5b" data-execution_count="39">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2">train_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/nih/train-small.csv"</span>)</span>
<span id="cb1-3">valid_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/nih/valid-small.csv"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">test_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/nih/test.csv"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7">train_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Image</th>
      <th>Atelectasis</th>
      <th>Cardiomegaly</th>
      <th>Consolidation</th>
      <th>Edema</th>
      <th>Effusion</th>
      <th>Emphysema</th>
      <th>Fibrosis</th>
      <th>Hernia</th>
      <th>Infiltration</th>
      <th>Mass</th>
      <th>Nodule</th>
      <th>PatientId</th>
      <th>Pleural_Thickening</th>
      <th>Pneumonia</th>
      <th>Pneumothorax</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>00008270_015.png</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>8270</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>00029855_001.png</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>29855</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>00001297_000.png</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1297</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>00012359_002.png</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>12359</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>00017951_001.png</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>17951</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">labels <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Cardiomegaly'</span>, </span>
<span id="cb2-3">          <span class="st" style="color: #20794D;">'Emphysema'</span>, </span>
<span id="cb2-4">          <span class="st" style="color: #20794D;">'Effusion'</span>, </span>
<span id="cb2-5">          <span class="st" style="color: #20794D;">'Hernia'</span>, </span>
<span id="cb2-6">          <span class="st" style="color: #20794D;">'Infiltration'</span>, </span>
<span id="cb2-7">          <span class="st" style="color: #20794D;">'Mass'</span>, </span>
<span id="cb2-8">          <span class="st" style="color: #20794D;">'Nodule'</span>, </span>
<span id="cb2-9">          <span class="st" style="color: #20794D;">'Atelectasis'</span>,</span>
<span id="cb2-10">          <span class="st" style="color: #20794D;">'Pneumothorax'</span>,</span>
<span id="cb2-11">          <span class="st" style="color: #20794D;">'Pleural_Thickening'</span>, </span>
<span id="cb2-12">          <span class="st" style="color: #20794D;">'Pneumonia'</span>, </span>
<span id="cb2-13">          <span class="st" style="color: #20794D;">'Fibrosis'</span>, </span>
<span id="cb2-14">          <span class="st" style="color: #20794D;">'Edema'</span>, </span>
<span id="cb2-15">          <span class="st" style="color: #20794D;">'Consolidation'</span>]</span></code></pre></div>
</div>
<p><a name="2-2"></a> ### Preventing Data Leakage It is worth noting that our dataset contains multiple images for each patient. This could be the case, for example, when a patient has taken multiple X-ray images at different times during their hospital visits. In our data splitting, we have ensured that the split is done on the patient level so that there is no data “leakage” between the train, validation, and test datasets.</p>
<p><a name="Ex-1"></a> ### Check for Leakage</p>
<p>We will write a function to check whether there is leakage between two datasets. We’ll use this to make sure there are no patients in the test set that are also present in either the train or validation sets.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">def</span> check_for_leakage(df1, df2, patient_col):</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">    Return True if there any patients are in both df1 and df2.</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;">        df1 (dataframe): dataframe describing first dataset</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;">        df2 (dataframe): dataframe describing second dataset</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">        patient_col (str): string name of column with patient IDs</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">        leakage (bool): True if there is leakage, otherwise False</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-14">    </span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;"># Extract patient id's for df1</span></span>
<span id="cb3-16">    ids_df1 <span class="op" style="color: #5E5E5E;">=</span> df1[patient_col].values</span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># Extract patient id's for df2</span></span>
<span id="cb3-18">    ids_df2 <span class="op" style="color: #5E5E5E;">=</span> df2[patient_col].values</span>
<span id="cb3-19">    </span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;"># Create sets for both </span></span>
<span id="cb3-21">    df1_patients_unique <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(ids_df1)</span>
<span id="cb3-22">    df2_patients_unique <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(ids_df2)</span>
<span id="cb3-23">    </span>
<span id="cb3-24">    <span class="co" style="color: #5E5E5E;"># Find the interesction of sets </span></span>
<span id="cb3-25">    patients_in_both_groups <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(df1_patients_unique.intersection(df2_patients_unique))</span>
<span id="cb3-26"></span>
<span id="cb3-27">    <span class="co" style="color: #5E5E5E;"># If non empty then we have patients in both df</span></span>
<span id="cb3-28">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(patients_in_both_groups) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-29">        leakage <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb3-30">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-31">        leakage <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb3-32">     </span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;">return</span> leakage</span></code></pre></div>
</div>
<div class="cell" data-outputid="9ee44d93-8ef1-4c98-f9fa-65b309b9b889" data-execution_count="42">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Run test</span></span>
<span id="cb4-3">check_for_leakage_test(check_for_leakage)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Case 1

df1
   patient_id
0           0
1           1
2           2
df2
   patient_id
0           2
1           3
2           4
leakage output: True 
-------------------------------------
Test Case 2

df1
   patient_id
0           0
1           1
2           2
df2
   patient_id
0           3
1           4
2           5
leakage output: False 

 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output" class="level5">
<h5 class="anchored" data-anchor-id="expected-output">Expected output</h5>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">Test Case <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">df1</span>
<span id="cb6-4">   patient_id</span>
<span id="cb6-5"><span class="dv" style="color: #AD0000;">0</span>           <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-6"><span class="dv" style="color: #AD0000;">1</span>           <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-7"><span class="dv" style="color: #AD0000;">2</span>           <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-8">df2</span>
<span id="cb6-9">   patient_id</span>
<span id="cb6-10"><span class="dv" style="color: #AD0000;">0</span>           <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-11"><span class="dv" style="color: #AD0000;">1</span>           <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb6-12"><span class="dv" style="color: #AD0000;">2</span>           <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb6-13">leakage output: <span class="va" style="color: #111111;">True</span> </span>
<span id="cb6-14"><span class="op" style="color: #5E5E5E;">-------------------------------------</span></span>
<span id="cb6-15">Test Case <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">df1</span>
<span id="cb6-18">   patient_id</span>
<span id="cb6-19"><span class="dv" style="color: #AD0000;">0</span>           <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-20"><span class="dv" style="color: #AD0000;">1</span>           <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-21"><span class="dv" style="color: #AD0000;">2</span>           <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-22">df2</span>
<span id="cb6-23">   patient_id</span>
<span id="cb6-24"><span class="dv" style="color: #AD0000;">0</span>           <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb6-25"><span class="dv" style="color: #AD0000;">1</span>           <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb6-26"><span class="dv" style="color: #AD0000;">2</span>           <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb6-27">leakage output: <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<pre><code> All tests passed.</code></pre>
<div class="cell" data-outputid="e417c9ea-c06b-49a7-af35-d802bc1725eb" data-execution_count="43">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"leakage between train and valid: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(check_for_leakage(train_df, valid_df, <span class="st" style="color: #20794D;">'PatientId'</span>)))</span>
<span id="cb8-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"leakage between train and test: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(check_for_leakage(train_df, test_df, <span class="st" style="color: #20794D;">'PatientId'</span>)))</span>
<span id="cb8-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"leakage between valid and test: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(check_for_leakage(valid_df, test_df, <span class="st" style="color: #20794D;">'PatientId'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>leakage between train and valid: True
leakage between train and test: False
leakage between valid and test: False</code></pre>
</div>
</div>
</section>
<section id="expected-output-1" class="level5">
<h5 class="anchored" data-anchor-id="expected-output-1">Expected output</h5>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">leakage between train <span class="kw" style="color: #003B4F;">and</span> valid: <span class="va" style="color: #111111;">True</span></span>
<span id="cb10-2">leakage between train <span class="kw" style="color: #003B4F;">and</span> test: <span class="va" style="color: #111111;">False</span></span>
<span id="cb10-3">leakage between valid <span class="kw" style="color: #003B4F;">and</span> test: <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p><a name="2-3"></a> ### Preparing Images</p>
<p>With our dataset splits ready, we can now proceed with setting up our model to consume them. - For this we will use the off-the-shelf <a href="https://keras.io/preprocessing/image/">ImageDataGenerator</a> class from the Keras framework, which allows us to build a “generator” for images specified in a dataframe. - This class also provides support for basic data augmentation such as random horizontal flipping of images. - We also use the generator to transform the values in each batch so that their mean is <img src="https://latex.codecogs.com/png.latex?0"> and their standard deviation is 1. - This will facilitate model training by standardizing the input distribution. - The generator also converts our single channel X-ray images (gray-scale) to a three-channel format by repeating the values in the image across all channels. - We will want this because the pre-trained model that we’ll use requires three-channel inputs.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">def</span> get_train_generator(df, image_dir, x_col, y_cols, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, target_w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">320</span>, target_h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">320</span>):</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">    Return generator for training set, normalizing using batch</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">    statistics.</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">      train_df (dataframe): dataframe specifying training data.</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">      image_dir (str): directory where image files are held.</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">      x_col (str): name of column in df that holds filenames.</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;">      y_cols (list): list of strings that hold y labels for images.</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;">      batch_size (int): images per batch to be fed into model during training.</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;">      seed (int): random seed.</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;">      target_w (int): final width of input images.</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;">      target_h (int): final height of input images.</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb11-17"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;">        train_generator (DataFrameIterator): iterator over training set</span></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;">    """</span>        </span>
<span id="cb11-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"getting train generator..."</span>) </span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;"># normalize images</span></span>
<span id="cb11-22">    image_generator <span class="op" style="color: #5E5E5E;">=</span> ImageDataGenerator(</span>
<span id="cb11-23">        samplewise_center<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb11-24">        samplewise_std_normalization<span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-25">    </span>
<span id="cb11-26">    <span class="co" style="color: #5E5E5E;"># flow from directory with specified batch size</span></span>
<span id="cb11-27">    <span class="co" style="color: #5E5E5E;"># and target image size</span></span>
<span id="cb11-28">    generator <span class="op" style="color: #5E5E5E;">=</span> image_generator.flow_from_dataframe(</span>
<span id="cb11-29">            dataframe<span class="op" style="color: #5E5E5E;">=</span>df,</span>
<span id="cb11-30">            directory<span class="op" style="color: #5E5E5E;">=</span>image_dir,</span>
<span id="cb11-31">            x_col<span class="op" style="color: #5E5E5E;">=</span>x_col,</span>
<span id="cb11-32">            y_col<span class="op" style="color: #5E5E5E;">=</span>y_cols,</span>
<span id="cb11-33">            class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"raw"</span>,</span>
<span id="cb11-34">            batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb11-35">            shuffle<span class="op" style="color: #5E5E5E;">=</span>shuffle,</span>
<span id="cb11-36">            seed<span class="op" style="color: #5E5E5E;">=</span>seed,</span>
<span id="cb11-37">            target_size<span class="op" style="color: #5E5E5E;">=</span>(target_w,target_h))</span>
<span id="cb11-38">    </span>
<span id="cb11-39">    <span class="cf" style="color: #003B4F;">return</span> generator</span></code></pre></div>
</div>
</section>
<section id="build-a-separate-generator-for-valid-and-test-sets" class="level4">
<h4 class="anchored" data-anchor-id="build-a-separate-generator-for-valid-and-test-sets">Build a separate generator for valid and test sets</h4>
<p>Now we need to build a new generator for validation and testing data.</p>
<p><strong>Why can’t we use the same generator as for the training data?</strong></p>
<p>Look back at the generator we wrote for the training data. - It normalizes each image <strong>per batch</strong>, meaning that it uses batch statistics. - We should not do this with the test and validation data, since in a real life scenario we don’t process incoming images a batch at a time (we process one image at a time). - Knowing the average per batch of test data would effectively give our model an advantage.<br>
- The model should not have any information about the test data.</p>
<p>What we need to do is normalize incoming test data using the statistics <strong>computed from the training set</strong>. * We implement this in the function below. * There is one technical note. Ideally, we would want to compute our sample mean and standard deviation using the entire training set. * However, since this is extremely large, that would be very time consuming. * In the interest of time, we’ll take a random sample of the dataset and calcualte the sample mean and sample standard deviation.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;">def</span> get_test_and_valid_generator(valid_df, test_df, train_df, image_dir, x_col, y_cols, sample_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, target_w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">320</span>, target_h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">320</span>):</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;">    Return generator for validation set and test set using </span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;">    normalization statistics from training set.</span></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;">      valid_df (dataframe): dataframe specifying validation data.</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;">      test_df (dataframe): dataframe specifying test data.</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;">      train_df (dataframe): dataframe specifying training data.</span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;">      image_dir (str): directory where image files are held.</span></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;">      x_col (str): name of column in df that holds filenames.</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;">      y_cols (list): list of strings that hold y labels for images.</span></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;">      sample_size (int): size of sample to use for normalization statistics.</span></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;">      batch_size (int): images per batch to be fed into model during training.</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;">      seed (int): random seed.</span></span>
<span id="cb12-17"><span class="co" style="color: #5E5E5E;">      target_w (int): final width of input images.</span></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;">      target_h (int): final height of input images.</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb12-21"><span class="co" style="color: #5E5E5E;">        test_generator (DataFrameIterator) and valid_generator: iterators over test set and validation set respectively</span></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb12-23">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"getting train and valid generators..."</span>)</span>
<span id="cb12-24">    <span class="co" style="color: #5E5E5E;"># get generator to sample dataset</span></span>
<span id="cb12-25">    raw_train_generator <span class="op" style="color: #5E5E5E;">=</span> ImageDataGenerator().flow_from_dataframe(</span>
<span id="cb12-26">        dataframe<span class="op" style="color: #5E5E5E;">=</span>train_df, </span>
<span id="cb12-27">        directory<span class="op" style="color: #5E5E5E;">=</span>IMAGE_DIR, </span>
<span id="cb12-28">        x_col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Image"</span>, </span>
<span id="cb12-29">        y_col<span class="op" style="color: #5E5E5E;">=</span>labels, </span>
<span id="cb12-30">        class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"raw"</span>, </span>
<span id="cb12-31">        batch_size<span class="op" style="color: #5E5E5E;">=</span>sample_size, </span>
<span id="cb12-32">        shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, </span>
<span id="cb12-33">        target_size<span class="op" style="color: #5E5E5E;">=</span>(target_w, target_h))</span>
<span id="cb12-34">    </span>
<span id="cb12-35">    <span class="co" style="color: #5E5E5E;"># get data sample</span></span>
<span id="cb12-36">    batch <span class="op" style="color: #5E5E5E;">=</span> raw_train_generator.<span class="bu" style="color: null;">next</span>()</span>
<span id="cb12-37">    data_sample <span class="op" style="color: #5E5E5E;">=</span> batch[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb12-38"></span>
<span id="cb12-39">    <span class="co" style="color: #5E5E5E;"># use sample to fit mean and std for test set generator</span></span>
<span id="cb12-40">    image_generator <span class="op" style="color: #5E5E5E;">=</span> ImageDataGenerator(</span>
<span id="cb12-41">        featurewise_center<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb12-42">        featurewise_std_normalization<span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb12-43">    </span>
<span id="cb12-44">    <span class="co" style="color: #5E5E5E;"># fit generator to sample from training data</span></span>
<span id="cb12-45">    image_generator.fit(data_sample)</span>
<span id="cb12-46"></span>
<span id="cb12-47">    <span class="co" style="color: #5E5E5E;"># get test generator</span></span>
<span id="cb12-48">    valid_generator <span class="op" style="color: #5E5E5E;">=</span> image_generator.flow_from_dataframe(</span>
<span id="cb12-49">            dataframe<span class="op" style="color: #5E5E5E;">=</span>valid_df,</span>
<span id="cb12-50">            directory<span class="op" style="color: #5E5E5E;">=</span>image_dir,</span>
<span id="cb12-51">            x_col<span class="op" style="color: #5E5E5E;">=</span>x_col,</span>
<span id="cb12-52">            y_col<span class="op" style="color: #5E5E5E;">=</span>y_cols,</span>
<span id="cb12-53">            class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"raw"</span>,</span>
<span id="cb12-54">            batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb12-55">            shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb12-56">            seed<span class="op" style="color: #5E5E5E;">=</span>seed,</span>
<span id="cb12-57">            target_size<span class="op" style="color: #5E5E5E;">=</span>(target_w,target_h))</span>
<span id="cb12-58"></span>
<span id="cb12-59">    test_generator <span class="op" style="color: #5E5E5E;">=</span> image_generator.flow_from_dataframe(</span>
<span id="cb12-60">            dataframe<span class="op" style="color: #5E5E5E;">=</span>test_df,</span>
<span id="cb12-61">            directory<span class="op" style="color: #5E5E5E;">=</span>image_dir,</span>
<span id="cb12-62">            x_col<span class="op" style="color: #5E5E5E;">=</span>x_col,</span>
<span id="cb12-63">            y_col<span class="op" style="color: #5E5E5E;">=</span>y_cols,</span>
<span id="cb12-64">            class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"raw"</span>,</span>
<span id="cb12-65">            batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb12-66">            shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb12-67">            seed<span class="op" style="color: #5E5E5E;">=</span>seed,</span>
<span id="cb12-68">            target_size<span class="op" style="color: #5E5E5E;">=</span>(target_w,target_h))</span>
<span id="cb12-69">    <span class="cf" style="color: #003B4F;">return</span> valid_generator, test_generator</span></code></pre></div>
</div>
<p>With our generator function ready, let’s make one generator for our training data and one each of our test and validation datasets.</p>
<div class="cell" data-outputid="4c6b1c25-a33d-42e0-f442-40971ca52a3f" data-scrolled="true" data-execution_count="46">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2">IMAGE_DIR <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"data/nih/images-small/"</span></span>
<span id="cb13-3">train_generator <span class="op" style="color: #5E5E5E;">=</span> get_train_generator(train_df, IMAGE_DIR, <span class="st" style="color: #20794D;">"Image"</span>, labels)</span>
<span id="cb13-4">valid_generator, test_generator<span class="op" style="color: #5E5E5E;">=</span> get_test_and_valid_generator(valid_df, test_df, train_df, IMAGE_DIR, <span class="st" style="color: #20794D;">"Image"</span>, labels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>getting train generator...
Found 1000 validated image filenames.
getting train and valid generators...
Found 1000 validated image filenames.
Found 200 validated image filenames.
Found 420 validated image filenames.</code></pre>
</div>
</div>
<p>Let’s peek into what the generator gives our model during training and validation. We can do this by calling the <code>__get_item__(index)</code> function:</p>
<div class="cell" data-outputid="c4e68e79-e8f2-4bb9-8909-072c9dd2f805" data-execution_count="47">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">x, y <span class="op" style="color: #5E5E5E;">=</span> train_generator.<span class="fu" style="color: #4758AB;">__getitem__</span>(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb15-2">plt.imshow(x[<span class="dv" style="color: #AD0000;">0</span>])<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p><a name="3"></a> ## Model Development</p>
<p>Now we’ll move on to model training and development. We have a few practical challenges to deal with before actually training a neural network, though. The first is class imbalance.</p>
<p><a name="3-1"></a> ### Addressing Class Imbalance One of the challenges with working with medical diagnostic datasets is the large class imbalance present in such datasets. Let’s plot the frequency of each of the labels in our dataset:</p>
<div class="cell" data-outputid="077747ad-7ab8-463d-8335-6b243cb29e63" data-execution_count="48">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2">plt.xticks(rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb17-3">plt.bar(x<span class="op" style="color: #5E5E5E;">=</span>labels, height<span class="op" style="color: #5E5E5E;">=</span>np.mean(train_generator.labels, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb17-4">plt.title(<span class="st" style="color: #20794D;">"Frequency of Each Class"</span>)</span>
<span id="cb17-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see from this plot that the prevalance of positive cases varies significantly across the different pathologies. (These trends mirror the ones in the full dataset as well.) * The <code>Hernia</code> pathology has the greatest imbalance with the proportion of positive training cases being about 0.2%. * But even the <code>Infiltration</code> pathology, which has the least amount of imbalance, has only 17.5% of the training cases labelled positive.</p>
<p>Ideally, we would train our model using an evenly balanced dataset so that the positive and negative training cases would contribute equally to the loss.</p>
<p>If we use a normal cross-entropy loss function with a highly unbalanced dataset, as we are seeing here, then the algorithm will be incentivized to prioritize the majority class (i.e negative in our case), since it contributes more to the loss.</p>
</section>
<section id="impact-of-class-imbalance-on-loss-function" class="level4">
<h4 class="anchored" data-anchor-id="impact-of-class-imbalance-on-loss-function">Impact of class imbalance on loss function</h4>
<p>Let’s take a closer look at this. Assume we would have used a normal cross-entropy loss for each pathology. We recall that the cross-entropy loss contribution from the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> training data case is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D_%7Bcross-entropy%7D(x_i)%20=%20-(y_i%20%5Clog(f(x_i))%20+%20(1-y_i)%20%5Clog(1-f(x_i))),"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?x_i"> and <img src="https://latex.codecogs.com/png.latex?y_i"> are the input features and the label, and <img src="https://latex.codecogs.com/png.latex?f(x_i)"> is the output of the model, i.e.&nbsp;the probability that it is positive.</p>
<p>Note that for any training case, either <img src="https://latex.codecogs.com/png.latex?y_i=0"> or else <img src="https://latex.codecogs.com/png.latex?(1-y_i)=0">, so only one of these terms contributes to the loss (the other term is multiplied by zero, and becomes zero).</p>
<p>We can rewrite the overall average cross-entropy loss over the entire training set <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BD%7D"> of size <img src="https://latex.codecogs.com/png.latex?N"> as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D_%7Bcross-entropy%7D(%5Cmathcal%7BD%7D)%20=%20-%20%5Cfrac%7B1%7D%7BN%7D%5Cbig(%20%5Csum_%7B%5Ctext%7Bpositive%20examples%7D%7D%20%5Clog%20(f(x_i))%20+%20%5Csum_%7B%5Ctext%7Bnegative%20examples%7D%7D%20%5Clog(1-f(x_i))%20%5Cbig)."></p>
<p>Using this formulation, we can see that if there is a large imbalance with very few positive training cases, for example, then the loss will be dominated by the negative class. Summing the contribution over all the training cases for each class (i.e.&nbsp;pathological condition), we see that the contribution of each class (i.e.&nbsp;positive or negative) is:</p>
<p><img src="https://latex.codecogs.com/png.latex?freq_%7Bp%7D%20=%20%5Cfrac%7B%5Ctext%7Bnumber%20of%20positive%20examples%7D%7D%7BN%7D%20"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Band%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?freq_%7Bn%7D%20=%20%5Cfrac%7B%5Ctext%7Bnumber%20of%20negative%20examples%7D%7D%7BN%7D."></p>
<p><a name="Ex-2"></a> ### Compute Class Frequencies Let’s write a function to calculate these frequences for each label in our dataset.</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;">def</span> compute_class_freqs(labels):</span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;">    Compute positive and negative frequences for each class.</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;">        labels (np.array): matrix of labels, size (num_examples, num_classes)</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;">        positive_frequencies (np.array): array of positive frequences for each</span></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;">                                         class, size (num_classes)</span></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;">        negative_frequencies (np.array): array of negative frequences for each</span></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;">                                         class, size (num_classes)</span></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb18-14">    </span>
<span id="cb18-15">    <span class="co" style="color: #5E5E5E;"># total number of patients (rows)</span></span>
<span id="cb18-16">    N <span class="op" style="color: #5E5E5E;">=</span> labels.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb18-17">    </span>
<span id="cb18-18">    positive_frequencies <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(labels, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">/</span> N</span>
<span id="cb18-19">    negative_frequencies <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> positive_frequencies</span>
<span id="cb18-20"></span>
<span id="cb18-21">    <span class="cf" style="color: #003B4F;">return</span> positive_frequencies, negative_frequencies</span></code></pre></div>
</div>
<div class="cell" data-outputid="56a5905a-e61b-47a8-f444-aa89d7481c44" data-execution_count="50">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;">### Compute frequencies     </span></span>
<span id="cb19-3">compute_class_freqs_test(compute_class_freqs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Labels:
[[1 0 0]
 [0 1 1]
 [1 0 1]
 [1 1 1]
 [1 0 1]]

Pos Freqs:  [0.8 0.4 0.8]
Neg Freqs:  [0.2 0.6 0.2] 

 All tests passed.</code></pre>
</div>
</div>
<section id="expected-output-2" class="level5">
<h5 class="anchored" data-anchor-id="expected-output-2">Expected output</h5>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">Labels:</span>
<span id="cb21-2">[[<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb21-3"> [<span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-4"> [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-5"> [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-6"> [<span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb21-7"></span>
<span id="cb21-8">Pos Freqs:  [<span class="fl" style="color: #AD0000;">0.8</span> <span class="fl" style="color: #AD0000;">0.4</span> <span class="fl" style="color: #AD0000;">0.8</span>]</span>
<span id="cb21-9">Neg Freqs:  [<span class="fl" style="color: #AD0000;">0.2</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="fl" style="color: #AD0000;">0.2</span>] </span></code></pre></div>
<pre><code> All tests passed. </code></pre>
<p>Now we’ll compute frequencies for our training data.</p>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"></span>
<span id="cb23-2">freq_pos, freq_neg <span class="op" style="color: #5E5E5E;">=</span> compute_class_freqs(train_generator.labels)</span>
<span id="cb23-3">freq_pos</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>array([0.02 , 0.013, 0.128, 0.002, 0.175, 0.045, 0.054, 0.106, 0.038,
       0.021, 0.01 , 0.014, 0.016, 0.033])</code></pre>
</div>
</div>
</section>
<section id="expected-output-3" class="level5">
<h5 class="anchored" data-anchor-id="expected-output-3">Expected output</h5>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">array([<span class="fl" style="color: #AD0000;">0.02</span> , <span class="fl" style="color: #AD0000;">0.013</span>, <span class="fl" style="color: #AD0000;">0.128</span>, <span class="fl" style="color: #AD0000;">0.002</span>, <span class="fl" style="color: #AD0000;">0.175</span>, <span class="fl" style="color: #AD0000;">0.045</span>, <span class="fl" style="color: #AD0000;">0.054</span>, <span class="fl" style="color: #AD0000;">0.106</span>, <span class="fl" style="color: #AD0000;">0.038</span>,</span>
<span id="cb25-2">       <span class="fl" style="color: #AD0000;">0.021</span>, <span class="fl" style="color: #AD0000;">0.01</span> , <span class="fl" style="color: #AD0000;">0.014</span>, <span class="fl" style="color: #AD0000;">0.016</span>, <span class="fl" style="color: #AD0000;">0.033</span>])</span></code></pre></div>
<p>Let’s visualize these two contribution ratios next to each other for each of the pathologies:</p>
<div class="cell" data-outputid="245f1a6b-b292-4c6d-a583-c6924bc61f31" data-scrolled="true" data-execution_count="52">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2">data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"Class"</span>: labels, <span class="st" style="color: #20794D;">"Label"</span>: <span class="st" style="color: #20794D;">"Positive"</span>, <span class="st" style="color: #20794D;">"Value"</span>: freq_pos})</span>
<span id="cb26-3">data <span class="op" style="color: #5E5E5E;">=</span> data.append([{<span class="st" style="color: #20794D;">"Class"</span>: labels[l], <span class="st" style="color: #20794D;">"Label"</span>: <span class="st" style="color: #20794D;">"Negative"</span>, <span class="st" style="color: #20794D;">"Value"</span>: v} <span class="cf" style="color: #003B4F;">for</span> l,v <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(freq_neg)], ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb26-4">plt.xticks(rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb26-5">f <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Class"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Value"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Label"</span> ,data<span class="op" style="color: #5E5E5E;">=</span>data)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As we see in the above plot, the contributions of positive cases is significantly lower than that of the negative ones. However, we want the contributions to be equal. One way of doing this is by multiplying each example from each class by a class-specific weight factor, <img src="https://latex.codecogs.com/png.latex?w_%7Bpos%7D"> and <img src="https://latex.codecogs.com/png.latex?w_%7Bneg%7D">, so that the overall contribution of each class is the same.</p>
<p>To have this, we want</p>
<p><img src="https://latex.codecogs.com/png.latex?w_%7Bpos%7D%20%5Ctimes%20freq_%7Bp%7D%20=%20w_%7Bneg%7D%20%5Ctimes%20freq_%7Bn%7D,"></p>
<p>which we can do simply by taking</p>
<p><img src="https://latex.codecogs.com/png.latex?w_%7Bpos%7D%20=%20freq_%7Bneg%7D"> <img src="https://latex.codecogs.com/png.latex?w_%7Bneg%7D%20=%20freq_%7Bpos%7D"></p>
<p>This way, we will be balancing the contribution of positive and negative labels.</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"></span>
<span id="cb27-2">pos_weights <span class="op" style="color: #5E5E5E;">=</span> freq_neg</span>
<span id="cb27-3">neg_weights <span class="op" style="color: #5E5E5E;">=</span> freq_pos</span>
<span id="cb27-4">pos_contribution <span class="op" style="color: #5E5E5E;">=</span> freq_pos <span class="op" style="color: #5E5E5E;">*</span> pos_weights </span>
<span id="cb27-5">neg_contribution <span class="op" style="color: #5E5E5E;">=</span> freq_neg <span class="op" style="color: #5E5E5E;">*</span> neg_weights</span></code></pre></div>
</div>
<p>Let’s verify this by graphing the two contributions next to each other again:</p>
<div class="cell" data-outputid="a4b6354f-ab39-4623-d44b-90cfd9b28506" data-scrolled="true" data-execution_count="54">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"></span>
<span id="cb28-2">data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"Class"</span>: labels, <span class="st" style="color: #20794D;">"Label"</span>: <span class="st" style="color: #20794D;">"Positive"</span>, <span class="st" style="color: #20794D;">"Value"</span>: pos_contribution})</span>
<span id="cb28-3">data <span class="op" style="color: #5E5E5E;">=</span> data.append([{<span class="st" style="color: #20794D;">"Class"</span>: labels[l], <span class="st" style="color: #20794D;">"Label"</span>: <span class="st" style="color: #20794D;">"Negative"</span>, <span class="st" style="color: #20794D;">"Value"</span>: v} </span>
<span id="cb28-4">                        <span class="cf" style="color: #003B4F;">for</span> l,v <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(neg_contribution)], ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-5">plt.xticks(rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb28-6">sns.barplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Class"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Value"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Label"</span> ,data<span class="op" style="color: #5E5E5E;">=</span>data)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As the above figure shows, by applying these weightings the positive and negative labels within each class would have the same aggregate contribution to the loss function. Now let’s implement such a loss function.</p>
<p>After computing the weights, our final weighted loss for each training case will be</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D_%7Bcross-entropy%7D%5E%7Bw%7D(x)%20=%20-%20(w_%7Bp%7D%20y%20%5Clog(f(x))%20+%20w_%7Bn%7D(1-y)%20%5Clog(%201%20-%20f(x)%20)%20)."></p>
<p><a name="Ex-3"></a> ### Get Weighted Loss We will write a <code>weighted_loss</code> function to return a loss function that calculates the weighted loss for each batch. Recall that for the multi-class loss, we add up the average loss for each individual class. Note that we also want to add a small value, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, to the predicted values before taking their logs. This is simply to avoid a numerical error that would otherwise occur if the predicted value happens to be zero.</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"></span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;">def</span> get_weighted_loss(pos_weights, neg_weights, epsilon<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-7</span>):</span>
<span id="cb29-3">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;">    Return weighted loss function given negative weights and positive weights.</span></span>
<span id="cb29-5"></span>
<span id="cb29-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;">      pos_weights (np.array): array of positive weights for each class, size (num_classes)</span></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;">      neg_weights (np.array): array of negative weights for each class, size (num_classes)</span></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb29-11"><span class="co" style="color: #5E5E5E;">      weighted_loss (function): weighted loss function</span></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb29-13">    <span class="kw" style="color: #003B4F;">def</span> weighted_loss(y_true, y_pred):</span>
<span id="cb29-14">        <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb29-15"><span class="co" style="color: #5E5E5E;">        Return weighted loss value. </span></span>
<span id="cb29-16"></span>
<span id="cb29-17"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;">            y_true (Tensor): Tensor of true labels, size is (num_examples, num_classes)</span></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;">            y_pred (Tensor): Tensor of predicted labels, size is (num_examples, num_classes)</span></span>
<span id="cb29-20"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb29-21"><span class="co" style="color: #5E5E5E;">            loss (float): overall scalar loss summed across all classes</span></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb29-23">        <span class="co" style="color: #5E5E5E;"># initialize loss to zero</span></span>
<span id="cb29-24">        loss <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb29-25"></span>
<span id="cb29-26">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(pos_weights)):</span>
<span id="cb29-27">            <span class="co" style="color: #5E5E5E;"># for each class, add average weighted loss for that class </span></span>
<span id="cb29-28">            loss_pos <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">*</span> K.mean(pos_weights[i] <span class="op" style="color: #5E5E5E;">*</span> </span>
<span id="cb29-29">                y_true[:, i] <span class="op" style="color: #5E5E5E;">*</span> </span>
<span id="cb29-30">                K.log(y_pred[:, i] <span class="op" style="color: #5E5E5E;">+</span> epsilon))</span>
<span id="cb29-31">            loss_neg <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">*</span> K.mean( </span>
<span id="cb29-32">                neg_weights[i] <span class="op" style="color: #5E5E5E;">*</span> </span>
<span id="cb29-33">                (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> y_true[:, i]) <span class="op" style="color: #5E5E5E;">*</span> </span>
<span id="cb29-34">                K.log(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> y_pred[:, i] <span class="op" style="color: #5E5E5E;">+</span> epsilon))</span>
<span id="cb29-35">            loss <span class="op" style="color: #5E5E5E;">+=</span> loss_pos <span class="op" style="color: #5E5E5E;">+</span> loss_neg </span>
<span id="cb29-36">        <span class="cf" style="color: #003B4F;">return</span> loss</span>
<span id="cb29-37">    </span>
<span id="cb29-38">    <span class="cf" style="color: #003B4F;">return</span> weighted_loss</span></code></pre></div>
</div>
<div class="cell" data-outputid="87128f53-7a99-40e2-d09a-6539215879d0" data-execution_count="56">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># test with a large epsilon in order to catch errors. </span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;"># In order to pass the tests, set epsilon = 1</span></span>
<span id="cb30-3">epsilon <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb30-4"></span>
<span id="cb30-5">sess <span class="op" style="color: #5E5E5E;">=</span> K.get_session()</span>
<span id="cb30-6">get_weighted_loss_test(get_weighted_loss, epsilon, sess)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>y_true:
[[1. 1. 1.]
 [1. 1. 0.]
 [0. 1. 0.]
 [1. 0. 1.]]

w_p:
[0.25 0.25 0.5 ]

w_n:
[0.75 0.75 0.5 ]

y_pred_1:
[[0.7 0.7 0.7]
 [0.7 0.7 0.7]
 [0.7 0.7 0.7]
 [0.7 0.7 0.7]]

y_pred_2:
[[0.3 0.3 0.3]
 [0.3 0.3 0.3]
 [0.3 0.3 0.3]
 [0.3 0.3 0.3]]

If you weighted them correctly, you'd expect the two losses to be the same.
With epsilon = 1, your losses should be, L(y_pred_1) = -0.4956203 and L(y_pred_2) = -0.4956203

Your outputs:

L(y_pred_1) =  -0.4956203
L(y_pred_2) =  -0.4956203
Difference: L(y_pred_1) - L(y_pred_2) =  0.0 

 All tests passed.</code></pre>
</div>
</div>
</section>
<section id="expected-output-4" class="level5">
<h5 class="anchored" data-anchor-id="expected-output-4">Expected output</h5>
<p>with epsilon = 1</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">Outputs:</span>
<span id="cb32-2"></span>
<span id="cb32-3">L(y_pred_1) <span class="op" style="color: #5E5E5E;">=</span>  <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.4956203</span></span>
<span id="cb32-4">L(y_pred_2) <span class="op" style="color: #5E5E5E;">=</span>  <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.4956203</span></span>
<span id="cb32-5">Difference: L(y_pred_1) <span class="op" style="color: #5E5E5E;">-</span> L(y_pred_2) <span class="op" style="color: #5E5E5E;">=</span>  <span class="fl" style="color: #AD0000;">0.0</span> </span></code></pre></div>
<pre><code> All tests passed.   </code></pre>
<p><a name="3-2"></a> ### DenseNet121</p>
<p>Next, we will use a pre-trained <a href="https://www.kaggle.com/pytorch/densenet121">DenseNet121</a> model which we can load directly from Keras and then add two layers on top of it: 1. A <code>GlobalAveragePooling2D</code> layer to get the average of the last convolution layers from DenseNet121. 2. A <code>Dense</code> layer with <code>sigmoid</code> activation to get the prediction logits for each of our classes.</p>
<p>We can set our custom loss function for the model by specifying the <code>loss</code> parameter in the <code>compile()</code> function.</p>
<div class="cell" data-outputid="7e12120b-8aab-403c-b5ca-2ff77ef978b1" data-scrolled="true" data-execution_count="57">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;"># create the base pre-trained model</span></span>
<span id="cb34-3">base_model <span class="op" style="color: #5E5E5E;">=</span> DenseNet121(weights<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'models/nih/densenet.hdf5'</span>, include_top<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb34-4"></span>
<span id="cb34-5">x <span class="op" style="color: #5E5E5E;">=</span> base_model.output</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;"># add a global spatial average pooling layer</span></span>
<span id="cb34-8">x <span class="op" style="color: #5E5E5E;">=</span> GlobalAveragePooling2D()(x)</span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="co" style="color: #5E5E5E;"># and a logistic layer</span></span>
<span id="cb34-11">predictions <span class="op" style="color: #5E5E5E;">=</span> Dense(<span class="bu" style="color: null;">len</span>(labels), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sigmoid"</span>)(x)</span>
<span id="cb34-12"></span>
<span id="cb34-13">model <span class="op" style="color: #5E5E5E;">=</span> Model(inputs<span class="op" style="color: #5E5E5E;">=</span>base_model.<span class="bu" style="color: null;">input</span>, outputs<span class="op" style="color: #5E5E5E;">=</span>predictions)</span>
<span id="cb34-14">model.<span class="bu" style="color: null;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'adam'</span>, loss<span class="op" style="color: #5E5E5E;">=</span>get_weighted_loss(pos_weights, neg_weights))</span></code></pre></div>
</div>
<p><a name="4"></a> ## Training</p>
<p>With our model ready for training, we could use the <code>model.fit()</code> function in Keras to train our model.</p>
<ul>
<li>We are training on a small subset of the dataset (~1%).<br>
</li>
<li>So what we care about at this point is to make sure that the loss on the training set is decreasing.</li>
</ul>
<p>If we were going to train this model we could use the following code to do this:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">history <span class="op" style="color: #5E5E5E;">=</span> model.fit_generator(train_generator, </span>
<span id="cb35-2">                              validation_data<span class="op" style="color: #5E5E5E;">=</span>valid_generator,</span>
<span id="cb35-3">                              steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, </span>
<span id="cb35-4">                              validation_steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>, </span>
<span id="cb35-5">                              epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb35-6"></span>
<span id="cb35-7">plt.plot(history.history[<span class="st" style="color: #20794D;">'loss'</span>])</span>
<span id="cb35-8">plt.ylabel(<span class="st" style="color: #20794D;">"loss"</span>)</span>
<span id="cb35-9">plt.xlabel(<span class="st" style="color: #20794D;">"epoch"</span>)</span>
<span id="cb35-10">plt.title(<span class="st" style="color: #20794D;">"Training Loss Curve"</span>)</span>
<span id="cb35-11">plt.show()</span></code></pre></div>
<p>In our case, we will alternatively load a pre-trained model.</p>
<p><a name="4-1"></a> ### Training on the Larger Dataset</p>
<p>Given that the original dataset is 40GB+ in size and the training process on the full dataset takes a few hours, I have access to a pre-trained the model on a GPU-equipped machine which provides the weights file from our model (with a batch size of 32 instead) to be used for the rest of the project.</p>
<p>Let’s load our pre-trained weights into the model now:</p>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"></span>
<span id="cb36-2">model.load_weights(<span class="st" style="color: #20794D;">"models/nih/pretrained_model.h5"</span>)</span></code></pre></div>
</div>
<p><a name="5"></a> ## Prediction and Evaluation</p>
<p>Now that we have a model, let’s evaluate it using our test set.</p>
<div class="cell" data-scrolled="true" data-execution_count="59">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"></span>
<span id="cb37-2">predicted_vals <span class="op" style="color: #5E5E5E;">=</span> model.predict_generator(test_generator, steps <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(test_generator))</span></code></pre></div>
</div>
<p><a name="5-1"></a> ### ROC Curve and AUROC For evaluating this model we will use a metric called the AUC (Area Under the Curve) from the ROC (<a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">Receiver Operating Characteristic</a>) curve. This is also referred to as the AUROC value.</p>
<p>The key insight for interpreting this plot is that a curve that the more to the left and the top has more “area” under it, this indicates that the model is performing better.</p>
<ul>
<li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html">roc_curve</a></li>
<li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_auc_score.html">roc_auc_score</a></li>
</ul>
<div class="cell" data-outputid="4f5cc99c-4e1a-421b-fe2d-637df32d6416" data-scrolled="true" data-execution_count="60">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"></span>
<span id="cb38-2">auc_rocs <span class="op" style="color: #5E5E5E;">=</span> util.get_roc_curve(labels, predicted_vals, test_generator)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>For details about the best performing methods and their performance on this dataset, please read the following papers:</p>
<ul>
<li><a href="https://arxiv.org/abs/1711.05225">CheXNet</a></li>
<li><a href="https://arxiv.org/pdf/1901.07031.pdf">CheXpert</a></li>
<li><a href="https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.1002686">ChexNeXt</a></li>
</ul>
<p><a name="5-2"></a> ### Visualizing Learning with GradCAM</p>
<p>One of the challenges of using deep learning in medicine is that the complex architecture used for neural networks makes them much harder to interpret compared to traditional machine learning models (e.g.&nbsp;linear models). There are no easily interpretable model coeffcients.</p>
<p>One of the most common approaches aimed at increasing the interpretability of models for computer vision tasks is to use Class Activation Maps (CAM).</p>
<p>In this section we will use a <a href="https://arxiv.org/abs/1610.02391">GradCAM’s</a> technique to produce a heatmap highlighting the important regions in the image for predicting the pathological condition.</p>
<p>This is done by extracting the gradients of each predicted class, flowing into our model’s final convolutional layer.</p>
<p>Indeed I used this method previously in an <a href="2021-06-19-understanding-cnn-with-cam-class-activation-maps.html">earlier article using fastai’s deep learning library as an alternative to Keras</a>.</p>
<p>It is worth mentioning that GradCAM does not provide a full explanation of the reasoning for each classification probability. However, it is still a useful tool for “debugging” our model and augmenting our prediction so that an expert could validate that a prediction is indeed due to the model focusing on the right regions of the image.</p>
<p>First we will load the small training set and setup to look at the 4 classes with the highest performing AUC measures.</p>
<div class="cell" data-outputid="ade0a4e2-4591-4ba5-ec19-1a3487e3f972" data-scrolled="true" data-execution_count="61">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"></span>
<span id="cb39-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/nih/train-small.csv"</span>)</span>
<span id="cb39-3">IMAGE_DIR <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"data/nih/images-small/"</span></span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;"># only show the labels with top 4 AUC</span></span>
<span id="cb39-6">labels_to_show <span class="op" style="color: #5E5E5E;">=</span> np.take(labels, np.argsort(auc_rocs)[::<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])[:<span class="dv" style="color: #AD0000;">4</span>]</span></code></pre></div>
</div>
<p>Now let’s look at a few specific images.</p>
<div class="cell" data-scrolled="true" data-execution_count="62">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"></span>
<span id="cb40-2">util.compute_gradcam(model, <span class="st" style="color: #20794D;">'00008270_015.png'</span>, IMAGE_DIR, df, labels, labels_to_show)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading original image
Generating gradcam for class Cardiomegaly
Generating gradcam for class Mass
Generating gradcam for class Pneumothorax
Generating gradcam for class Edema</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="9e38a769-e19d-4143-da41-db7a3173a533" data-execution_count="63">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"></span>
<span id="cb42-2">util.compute_gradcam(model, <span class="st" style="color: #20794D;">'00011355_002.png'</span>, IMAGE_DIR, df, labels, labels_to_show)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading original image
Generating gradcam for class Cardiomegaly
Generating gradcam for class Mass
Generating gradcam for class Pneumothorax
Generating gradcam for class Edema</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-27-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="57246709-2662-4590-9198-a412d2f1eea2" data-scrolled="true" data-execution_count="64">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"></span>
<span id="cb44-2">util.compute_gradcam(model, <span class="st" style="color: #20794D;">'00029855_001.png'</span>, IMAGE_DIR, df, labels, labels_to_show)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading original image
Generating gradcam for class Cardiomegaly
Generating gradcam for class Mass
Generating gradcam for class Pneumothorax
Generating gradcam for class Edema</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="681fb2de-194c-465e-c989-133f334b8299" data-execution_count="65">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"></span>
<span id="cb46-2">util.compute_gradcam(model, <span class="st" style="color: #20794D;">'00005410_000.png'</span>, IMAGE_DIR, df, labels, labels_to_show)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading original image
Generating gradcam for class Cardiomegaly
Generating gradcam for class Mass
Generating gradcam for class Pneumothorax
Generating gradcam for class Edema</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays_files/figure-html/cell-29-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">3</span> Conclusion</h2>
<p>In this project we looked at medical image diagnosis by building a state-of-the-art chest X-ray classifier using Keras.</p>
<p>In particular, looked at the following:</p>
<ul>
<li>Pre-processed and prepare a real-world X-ray dataset.</li>
<li>Used transfer learning to retrain a DenseNet model for X-ray image classification.</li>
<li>Learned a technique to handle class imbalance</li>
<li>Measured diagnostic performance by computing the AUC (Area Under the Curve) for the ROC (Receiver Operating Characteristic) curve.</li>
<li>Visualized model activity using GradCAMs.</li>
</ul>


</section>

 ]]></description>
  <category>health</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2022-05-15-medical-diagnosis-chest-xrays.html</guid>
  <pubDate>Sat, 14 May 2022 23:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ai-chest-xray.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The International Classification of Disease System (ICD)</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-03-18-the-international-classification-of-disease.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2022-03-15-mimic-clinicial-outcomes-patient-data.html">earlier article we looked at how we can extract clinical outcomes and patient level data from the MIMIC-III EHR (Electronic Health Record) database</a>. In this article we will look at the history of the International Classification of Diseases (ICD) system, which has been developed collaboratively so that the medical terms and information in death certificates can be grouped together for statistical purposes. In practical examples we will look at how to extract ICD-9 codes from MIMIC III database and visualise them.</p>
</section>
<section id="the-international-classification-of-disease-system-icd" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="the-international-classification-of-disease-system-icd"><span class="header-section-number">2</span> The International Classification of Disease System (ICD)</h2>
<p>The World Health Organization is an agency that works on behalf of 194 member states. The aim of the organization is to promote the best standards in health for all people, regardless social and economic condition. As well as regardless of race, gender, religion and political beliefs. The main principle behind the organization work, is that access to affordable and articulate healthcare is a human right. For this reason, it promotes the fusion of universal health coverage.</p>
<p>There are several determinants that influence human health. This can be biomedical and genetic factors. Health behaviors, socioeconomic factors and environmental factors. The organization recognizes that we need to have common metrics to measure health and wellbeing. And some of those metrics are related to life expectancy, as well as mortality. Other metrics are subjective, and it depends of how well the person feelings. Disability, as well as illness and comorbidity are also measures of health and wellbeing.</p>
<p>The World Health Organisation aims to coordinate action among the member states, in order to intervene and improve health globally. To achieve this, it is required to collect data from patients, and this data will be analyzed from researchers, statisticians and clinicians to estimate indices of health and wellbeing. Technological and machine learning advances can promote healthcare and narrow the gap between rich and poor countries.</p>
<p>In order to collect data that can be compared across different locations and times. We need to have common notations and definitions. For this reason, the World Health Organization maintains a family of international classification schemes. In other words, there is a set of integrated classifications that provide a common language for health information across the world. <strong>The International Classification of Diseases</strong>, is the international standard diagnostic tool. For epidemiology, health management and clinical purposes.</p>
<p>The International Classification of Diseases, have been designed with the aim to describe various aspects of the health and the health systems in a consistent manner. In this way, it helps the development of reliable statistical systems at local, national and international levels. With the aim of improving status and health care. In practice, this process is used to translate diagnosis of diseases and other health problems from words into an alphanumeric code. The usage of the International Classification of Disease system. Provides a systematic way for storage, retrieval and analysis of the data.</p>
<p>The first type of users exposed in these classifications is in a clinic and it includes physician nurses and health workers. They integrate this information and they used it to support decision making for their patients. The second type of users are in administration and this can be health information managers, policymakers, insurers and national health program managers.</p>
<p>This data are also of paramount importance for population, health and epidemiology as well as research. They allow quantifying disability, diseases and risk factors in a global level. And they enable research in decision support system, based on artificial intelligence.</p>
<p>Summarizing, the International Classification of Diseases is one of the oldest and most important classification in medicine. It enables the optimal application of computer technology in the processing and retrieval of clinical information. Importantly, it is recognized internationally. Which enables sound statistical comparison of data, from different regions in different times.</p>
</section>
<section id="the-evolution-of-the-icd-system" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-evolution-of-the-icd-system"><span class="header-section-number">3</span> The Evolution of the ICD System</h2>
<p>The first effort to systematically classify diseases goes back in the 17th century. John Graunt, who was an epidemiologist and statistician, was looking into the death of children who’re born alive, but died before the age of six. He recognized the need to organize mortality data into some logical form and therefore develop the first statistical study of disease called the London Bills of Mortality.</p>
<p>William Farr is considered as the first medical statistician of the general Register Office of England and Wales. He submitted his report on Nomenclature and Statistical Classification of Diseases in 1855. In this report, he included most of those fatal diseases that affect health. In fact, in mid 80s, it was recognized the need of classification of diseases that was uniform and internationally accepted. Farr pointed out that medicine has progressed by that time and many diseases could affect particular organs, pointing out for a classification of diseases related to the organic systems they affect. He also considered previous classifications as largely symptomatic and the arrangements could not be used for statistical analysis.</p>
<p>The beginning of modern classification can be considered as the 1893. The chief of statistical services of Paris prepared a classification based on the principle of distinguishing between general diseases and those localized to a particular organ or anatomical site. Bertillon presented his report on causes of death and incapacity for work, including hospital admissions. Bertillon’s main headings included general diseases, diseases of nervous systems and sense organs, circulatory system, respiratory system, digestive system, and many others. The International Statistical Institute adapted the first edition of international classification system, the so-called the Internationally List of Causes of Death in 1893.</p>
<p>The ICD-10 coding system was endorsed by the 43rd World Health Assembly in May 1990. It came into use in World Health Organization member states as from 1994. ICD-10 involved a thorough rethinking of its structure and an effort to devise a stable and flexible classification which won’t require fundamental changes. Also, the structure of codes have changed from numeric to alphanumeric, which allows for significant expansion. The ICD-11 coding has been adopted by the 72nd World Health Assembly in 2019, and it comes into effect in January 2022. ICD-11 has been designed for digital use and it’s fully electronic. It aims to assist implementation and reduce error in diagnosis while it makes it more adaptable in local countries. The system has an improved ability to code for the quality and safety of health care and highlights socioeconomic factors that directly and indirectly contribute to people’s health. Finally, it also tries to simplify diagnostic descriptions, particularly in relation to mental health.</p>
<p>Summarizing, the need to organize disease data systematically was recognized in the 17th century. However, it wasn’t until the late 80s where the first international list of causes of death was founded. ICD codes are ubiquitously used in medicine and they are necessary to be able to compare statistics across different countries and across different times.</p>
</section>
<section id="icd-9-and-mimic-iii" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="icd-9-and-mimic-iii"><span class="header-section-number">4</span> ICD-9 and MIMIC-III</h2>
<p>ICD-9 is the disease classification system used in MIMIC-III. We will review its main structure, and we are going to see how the ICD codes can help us extract summary statistics from MIMIC-III database for example, to the number and distribution of patients across age which are diagnosed with a specific disease. We’re going to also see how we’re going to be able to put together queries to extract data with relation to the most common ICD codes in the MIMIC database and how these codes are distributed across ICU units.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/icd9-structure.png" class="img-fluid"></p>
<p>The main structure of the ICD-9 coding system consists of three digits that reflect a category and two digits that reflect the cause or the location. The World Health Organization requires a minimum of three-character categories level for international reporting and comparison. Therefore, these three digits always need to be provided with the corresponding number. Whereas the fourth digit is filled with X when there is no further information about the sub-division.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/icd9-chapters.png" class="img-fluid"></p>
<p>Here, we see a more detailed overview of the ICD-9 categories. In the first column, we see the codes related to the three first digits of the ICD-9 code. On the right column, we see the description of each of these categories. We start here with epidemic diseases and then we see diseases like neoplasm, endocrine, nutritional, and metabolic diseases and immunity disorders. We see here diseases of the blood and blood forming organs, mental disorders, and then we see also a number of diseases related with specific systems, such as the nervous system and sense organs, the circulatory system, the respiratory system, the digestive system, the genitourinary system, and so on.</p>
<p>Subsequently, we see developmental diseases, for example, congenital abnormalities. We also see injury and poisoning category. Finally, we see here that the last two categories, the first digit can be a letter. Both of this category offer a supplemental classification. We’re going to see how we can extract those codes from MIMIC-III. ICD codes in MIMIC-III are under the table of <em>Diagnoses_icd</em>.</p>
</section>
<section id="extracting-icd-9-related-information-from-mimic-iii" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="extracting-icd-9-related-information-from-mimic-iii"><span class="header-section-number">5</span> Extracting ICD-9 related information from MIMIC-III</h2>
<section id="number-of-patients-diagnosed-with-hypertension-above-30-years-old" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="number-of-patients-diagnosed-with-hypertension-above-30-years-old"><span class="header-section-number">5.1</span> 1. Number of patients diagnosed with hypertension above 30 years old</h3>
<p>We would like to count the number of patients who were diagnosed with hypertension and are at least 30 years old.</p>
<p>First, we need to combine the Admissions and Patients table to obtain the age (from date of birth and admission time), and filter out all patients younger than 30 years old. ICD9 diagnoses can be found in the Diagnoses_icd table (and descriptions of each code can be found in the D_icd_diagnoses table). We select all ICD-9 codes that are starting with 401, as these are related to hypertension.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb1-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;">SELECT p.subject_id, d.icd9_code, round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Diagnoses_icd d ON p.subject_id = d.subject_id</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;">  INNER JOIN public.Admissions a ON p.subject_id = a.subject_id</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt; 30</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;">  AND icd9_code LIKE '401%'</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb1-12">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb1-13">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>subject_id</th>
      <th>icd9_code</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>10017</td>
      <td>4019</td>
      <td>73.6792</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10019</td>
      <td>4019</td>
      <td>48.9014</td>
    </tr>
    <tr>
      <th>2</th>
      <td>10026</td>
      <td>4010</td>
      <td>300.0020</td>
    </tr>
    <tr>
      <th>3</th>
      <td>10027</td>
      <td>4019</td>
      <td>82.4941</td>
    </tr>
    <tr>
      <th>4</th>
      <td>10033</td>
      <td>4019</td>
      <td>81.6256</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="histogram-of-the-number-of-patients-diagnosed-with-hypertension" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="histogram-of-the-number-of-patients-diagnosed-with-hypertension"><span class="header-section-number">5.2</span> 2. Histogram of the number of patients diagnosed with hypertension</h3>
<p>Instead of counting the number of patients diagnosed with hypertension of 30 years and older, we would also like to see the distribution of hypertension diagnoses across different age groups for all ages. Hence, we do not want to filter out any age ranges.</p>
<p>The approach is very similar to the previous query. However, we now do not filter on age, and also select the age for each patient, to be able to create a histogram across different age ranges.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb2-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;">SELECT p.subject_id, d.icd9_code, round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Diagnoses_icd d ON p.subject_id = d.subject_id</span></span>
<span id="cb2-7"><span class="st" style="color: #20794D;">  INNER JOIN public.Admissions a ON p.subject_id = a.subject_id</span></span>
<span id="cb2-8"><span class="st" style="color: #20794D;">  WHERE icd9_code LIKE '401%'</span></span>
<span id="cb2-9"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb2-11">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb2-12">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>subject_id</th>
      <th>icd9_code</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>10017</td>
      <td>4019</td>
      <td>73.6792</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10019</td>
      <td>4019</td>
      <td>48.9014</td>
    </tr>
    <tr>
      <th>2</th>
      <td>10026</td>
      <td>4010</td>
      <td>300.0020</td>
    </tr>
    <tr>
      <th>3</th>
      <td>10027</td>
      <td>4019</td>
      <td>82.4941</td>
    </tr>
    <tr>
      <th>4</th>
      <td>10033</td>
      <td>4019</td>
      <td>81.6256</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># Remove outlier age </span></span>
<span id="cb3-3">df <span class="op" style="color: #5E5E5E;">=</span> query_output[query_output[<span class="st" style="color: #20794D;">'age'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">300</span>]</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"># Visualize distribution of age:</span></span>
<span id="cb3-5">df[<span class="st" style="color: #20794D;">'age'</span>].hist(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-18-the-international-classification-of-disease_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="most-common-icd-9-codes-across-adults-patients" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="most-common-icd-9-codes-across-adults-patients"><span class="header-section-number">5.3</span> 3. Most common ICD-9 codes across adults patients</h3>
<p>We are interested in the ICD-9 codes sorted by their frequency, and want to select to five ICD-9 codes with the highest frequencies. We are only interested to see these results for adult (age &gt;= 16) patients who have been admitted to the ICU.</p>
<p>First, we combine the Patients and Admissions tables to obtain each patient’s age at time of hospital admission from their date of birth and hospital admission time. We also combine the Icustays tables, to filter out any patients who were not admitted to the ICU. We join the Diagnoses_icd and D_icd_diagnoses tables to get all ICD-9 codes and their descriptions. From the Diagnoses_icd table, we also take into account the priority of each ICD-9 code, as hospital admissions might correspond to multiple ICD-9 codes, but we are only interested in the primary diagnosis.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb5-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;">SELECT diag.hadm_id, diag.icd9_code, d_icd.short_title</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;">FROM public.patients p</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;">INNER JOIN public.admissions a ON p.subject_id = a.subject_id</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;">INNER JOIN public.diagnoses_icd diag ON a.hadm_id = diag.hadm_id</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;">INNER JOIN public.d_icd_diagnoses d_icd ON diag.icd9_code = d_icd.icd9_code</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;">INNER JOIN public.icustays i ON a.hadm_id = i.hadm_id</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;">WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;">AND diag.seq_num = 1</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb5-14">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb5-15">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>hadm_id</th>
      <th>icd9_code</th>
      <th>short_title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>142345</td>
      <td>99591</td>
      <td>Sepsis</td>
    </tr>
    <tr>
      <th>1</th>
      <td>105331</td>
      <td>570</td>
      <td>Acute necrosis of liver</td>
    </tr>
    <tr>
      <th>2</th>
      <td>165520</td>
      <td>0389</td>
      <td>Septicemia NOS</td>
    </tr>
    <tr>
      <th>3</th>
      <td>199207</td>
      <td>81201</td>
      <td>Fx surg nck humerus-clos</td>
    </tr>
    <tr>
      <th>4</th>
      <td>177759</td>
      <td>0389</td>
      <td>Septicemia NOS</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># Print key stats</span></span>
<span id="cb6-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Top 5 ICD-9 codes and their frequencies'</span>)</span>
<span id="cb6-4"><span class="bu" style="color: null;">print</span>(query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>])[<span class="st" style="color: #20794D;">'icd9_code'</span>].value_counts().head())</span>
<span id="cb6-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb6-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Top 5 ICD-9 codes and their frequencies by percentage'</span>)</span>
<span id="cb6-7"><span class="bu" style="color: null;">print</span>(query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>])[<span class="st" style="color: #20794D;">'icd9_code'</span>].value_counts().head() <span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb6-8">    <span class="bu" style="color: null;">len</span>(query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>])[<span class="st" style="color: #20794D;">'icd9_code'</span>]) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb6-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb6-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Top 5 ICD-9 codes Disease Description'</span>)</span>
<span id="cb6-11">most_frequent_icd9s <span class="op" style="color: #5E5E5E;">=</span> np.array(query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>])[<span class="st" style="color: #20794D;">'icd9_code'</span>].value_counts().head().index.values)</span>
<span id="cb6-12">query_output.loc[query_output[<span class="st" style="color: #20794D;">'icd9_code'</span>].isin(most_frequent_icd9s)].drop_duplicates([<span class="st" style="color: #20794D;">'icd9_code'</span>]).drop(<span class="st" style="color: #20794D;">'hadm_id'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Top 5 ICD-9 codes and their frequencies
0389     15
486       6
51881     6
41071     5
4280      4
Name: icd9_code, dtype: int64
 
Top 5 ICD-9 codes and their frequencies by percentage
0389     11.627907
486       4.651163
51881     4.651163
41071     3.875969
4280      3.100775
Name: icd9_code, dtype: float64
 
Top 5 ICD-9 codes Disease Description</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>icd9_code</th>
      <th>short_title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>0389</td>
      <td>Septicemia NOS</td>
    </tr>
    <tr>
      <th>6</th>
      <td>4280</td>
      <td>CHF NOS</td>
    </tr>
    <tr>
      <th>14</th>
      <td>41071</td>
      <td>Subendo infarct, initial</td>
    </tr>
    <tr>
      <th>15</th>
      <td>51881</td>
      <td>Acute respiratry failure</td>
    </tr>
    <tr>
      <th>28</th>
      <td>486</td>
      <td>Pneumonia, organism NOS</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="distribution-of-icd-9-codes-across-care-units" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="distribution-of-icd-9-codes-across-care-units"><span class="header-section-number">5.4</span> 4. Distribution of ICD-9 codes across care units</h3>
<p>Instead of looking at the ICD-9 codes themselves, we will now take a look at the ICD-9 categories. ICD-9 codes can be grouped into nine larger categories (or ten if we have an ‘other’ category).</p>
<ul>
<li>(001-139): Infectious and parasitic diseases, i.e., septicemia, other infectious and parasitic diseases, etc.</li>
<li>(139-239): Neoplasms of digestive organs and intrathoracic organs, etc.</li>
<li>(240-279): Endocrine, nutritional, metabolic, and immunity.</li>
<li>(390-459): Diseases of the circulatory system, i.e., ischemic heart diseases, diseases of pulmonary circulation, dysrhythmias, heart failure, cerebrovascular diseases, etc.</li>
<li>(460-519): Pulmonary diseases, i.e., pneumonia and influenza, chronic obstructive pulmonary disease, etc.</li>
<li>(520-579): Diseases of the digestive system.</li>
<li>(580-629): Diseases of the genitourinary system, i.e., nephritis, nephrotic syndrome, nephrosis, and other diseases of the genitourinary system.</li>
<li>(800-959): Trauma.</li>
<li>(960-979): Poisoning by drugs and biological substances.</li>
</ul>
<p>ICD-codes can start with an m, v or e. These are supplementary classifications that we can classify under ‘Other’. We would like to have the distribution of these ICD-9 categories for all adult (age &gt;= 16) patients across different intensive care units (ICUs).</p>
<p>We need almost the same columns from all tables as for the previous query. However, we now also need the care unit that a patient was admitted to, from the Icustays table, and we need to extract the different ICD-9 categories from the ICD-9 codes.</p>
<div class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb8-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;">SELECT a.hadm_id, i.first_careunit, diag.icd9_code,</span></span>
<span id="cb8-5"><span class="st" style="color: #20794D;">    CASE</span></span>
<span id="cb8-6"><span class="st" style="color: #20794D;">        WHEN (lower(LEFT(diag.icd9_code, 1)) = 'e') </span></span>
<span id="cb8-7"><span class="st" style="color: #20794D;">            OR (lower(LEFT(diag.icd9_code, 1)) = 'v') </span></span>
<span id="cb8-8"><span class="st" style="color: #20794D;">            OR (lower(LEFT(diag.icd9_code, 1)) = 'm') THEN 9</span></span>
<span id="cb8-9"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 0 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 139 THEN 0</span></span>
<span id="cb8-10"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 140 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 239 THEN 1</span></span>
<span id="cb8-11"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 240 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 279 THEN 2</span></span>
<span id="cb8-12"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 390 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 459 THEN 3</span></span>
<span id="cb8-13"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 460 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 519 THEN 4</span></span>
<span id="cb8-14"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 520 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 579 THEN 5</span></span>
<span id="cb8-15"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 580 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 629 THEN 6</span></span>
<span id="cb8-16"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 800 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 959 THEN 7</span></span>
<span id="cb8-17"><span class="st" style="color: #20794D;">        WHEN CAST(LEFT(diag.icd9_code, 3) AS int) &gt;= 960 AND CAST(LEFT(diag.icd9_code, 3) AS int) &lt;= 989 THEN 8</span></span>
<span id="cb8-18"><span class="st" style="color: #20794D;">        ELSE 9</span></span>
<span id="cb8-19"><span class="st" style="color: #20794D;">    END AS icd9_category</span></span>
<span id="cb8-20"><span class="st" style="color: #20794D;">FROM public.admissions a</span></span>
<span id="cb8-21"><span class="st" style="color: #20794D;">INNER JOIN public.icustays i ON a.hadm_id = i.hadm_id</span></span>
<span id="cb8-22"><span class="st" style="color: #20794D;">INNER JOIN public.patients p ON p.subject_id = a.subject_id</span></span>
<span id="cb8-23"><span class="st" style="color: #20794D;">INNER JOIN public.diagnoses_icd diag ON a.hadm_id = diag.hadm_id</span></span>
<span id="cb8-24"><span class="st" style="color: #20794D;">INNER JOIN public.d_icd_diagnoses d_icd ON diag.icd9_code = d_icd.icd9_code</span></span>
<span id="cb8-25"><span class="st" style="color: #20794D;">WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb8-26"><span class="st" style="color: #20794D;">AND diag.seq_num = 1</span></span>
<span id="cb8-27"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb8-29">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb8-30">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>hadm_id</th>
      <th>first_careunit</th>
      <th>icd9_code</th>
      <th>icd9_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>142345</td>
      <td>MICU</td>
      <td>99591</td>
      <td>9</td>
    </tr>
    <tr>
      <th>1</th>
      <td>105331</td>
      <td>MICU</td>
      <td>570</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>165520</td>
      <td>MICU</td>
      <td>0389</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>199207</td>
      <td>CCU</td>
      <td>81201</td>
      <td>7</td>
    </tr>
    <tr>
      <th>4</th>
      <td>177759</td>
      <td>MICU</td>
      <td>0389</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Define function for icd-9 categories per icu</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">def</span> icu_icd9_categories(df):</span>
<span id="cb9-3">    </span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;"># Replace category codes with names</span></span>
<span id="cb9-5">    categories_dict <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb9-6">        <span class="dv" style="color: #AD0000;">0</span>: <span class="st" style="color: #20794D;">'Infectious and parasitic diseases'</span>,</span>
<span id="cb9-7">        <span class="dv" style="color: #AD0000;">1</span>: <span class="st" style="color: #20794D;">'Neoplasms of digestive organs and intrathoracic organs, etc'</span>,</span>
<span id="cb9-8">        <span class="dv" style="color: #AD0000;">2</span>: <span class="st" style="color: #20794D;">'Endocrine, nutritional, metabolic, and immunity'</span>,</span>
<span id="cb9-9">        <span class="dv" style="color: #AD0000;">3</span>: <span class="st" style="color: #20794D;">'Diseases of the circulatory system'</span>,</span>
<span id="cb9-10">        <span class="dv" style="color: #AD0000;">4</span>: <span class="st" style="color: #20794D;">'Pulmonary diseases'</span>,</span>
<span id="cb9-11">        <span class="dv" style="color: #AD0000;">5</span>: <span class="st" style="color: #20794D;">'Diseases of the digestive system'</span>,</span>
<span id="cb9-12">        <span class="dv" style="color: #AD0000;">6</span>: <span class="st" style="color: #20794D;">'Diseases of the genitourinary system'</span>,</span>
<span id="cb9-13">        <span class="dv" style="color: #AD0000;">7</span>: <span class="st" style="color: #20794D;">'Trauma'</span>,</span>
<span id="cb9-14">        <span class="dv" style="color: #AD0000;">8</span>: <span class="st" style="color: #20794D;">'Poisoning by drugs and biological substances'</span>,</span>
<span id="cb9-15">        <span class="dv" style="color: #AD0000;">9</span>: <span class="st" style="color: #20794D;">'Other'</span>}</span>
<span id="cb9-16">    df[<span class="st" style="color: #20794D;">'icd9_category'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'icd9_category'</span>].<span class="bu" style="color: null;">map</span>(categories_dict)   </span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;"># Get list of ICUs</span></span>
<span id="cb9-18">    icu_list <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'first_careunit'</span>].unique()</span>
<span id="cb9-19">    </span>
<span id="cb9-20">    <span class="co" style="color: #5E5E5E;"># Plot pie chart for each ICU</span></span>
<span id="cb9-21">    fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">40</span>,<span class="dv" style="color: #AD0000;">50</span>))</span>
<span id="cb9-22">    subplot <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;">for</span> icu <span class="kw" style="color: #003B4F;">in</span> icu_list:</span>
<span id="cb9-24">        icu_df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">'first_careunit'</span>] <span class="op" style="color: #5E5E5E;">==</span> icu]</span>
<span id="cb9-25">        icu_df <span class="op" style="color: #5E5E5E;">=</span> icu_df.drop_duplicates()</span>
<span id="cb9-26">        pie_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(icu_df[<span class="st" style="color: #20794D;">'icd9_category'</span>].value_counts() <span class="op" style="color: #5E5E5E;">/</span> icu_df.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb9-27">        pie_df <span class="op" style="color: #5E5E5E;">=</span> pie_df.reset_index()</span>
<span id="cb9-28">        plt.subplot(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">1</span>, subplot)</span>
<span id="cb9-29">        plt.pie(pie_df[<span class="st" style="color: #20794D;">'icd9_category'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>pie_df[<span class="st" style="color: #20794D;">'index'</span>], autopct<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%1.1f%%</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb9-30">        plt.title(<span class="st" style="color: #20794D;">'Disease categories for '</span> <span class="op" style="color: #5E5E5E;">+</span> icu)</span>
<span id="cb9-31">        subplot <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb9-32">          </span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;"># Print key stats</span></span>
<span id="cb9-34">icu_icd9_categories(query_output)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-18-the-international-classification-of-disease_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>health</category>
  <category>electronic-health-records</category>
  <guid>http://livingdatalab.com/posts/2022-03-18-the-international-classification-of-disease.html</guid>
  <pubDate>Fri, 18 Mar 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ehr4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MIMIC-III (EHR) Clinical Outcomes &amp; Patient Level Data</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2022-03-14-using-mimic3-ehr-database.html">earlier article we looked at how we can extract some useful descriptive statistics from the MIMIC-III EHR (Electronic Health Record) database</a>. In this article we will further explore the MIMIC-III Dataset, looking at how we examine clinical outcomes as well as extracting indivdual patient level data.</p>
</section>
<section id="mimic-iii-and-clinical-outcomes" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="mimic-iii-and-clinical-outcomes"><span class="header-section-number">2</span> MIMIC-III and Clinical Outcomes</h2>
<p>Mortality is the most commonly used outcome in prediction studies in critical care, and in fact potentially across all of medicine. Since it is a strong surrogate for realness, machine learning practitioners use this signal to infer the relationship between clinical data and patient outcome. Mortality is a deceptively simple outcome to define. In fact, the nature of retrospective data often complicates matters. For example, in MIMIC database, a number of patients have two consecutive hospitalizations in which they die as organ donors. These consecutive hospitalizations are treated as distinct hospital admissions.</p>
<p>However, the underlying reason is the same. Mortality is susceptible to selection bias based on the source of the information. For example, many studies report hospital mortality as it is feasible to collect this information. However, the number of deaths recorded in the hospital database might not include the number of people that have died after they have been discharged and went to the home care. This adds noise to the outcome.</p>
<p>Other important factors in defining mortality as an outcome are controllable by the researcher. For example, defining mortality as death within 30 days of admission will provide a stronger signal for immediate physiological abnormality, which is likely related to the patient’s admission. On the other hand, one-year mortality will emphasize chronic illness in parallel conditions.</p>
<p>in this article we will see how we can extract the mortality numbers of adult patients who were admitted to the ICU and the distribution of this mortality numbers across the different ICUs in MIMIC dataset. If a patient’s death was registered while the patient was in ICU, or six hours before being admitted to, or six hours after leaving the ICU, we will assume that the patient has died in the intensive care unit.</p>
</section>
<section id="extract-mortality-numbers" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="extract-mortality-numbers"><span class="header-section-number">3</span> Extract mortality numbers</h2>
<section id="mortality-numbers-in-icu-across-care-units" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="mortality-numbers-in-icu-across-care-units"><span class="header-section-number">3.1</span> 1. Mortality numbers in ICU across care units</h3>
<p>We would like to know the mortality numbers of adult patients who were admitted to the ICU, and the distribution of these mortality numbers across the different ICUs. If a patient’s death was registered while the patient was on the ICU, or 6 hours before being admitted to, or 6 hours after leaving the ICU, we assume that the patient has died on the ICU.</p>
<p>The following diagram visualizes the SQL query that is needed to obtain the ICU mortality numbers. We combine the Patients and Icustays tables based on the subject identifier, and select each patient’s date of birth and date of death, and the care unit and admission time corresponding to each ICU stay. The admission time and date of death together indicate whether or not a patient died on the ICU. The age (age &gt;= 16) is again combined from the admission time and date of birth.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql6.png" class="img-fluid"></p>
<div class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb1-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, </span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;">round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age,</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;">CASE WHEN p.dod IS NOT NULL </span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;">     AND p.dod &gt;= i.intime - interval '6 hour'</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;">     AND p.dod &lt;= i.outtime + interval '6 hour' THEN 'Died in ICU'</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;">     ELSE 'Not dead' END AS icu_mortality</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;">FROM public.patients p</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;">INNER JOIN public.icustays i ON p.subject_id = i.subject_id</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;">WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16;</span></span>
<span id="cb1-13"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb1-15">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb1-16">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="155">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>first_careunit</th>
      <th>age</th>
      <th>icu_mortality</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>MICU</td>
      <td>70.6378</td>
      <td>Not dead</td>
    </tr>
    <tr>
      <th>1</th>
      <td>MICU</td>
      <td>36.1923</td>
      <td>Died in ICU</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>87.0874</td>
      <td>Died in ICU</td>
    </tr>
    <tr>
      <th>3</th>
      <td>CCU</td>
      <td>73.6875</td>
      <td>Not dead</td>
    </tr>
    <tr>
      <th>4</th>
      <td>MICU</td>
      <td>48.9015</td>
      <td>Died in ICU</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="156">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Print overall mortality</span></span>
<span id="cb2-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Overall mortality - Totals'</span>)</span>
<span id="cb2-4"><span class="bu" style="color: null;">print</span>(query_output[<span class="st" style="color: #20794D;">'icu_mortality'</span>].value_counts())</span>
<span id="cb2-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb2-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Overall mortality - Percentages'</span>)</span>
<span id="cb2-7"><span class="bu" style="color: null;">print</span>(query_output[<span class="st" style="color: #20794D;">'icu_mortality'</span>].value_counts()<span class="op" style="color: #5E5E5E;">/</span>query_output.shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Print mortality per icu</span></span>
<span id="cb2-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb2-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality per ICU - Totals'</span>)</span>
<span id="cb2-12">result <span class="op" style="color: #5E5E5E;">=</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>,<span class="st" style="color: #20794D;">'icu_mortality'</span>])[<span class="st" style="color: #20794D;">'icu_mortality'</span>].count()</span>
<span id="cb2-13"><span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb2-14"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb2-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality per ICU - Percentages'</span>)</span>
<span id="cb2-16">result <span class="op" style="color: #5E5E5E;">=</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>,<span class="st" style="color: #20794D;">'icu_mortality'</span>])[<span class="st" style="color: #20794D;">'icu_mortality'</span>].count() <span class="op" style="color: #5E5E5E;">/</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>])[<span class="st" style="color: #20794D;">'icu_mortality'</span>].count() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-17"><span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;"># Print mortality percentages accross all icu</span></span>
<span id="cb2-20"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb2-21"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality accross all ICUs'</span>)</span>
<span id="cb2-22">dead_only_df <span class="op" style="color: #5E5E5E;">=</span> query_output[query_output[<span class="st" style="color: #20794D;">'icu_mortality'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Died in ICU'</span>]</span>
<span id="cb2-23">icu_percentages_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dead_only_df.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>])[<span class="st" style="color: #20794D;">'icu_mortality'</span>].count())</span>
<span id="cb2-24">icu_percentages_df <span class="op" style="color: #5E5E5E;">=</span> icu_percentages_df.reset_index()</span>
<span id="cb2-25">icu_percentages_df[<span class="st" style="color: #20794D;">'icu_mortality'</span>] <span class="op" style="color: #5E5E5E;">=</span> icu_percentages_df[<span class="st" style="color: #20794D;">'icu_mortality'</span>] <span class="op" style="color: #5E5E5E;">/</span> dead_only_df.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-26">icu_percentages_df.head()</span>
<span id="cb2-27"></span>
<span id="cb2-28">fig1, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb2-29">ax1.pie(icu_percentages_df[<span class="st" style="color: #20794D;">'icu_mortality'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>icu_percentages_df[<span class="st" style="color: #20794D;">'first_careunit'</span>], autopct<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%1.1f%%</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb2-30">ax1.axis(<span class="st" style="color: #20794D;">'equal'</span>)  </span>
<span id="cb2-31">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overall mortality - Totals
Not dead       105
Died in ICU     31
Name: icu_mortality, dtype: int64
 
Overall mortality - Percentages
Not dead       77.205882
Died in ICU    22.794118
Name: icu_mortality, dtype: float64
 
Mortality per ICU - Totals
first_careunit  icu_mortality
CCU             Died in ICU       5
                Not dead         14
CSRU            Died in ICU       1
                Not dead          5
MICU            Died in ICU      18
                Not dead         59
SICU            Died in ICU       4
                Not dead         19
TSICU           Died in ICU       3
                Not dead          8
Name: icu_mortality, dtype: int64
 
Mortality per ICU - Percentages
first_careunit  icu_mortality
CCU             Died in ICU      26.315789
                Not dead         73.684211
CSRU            Died in ICU      16.666667
                Not dead         83.333333
MICU            Died in ICU      23.376623
                Not dead         76.623377
SICU            Died in ICU      17.391304
                Not dead         82.608696
TSICU           Died in ICU      27.272727
                Not dead         72.727273
Name: icu_mortality, dtype: float64
 
Mortality accross all ICUs</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="mortality-numbers-in-hospital-across-care-units" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="mortality-numbers-in-hospital-across-care-units"><span class="header-section-number">3.2</span> 2. Mortality numbers in hospital across care units</h3>
<p>We would also like to know the mortality numbers of adult patients who were admitted to hospital, and the distribution of those numbers across different ICUs. In this case, there is a variable called ‘hospital_expire_flag’ in the Admissions table that defines if a patient has died in hospital.</p>
<p>The Patients and Icustays tables are combined based on the subject’s unique identifier, and the Admissions table is also joined based on the hospital admission’s identifier. We will need to select the hospital admission’s identifier, care unit, admission time and ‘hospital_expire_flag’. We also need the date of birth to obtain the age (age &gt;= 16).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql7.png" class="img-fluid"></p>
<div class="cell" data-execution_count="157">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb4-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, a.hospital_expire_flag, round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;">  FROM public.Icustays i</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;">  INNER JOIN public.patients p ON i.subject_id = p.subject_id</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;">  INNER JOIN public.Admissions a ON i.hadm_id = a.hadm_id</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb4-11">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb4-12">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="157">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>first_careunit</th>
      <th>hospital_expire_flag</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>MICU</td>
      <td>0</td>
      <td>70.6378</td>
    </tr>
    <tr>
      <th>1</th>
      <td>MICU</td>
      <td>1</td>
      <td>36.1923</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>1</td>
      <td>87.0874</td>
    </tr>
    <tr>
      <th>3</th>
      <td>CCU</td>
      <td>0</td>
      <td>73.6792</td>
    </tr>
    <tr>
      <th>4</th>
      <td>MICU</td>
      <td>1</td>
      <td>48.9014</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="158">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># Print overall mortality</span></span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Overall mortality - Totals'</span>)</span>
<span id="cb5-4"><span class="bu" style="color: null;">print</span>(query_output[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].value_counts())</span>
<span id="cb5-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Overall mortality - Percentages'</span>)</span>
<span id="cb5-7"><span class="bu" style="color: null;">print</span>(query_output[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].value_counts()<span class="op" style="color: #5E5E5E;">/</span>query_output.shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"># Print mortality per icu</span></span>
<span id="cb5-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality per ICU - Totals'</span>)</span>
<span id="cb5-12">result <span class="op" style="color: #5E5E5E;">=</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>,<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>])[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].count()</span>
<span id="cb5-13"><span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb5-14"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality per ICU - Percentages'</span>)</span>
<span id="cb5-16">result <span class="op" style="color: #5E5E5E;">=</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>,<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>])[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].count() <span class="op" style="color: #5E5E5E;">/</span> query_output.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>])[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].count() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb5-17"><span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;"># Print mortality percentages accross all icu</span></span>
<span id="cb5-20"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-21"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Mortality accross all ICUs'</span>)</span>
<span id="cb5-22">dead_only_df <span class="op" style="color: #5E5E5E;">=</span> query_output[query_output[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb5-23">icu_percentages_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dead_only_df.groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>])[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>].count())</span>
<span id="cb5-24">icu_percentages_df <span class="op" style="color: #5E5E5E;">=</span> icu_percentages_df.reset_index()</span>
<span id="cb5-25">icu_percentages_df[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>] <span class="op" style="color: #5E5E5E;">=</span> icu_percentages_df[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>] <span class="op" style="color: #5E5E5E;">/</span> dead_only_df.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb5-26">icu_percentages_df.head()</span>
<span id="cb5-27"></span>
<span id="cb5-28">fig1, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb5-29">ax1.pie(icu_percentages_df[<span class="st" style="color: #20794D;">'hospital_expire_flag'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>icu_percentages_df[<span class="st" style="color: #20794D;">'first_careunit'</span>], autopct<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%1.1f%%</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb5-30">ax1.axis(<span class="st" style="color: #20794D;">'equal'</span>)  </span>
<span id="cb5-31">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overall mortality - Totals
0    90
1    46
Name: hospital_expire_flag, dtype: int64
 
Overall mortality - Percentages
0    66.176471
1    33.823529
Name: hospital_expire_flag, dtype: float64
 
Mortality per ICU - Totals
first_careunit  hospital_expire_flag
CCU             0                       13
                1                        6
CSRU            0                        5
                1                        1
MICU            0                       52
                1                       25
SICU            0                       16
                1                        7
TSICU           0                        4
                1                        7
Name: hospital_expire_flag, dtype: int64
 
Mortality per ICU - Percentages
first_careunit  hospital_expire_flag
CCU             0                       68.421053
                1                       31.578947
CSRU            0                       83.333333
                1                       16.666667
MICU            0                       67.532468
                1                       32.467532
SICU            0                       69.565217
                1                       30.434783
TSICU           0                       36.363636
                1                       63.636364
Name: hospital_expire_flag, dtype: float64
 
Mortality accross all ICUs</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="extract-length-of-stay-numbers" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="extract-length-of-stay-numbers"><span class="header-section-number">4</span> Extract length of stay numbers</h2>
<section id="length-of-stay-on-the-icu-across-care-units" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="length-of-stay-on-the-icu-across-care-units"><span class="header-section-number">4.1</span> 1. Length of stay on the ICU across care units</h3>
<p>We would like to know how many days each patient has to stay on the ICU. We want to know the median, lower quantile and upper quantile for the length of stay, and also these values for each different ICU. As for all queries, we only select adult patients (age &gt;= 16).</p>
<p>The length of stay on the ICU can be found in the Icustays table. We also need the corresponding care unit and time of admission of each ICU admission. To get the date of birth for each patient (and hence the age, computed from the admission time and date of birth), we combine the Icustays and Patients tables.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql8.png" class="img-fluid"></p>
<div class="cell" data-execution_count="159">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb7-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb7-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, i.los, round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;">  FROM public.Icustays i</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;">  INNER JOIN public.patients p ON i.subject_id = p.subject_id</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb7-10">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb7-11">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="159">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>first_careunit</th>
      <th>los</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>MICU</td>
      <td>1.6325</td>
      <td>70.6378</td>
    </tr>
    <tr>
      <th>1</th>
      <td>MICU</td>
      <td>13.8507</td>
      <td>36.1923</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>2.6499</td>
      <td>87.0874</td>
    </tr>
    <tr>
      <th>3</th>
      <td>CCU</td>
      <td>2.1436</td>
      <td>73.6875</td>
    </tr>
    <tr>
      <th>4</th>
      <td>MICU</td>
      <td>1.2938</td>
      <td>48.9015</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="160">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># Define function for descriptive stats 5 number summary for a field per icu</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">def</span> icu_descriptive_stats(field, df, boxplot_title):</span>
<span id="cb8-4">    </span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;"># Get list of ICUs</span></span>
<span id="cb8-6">    icu_list <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'first_careunit'</span>].unique()</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;"># Plot descriptive stats for each ICU</span></span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;">for</span> icu <span class="kw" style="color: #003B4F;">in</span> icu_list:</span>
<span id="cb8-9">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb8-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Descriptive statistics for '</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icu) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' by '</span> <span class="op" style="color: #5E5E5E;">+</span> field)</span>
<span id="cb8-11">        icu_df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">'first_careunit'</span>] <span class="op" style="color: #5E5E5E;">==</span> icu]</span>
<span id="cb8-12">        <span class="bu" style="color: null;">print</span>(icu_df[field].describe())   </span>
<span id="cb8-13">       </span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;"># Plot box plot of ICU by field</span></span>
<span id="cb8-15">    plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb8-16">    sns.boxplot(data<span class="op" style="color: #5E5E5E;">=</span>df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'first_careunit'</span>, y<span class="op" style="color: #5E5E5E;">=</span>field)</span>
<span id="cb8-17">    plt.xlabel(<span class="st" style="color: #20794D;">'ICU'</span>)</span>
<span id="cb8-18">    plt.title(boxplot_title)   </span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;"># 5 number summary all ICUs for los (length of stay within icu)</span></span>
<span id="cb8-21">icu_descriptive_stats(<span class="st" style="color: #20794D;">'los'</span>, query_output, <span class="st" style="color: #20794D;">'ICU by Length of stay in days within ICU (los)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 
Descriptive statistics for MICU by los
count    77.000000
mean      3.955345
std       5.193230
min       0.190400
25%       1.135800
50%       1.925200
75%       4.101400
max      31.123500
Name: los, dtype: float64
 
Descriptive statistics for CCU by los
count    19.000000
mean      5.753900
std       7.024671
min       0.879900
25%       1.862600
50%       2.883300
75%       4.242450
max      24.996800
Name: los, dtype: float64
 
Descriptive statistics for SICU by los
count    23.000000
mean      5.668461
std       8.751901
min       0.743700
25%       1.910350
50%       2.405600
75%       5.022700
max      35.406500
Name: los, dtype: float64
 
Descriptive statistics for CSRU by los
count    6.000000
mean     3.631350
std      3.199466
min      0.901700
25%      1.464500
50%      2.084000
75%      6.010175
max      8.141500
Name: los, dtype: float64
 
Descriptive statistics for TSICU by los
count    11.000000
mean      3.589609
std       6.422052
min       0.105900
25%       0.647600
50%       1.276200
75%       3.110500
max      22.389500
Name: los, dtype: float64</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="length-of-stay-in-hospital-across-care-units" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="length-of-stay-in-hospital-across-care-units"><span class="header-section-number">4.2</span> 2. Length of stay in hospital across care units</h3>
<p>This query is almost similar to the previous one, but now we are interested in the length of stay (in days) of adult patients in hospital instead of on the ICUs. We are also interested to know the distribution of those values across ICUs.</p>
<p>We combine the Patients and Icustays tables based on the subject identifier, and the Admissions table based on the unique hospital admission identifier. This time, we use date of birth and time of admission to the hospital to compute age, and filter on it using age &gt;= 16. There is no variable for length of stay in hospital, but we can compute it by subtracting the discharge time from the admission time. Moreover, we will need the ICU the patient is admitted to. The unique hospital admission identifier is used to make sure each hospital admission corresponds to only one ICU (we use the hospital admission identifier to remove duplicates).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql9.png" class="img-fluid"></p>
<div class="cell" data-execution_count="161">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb10-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""  </span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, a.hadm_id, a.dischtime, a.admittime, round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age, </span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;">round((EXTRACT(EPOCH FROM (a.dischtime-a.admittime))/60/60/24) :: NUMERIC, 4) as hospital_los</span></span>
<span id="cb10-6"><span class="st" style="color: #20794D;">  FROM public.Icustays i</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;">  INNER JOIN public.patients p ON i.subject_id = p.subject_id</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;">  INNER JOIN public.Admissions a ON i.hadm_id = a.hadm_id</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb10-10"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb10-12">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;"># Drop duplicates based on unique hospital admission id</span></span>
<span id="cb10-14">query_output <span class="op" style="color: #5E5E5E;">=</span> query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>])</span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;"># Remove outliers</span></span>
<span id="cb10-16">query_output <span class="op" style="color: #5E5E5E;">=</span> query_output[query_output[<span class="st" style="color: #20794D;">'hospital_los'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>]</span>
<span id="cb10-17">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="161">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>first_careunit</th>
      <th>hadm_id</th>
      <th>dischtime</th>
      <th>admittime</th>
      <th>age</th>
      <th>hospital_los</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>MICU</td>
      <td>142345</td>
      <td>2164-11-01 17:15:00</td>
      <td>2164-10-23 21:09:00</td>
      <td>70.6378</td>
      <td>8.8375</td>
    </tr>
    <tr>
      <th>1</th>
      <td>MICU</td>
      <td>105331</td>
      <td>2126-08-28 18:59:00</td>
      <td>2126-08-14 22:32:00</td>
      <td>36.1923</td>
      <td>13.8521</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>165520</td>
      <td>2125-10-07 15:13:00</td>
      <td>2125-10-04 23:36:00</td>
      <td>87.0874</td>
      <td>2.6507</td>
    </tr>
    <tr>
      <th>3</th>
      <td>CCU</td>
      <td>199207</td>
      <td>2149-06-03 18:42:00</td>
      <td>2149-05-26 17:19:00</td>
      <td>73.6792</td>
      <td>8.0576</td>
    </tr>
    <tr>
      <th>4</th>
      <td>MICU</td>
      <td>177759</td>
      <td>2163-05-15 12:00:00</td>
      <td>2163-05-14 20:43:00</td>
      <td>48.9014</td>
      <td>0.6368</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="162">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># 5 number summary all ICUs for los (length of stay in hospital)</span></span>
<span id="cb11-3">icu_descriptive_stats(<span class="st" style="color: #20794D;">'hospital_los'</span>, query_output, <span class="st" style="color: #20794D;">'ICU by length of stay in days in Hospital accross care units (hospital_los)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 
Descriptive statistics for MICU by hospital_los
count    73.000000
mean      8.073463
std       6.847850
min       0.144400
25%       3.903500
50%       5.988200
75%       9.797900
max      36.011800
Name: hospital_los, dtype: float64
 
Descriptive statistics for CCU by hospital_los
count    16.000000
mean      8.274125
std       6.723373
min       0.959000
25%       2.949825
50%       6.618750
75%      11.067150
max      24.997900
Name: hospital_los, dtype: float64
 
Descriptive statistics for SICU by hospital_los
count    22.000000
mean     11.616982
std      10.893085
min       2.107600
25%       3.697600
50%       8.138900
75%      13.385575
max      39.697200
Name: hospital_los, dtype: float64
 
Descriptive statistics for CSRU by hospital_los
count     6.000000
mean      7.588333
std       4.976149
min       0.770800
25%       4.284925
50%       8.046200
75%      12.027300
max      12.281300
Name: hospital_los, dtype: float64
 
Descriptive statistics for TSICU by hospital_los
count    11.000000
mean      5.184909
std       6.637594
min       0.038200
25%       0.760750
50%       2.320100
75%       7.488200
max      22.390300
Name: hospital_los, dtype: float64</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="extracting-vital-signs-for-a-single-patient-from-mimic-iii" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="extracting-vital-signs-for-a-single-patient-from-mimic-iii"><span class="header-section-number">5</span> Extracting Vital Signs for a single patient from MIMIC-III</h2>
<p>It is useful to be able to extract vital signs and medication of a single patient that was admitted to an intensive care unit, for example we might need to extract clinical variables across patients such as lab exams, sign and wave forms, as well as doctor reports and prescriptions. For thsi example we will pick randomly an ICU stay identifier and the corresponding subject identifier. We will then look the data related to this patient and this ICU stay admission.</p>
<section id="hospital-admission-of-a-single-patient" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="hospital-admission-of-a-single-patient"><span class="header-section-number">5.1</span> 1. Hospital admission of a single patient</h3>
<p>First of all we would like to get the hospital admission of a single patient during a single ICU stay. We want to have table with the patient’s unique subject identifier, hospital identifier, the admission type, the diagnosis, the ICU stay identifier, the first and last care unit that he/she was admitted to, and the time of admission to the ICU. We also want to choose for our example a patient who died in-hospital.</p>
<p>We will need the Admissions, Patients, and Icustays tables to collect the information that we need. We join the three tables, and find only the patients who have died i.e.&nbsp;where hospital_expire_flag is 1.</p>
<div class="cell" data-execution_count="163">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># Load admissions</span></span>
<span id="cb13-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;">SELECT ad.subject_id, ad.hadm_id, ad.admission_type, ad.diagnosis, </span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;">    ic.icustay_id, ic.first_careunit, ic.last_careunit, ic.intime as icu_intime, </span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;">    ad.hospital_expire_flag, pa.expire_flag</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;">FROM admissions ad</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;">INNER JOIN icustays ic</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;">ON ad.subject_id = ic.subject_id</span></span>
<span id="cb13-10"><span class="st" style="color: #20794D;">INNER JOIN patients pa</span></span>
<span id="cb13-11"><span class="st" style="color: #20794D;">ON ad.subject_id = pa.subject_id</span></span>
<span id="cb13-12"><span class="st" style="color: #20794D;">WHERE ad.hospital_expire_flag = 1 </span></span>
<span id="cb13-13"><span class="st" style="color: #20794D;">ORDER BY ic.intime</span></span>
<span id="cb13-14"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb13-15"></span>
<span id="cb13-16">admissions <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb13-17"></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;"># Show the (first few) rows of admissions:</span></span>
<span id="cb13-19">admissions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="163">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>subject_id</th>
      <th>hadm_id</th>
      <th>admission_type</th>
      <th>diagnosis</th>
      <th>icustay_id</th>
      <th>first_careunit</th>
      <th>last_careunit</th>
      <th>icu_intime</th>
      <th>hospital_expire_flag</th>
      <th>expire_flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>10102</td>
      <td>164869</td>
      <td>EMERGENCY</td>
      <td>CHRONIC MYELOGENOUS LEUKEMIA;TRANSFUSION REACTION</td>
      <td>223870</td>
      <td>MICU</td>
      <td>MICU</td>
      <td>2105-06-08 20:06:06</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10076</td>
      <td>198503</td>
      <td>EMERGENCY</td>
      <td>LUNG CANCER;SHORTNESS OF BREATH</td>
      <td>201006</td>
      <td>MICU</td>
      <td>MICU</td>
      <td>2107-03-24 04:06:14</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>43746</td>
      <td>167181</td>
      <td>EMERGENCY</td>
      <td>METASTIC MELANOMA;ANEMIA</td>
      <td>289236</td>
      <td>SICU</td>
      <td>SICU</td>
      <td>2111-01-07 16:36:48</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>43746</td>
      <td>167181</td>
      <td>EMERGENCY</td>
      <td>METASTIC MELANOMA;ANEMIA</td>
      <td>224458</td>
      <td>SICU</td>
      <td>SICU</td>
      <td>2111-01-12 15:26:49</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>42066</td>
      <td>171628</td>
      <td>EMERGENCY</td>
      <td>TRACHEAL STENOSIS</td>
      <td>244243</td>
      <td>TSICU</td>
      <td>TSICU</td>
      <td>2112-02-04 14:49:33</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="164">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Select a single ICU stay. We will select one</span></span>
<span id="cb14-2">icustay_id <span class="op" style="color: #5E5E5E;">=</span> admissions[<span class="st" style="color: #20794D;">'icustay_id'</span>].iloc[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb14-3">icustay_id</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="164">
<pre><code>289236</code></pre>
</div>
</div>
</section>
<section id="all-charted-events-of-a-single-patient" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="all-charted-events-of-a-single-patient"><span class="header-section-number">5.2</span> 2. All charted events of a single patient</h3>
<p>Charted events contain information such as heart rate and respiratory rate of a patient. We would like all charted events of a single patient, along with the time of the charted events, the time between admission to the ICU and the charted event, the label corresponding to the event, and the value and measurement unit of the event.</p>
<p>We need the Chartevents and Icustays tables to get the charted events for a single patient on the ICU. We also join the D_items table to get the label of a charted event. Moreover, we filter on a specific ICU stay ID to get the data for a single patient and single ICU admission.</p>
<div class="cell" data-execution_count="165">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Load chart events</span></span>
<span id="cb16-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb16-4"><span class="st" style="color: #20794D;">SELECT  ic.icustay_id, ce.charttime, ce.charttime - ic.intime AS icutime, di.label, ce.value, ce.valuenum, ce.valueuom</span></span>
<span id="cb16-5"><span class="st" style="color: #20794D;">FROM Chartevents ce</span></span>
<span id="cb16-6"><span class="st" style="color: #20794D;">INNER JOIN D_items as di</span></span>
<span id="cb16-7"><span class="st" style="color: #20794D;">ON ce.itemid = di.itemid</span></span>
<span id="cb16-8"><span class="st" style="color: #20794D;">INNER JOIN icustays ic</span></span>
<span id="cb16-9"><span class="st" style="color: #20794D;">ON ce.icustay_id = ic.icustay_id</span></span>
<span id="cb16-10"><span class="st" style="color: #20794D;">WHERE ic.icustay_id = """</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icustay_id) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">""" </span></span>
<span id="cb16-11"><span class="st" style="color: #20794D;">ORDER BY ce.charttime</span></span>
<span id="cb16-12"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">chartevents <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb16-15"></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;"># Show the (first few) rows of admissions:</span></span>
<span id="cb16-17">chartevents.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="165">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>icustay_id</th>
      <th>charttime</th>
      <th>icutime</th>
      <th>label</th>
      <th>value</th>
      <th>valuenum</th>
      <th>valueuom</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>289236</td>
      <td>2111-01-07 15:00:00</td>
      <td>-1 days +22:23:12</td>
      <td>Head of Bed</td>
      <td>30 Degrees</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
    <tr>
      <th>1</th>
      <td>289236</td>
      <td>2111-01-07 15:00:00</td>
      <td>-1 days +22:23:12</td>
      <td>Activity</td>
      <td>Bedrest</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>289236</td>
      <td>2111-01-07 15:00:00</td>
      <td>-1 days +22:23:12</td>
      <td>Turn</td>
      <td>Side to Side</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
    <tr>
      <th>3</th>
      <td>289236</td>
      <td>2111-01-07 15:00:00</td>
      <td>-1 days +22:23:12</td>
      <td>Assistance Device</td>
      <td>2 Person Assist</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
    <tr>
      <th>4</th>
      <td>289236</td>
      <td>2111-01-07 15:00:00</td>
      <td>-1 days +22:23:12</td>
      <td>Position</td>
      <td>Left Side</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="all-outputs-recorded-during-an-icu-stay-of-a-single-patient" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="all-outputs-recorded-during-an-icu-stay-of-a-single-patient"><span class="header-section-number">5.3</span> 3. All outputs recorded during an ICU stay of a single patient</h3>
<p>Output events are also recorded during an ICU stay. We would like to collect the time of the output event, the time since admission to the ICU, the label of the event, the value and the corresponding measurement event.</p>
<p>The query is similar to the previous query, however, this time we will need the Outputevents table and combine it with the Icustays and D_items tables. We again filter on a specific ICU stay ID to get the data for a single patient and a single ICU stay. The charted time and time of ICU admission are combined to get the time of the output event since the time of ICU admission.</p>
<div class="cell" data-execution_count="166">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># Load Output events</span></span>
<span id="cb17-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;">SELECT  ic.icustay_id, oe.charttime, oe.charttime - ic.intime AS icutime, di.label, oe.value, oe.valueuom</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;">FROM Outputevents oe</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;">INNER JOIN D_items as di</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;">ON oe.itemid = di.itemid</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;">INNER JOIN icustays ic</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;">ON oe.icustay_id = ic.icustay_id</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;">WHERE ic.icustay_id = """</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icustay_id) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">""" </span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;">ORDER BY oe.charttime</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb17-13"></span>
<span id="cb17-14">outputevents <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;"># Show the (first few) rows of admissions:</span></span>
<span id="cb17-17">outputevents.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="166">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>icustay_id</th>
      <th>charttime</th>
      <th>icutime</th>
      <th>label</th>
      <th>value</th>
      <th>valueuom</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>289236</td>
      <td>2111-01-07 17:00:00</td>
      <td>0 days 00:23:12</td>
      <td>Pre-Admission</td>
      <td>194.0</td>
      <td>mL</td>
    </tr>
    <tr>
      <th>1</th>
      <td>289236</td>
      <td>2111-01-07 17:30:00</td>
      <td>0 days 00:53:12</td>
      <td>Foley</td>
      <td>45.0</td>
      <td>mL</td>
    </tr>
    <tr>
      <th>2</th>
      <td>289236</td>
      <td>2111-01-07 18:28:00</td>
      <td>0 days 01:51:12</td>
      <td>Pre-Admission</td>
      <td>194.0</td>
      <td>mL</td>
    </tr>
    <tr>
      <th>3</th>
      <td>289236</td>
      <td>2111-01-07 18:35:00</td>
      <td>0 days 01:58:12</td>
      <td>Foley</td>
      <td>20.0</td>
      <td>mL</td>
    </tr>
    <tr>
      <th>4</th>
      <td>289236</td>
      <td>2111-01-07 19:00:00</td>
      <td>0 days 02:23:12</td>
      <td>Foley</td>
      <td>30.0</td>
      <td>mL</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="all-inputs-recorded-during-an-icu-stay-of-a-single-patient" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="all-inputs-recorded-during-an-icu-stay-of-a-single-patient"><span class="header-section-number">5.4</span> 4. All inputs recorded during an ICU stay of a single patient</h3>
<p>Input events could be, for example, the use of medication. We would like to collect all input events for a single patient and ICU stay. We are also interested in the corresponding start and end times of the events, those times relative to ICU admission time, the label of the input event, the amount and measurement unit, and how often the input event (medication) is administered.</p>
<p>The input events can be found in the Inputevents_mv table. We join this table with the Icustays and D_items tables to get the time of admission to the ICU and label corresponding to the input event. Again, we filter on a specific ICU stay ID to get the data for a single patient and a single ICU stay. We also filter out rewritten input events.</p>
<div class="cell" data-execution_count="176">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;"># Load Input events</span></span>
<span id="cb18-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;">SELECT  ic.icustay_id, ie.starttime, ie.endtime, ie.starttime - ic.intime as icustarttime, ie.endtime - ic.intime as icuendtime, di.label, ie.amount, </span></span>
<span id="cb18-5"><span class="st" style="color: #20794D;">    ie.amountuom, ie.rate, ie.rateuom, ie.statusdescription</span></span>
<span id="cb18-6"><span class="st" style="color: #20794D;">FROM inputevents_mv ie</span></span>
<span id="cb18-7"><span class="st" style="color: #20794D;">INNER JOIN icustays ic</span></span>
<span id="cb18-8"><span class="st" style="color: #20794D;">ON ie.icustay_id = ic.icustay_id</span></span>
<span id="cb18-9"><span class="st" style="color: #20794D;">INNER JOIN D_items as di</span></span>
<span id="cb18-10"><span class="st" style="color: #20794D;">ON ie.itemid = di.itemid</span></span>
<span id="cb18-11"><span class="st" style="color: #20794D;">WHERE ic.icustay_id = """</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icustay_id) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">""" </span></span>
<span id="cb18-12"><span class="st" style="color: #20794D;">AND lower(ie.statusdescription) != 'rewritten'</span></span>
<span id="cb18-13"><span class="st" style="color: #20794D;">ORDER BY ie.starttime</span></span>
<span id="cb18-14"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">inputevents <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb18-17"></span>
<span id="cb18-18"><span class="co" style="color: #5E5E5E;"># Show the (first few) rows of admissions:</span></span>
<span id="cb18-19">inputevents.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="176">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>icustay_id</th>
      <th>starttime</th>
      <th>endtime</th>
      <th>icustarttime</th>
      <th>icuendtime</th>
      <th>label</th>
      <th>amount</th>
      <th>amountuom</th>
      <th>rate</th>
      <th>rateuom</th>
      <th>statusdescription</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>289236</td>
      <td>2111-01-07 16:45:00</td>
      <td>2111-01-07 16:46:00</td>
      <td>0 days 00:08:12</td>
      <td>0 days 00:09:12</td>
      <td>Pre-Admission Intake</td>
      <td>3400.000000</td>
      <td>ml</td>
      <td>NaN</td>
      <td>None</td>
      <td>FinishedRunning</td>
    </tr>
    <tr>
      <th>1</th>
      <td>289236</td>
      <td>2111-01-07 17:00:00</td>
      <td>2111-01-08 00:56:00</td>
      <td>0 days 00:23:12</td>
      <td>0 days 08:19:12</td>
      <td>D5 1/2NS</td>
      <td>991.699971</td>
      <td>ml</td>
      <td>125.004198</td>
      <td>mL/hour</td>
      <td>FinishedRunning</td>
    </tr>
    <tr>
      <th>2</th>
      <td>289236</td>
      <td>2111-01-07 18:00:00</td>
      <td>2111-01-07 18:01:00</td>
      <td>0 days 01:23:12</td>
      <td>0 days 01:24:12</td>
      <td>NaCl 0.9%</td>
      <td>500.000000</td>
      <td>ml</td>
      <td>NaN</td>
      <td>None</td>
      <td>FinishedRunning</td>
    </tr>
    <tr>
      <th>3</th>
      <td>289236</td>
      <td>2111-01-07 18:30:00</td>
      <td>2111-01-07 18:31:00</td>
      <td>0 days 01:53:12</td>
      <td>0 days 01:54:12</td>
      <td>Morphine Sulfate</td>
      <td>2.000000</td>
      <td>mg</td>
      <td>NaN</td>
      <td>None</td>
      <td>FinishedRunning</td>
    </tr>
    <tr>
      <th>4</th>
      <td>289236</td>
      <td>2111-01-07 20:13:00</td>
      <td>2111-01-07 20:43:00</td>
      <td>0 days 03:36:12</td>
      <td>0 days 04:06:12</td>
      <td>Albumin 25%</td>
      <td>49.999998</td>
      <td>ml</td>
      <td>99.999996</td>
      <td>mL/hour</td>
      <td>FinishedRunning</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="all-lab-events-recorded-during-an-icu-stay-of-a-single-patient" class="level3" data-number="5.5">
<h3 data-number="5.5" class="anchored" data-anchor-id="all-lab-events-recorded-during-an-icu-stay-of-a-single-patient"><span class="header-section-number">5.5</span> 5. All lab events recorded during an ICU stay of a single patient</h3>
<p>Examples of lab events could be the number of red blood cells in the body, or magnesium levels. We want to get all lab events for a single patient and a single ICU stay. We also are interested to see the time of these lab events, time since ICU admission, label, value, and measurement unit.</p>
<p>Lab events are in the Labevents table. We join the Icustays and D_labitems tables, and filter out any lab events that were recorded before or after the patient was at the ICU.</p>
<div class="cell" data-execution_count="182">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># Load lab events</span></span>
<span id="cb19-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;">SELECT  ic.subject_id, ic.icustay_id, le.charttime, le.charttime - ic.intime as icutime, di.label, le.value, le.valuenum, le.valueuom </span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;">FROM labevents le</span></span>
<span id="cb19-6"><span class="st" style="color: #20794D;">INNER JOIN icustays ic</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;">    ON le.subject_id = ic.subject_id</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;">    AND le.charttime &gt;= ic.intime</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;">    AND le.charttime &lt;= ic.outtime</span></span>
<span id="cb19-10"><span class="st" style="color: #20794D;">INNER JOIN D_labitems as di</span></span>
<span id="cb19-11"><span class="st" style="color: #20794D;">    ON le.itemid = di.itemid</span></span>
<span id="cb19-12"><span class="st" style="color: #20794D;">WHERE ic.icustay_id = """</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icustay_id) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">""" </span></span>
<span id="cb19-13"><span class="st" style="color: #20794D;">ORDER BY le.charttime</span></span>
<span id="cb19-14"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb19-15"></span>
<span id="cb19-16">labevents <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb19-17"></span>
<span id="cb19-18"><span class="co" style="color: #5E5E5E;"># Show the (first few) rows of admissions:</span></span>
<span id="cb19-19">labevents.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="182">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>subject_id</th>
      <th>icustay_id</th>
      <th>charttime</th>
      <th>icutime</th>
      <th>label</th>
      <th>value</th>
      <th>valuenum</th>
      <th>valueuom</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>43746</td>
      <td>289236</td>
      <td>2111-01-07 17:23:00</td>
      <td>0 days 00:46:12</td>
      <td>Specific Gravity</td>
      <td>1.024</td>
      <td>1.024</td>
      <td></td>
    </tr>
    <tr>
      <th>1</th>
      <td>43746</td>
      <td>289236</td>
      <td>2111-01-07 17:23:00</td>
      <td>0 days 00:46:12</td>
      <td>GR HOLD</td>
      <td>HOLD</td>
      <td>NaN</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>43746</td>
      <td>289236</td>
      <td>2111-01-07 17:23:00</td>
      <td>0 days 00:46:12</td>
      <td>Creatinine</td>
      <td>1.9</td>
      <td>1.900</td>
      <td>mg/dL</td>
    </tr>
    <tr>
      <th>3</th>
      <td>43746</td>
      <td>289236</td>
      <td>2111-01-07 17:23:00</td>
      <td>0 days 00:46:12</td>
      <td>Glucose</td>
      <td>NEG</td>
      <td>NaN</td>
      <td>mg/dL</td>
    </tr>
    <tr>
      <th>4</th>
      <td>43746</td>
      <td>289236</td>
      <td>2111-01-07 17:23:00</td>
      <td>0 days 00:46:12</td>
      <td>Glucose</td>
      <td>139</td>
      <td>139.000</td>
      <td>mg/dL</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>health</category>
  <category>electronic-health-records</category>
  <guid>http://livingdatalab.com/posts/2022-03-15-mimic-clinicial-outcomes-patient-data.html</guid>
  <pubDate>Tue, 15 Mar 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ehr2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MIMIC-III (EHR) for Descriptive Health Analytics</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-03-14-using-mimic3-ehr-database.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2022-03-14-using-mimic3-ehr-database.html">earlier article we looked at how the MIMIC-III EHR database come into being</a>. In this article, we’re going to overview the main architecture of the MIMIC-III Electronic Health Record (EHR) database and how it links information between ICU units in the hospital records. We’re also going to highlight that a key processing step to develop the database was to remove any sensitive fields. When dealing with sensitive health data, we need to particularly pay attention to dates. With MIMIC to protect anonymity, all dates have been shifted relatively to protect the privacy of the subjects. In particular, we will learn about the design of this relational database, and what tools are available to query, extract and visualise descriptive analytics.</p>
</section>
<section id="mimic-iii-use-cases" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="mimic-iii-use-cases"><span class="header-section-number">2</span> MIMIC-III use cases</h2>
<p>Electronic health records are complicated. This is for several reasons. Some of this information can be medical images, lab tests, natural language diagnosis from doctors, medications, and hospitalization events. During hospitalization there is a number of tests a patient undergoes, blood test, and vital signs checked. It could be medical images and so on. A single patients data are spread over multiple electronic health record with diverse representation. Another important issue is the meaning of measurements. As simple temperature measure may vary depending on whether it is taking from the mouth or the armpit. Putting all this together, we see that electronic health records are irregularly sampled. Their nature is varied and dynamic. So how we can design the schema of a database to encode this information?</p>
<p>This database should be accessible simultaneously from doctors and other health care providers frequently and in a unified way. Interoperability is a key requirement. This involve enhanced quality, efficiency, and effectiveness of the health care system. Information should be provided in the appropriate format whenever is needed. We should eliminate unnecessary duplications. Database selection and it’s matching schema architecture usually influences that effective management of medical data flexibility, scalability, query performance, and interoperability. Non-proprietary standardized models are necessary to build electronic health record systems which comply the requirement of interoperability.</p>
<p>MIMIC-III is a good example towards this direction. It is the only freely accessible critical care database of its kind. The dataset spans more than a decade, which detailed information about individual patient care. Databases such as MIMIC-III play a key role in accelerating research in machine learning models and end enabling reproducibility studies. MIMIC-III database links the identified information across five intensive units at the hospital of Medical Center in Boston with the hospital electronic health record databases.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic3-patient-timeline.png" title="MIMIC III - Patient Timeline" class="img-fluid"></p>
<p>During ICU stay, there are several signals that are monitored and these are the vital signs, there are waveforms. We have alarms, but there are also fluids and medications as well as progression reports noted from the doctors. On the other hand, data recording from the hospital will include billing details and it includes also International Classification of Disease codes which relates to the pathology and the symptoms of the patient during admission. It will include demographics of the patient, and it will also include other nodes, with relation to medical images, discharge summaries, and so on. All the fields related to patient data identification has been removed. This includes his patient name, telephone number, and addresses. In particular dates, we’re shifted into the future by a random offset for each individual patient in a consistent manner. Preserving interval is important. Therefore, dates cannot be completely removed or randomly changed.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic3-overview.jpg" title="MIMIC III - Overview" class="img-fluid"></p>
</section>
<section id="mimic-iii-as-a-relational-database" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="mimic-iii-as-a-relational-database"><span class="header-section-number">3</span> MIMIC-III as a Relational Database</h2>
<p>MIMIC-III database consists of 26 tables and they’re all listed below. The schema of the database reflects the inherent hospital sources of information. Since MIMIC-III links data from a hospital, the overall structure represents closely this row data. As we see here, MIMIC-III tables can be categorized in four groups.</p>
<p>One of the group is the <strong>patient tracking</strong>. These tables are used to define and track patient stay. The tables under <strong>ICU data</strong> include all the data recorded during icu stays. On the other hand, the data recorded within the table under the <strong>hospital category</strong> includes all the data recorded in the hospital. Recall that the database links data between the ICU unit and the hospital but these are two different entities. Finally, the last category includes <strong>dictionary tables</strong> and they all have a prefix of d.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic3-tables.png" title="MIMIC III - Overview" class="img-fluid"></p>
<p>Here, we’re going to look at the basic tables of MIMIC-III, which are the <em>patients</em> table, the <em>admission</em> table, and the <em>icustays</em> table. Several key summary statistics can be extracted based only on these tables.</p>
<p>The <strong>patient table</strong> has a subject Id identifier that can link it to the admission table, as well as the ICU table. The patient table includes the date of birth. <em>We should pay attention here because the date of birth has been shifted for patients older than 89 years old</em>. We should also note that the table records three different versions of date of death. These are the date of death according to the hospital. The date of death from Social Security database, and a date of death which matches the two dates and gives priority to the date of death at hospital. The patient’s table also includes an expired flag, which is a binary flag that records whether the patient has died according to either database.</p>
<p>The <strong>admissions table</strong> has an additional identifier. The hospital admission identify that links the information with the icustays table. <em>The admissions table records every unique hospitalization for each patient in the database</em>. It includes information about admission time, discharge time, death time, type of admission, hospital expiry flag, diagnosis, and whether the patient has chart events data associated with his record.</p>
<p>The <strong>icustays table</strong> records every unique ICU stay in the database. The icustay identifier is a generated identifier that is not based on any row data identifier. We should point out that the hospital and the ICU database are not mainly linked, they used to be two separate databases. Therefore they don’t have any concept of an ICU and counter identifier. Taking all this together, subject Id refers to a unique patient identifier, hospital admission Id refers to a unique admission to the hospital and icustay identification refers to a unique admission to an intensive care unit.</p>
<p>Information in the icustays table include the first care unit and the last care unit, which are also information defined in the <strong>transfers table</strong>. It also include the first ward and the last ward, which refers to the physical locations within the hospital. It includes in time and out time of when the patient was transferred in and out of the ICU. It also includes length of stay for the patient. We should point out that the icustays table have been in fact linked with the transfers table. Specifically it groups a transfers stable based on icustay ID and excludes rows where there is no icustay ID. The transfers table, includes additional information of patient movement from bed to bed within the hospital, including ICU admission and discharge.</p>
<p>Finally, the <strong>callout table</strong> includes information regarding when a patient was cleared from ICU discharge and when the patient was actually discharged. A key table that includes data from the ICU unit is the <strong>chart events table</strong>. Here we can find all chart event observations for patients. The <strong>outputevents stable</strong>, on the other hand, contains all measurements related to output for a given patient. When we work with ICU data and in particular with chart events data, we should consider also the <strong>dictionary tables</strong>. This table provide definitions for identifiers. For example, every row of chart events is associated with a single item ID, which represents the concept measure. In this way, by joining the chart events table with a dictionary items table it is possible to identify the concept represented by a given item ID. The rest of the dictionary’s table, they’re also used for cross-referencing codes against their respective definitions.</p>
<p>Now we highlight some of the tables and the hospital data that are used very often, in particular, the <strong>lab events table</strong> containing laboratory test results for a patient. There is some duplication between chart events and lab events. In cases where there is a disagreement between measurements, lab events should be taken as the ground truth. In some cases, it would have been possible to merge tables. For example, we can merge the dictionary of ICT procedures with that CPT events table because both contain details relating to procedures and they could be combined. However, since the data sources are significantly different, they have been kept separately.</p>
<p>Researchers are advised to develop database views and transform them as appropriately rather than combining the tables within the mimic data model. We should also point out that the patients’ procedures recording in the <strong>procedures ICT table</strong> are coded using the International Statistical Classification of Diseases. Similarly, the <strong>diagnosis ICT table</strong>, are hospital assigned diagnosis coded using again, the International Statistical Classification of Diseases System. The corresponding dictionary tables, they hold the relative information with relation to the ICD-9 codes.</p>
<p>Summarizing, the mimic database holds more than 53,000 distinct hospital admissions for patients age 60 years and above, and they were admitted to critical care between 2001 and 2012. To correctly extract information from an electronic health record database, we need to understand the schema of the database, but also the source of the data. In almost every query, we will see that we can use SQL queries to join information between the basic tables which hold data for the patients’ admissions in the hospital and ICU stays. In the next sectionss, we will see how to extract information about the patient characteristics such as age, gender, ICU units, as well as outcomes such as mortality and stay of length. We are also going to discuss the coding system used in mimic, which is based on the International Classification of Diseases, ICD-9 system.</p>
<p><a href="https://www.nature.com/articles/sdata201635">This is a good article summerising the characteristics of the MIMIC-III database and its tables</a>.</p>
</section>
<section id="calculating-descriptive-statistics-for-mimic-iii" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="calculating-descriptive-statistics-for-mimic-iii"><span class="header-section-number">4</span> Calculating Descriptive Statistics for MIMIC-III</h2>
<p>Descriptive statistics are powerful. They can be used in retrospective studies to overview historic data and explain trends. Extracting patients can result in different estimations depending on which table identifier we use. Therefore, we really need to understand the schema of the database and how it encodes the data. Normally, descriptive statistics look into patient characteristics, intensive care unit utilization, and patient outcomes such as mortality. A number of factors should be considered while we extract this data, for example, when we are looking into estimating the number of patients, we will realize that there is more than one way leading to similar but not identical results. We can look into the number of distinct patients across care units. We can also look into unique hospital admissions. Some patients have been admitted more than once. Therefore, we would expect that the number of unique patient admissions is less than the number of unique hospital admissions, since a patient can be hospitalized more than once.</p>
<p>We can also consider unique admissions to ICUs and this number will be, again, different than the number of distinct patient across intensive care units because some patients have been admitted to more than one intensive care unit. In particular, for MIMIC-III, it is useful to know the age distribution across intensive units. Dßescriptive analytics can provide us a lot of information about historic data. They can be used to explain trends, but they cannot be used to predict future and prevent disease and high rates of mortality. Therefore, they are limited into retrospective studies.</p>
<p>To calculate some example descriptive statistics we will use the following tools:</p>
<ul>
<li><a href="https://physionet.org/content/mimiciii-demo/1.4/">A reduced demo version of the MIMIC-III dataset</a></li>
<li>A PostgreSQL Database with all the tables from the demo MIMIC-III imported into it</li>
<li>Python &amp; Pandas</li>
</ul>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Import libraries</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> cm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> matplotlib.colors <span class="im" style="color: #00769E;">as</span> mc</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> colorsys</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> psycopg2</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Local Database Configuration:</span></span>
<span id="cb1-15">sqluser <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'pranath'</span></span>
<span id="cb1-16">dbname <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mimic'</span></span>
<span id="cb1-17">schema_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'mimiciii'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Connect to MIMIC-III database:</span></span>
<span id="cb2-3">con <span class="op" style="color: #5E5E5E;">=</span> psycopg2.<span class="ex" style="color: null;">connect</span>(dbname<span class="op" style="color: #5E5E5E;">=</span>dbname, user<span class="op" style="color: #5E5E5E;">=</span>sqluser, password<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb2-4">cur <span class="op" style="color: #5E5E5E;">=</span> con.cursor()</span></code></pre></div>
</div>
<section id="calculating-the-distribution-of-heart-rates-of-all-adult-patients" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="calculating-the-distribution-of-heart-rates-of-all-adult-patients"><span class="header-section-number">4.1</span> Calculating the Distribution of Heart rates of all adult patients</h3>
<p>Say for example we would like to create a histogram of all adult (age &gt;= 16) patients’ heart rates. Heart rates are registered as two separate charted events, under the label ‘Heart rate’.</p>
<p>To get all adult patients’ heart rates, we first combine the Patients and Admissions tables again to get the age of each patient (computed from each patient’s date of birth and hospital admission time). We filter out all patients younger than 16 years old, and select the values from the charted events related to the unique identifiers mentioned above.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic3-sql-heartrate.png" title="MIMIC III - SQL Query to obtain heart rate data" class="img-fluid"></p>
<p>For the implementation, we will need to filter on charted events with item ID 211 or 220045, which both correspond to heart rate.</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># Make sure that we are looking at the right item IDs that correspond to heart rate in the d_items dictionary table:</span></span>
<span id="cb3-3">query <span class="op" style="color: #5E5E5E;">=</span>  <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;">SELECT d.itemid, d.label</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;">FROM public.d_items d</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;">WHERE d.label LIKE '%Heart Rate%'</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb3-8">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb3-9">query_output</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>itemid</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>211</td>
      <td>Heart Rate</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3494</td>
      <td>Lowest Heart Rate</td>
    </tr>
    <tr>
      <th>2</th>
      <td>220045</td>
      <td>Heart Rate</td>
    </tr>
    <tr>
      <th>3</th>
      <td>220047</td>
      <td>Heart Rate Alarm - Low</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Compose and execute SQL queries to get all adult heart rates</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># First query: Join patients and admissions table to get the age which is admittime - dob, and filter all ages over 16 only, return table with just list of subject id's</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># Second query: Filter from chartevents table where subject id's match those we just returned, and with heart rate item ids 211 or 220045</span></span>
<span id="cb4-5">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;">WITH subjects_above16 AS </span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;">(</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;">  SELECT a.subject_id</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;">  FROM public.admissions a</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;">  INNER JOIN public.patients p</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;">  ON a.subject_id = p.subject_id</span></span>
<span id="cb4-12"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (a.admittime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb4-13"><span class="st" style="color: #20794D;">  group by a.subject_id</span></span>
<span id="cb4-14"><span class="st" style="color: #20794D;">)</span></span>
<span id="cb4-15"><span class="st" style="color: #20794D;">, heart_rate_table as</span></span>
<span id="cb4-16"><span class="st" style="color: #20794D;">(</span></span>
<span id="cb4-17"><span class="st" style="color: #20794D;">  SELECT width_bucket(ce.valuenum, 0, 300, 301) AS bucket</span></span>
<span id="cb4-18"><span class="st" style="color: #20794D;">  FROM public.chartevents ce</span></span>
<span id="cb4-19"><span class="st" style="color: #20794D;">  INNER JOIN subjects_above16</span></span>
<span id="cb4-20"><span class="st" style="color: #20794D;">  ON ce.subject_id = subjects_above16.subject_id</span></span>
<span id="cb4-21"><span class="st" style="color: #20794D;">  WHERE ce.itemid in (211, 220045)</span></span>
<span id="cb4-22"><span class="st" style="color: #20794D;">)</span></span>
<span id="cb4-23"><span class="st" style="color: #20794D;">SELECT bucket as heart_rate</span></span>
<span id="cb4-24"><span class="st" style="color: #20794D;">FROM heart_rate_table</span></span>
<span id="cb4-25"><span class="st" style="color: #20794D;">ORDER BY bucket;</span></span>
<span id="cb4-26"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb4-27"></span>
<span id="cb4-28">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb4-29">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>heart_rate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># Visualize distribution of heart rate:</span></span>
<span id="cb5-3">query_output[<span class="st" style="color: #20794D;">'heart_rate'</span>].hist(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-14-using-mimic3-ehr-database_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># Show 5-Number summary of heart rate:</span></span>
<span id="cb7-3">query_output[<span class="st" style="color: #20794D;">'heart_rate'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>count    15485.000000
mean        88.766225
std         19.175901
min          1.000000
25%         76.000000
50%         88.000000
75%        101.000000
max        190.000000
Name: heart_rate, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="extract-hospitalisation-numbers" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="extract-hospitalisation-numbers"><span class="header-section-number">4.2</span> Extract hospitalisation numbers</h3>
<p>We will now look at the basic operations required to extract descriptive statistics from the MIMIC-III database with relation to hospitalisations, age distribution of patients, gender distribution of patients, length of stay in ICUs and mortality. They use the basic tables of MIMIC-III: Patients, Icustays and Admissions.</p>
<section id="number-of-distinct-patients-across-care-units" class="level4">
<h4 class="anchored" data-anchor-id="number-of-distinct-patients-across-care-units">1. Number of distinct patients across care units</h4>
<p>We would like to know the number of unique adult (age &gt;= 16) patients admitted to an intensive care unit (ICU), as well as the distribution of those patients across the different ICUs.</p>
<p>The diagram below visualizes how to get the information that is needed to get those numbers. The Patients table is combined with the Icustays table to get each patient’s unique identifier and the ICU that they were admitted to. Moreover, we use each patient’s date of birth and the time of admission to compute each patient’s age, and select only adult patients (age &gt;= 16).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql1.png" class="img-fluid"></p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb9-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;">SELECT i.subject_id, i.first_careunit</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Icustays i ON i.subject_id = p.subject_id</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb9-10">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;"># Filter duplicate patients and group by ICU unit</span></span>
<span id="cb9-12">icu_units <span class="op" style="color: #5E5E5E;">=</span> query_output.drop_duplicates([<span class="st" style="color: #20794D;">'subject_id'</span>]).groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>]).count()</span>
<span id="cb9-13">icu_units <span class="op" style="color: #5E5E5E;">=</span> icu_units.reset_index()</span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;"># Calculate percentage</span></span>
<span id="cb9-15">icu_units.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'ICU Unit'</span>, <span class="st" style="color: #20794D;">'Total Admissions'</span>]</span>
<span id="cb9-16">sum_patients <span class="op" style="color: #5E5E5E;">=</span> icu_units[<span class="st" style="color: #20794D;">'Total Admissions'</span>].<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb9-17">icu_units[<span class="st" style="color: #20794D;">'Percentage Admissions'</span>] <span class="op" style="color: #5E5E5E;">=</span> (icu_units[<span class="st" style="color: #20794D;">'Total Admissions'</span>] <span class="op" style="color: #5E5E5E;">/</span> sum_patients) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb9-18"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total Patients: '</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(sum_patients))</span>
<span id="cb9-19">icu_units.head(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total Patients: 100</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="42">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ICU Unit</th>
      <th>Total Admissions</th>
      <th>Percentage Admissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>CCU</td>
      <td>12</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>CSRU</td>
      <td>6</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>54</td>
      <td>54.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>SICU</td>
      <td>20</td>
      <td>20.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>TSICU</td>
      <td>8</td>
      <td>8.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="number-of-distinct-hospital-admissions-across-care-units" class="level4">
<h4 class="anchored" data-anchor-id="number-of-distinct-hospital-admissions-across-care-units">2. Number of distinct hospital admissions across care units</h4>
<p>Some patients might have been admitted to hospital more than once. Apart from the number of unique patients, we would also like to know the number of unique hospital admissions and the corresponding distribution across ICUs.</p>
<p>To get the numbers for hospital admissions, we combine the Patients table with the Icustays table based on each patient’s unique subject identifier. We collect each patient’s identifier and date of birth, and all the unique hospital stay identifiers, along with the corresponding ICU and time of admission. Again, we compute each patient’s age and select only adult patients (age &gt;= 16).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql2.png" class="img-fluid"></p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb11-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, i.hadm_id</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb11-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Icustays i ON i.subject_id = p.subject_id</span></span>
<span id="cb11-7"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb11-8"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb11-10">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;"># Filter duplicate patients and group by ICU unit</span></span>
<span id="cb11-12">icu_units <span class="op" style="color: #5E5E5E;">=</span> query_output.drop_duplicates([<span class="st" style="color: #20794D;">'hadm_id'</span>]).groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>]).count()</span>
<span id="cb11-13">icu_units <span class="op" style="color: #5E5E5E;">=</span> icu_units.reset_index()</span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;"># Calculate percentage</span></span>
<span id="cb11-15">icu_units.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'ICU Unit'</span>, <span class="st" style="color: #20794D;">'Total Unique Admissions'</span>]</span>
<span id="cb11-16">sum_patients <span class="op" style="color: #5E5E5E;">=</span> icu_units[<span class="st" style="color: #20794D;">'Total Unique Admissions'</span>].<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb11-17">icu_units[<span class="st" style="color: #20794D;">'Percentage Unique Admissions'</span>] <span class="op" style="color: #5E5E5E;">=</span> (icu_units[<span class="st" style="color: #20794D;">'Total Unique Admissions'</span>] <span class="op" style="color: #5E5E5E;">/</span> sum_patients) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb11-18"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total Patients: '</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(sum_patients))</span>
<span id="cb11-19">icu_units.head(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total Patients: 129</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="43">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ICU Unit</th>
      <th>Total Unique Admissions</th>
      <th>Percentage Unique Admissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>CCU</td>
      <td>17</td>
      <td>13.178295</td>
    </tr>
    <tr>
      <th>1</th>
      <td>CSRU</td>
      <td>6</td>
      <td>4.651163</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>73</td>
      <td>56.589147</td>
    </tr>
    <tr>
      <th>3</th>
      <td>SICU</td>
      <td>22</td>
      <td>17.054264</td>
    </tr>
    <tr>
      <th>4</th>
      <td>TSICU</td>
      <td>11</td>
      <td>8.527132</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="number-of-distinct-icu-stays-across-care-units" class="level4">
<h4 class="anchored" data-anchor-id="number-of-distinct-icu-stays-across-care-units">3. Number of distinct ICU stays across care units</h4>
<p>Each patient might also have been admitted to multiple ICUs, also within one hospital admission. We would like to know the number of unique admissions to the ICUs and the corresponding distribution of those numbers across the different ICUs.</p>
<p>Again, we combine the Patients and Icustays tables based on each subject’s unique identifier. We collect each patient’s identifier, date of birth, and hospital admission time. The latter two are used to compute age and filter on adult patients only (age &gt;= 16). We also need the unique ICU stay identifier and the corresponding ICU.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql3.png" class="img-fluid"></p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb13-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, i.icustay_id</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Icustays i ON i.subject_id = p.subject_id</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb13-10">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;"># Filter duplicate patients and group by ICU unit</span></span>
<span id="cb13-12">icu_units <span class="op" style="color: #5E5E5E;">=</span> query_output.drop_duplicates([<span class="st" style="color: #20794D;">'icustay_id'</span>]).groupby([<span class="st" style="color: #20794D;">'first_careunit'</span>]).count()</span>
<span id="cb13-13">icu_units <span class="op" style="color: #5E5E5E;">=</span> icu_units.reset_index()</span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;"># Calculate percentage</span></span>
<span id="cb13-15">icu_units.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'ICU Unit'</span>, <span class="st" style="color: #20794D;">'Total Unique ICU Stays'</span>]</span>
<span id="cb13-16">sum_patients <span class="op" style="color: #5E5E5E;">=</span> icu_units[<span class="st" style="color: #20794D;">'Total Unique ICU Stays'</span>].<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb13-17">icu_units[<span class="st" style="color: #20794D;">'Percentage ICU Stays'</span>] <span class="op" style="color: #5E5E5E;">=</span> (icu_units[<span class="st" style="color: #20794D;">'Total Unique ICU Stays'</span>] <span class="op" style="color: #5E5E5E;">/</span> sum_patients) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb13-18"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total Patients: '</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(sum_patients))</span>
<span id="cb13-19">icu_units.head(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total Patients: 136</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="44">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ICU Unit</th>
      <th>Total Unique ICU Stays</th>
      <th>Percentage ICU Stays</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>CCU</td>
      <td>19</td>
      <td>13.970588</td>
    </tr>
    <tr>
      <th>1</th>
      <td>CSRU</td>
      <td>6</td>
      <td>4.411765</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>77</td>
      <td>56.617647</td>
    </tr>
    <tr>
      <th>3</th>
      <td>SICU</td>
      <td>23</td>
      <td>16.911765</td>
    </tr>
    <tr>
      <th>4</th>
      <td>TSICU</td>
      <td>11</td>
      <td>8.088235</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="extract-age-across-care-units" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="extract-age-across-care-units"><span class="header-section-number">4.3</span> Extract age across care units</h3>
<p>We would like to know the age (in years, with age &gt;= 16) distribution over all care units combined, as well as across the different care units. More specifically, we are interested in the median, lower quartile and upper quartile. It is better not to use the mean here, because, for privacy reasons, age &gt; 89 is set to 300 in the database.</p>
<p>To obtain age, we need to combine the Patients and the Icustays tables. Age can be computed by subtracting the time of admission to the ICU from a patient’s date of birth. Moreover, to get the age distribution across ICUs, we can use the different care units obtained from the Icustays table.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/mimic-sql4.png" class="img-fluid"></p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># Compose SQL query</span></span>
<span id="cb15-3">query <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;">SELECT i.first_careunit, round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) as age</span></span>
<span id="cb15-5"><span class="st" style="color: #20794D;">  FROM public.patients p</span></span>
<span id="cb15-6"><span class="st" style="color: #20794D;">  INNER JOIN public.Icustays i ON i.subject_id = p.subject_id</span></span>
<span id="cb15-7"><span class="st" style="color: #20794D;">  WHERE round((EXTRACT(EPOCH FROM (i.intime-p.dob))/60/60/24/365.242) :: NUMERIC, 4) &gt;= 16</span></span>
<span id="cb15-8"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;"># Run query</span></span>
<span id="cb15-10">query_output <span class="op" style="color: #5E5E5E;">=</span> pd.read_sql_query(query,con)</span>
<span id="cb15-11">query_output.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>first_careunit</th>
      <th>age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>MICU</td>
      <td>70.6378</td>
    </tr>
    <tr>
      <th>1</th>
      <td>MICU</td>
      <td>36.1923</td>
    </tr>
    <tr>
      <th>2</th>
      <td>MICU</td>
      <td>87.0874</td>
    </tr>
    <tr>
      <th>3</th>
      <td>CCU</td>
      <td>73.6875</td>
    </tr>
    <tr>
      <th>4</th>
      <td>MICU</td>
      <td>48.9015</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Visualize distribution of age:</span></span>
<span id="cb16-3">query_output[<span class="st" style="color: #20794D;">'age'</span>].hist(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>&lt;AxesSubplot:&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-14-using-mimic3-ehr-database_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We know that ages bigger than 89 have been set to 300 for privacy protection.</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;"># Define function for descriptive stats 5 number summary for a field per icu</span></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;">def</span> icu_descriptive_stats(field, df, boxplot_title):</span>
<span id="cb18-4">    </span>
<span id="cb18-5">    <span class="co" style="color: #5E5E5E;"># Get list of ICUs</span></span>
<span id="cb18-6">    icu_list <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'first_careunit'</span>].unique()</span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;"># Plot descriptive stats for each ICU</span></span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;">for</span> icu <span class="kw" style="color: #003B4F;">in</span> icu_list:</span>
<span id="cb18-9">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb18-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Descriptive statistics for '</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(icu) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' by '</span> <span class="op" style="color: #5E5E5E;">+</span> field)</span>
<span id="cb18-11">        icu_df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">'first_careunit'</span>] <span class="op" style="color: #5E5E5E;">==</span> icu]</span>
<span id="cb18-12">        <span class="bu" style="color: null;">print</span>(icu_df[field].describe())   </span>
<span id="cb18-13">       </span>
<span id="cb18-14">    <span class="co" style="color: #5E5E5E;"># Plot box plot of ICU by field</span></span>
<span id="cb18-15">    plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb18-16">    sns.boxplot(data<span class="op" style="color: #5E5E5E;">=</span>df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'first_careunit'</span>, y<span class="op" style="color: #5E5E5E;">=</span>field)</span>
<span id="cb18-17">    plt.xlabel(<span class="st" style="color: #20794D;">'ICU'</span>)</span>
<span id="cb18-18">    plt.title(boxplot_title)</span>
<span id="cb18-19"></span>
<span id="cb18-20"><span class="co" style="color: #5E5E5E;"># 5 number summary all ICUs for age (remove all ages of 300)</span></span>
<span id="cb18-21">df <span class="op" style="color: #5E5E5E;">=</span> query_output[query_output[<span class="st" style="color: #20794D;">'age'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">300</span>]</span>
<span id="cb18-22">icu_descriptive_stats(<span class="st" style="color: #20794D;">'age'</span>, df, <span class="st" style="color: #20794D;">'ICU by Age'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 
Descriptive statistics for MICU by age
count    71.000000
mean     69.824277
std      14.777606
min      27.016700
25%      64.061050
50%      70.155800
75%      82.498550
max      88.036400
Name: age, dtype: float64
 
Descriptive statistics for CCU by age
count    18.000000
mean     68.994761
std      14.572275
min      40.606400
25%      57.192850
50%      72.843600
75%      79.406575
max      88.642100
Name: age, dtype: float64
 
Descriptive statistics for CSRU by age
count     6.000000
mean     78.496400
std       6.423162
min      70.754500
25%      73.265675
50%      79.354650
75%      82.011550
max      87.381400
Name: age, dtype: float64
 
Descriptive statistics for SICU by age
count    22.000000
mean     73.492768
std      12.891770
min      44.106900
25%      63.048450
50%      77.671000
75%      81.437725
max      88.738100
Name: age, dtype: float64
 
Descriptive statistics for TSICU by age
count    10.000000
mean     53.558550
std      25.190762
min      17.192000
25%      34.653600
50%      54.343500
75%      68.308100
max      88.063500
Name: age, dtype: float64</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-03-14-using-mimic3-ehr-database_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>health</category>
  <category>electronic-health-records</category>
  <guid>http://livingdatalab.com/posts/2022-03-14-using-mimic3-ehr-database.html</guid>
  <pubDate>Mon, 14 Mar 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ehr3.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
