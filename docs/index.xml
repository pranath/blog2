<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>LivingDataLab</title>
<link>http://livingdatalab.com/index.html</link>
<atom:link href="http://livingdatalab.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Sat, 18 Mar 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Creating a Transformer Model for Text Summarisation</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-03-18-creating-transformer-model-for-text-summarisation.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-03-11-implementing-gpt2-a-transformer-decoder-nlp-model.html">earlier article</a> we created a transformer decoder model the same kind used to create the famous GPT-2. In this article we will explore summarization using a transfomer decoder model.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/transformerNews.png" width="700"></p>
<p>Summarization is an important task in natural language processing and could be useful for a number of businesses and use cases. For example, bots can be used to scrape articles, summarize them, and then you can use sentiment analysis to identify the sentiment about certain stocks. Why always read an article or a long email today, when you can build a transformer to summarize text for you.</p>
<p>In this project we will:</p>
<ul>
<li>Use built-in functions to preprocess data</li>
<li>Implement DotProductAttention</li>
<li>Implement Causal Attention</li>
<li>Understand how attention works</li>
<li>Build the transformer model</li>
<li>Evaluate your model</li>
<li>Summarize an article</li>
</ul>
<p>This model is slightly different than the ones we have looked at previously. This is heavily based on attention and does not rely on sequences, which allows for parallel computing.</p>
</section>
<section id="import-libraries" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">2</span> Import Libraries</h2>
<div class="cell" data-outputid="a0b3e98b-7fc6-492d-c8ad-3a263b54f670" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> w2_tests</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> textwrap</span>
<span id="cb1-7">wrapper <span class="op" style="color: #5E5E5E;">=</span> textwrap.TextWrapper(width<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> trax</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> trax <span class="im" style="color: #00769E;">import</span> layers <span class="im" style="color: #00769E;">as</span> tl</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> trax.fastmath <span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># to print the entire np array</span></span>
<span id="cb1-14">np.set_printoptions(threshold<span class="op" style="color: #5E5E5E;">=</span>sys.maxsize)</span></code></pre></div>
</div>
</section>
<section id="importing-the-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="importing-the-dataset"><span class="header-section-number">3</span> Importing the dataset</h2>
<p>The Trax library makes it easy to work with Tensorflow’s datasets:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># This will download the dataset if no data_dir is specified.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Downloading and processing can take bit of time,</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># So I have the data already in 'data/' </span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># Importing CNN/DailyMail articles dataset</span></span>
<span id="cb2-6">train_stream_fn <span class="op" style="color: #5E5E5E;">=</span> trax.data.TFDS(<span class="st" style="color: #20794D;">'cnn_dailymail'</span>,</span>
<span id="cb2-7">                                 data_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data/'</span>,</span>
<span id="cb2-8">                                 keys<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'article'</span>, <span class="st" style="color: #20794D;">'highlights'</span>),</span>
<span id="cb2-9">                                 train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># This should be much faster as the data is downloaded already.</span></span>
<span id="cb2-12">eval_stream_fn <span class="op" style="color: #5E5E5E;">=</span> trax.data.TFDS(<span class="st" style="color: #20794D;">'cnn_dailymail'</span>,</span>
<span id="cb2-13">                                data_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'data/'</span>,</span>
<span id="cb2-14">                                keys<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'article'</span>, <span class="st" style="color: #20794D;">'highlights'</span>),</span>
<span id="cb2-15">                                train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="tokenize-detokenize-helper-functions" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="tokenize-detokenize-helper-functions"><span class="header-section-number">3.1</span> Tokenize &amp; Detokenize helper functions</h3>
<p>The cell above loads in the encoder for us. Given any data set, we have to be able to map words to their indices, and indices to their words. The inputs and outputs to your <a href="https://github.com/google/trax">Trax</a> models are usually tensors of numbers where each number corresponds to a word. If we were to process your data manually, we would have to make use of the following:</p>
<ul>
<li><span style="color:blue"> word2Ind: </span> a dictionary mapping the word to its index.</li>
<li><span style="color:blue"> ind2Word:</span> a dictionary mapping the index to its word.</li>
<li><span style="color:blue"> word2Count:</span> a dictionary mapping the word to the number of times it appears.</li>
<li><span style="color:blue"> num_words:</span> total number of words that have appeared.</li>
</ul>
<p>We have created helper functions to simplify this process.</p>
<ul>
<li><span style="color:blue"> tokenize: </span> converts a text sentence to its corresponding token list (i.e.&nbsp;list of indices). Also converts words to subwords.</li>
<li><span style="color:blue"> detokenize: </span> converts a token list to its corresponding sentence (i.e.&nbsp;string).</li>
</ul>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> tokenize(input_str, EOS<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;">"""Input str to features dict, ready for inference"""</span></span>
<span id="cb3-3">  </span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;"># Use the trax.data.tokenize method. It takes streams and returns streams,</span></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;"># we get around it by making a 1-element stream with `iter`.</span></span>
<span id="cb3-6">    inputs <span class="op" style="color: #5E5E5E;">=</span>  <span class="bu" style="color: null;">next</span>(trax.data.tokenize(<span class="bu" style="color: null;">iter</span>([input_str]),</span>
<span id="cb3-7">                                      vocab_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'vocab_dir/'</span>,</span>
<span id="cb3-8">                                      vocab_file<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'summarize32k.subword.subwords'</span>))</span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;"># Mark the end of the sentence with EOS</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">list</span>(inputs) <span class="op" style="color: #5E5E5E;">+</span> [EOS]</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;">def</span> detokenize(integers):</span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;">"""List of ints to str"""</span></span>
<span id="cb3-15">  </span>
<span id="cb3-16">    s <span class="op" style="color: #5E5E5E;">=</span> trax.data.detokenize(integers,</span>
<span id="cb3-17">                             vocab_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'vocab_dir/'</span>,</span>
<span id="cb3-18">                             vocab_file<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'summarize32k.subword.subwords'</span>)</span>
<span id="cb3-19">    </span>
<span id="cb3-20">    <span class="cf" style="color: #003B4F;">return</span> wrapper.fill(s)</span></code></pre></div>
</div>
</section>
<section id="preprocessing-for-language-models-concatenate-it" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="preprocessing-for-language-models-concatenate-it"><span class="header-section-number">3.2</span> Preprocessing for Language Models: Concatenate It!</h3>
<p>So we will use a language model – Transformer Decoder – to solve an input-output problem. Language models only predict the next word, they have no notion of inputs. To create a single input suitable for a language model, we concatenate inputs with targets putting a separator in between.</p>
<p>We also need to create a mask – with 0s at inputs and 1s at targets – so that the model is not penalized for mis-predicting the article and only focuses on the summary.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Special tokens</span></span>
<span id="cb4-2">SEP <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="co" style="color: #5E5E5E;"># Padding or separator token</span></span>
<span id="cb4-3">EOS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="co" style="color: #5E5E5E;"># End of sentence token</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># Concatenate tokenized inputs and targets using 0 as separator.</span></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">def</span> preprocess(stream):</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;">for</span> (article, summary) <span class="kw" style="color: #003B4F;">in</span> stream:</span>
<span id="cb4-8">        joint <span class="op" style="color: #5E5E5E;">=</span> np.array(<span class="bu" style="color: null;">list</span>(article) <span class="op" style="color: #5E5E5E;">+</span> [EOS, SEP] <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">list</span>(summary) <span class="op" style="color: #5E5E5E;">+</span> [EOS])</span>
<span id="cb4-9">        mask <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> (<span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">list</span>(article)) <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> [<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">*</span> (<span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">list</span>(summary)) <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># Accounting for EOS and SEP</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;">yield</span> joint, joint, np.array(mask)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># We can combine a few data preprocessing steps into a pipeline like this.</span></span>
<span id="cb4-13">input_pipeline <span class="op" style="color: #5E5E5E;">=</span> trax.data.Serial(</span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;"># Tokenizes</span></span>
<span id="cb4-15">    trax.data.Tokenize(vocab_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'vocab_dir/'</span>,</span>
<span id="cb4-16">                       vocab_file<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'summarize32k.subword.subwords'</span>),</span>
<span id="cb4-17">    <span class="co" style="color: #5E5E5E;"># Uses function defined above</span></span>
<span id="cb4-18">    preprocess,</span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;"># Filters out examples longer than 2048</span></span>
<span id="cb4-20">    trax.data.FilterByLength(<span class="dv" style="color: #AD0000;">2048</span>)</span>
<span id="cb4-21">)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># Apply preprocessing to data streams.</span></span>
<span id="cb4-24">train_stream <span class="op" style="color: #5E5E5E;">=</span> input_pipeline(train_stream_fn())</span>
<span id="cb4-25">eval_stream <span class="op" style="color: #5E5E5E;">=</span> input_pipeline(eval_stream_fn())</span>
<span id="cb4-26"></span>
<span id="cb4-27">train_input, train_target, train_mask <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(train_stream)</span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">sum</span>((train_input <span class="op" style="color: #5E5E5E;">-</span> train_target)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>  <span class="co" style="color: #5E5E5E;"># They are the same in Language Model (LM).</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="bc4d6634-d716-4311-d49c-1956bca2bc2d" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># prints mask, 0s on article, 1s on summary</span></span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Single example mask:</span><span class="ch" style="color: #20794D;">\n\n</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>train_mask<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Single example mask:

 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]</code></pre>
</div>
</div>
<div class="cell" data-outputid="52845be8-f2fc-4803-bf7a-ed9725fe2bac" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># prints: [Example][&lt;EOS&gt;][&lt;pad&gt;][Example Summary][&lt;EOS&gt;]</span></span>
<span id="cb7-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Single example:</span><span class="ch" style="color: #20794D;">\n\n</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>detokenize(train_input)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Single example:

 By . Associated Press . PUBLISHED: . 14:11 EST, 25 October 2013 . | .
UPDATED: . 15:36 EST, 25 October 2013 . The bishop of the Fargo
Catholic Diocese in North Dakota has exposed potentially hundreds of
church members in Fargo, Grand Forks and Jamestown to the hepatitis A
virus in late September and early October. The state Health Department
has issued an advisory of exposure for anyone who attended five
churches and took communion. Bishop John Folda (pictured) of the Fargo
Catholic Diocese in North Dakota has exposed potentially hundreds of
church members in Fargo, Grand Forks and Jamestown to the hepatitis A
. State Immunization Program Manager Molly Howell says the risk is
low, but officials feel it's important to alert people to the possible
exposure. The diocese announced on Monday that Bishop John Folda is
taking time off after being diagnosed with hepatitis A. The diocese
says he contracted the infection through contaminated food while
attending a conference for newly ordained bishops in Italy last month.
Symptoms of hepatitis A include fever, tiredness, loss of appetite,
nausea and abdominal discomfort. Fargo Catholic Diocese in North
Dakota (pictured) is where the bishop is located .&lt;EOS&gt;&lt;pad&gt;BishopJohn
Folda, of North Dakota, is taking time off after being diagnosed . He
contracted the infection through contaminated food in Italy . Church
members in Fargo, Grand Forks and Jamestown could have been exposed
.&lt;EOS&gt;</code></pre>
</div>
</div>
</section>
<section id="batching-with-bucketing" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="batching-with-bucketing"><span class="header-section-number">3.3</span> Batching with bucketing</h3>
<p>We use bucketing to create batches of data.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Bucketing to create batched generators.</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># Buckets are defined in terms of boundaries and batch sizes.</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># Batch_sizes[i] determines the batch size for items with length &lt; boundaries[i]</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;"># So below, we'll take a batch of 16 sentences of length &lt; 128 , 8 of length &lt; 256,</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;"># 4 of length &lt; 512. And so on. </span></span>
<span id="cb9-7">boundaries <span class="op" style="color: #5E5E5E;">=</span>  [<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>,  <span class="dv" style="color: #AD0000;">512</span>, <span class="dv" style="color: #AD0000;">1024</span>]</span>
<span id="cb9-8">batch_sizes <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">16</span>,    <span class="dv" style="color: #AD0000;">8</span>,    <span class="dv" style="color: #AD0000;">4</span>,    <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;"># Create the streams.</span></span>
<span id="cb9-11">train_batch_stream <span class="op" style="color: #5E5E5E;">=</span> trax.data.BucketByLength(</span>
<span id="cb9-12">    boundaries, batch_sizes)(train_stream)</span>
<span id="cb9-13"></span>
<span id="cb9-14">eval_batch_stream <span class="op" style="color: #5E5E5E;">=</span> trax.data.BucketByLength(</span>
<span id="cb9-15">    boundaries, batch_sizes)(eval_stream)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Every execution will result in generation of a different article</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># We can try running this cell multiple times to see how the length of the examples affects the batch size</span></span>
<span id="cb10-3">input_batch, _, mask_batch <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(train_batch_stream)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># Shape of the input_batch</span></span>
<span id="cb10-6">input_batch.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(1, 1201)</code></pre>
</div>
</div>
<div class="cell" data-outputid="9227c68c-6369-4ce8-8137-506c594f6ad2" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># print corresponding integer values</span></span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(input_batch[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[   27 23176  4694  1779  1343    28   506  1091   132    28   570     6
    78  7124   192 14454    15  3570  2067    23    46 26133    17  1019
   635    91     3  5349 23421   494     6 10487     2   728     2  1353
  3156   278  1838    28   736   809    28 13481  7511    22   625    28
  1311  2396     3   187    22  1353  1510   181 16146  1049   320   103
     2    22 26563   651   467   213   826   192  3156  1262    28 13131
     4   186 16949    17    71 12319  6604   828 29725     4     5  1081
  1083   213    54   138     3  5349 23421   494     6 10487     2   728
     8   346    12  1353   354    15  3570  2067  7511    22 24497   570
     6    78    71   213  1081   144  3360   691 12319  6604   828     2
   705     8   231    24   305   710   272  1838    68  6341   379     9
   570     6    78  7124   436   219   132   560   429     3   368 23421
   494     6 10487     7     5  1081  1353 10874 20919   217     8 12370
    21    12  2713   127 23421   494     6 10487    40 23176   809   518
   150   181   290  3892   275   527  8947   171  1269   936   213  9025
     3    69  1353   233  8272   527  6056   583   691  4398  3156   809
 14507  5429   812  7356     3  3622  6604   828     2    28   705     6
   104     6   292 15004   181 29725     4     5 21961  1838 10687    45
     2 11985   527 11907  5364     2    40    43  1383   213  2801  1248
  1078   809    28 13481    35    40    19 23176   116  4016     2   864
   127     3   305  1353  3156 17775 12979  3095   186    77  1353   669
 27439  6050 13459  1628  1290   131   143    18   757   320  2501   213
 25725 29725     2    41   969     3 16978  1822  9855  1962     2 17347
    16     2   127  4601 27439  6050 13459  1628  5349 23421   494     6
 10487 29725     4     5  3156  2868   132   213 15191   583   527    28
   506  1091     2 12319  6604   828     2    28   583   285   143    18
    46 13488 23707  6050 13459  1628   368 23421   494     6 10487   436
   213   884   320  3429    61    15  3570  2067  6715  3156   186     2
   673  1510   181 16146  1049   320   824  1311  2396     2  1353    90
 15438    17   285    22  2214   320 17950    28   346     6   650 13131
     4     2  7228   213  1052   763   314    71   213  2358   527  3622
  6604   828 29725     4     5 18352  2398  1081     3  3622  6604   828
  1353  7214   213 19839   277   527    68 27439  9275  1628 12320  5403
  9242  5590  2385    35   710   272  1838    68  6341   132  2642 11969
 27439  6050 13459  1628  3622  6604   828   669 27884     4    40 27872
   391    28  5302   531  2504   527    68     3   305  1353    43  4925
   278   523  1383   163 20812  2801  1248  1078   186  1353  3156 17775
 12979  3095 23707  6050 13459  1628   305    40  5945   320  1242    68
  1078  7511   131   540   278   320  8916   285   131    40  2362 15627
     3  1561  1078  8075   114   369  1613  1838    68   102    41  7584
    17   458 23707  6050 13459  1628  3622  6604   828 29725     4     5
   583   132    97  2861  6107 17946     5   213  6349   527   354    28
   650     6   475  3570  2067  6715  3156  4172 29725   391  2713    25
  3630   320   245 17388   181  1884  4140  1838 23421   494     6 10487
  1820     2    35   132  4140   329   926   102   213  5556    22  1353
    86 25070   918   155   213  6700     6  2057  3602     3     9  4038
  2256  1248   864   285    22    62    18    46    95   213  3602   809
   213    55    15   651  6866  4604   279  1205  3622  6604   828 29725
     4     5  2498 12320  5403  9242  5590  2385    78    28   826   542
 15902  3569     2 11985   527 11907  5364     2    78   560   253     2
   429     3   405  2067   992  1606    22  1353    43 17997   595   239
   213    55   527   213  7124     3  6753  1565  8120   479     2  1838
 12887 26509 21380   328 29725     4     5  1839 25725  2694  1676     2
   127  3611   871  5784  1435  1248 12319     7     5   228   809   824
    55     3   305    40    46    64  1248  1078   809    28 13481   132
 15010  7301   285  2801     2    35    40    19    40   116  4016  1782
   871  2694  1606   285    77  1353  1290   131   143    18   757   320
  2501   213 25725   186  8075   114   103   919    68    68   177  1782
   368 23421   494     6 10487    40   346   126   132 15902  3569   186
  1326  1248  1078   809    28 13481  4872    22  6005  6929   809   518
   150   320   290  3892   275   527  7468    81     3    69 12402     7
    26   209   346   213 13481   320   955   278  7511   213 25725  1841
   809   239   128    10  3229  2535  1782   129  8198     7    26   217
   320   245 17388   181  1884  4140  1838   134  1820   186   849  1884
   576   329   926   102   213 25725  1606    22  1353 25070   918   155
   213  3602     2    51  2253    22    62    18    46    95   213  3602
   809   213    55   527   213 25725   186   132 13040  2398    61   592
     2   213  4038  2256  1782     9   641   527    15  2067   992  1606
   285    22  1353 17997   595    78    15  2067   239   213    55   527
   213 25725    90   103     7     5  1232   761   824    62    43    18
  3625   320    15  4398  3156   186  1201   527   490  2002 23421   494
     6 10487  1353   233  8272   527  6056   583   691  4398  3156   355
    28  2145   809 14507  5429   812     8 12370    21    12    69   969
  3611   368 23421   494     6 10487    39   169  3263   635    91   936
  5892     2    35 12319     7     5   228    18   913    68  8232  1782
    13  1525   824    39   191   101   362  3060   171  6642   116  4016
   186  1269   936   213  9025     2   181   354    28  2067   640    41
     7   165    78   213   826  1782     9 26024   527  6700  3156   186
  3156  6715   354    28  3570  2067  1435  3787     3  2994  1779   952
   320   124    90   993  3736    28  3537    55   132  2173     3    56
   347  6335   141  7270 15191   213  4472   527 16972   595    97 23891
  6412    49  1151 20327 27439  6050 13459  1628   368 23421   494     6
 10487    39   169  3263   635    91   936  5892     2    35 12319 29725
     4     5   228    18   913    68  1019   545     3    13  1525   824
    39   191   101   362  3060   171  6642   116  4016   186  1269   936
   213  9025     2   181   354    28  2067   640    41 29725     4   165
    78   213   826     3    56   347  6335   141  7270 15191   213  4472
   527 16972   595    97 23891  6412    49  1151  4172 29725   391 23421
   494     6 10487     2   527 14735     2 11985   527 11907  5364     2
  1353    43 24306  5831  4461  1838  3156  1019  1223    91 27439  9275
  1628   102  1480    22    39    18   320   976   163  2008   165     6
  1166    10     1     0  5349 23421   494     6 10487     2   728     2
    40 23176   809   518   150  3892   275   171  3156  1081 16346 27439
  6774  1628  5670   354  2067  7511    22 26563   651   467   826   132
 15902  3569     2 11985   527 11907  5364 16346 27439  6774  1628  3481
  3094   570     6    78    71   705     6   104     6   292 12319  6604
   828     7     5  1081     2  1779   710   132  2642 16346 27439  6774
  1628  2713   476    22    62    18    46    95   904  6700     6  2057
  3602   809    55   527  7124 16346 27439  6774  1628    69  1353   233
  8272   809 14507  5429   812   527  6056   583   691  4398  3156  2104
     1]</code></pre>
</div>
</div>
<p>Things to notice: - First we see the corresponding values of the words. - The first 1, which represents the <code>&lt;EOS&gt;</code> tag of the article. - Followed by a 0, which represents a <code>&lt;pad&gt;</code> tag. - After the first 0 (<code>&lt;pad&gt;</code> tag) the corresponding values are of the words that are used for the summary of the article. - The second 1 represents the <code>&lt;EOS&gt;</code> tag for the summary. - All the trailing 0s represent <code>&lt;pad&gt;</code> tags which are appended to maintain consistent length (If you don’t see them then it would mean it is already of max length)</p>
<div class="cell" data-outputid="3d455bd7-e343-4c25-a467-572d2abd837f" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># print the article and its summary</span></span>
<span id="cb14-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Article:</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>, detokenize(input_batch[<span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Article:

 A drunk driver who killed a young woman in a head-on crash while
checking his mobile phone has been jailed for six years. Craig
Eccleston-Todd, 27, was driving home from a night at a pub when he
received a text message. As he was reading or replying to it, he
veered across the road while driving round a bend and smashed into
Rachel Titley’s car coming the other way. Craig Eccleston-Todd, 27
(left) was using his mobile phone when he crashed head-on into the car
being driven by Rachel Titley, 28 (right). She died later from her
injuries . The head-on crash took place in October 2013. Mr Eccleston-
Todd's car was barely recognisable (pictured) Police said Eccleston-
Todd had drunk at least three or four pints of beer before getting
behind the wheel. He was found guilty of causing death by dangerous
driving at Portsmouth Crown Court yesterday. Miss Titley, a 28-year-
old solicitor’s clerk from Cowes, Isle of Wight, had also spent the
evening with friends at a pub but had not drunk any alcohol, police
said. She was driving responsibly and there was ‘nothing she could
have done to avoid the collision’, they added. Lindsay Pennell,
prosecuting, said: ‘Craig Eccleston-Todd’s driving resulted in the
tragic death of a young woman, Rachel Titley, a death that could have
been avoided. ‘Mr Eccleston-Todd took the decision to pick up his
mobile phone whilst driving and, either reading or replying to this
text message, was so distracted that he failed to negotiate a left-
hand bend, crossing the central white line into the path of Miss
Titley’s oncoming car. Miss Titley was pulled the wreckage of
her&nbsp;Daihatsu Cuore but died later from her injuries in hospital .
‘Miss Titley [had] a bright future ahead of her. She was also
returning home having spent an enjoyable evening with friends and was
driving responsibly. ‘She had arranged to contact her friends when she
got home to confirm that she had arrived safely. Her friends sadly
never heard from her after they parted company. ‘Miss Titley’s death
in these circumstances reiterates the danger of using a hand-held
mobile phone whilst driving.’ Police were unable to take breath or
blood tests from Eccleston-Todd immediately, but in tests several
hours after the accident he was only marginally under the drink-drive
limit. The judge agreed with police that he would have been over the
limit at the time his red Citroen hit Miss Titley’s blue Daihatsu
Cuore on a road near Yarmouth, Isle of Wight, on October 11, 2013. His
phone records showed he was also texting around the time of the crash.
PC Mark Furse, from Hampshire constabulary’s serious collision
investigation unit, said: 'Our thoughts are with Rachel's family at
this time. She had been out with friends at a pub in Shalfleet that
evening, but had not had any alcohol. 'Our investigation showed that
there was nothing she could have done to avoid the collision and sadly
it cost her her life. 'Mr Eccleston-Todd had left work in Yarmouth and
met with friends at a pub where he drank at least three to four pints
of lager. He hadn't long left the pub to return home when the
collision occurred at around 9.30pm. 'We weren't able to take breath
or blood tests from him immediately and although blood taken several
hours after the collision showed he was marginally under the limit, we
maintain he would have been over the limit at the time of the
collision and in summing up today, the judge agreed. 'The analysis of
his phone records showed that he was texting on his phone around the
time of the collision so it's highly likely this would also have
contributed to his dangerous driving and loss of control.' Eccleston-
Todd was found guilty of causing death by dangerous driving following
a trial at Portsmouth Crown Court (pictured) He added: 'Mr Eccleston-
Todd will now spend six years behind bars, but Rachel's family have
lost her forever. 'I hope this will make people think twice before
drinking any alcohol and getting behind the wheel, or using a phone
once they're on the road. 'The dangers of drink driving and driving
whilst using a mobile phone are obvious. Those who continue to do so
risk spending a substantial time in prison. This case highlights just
how tragic the consequences of committing these offences can be.' ‘Mr
Eccleston-Todd will now spend six years behind bars, but Rachel’s
family have lost her for ever. I hope this will make people think
twice before drinking any alcohol and getting behind the wheel, or
using a phone once they’re on the road. This case highlights just how
tragic the consequences of committing these offences can be.’
Eccleston-Todd, of Newport, Isle of Wight, was also disqualified from
driving for eight years&nbsp;after which he will have to complete an
extended re-test.&lt;EOS&gt;&lt;pad&gt;CraigEccleston-Todd, 27, had drunk at least
three pints before driving car . Was using phone when he veered across
road in Yarmouth, Isle of Wight . Crashed head-on into 28-year-old
Rachel Titley's car, who died in hospital . Police say he would have
been over legal drink-drive limit at time of crash . He was found
guilty at Portsmouth Crown Court of causing death by dangerous driving
.&lt;EOS&gt;</code></pre>
</div>
</div>
<p>We can see that the data has the following structure: - <span style="color:blue"> [Article] </span> -&gt; <code>&lt;EOS&gt;</code> -&gt; <code>&lt;pad&gt;</code> -&gt; <span style="color:blue"> [Article Summary] </span> -&gt; <code>&lt;EOS&gt;</code> -&gt; (possibly) multiple <code>&lt;pad&gt;</code></p>
<p>The loss is taken only on the summary using cross_entropy as loss function.</p>
</section>
</section>
<section id="summarization-with-transformer" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="summarization-with-transformer"><span class="header-section-number">4</span> Summarization with transformer</h2>
<p>Now that we have the data generator and have handled the preprocessing, it is time to build our model.</p>
<p>We will be implementing the attention from scratch and then using it in our transformer model. Concretely, we will understand how attention works, and how we use it to connect the encoder and the decoder.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/transformer_decoder_zoomin.png" width="800"></p>
<section id="dot-product-attention" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="dot-product-attention"><span class="header-section-number">4.1</span> Dot product attention</h3>
<p>Now we will implement dot product attention which takes in a query, key, value, and a mask. It returns the output.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/dotproduct.png" width="800"></p>
<p>These are some helper functions that will help create tensors and display useful information: - <code>create_tensor</code> creates a <code>jax numpy array</code> from a list of lists. - <code>display_tensor</code> prints out the shape and the actual tensor.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> create_tensor(t):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;">"""Create tensor from list of lists"""</span></span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;">return</span> jnp.array(t)</span>
<span id="cb16-4"></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="kw" style="color: #003B4F;">def</span> display_tensor(t, name):</span>
<span id="cb16-7">    <span class="co" style="color: #5E5E5E;">"""Display shape and tensor"""</span></span>
<span id="cb16-8">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> shape: </span><span class="sc" style="color: #5E5E5E;">{</span>t<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb16-9">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>t<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
</div>
<p>Before implementing, we can play around with a toy example of <code>dot product attention</code> without the softmax operation. Technically it would not be <code>dot product attention</code> without the softmax but this is done to avoid giving away too much of the answer and the idea is to display these tensors to give you a sense of how they look like.</p>
<p>The formula for attention is this one:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%20%7B%20Attention%20%7D(Q,%20K,%20V)=%5Coperatorname%7Bsoftmax%7D%5Cleft(%5Cfrac%7BQ%20K%5E%7BT%7D%7D%7B%5Csqrt%7Bd_%7Bk%7D%7D%7D+%7BM%7D%5Cright)%20V%5Ctag%7B1%7D%5C%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?d_%7Bk%7D"> stands for the dimension of queries and keys.</p>
<p>The <code>query</code>, <code>key</code>, <code>value</code> and <code>mask</code> vectors are provided for this example.</p>
<p>Notice that the masking is done using very negative values that will yield a similar effect to using $-$.</p>
<div class="cell" data-outputid="d6d78a8e-e3cc-47af-9584-2bdcdfcca0cd" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">q <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb17-2">display_tensor(q, <span class="st" style="color: #20794D;">'query'</span>)</span>
<span id="cb17-3">k <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>]])</span>
<span id="cb17-4">display_tensor(k, <span class="st" style="color: #20794D;">'key'</span>)</span>
<span id="cb17-5">v <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb17-6">display_tensor(v, <span class="st" style="color: #20794D;">'value'</span>)</span>
<span id="cb17-7">m <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1e9</span>, <span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb17-8">display_tensor(m, <span class="st" style="color: #20794D;">'mask'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>query shape: (2, 3)

[[1 0 0]
 [0 1 0]]

key shape: (2, 3)

[[1 2 3]
 [4 5 6]]

value shape: (2, 3)

[[0 1 0]
 [1 0 1]]

mask shape: (2, 2)

[[ 0.e+00  0.e+00]
 [-1.e+09  0.e+00]]
</code></pre>
</div>
</div>
<div class="cell" data-outputid="f01ea4ca-4152-4b54-b76a-e4b5917ae2b7" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">q_dot_k <span class="op" style="color: #5E5E5E;">=</span> q <span class="op" style="color: #5E5E5E;">@</span> k.T <span class="op" style="color: #5E5E5E;">/</span> jnp.sqrt(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb19-2">display_tensor(q_dot_k, <span class="st" style="color: #20794D;">'query dot key'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>query dot key shape: (2, 2)

[[0.57735026 2.309401  ]
 [1.1547005  2.8867514 ]]
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">masked <span class="op" style="color: #5E5E5E;">=</span> q_dot_k <span class="op" style="color: #5E5E5E;">+</span> m</span>
<span id="cb21-2">display_tensor(masked, <span class="st" style="color: #20794D;">'masked query dot key'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>masked query dot key shape: (2, 2)

[[ 5.7735026e-01  2.3094010e+00]
 [-1.0000000e+09  2.8867514e+00]]
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">display_tensor(masked <span class="op" style="color: #5E5E5E;">@</span> v, <span class="st" style="color: #20794D;">'masked query dot key dot value'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>masked query dot key dot value shape: (2, 3)

[[ 2.3094010e+00  5.7735026e-01  2.3094010e+00]
 [ 2.8867514e+00 -1.0000000e+09  2.8867514e+00]]
</code></pre>
</div>
</div>
<p>In order to use the previous dummy tensors to test some of the graded functions, a batch dimension should be added to them so they mimic the shape of real-life examples. The mask is also replaced by a version of it that resembles the one that is used by trax:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">q_with_batch <span class="op" style="color: #5E5E5E;">=</span> q[<span class="va" style="color: #111111;">None</span>,:]</span>
<span id="cb25-2">display_tensor(q_with_batch, <span class="st" style="color: #20794D;">'query with batch dim'</span>)</span>
<span id="cb25-3">k_with_batch <span class="op" style="color: #5E5E5E;">=</span> k[<span class="va" style="color: #111111;">None</span>,:]</span>
<span id="cb25-4">display_tensor(k_with_batch, <span class="st" style="color: #20794D;">'key with batch dim'</span>)</span>
<span id="cb25-5">v_with_batch <span class="op" style="color: #5E5E5E;">=</span> v[<span class="va" style="color: #111111;">None</span>,:]</span>
<span id="cb25-6">display_tensor(v_with_batch, <span class="st" style="color: #20794D;">'value with batch dim'</span>)</span>
<span id="cb25-7">m_bool <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="va" style="color: #111111;">True</span>, <span class="va" style="color: #111111;">True</span>], [<span class="va" style="color: #111111;">False</span>, <span class="va" style="color: #111111;">True</span>]])</span>
<span id="cb25-8">display_tensor(m_bool, <span class="st" style="color: #20794D;">'boolean mask'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>query with batch dim shape: (1, 2, 3)

[[[1 0 0]
  [0 1 0]]]

key with batch dim shape: (1, 2, 3)

[[[1 2 3]
  [4 5 6]]]

value with batch dim shape: (1, 2, 3)

[[[0 1 0]
  [1 0 1]]]

boolean mask shape: (2, 2)

[[ True  True]
 [False  True]]
</code></pre>
</div>
</div>
<p>Let’s now implement the dot product attention. Concretely, we will implement the following equation</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%20%7B%20Attention%20%7D(Q,%20K,%20V)=%5Coperatorname%7Bsoftmax%7D%5Cleft(%5Cfrac%7BQ%20K%5E%7BT%7D%7D%7B%5Csqrt%7Bd_%7Bk%7D%7D%7D+%7BM%7D%5Cright)%20V%5Ctag%7B1%7D%5C%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?Q"> - query, <img src="https://latex.codecogs.com/png.latex?K"> - key, <img src="https://latex.codecogs.com/png.latex?V"> - values, <img src="https://latex.codecogs.com/png.latex?M"> - mask, <img src="https://latex.codecogs.com/png.latex?%7Bd_k%7D"> - depth/dimension of the queries and keys (used for scaling down)</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> DotProductAttention(query, key, value, mask):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;">"""Dot product self-attention.</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;">        query (jax.interpreters.xla.DeviceArray): array of query representations with shape (L_q by d)</span></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;">        key (jax.interpreters.xla.DeviceArray): array of key representations with shape (L_k by d)</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;">        value (jax.interpreters.xla.DeviceArray): array of value representations with shape (L_k by d) where L_v = L_k</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;">        mask (jax.interpreters.xla.DeviceArray): attention-mask, gates attention with shape (L_q by L_k)</span></span>
<span id="cb27-8"></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;">        jax.interpreters.xla.DeviceArray: Self-attention array for q, k, v arrays. (L_q by d)</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb27-12"></span>
<span id="cb27-13">    <span class="cf" style="color: #003B4F;">assert</span> query.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> key.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> value.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], <span class="st" style="color: #20794D;">"Embedding dimensions of q, k, v aren't all the same"</span></span>
<span id="cb27-14"></span>
<span id="cb27-15">    <span class="co" style="color: #5E5E5E;"># Save depth/dimension of the query embedding for scaling down the dot product</span></span>
<span id="cb27-16">    depth <span class="op" style="color: #5E5E5E;">=</span> query.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb27-17"></span>
<span id="cb27-18">    <span class="co" style="color: #5E5E5E;"># Calculate scaled query key dot product according to formula above</span></span>
<span id="cb27-19">    dots <span class="op" style="color: #5E5E5E;">=</span> jnp.matmul(query, jnp.swapaxes(key, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="op" style="color: #5E5E5E;">/</span> jnp.sqrt(depth)</span>
<span id="cb27-20">    </span>
<span id="cb27-21">    <span class="co" style="color: #5E5E5E;"># Apply the mask</span></span>
<span id="cb27-22">    <span class="cf" style="color: #003B4F;">if</span> mask <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>: <span class="co" style="color: #5E5E5E;"># You do not need to replace the 'None' on this line</span></span>
<span id="cb27-23">        dots <span class="op" style="color: #5E5E5E;">=</span> jnp.where(mask, dots, jnp.full_like(dots, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1e9</span>))</span>
<span id="cb27-24">    </span>
<span id="cb27-25">    <span class="co" style="color: #5E5E5E;"># Softmax formula implementation</span></span>
<span id="cb27-26">    <span class="co" style="color: #5E5E5E;"># We use trax.fastmath.logsumexp of masked_qkT to avoid underflow by division by large numbers</span></span>
<span id="cb27-27">    logsumexp <span class="op" style="color: #5E5E5E;">=</span> trax.fastmath.logsumexp(dots, axis<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, keepdims<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb27-28"></span>
<span id="cb27-29">    <span class="co" style="color: #5E5E5E;"># Take exponential of dots minus logsumexp to get softmax</span></span>
<span id="cb27-30">    dots <span class="op" style="color: #5E5E5E;">=</span> jnp.exp(dots <span class="op" style="color: #5E5E5E;">-</span> logsumexp)</span>
<span id="cb27-31"></span>
<span id="cb27-32">    <span class="co" style="color: #5E5E5E;"># Multiply dots by value to get self-attention</span></span>
<span id="cb27-33">    attention <span class="op" style="color: #5E5E5E;">=</span> jnp.matmul(dots, value)</span>
<span id="cb27-34">    </span>
<span id="cb27-35">    <span class="cf" style="color: #003B4F;">return</span> attention</span></code></pre></div>
</div>
<div class="cell" data-outputid="1c51af3a-5f11-480f-b33b-419072d8298c" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">DotProductAttention(q_with_batch, k_with_batch, v_with_batch, m_bool)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>DeviceArray([[[0.8496746 , 0.15032545, 0.8496746 ],
              [1.        , 0.        , 1.        ]]], dtype=float32)</code></pre>
</div>
</div>
</section>
<section id="causal-attention" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="causal-attention"><span class="header-section-number">4.2</span> Causal Attention</h3>
<p>Now we are going to implement causal attention: multi-headed attention with a mask to attend only to words that occurred before.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/causal.png" width="800"></p>
<p>In the image above, a word can see everything that is before it, but not what is after it. To implement causal attention, we will have to transform vectors and do many reshapes.</p>
<p>We will implement the following functions that will be needed for Causal Attention:</p>
<ul>
<li><span style="color:blue"> compute_attention_heads </span>: Gets an input <img src="https://latex.codecogs.com/png.latex?x"> of dimension (n_batch, seqlen, n_heads <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> d_head) and splits the last (depth) dimension and stacks it to the zeroth dimension to allow matrix multiplication (n_batch <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> n_heads, seqlen, d_head).</li>
<li><span style="color:blue"> dot_product_self_attention </span>: Creates a mask matrix with <code>False</code> values above the diagonal and <code>True</code> values below and calls DotProductAttention which implements dot product self attention.</li>
<li><span style="color:blue"> compute_attention_output </span>: Undoes compute_attention_heads by splitting first (vertical) dimension and stacking in the last (depth) dimension (n_batch, seqlen, n_heads <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> d_head). These operations concatenate (stack/merge) the heads.</li>
</ul>
<p>We use some toy tensors which gives us an idea of the data shapes and opperations involved in Causal Attention. They are also useful to test out our functions!</p>
<div class="cell" data-outputid="847a9416-877a-4246-c738-0eacdf46de59" data-execution_count="21">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">tensor2d <span class="op" style="color: #5E5E5E;">=</span> create_tensor(q)</span>
<span id="cb30-2">display_tensor(tensor2d, <span class="st" style="color: #20794D;">'query matrix (2D tensor)'</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4">tensor4d2b <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[q, q], [q, q]])</span>
<span id="cb30-5">display_tensor(tensor4d2b, <span class="st" style="color: #20794D;">'batch of two (multi-head) collections of query matrices (4D tensor)'</span>)</span>
<span id="cb30-6"></span>
<span id="cb30-7">tensor3dc <span class="op" style="color: #5E5E5E;">=</span> create_tensor([jnp.concatenate([q, q], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)])</span>
<span id="cb30-8">display_tensor(tensor3dc, <span class="st" style="color: #20794D;">'one batch of concatenated heads of query matrices (3d tensor)'</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10">tensor3dc3b <span class="op" style="color: #5E5E5E;">=</span> create_tensor([jnp.concatenate([q, q], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>), jnp.concatenate([q, q], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>), jnp.concatenate([q, q], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)])</span>
<span id="cb30-11">display_tensor(tensor3dc3b, <span class="st" style="color: #20794D;">'three batches of concatenated heads of query matrices (3d tensor)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>query matrix (2D tensor) shape: (2, 3)

[[1 0 0]
 [0 1 0]]

batch of two (multi-head) collections of query matrices (4D tensor) shape: (2, 2, 2, 3)

[[[[1 0 0]
   [0 1 0]]

  [[1 0 0]
   [0 1 0]]]


 [[[1 0 0]
   [0 1 0]]

  [[1 0 0]
   [0 1 0]]]]

one batch of concatenated heads of query matrices (3d tensor) shape: (1, 2, 6)

[[[1 0 0 1 0 0]
  [0 1 0 0 1 0]]]

three batches of concatenated heads of query matrices (3d tensor) shape: (3, 2, 6)

[[[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]]
</code></pre>
</div>
</div>
<p>It is important to know that the following 3 functions would normally be defined within the <code>CausalAttention</code> function further below.</p>
<p>However this makes these functions harder to test. Because of this, these functions are shown individually using a <code>closure</code> (when necessary) that simulates them being inside of the <code>CausalAttention</code> function. This is done because they rely on some variables that can be accessed from within <code>CausalAttention</code>.</p>
</section>
<section id="support-functions" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="support-functions"><span class="header-section-number">4.3</span> Support Functions</h3>
<p><span style="color:blue"> compute_attention_heads </span>: Gets an input <img src="https://latex.codecogs.com/png.latex?x"> of dimension (n_batch, seqlen, n_heads <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> d_head) and splits the last (depth) dimension and stacks it to the zeroth dimension to allow matrix multiplication (n_batch <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> n_heads, seqlen, d_head).</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> compute_attention_heads_closure(n_heads, d_head):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;">""" Function that simulates environment inside CausalAttention function.</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;">        d_head (int):  dimensionality of heads</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;">        function: compute_attention_heads function</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb32-9"></span>
<span id="cb32-10">    <span class="kw" style="color: #003B4F;">def</span> compute_attention_heads(x):</span>
<span id="cb32-11">        <span class="co" style="color: #5E5E5E;">""" Compute the attention heads.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;">            x (jax.interpreters.xla.DeviceArray): tensor with shape (n_batch, seqlen, n_heads X d_head).</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;">            jax.interpreters.xla.DeviceArray: reshaped tensor with shape (n_batch X n_heads, seqlen, d_head).</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb32-17">        </span>
<span id="cb32-18">        <span class="co" style="color: #5E5E5E;"># Size of the x's batch dimension</span></span>
<span id="cb32-19">        batch_size <span class="op" style="color: #5E5E5E;">=</span> x.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb32-20">        <span class="co" style="color: #5E5E5E;"># Length of the sequence</span></span>
<span id="cb32-21">        <span class="co" style="color: #5E5E5E;"># Should be size of x's first dimension without counting the batch dim</span></span>
<span id="cb32-22">        seqlen <span class="op" style="color: #5E5E5E;">=</span> x.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb32-23">        <span class="co" style="color: #5E5E5E;"># Reshape x using jnp.reshape()</span></span>
<span id="cb32-24">        <span class="co" style="color: #5E5E5E;"># n_batch, seqlen, n_heads*d_head -&gt; n_batch, seqlen, n_heads, d_head</span></span>
<span id="cb32-25">        x <span class="op" style="color: #5E5E5E;">=</span> jnp.reshape(x, (batch_size, seqlen, n_heads, d_head))</span>
<span id="cb32-26">        <span class="co" style="color: #5E5E5E;"># Transpose x using jnp.transpose()</span></span>
<span id="cb32-27">        <span class="co" style="color: #5E5E5E;"># n_batch, seqlen, n_heads, d_head -&gt; n_batch, n_heads, seqlen, d_head</span></span>
<span id="cb32-28">        <span class="co" style="color: #5E5E5E;"># Note that the values within the tuple are the indexes of the dimensions of x and we must rearrange them</span></span>
<span id="cb32-29">        x <span class="op" style="color: #5E5E5E;">=</span> jnp.transpose(x, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb32-30">        <span class="co" style="color: #5E5E5E;"># Reshape x using jnp.reshape()</span></span>
<span id="cb32-31">        <span class="co" style="color: #5E5E5E;"># n_batch, n_heads, seqlen, d_head -&gt; n_batch*n_heads, seqlen, d_head</span></span>
<span id="cb32-32">        x <span class="op" style="color: #5E5E5E;">=</span> jnp.reshape(x, (batch_size<span class="op" style="color: #5E5E5E;">*</span>n_heads, seqlen, d_head))</span>
<span id="cb32-33"></span>
<span id="cb32-34">        <span class="cf" style="color: #003B4F;">return</span> x</span>
<span id="cb32-35">    <span class="cf" style="color: #003B4F;">return</span> compute_attention_heads</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">display_tensor(tensor3dc3b, <span class="st" style="color: #20794D;">"input tensor"</span>)</span>
<span id="cb33-2">result_cah <span class="op" style="color: #5E5E5E;">=</span> compute_attention_heads_closure(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)(tensor3dc3b)</span>
<span id="cb33-3">display_tensor(result_cah, <span class="st" style="color: #20794D;">"output tensor"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>input tensor shape: (3, 2, 6)

[[[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]]

output tensor shape: (6, 2, 3)

[[[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]]
</code></pre>
</div>
</div>
<p><span style="color:blue"> dot_product_self_attention </span>: Creates a mask matrix with <code>False</code> values above the diagonal and <code>True</code> values below and calls DotProductAttention which implements dot product self attention.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;">def</span> dot_product_self_attention(q, k, v):</span>
<span id="cb35-2">    <span class="co" style="color: #5E5E5E;">""" Masked dot product self attention.</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;">        q (jax.interpreters.xla.DeviceArray): queries.</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;">        k (jax.interpreters.xla.DeviceArray): keys.</span></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;">        v (jax.interpreters.xla.DeviceArray): values.</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb35-8"><span class="co" style="color: #5E5E5E;">        jax.interpreters.xla.DeviceArray: masked dot product self attention tensor.</span></span>
<span id="cb35-9"><span class="co" style="color: #5E5E5E;">    """</span>    </span>
<span id="cb35-10">    <span class="co" style="color: #5E5E5E;"># Mask size should be equal to L_q. Q has shape (batch_size, L_q, d)</span></span>
<span id="cb35-11">    mask_size <span class="op" style="color: #5E5E5E;">=</span> q.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb35-12"></span>
<span id="cb35-13"></span>
<span id="cb35-14">    <span class="co" style="color: #5E5E5E;"># Creates a matrix with ones below the diagonal and 0s above. It should have shape (1, mask_size, mask_size)</span></span>
<span id="cb35-15">    <span class="co" style="color: #5E5E5E;"># Notice that 1's and 0's get casted to True/False by setting dtype to jnp.bool_</span></span>
<span id="cb35-16">    mask <span class="op" style="color: #5E5E5E;">=</span> jnp.tril(jnp.ones((<span class="dv" style="color: #AD0000;">1</span>, mask_size, mask_size), dtype<span class="op" style="color: #5E5E5E;">=</span>jnp.bool_), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb35-17">    </span>
<span id="cb35-18">    <span class="cf" style="color: #003B4F;">return</span> DotProductAttention(q, k, v, mask)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">dot_product_self_attention(q_with_batch, k_with_batch, v_with_batch)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>DeviceArray([[[0.        , 1.        , 0.        ],
              [0.8496746 , 0.15032543, 0.8496746 ]]], dtype=float32)</code></pre>
</div>
</div>
<p><span style="color:blue"> compute_attention_output </span>: Undoes compute_attention_heads by splitting first (vertical) dimension and stacking in the last (depth) dimension (n_batch, seqlen, n_heads <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> d_head). These operations concatenate (stack/merge) the heads.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;">def</span> compute_attention_output_closure(n_heads, d_head):</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;">""" Function that simulates environment inside CausalAttention function.</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;">        d_head (int):  dimensionality of heads</span></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;">        function: compute_attention_output function</span></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb38-9">    </span>
<span id="cb38-10">    <span class="kw" style="color: #003B4F;">def</span> compute_attention_output(x):</span>
<span id="cb38-11">        <span class="co" style="color: #5E5E5E;">""" Compute the attention output.</span></span>
<span id="cb38-12"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb38-13"><span class="co" style="color: #5E5E5E;">            x (jax.interpreters.xla.DeviceArray): tensor with shape (n_batch X n_heads, seqlen, d_head).</span></span>
<span id="cb38-14"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;">            jax.interpreters.xla.DeviceArray: reshaped tensor with shape (n_batch, seqlen, n_heads X d_head).</span></span>
<span id="cb38-16"><span class="co" style="color: #5E5E5E;">        """</span>        </span>
<span id="cb38-17">        <span class="co" style="color: #5E5E5E;"># Length of the sequence</span></span>
<span id="cb38-18">        <span class="co" style="color: #5E5E5E;"># Should be size of x's first dimension without counting the batch dim</span></span>
<span id="cb38-19">        seqlen <span class="op" style="color: #5E5E5E;">=</span> x.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb38-20">        <span class="co" style="color: #5E5E5E;"># Reshape x using jnp.reshape() to shape (n_batch, n_heads, seqlen, d_head)</span></span>
<span id="cb38-21">        x <span class="op" style="color: #5E5E5E;">=</span> jnp.reshape(x, (<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, n_heads, seqlen, d_head))</span>
<span id="cb38-22">        <span class="co" style="color: #5E5E5E;"># Transpose x using jnp.transpose() to shape (n_batch, seqlen, n_heads, d_head)</span></span>
<span id="cb38-23">        x <span class="op" style="color: #5E5E5E;">=</span> jnp.transpose(x, (<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb38-24">        </span>
<span id="cb38-25">        <span class="co" style="color: #5E5E5E;"># Reshape to allow to concatenate the heads</span></span>
<span id="cb38-26">        <span class="cf" style="color: #003B4F;">return</span> jnp.reshape(x, (<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, seqlen, n_heads <span class="op" style="color: #5E5E5E;">*</span> d_head))</span>
<span id="cb38-27">    <span class="cf" style="color: #003B4F;">return</span> compute_attention_output</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">display_tensor(result_cah, <span class="st" style="color: #20794D;">"input tensor"</span>)</span>
<span id="cb39-2">result_cao <span class="op" style="color: #5E5E5E;">=</span> compute_attention_output_closure(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)(result_cah)</span>
<span id="cb39-3">display_tensor(result_cao, <span class="st" style="color: #20794D;">"output tensor"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>input tensor shape: (6, 2, 3)

[[[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]

 [[1 0 0]
  [0 1 0]]]

output tensor shape: (3, 2, 6)

[[[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]

 [[1 0 0 1 0 0]
  [0 1 0 0 1 0]]]
</code></pre>
</div>
</div>
</section>
<section id="causal-attention-function" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="causal-attention-function"><span class="header-section-number">4.4</span> Causal Attention Function</h3>
<p>Now it is time for us to put everything together within the <code>CausalAttention</code> or Masked multi-head attention function:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/masked-attention.png"></p>
<p>We will implement causal attention. Our model returns the causal attention through a <img src="https://latex.codecogs.com/png.latex?tl.Serial"> with the following:</p>
<ul>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Branch">tl.Branch</a> </span>: consisting of 3 [tl.Dense(d_feature), ComputeAttentionHeads] to account for the queries, keys, and values.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.base.Fn">tl.Fn</a></span>: Takes in dot_product_self_attention function and uses it to compute the dot product using <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?K">, <img src="https://latex.codecogs.com/png.latex?V">.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.base.Fn">tl.Fn</a></span>: Takes in compute_attention_output_closure to allow for parallel computing.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense">tl.Dense</a></span>: Final Dense layer, with dimension <code>d_feature</code>.</li>
</ul>
<p>In order for trax to properly handle the functions we just defined, they need to be added as layers using the <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.base.Fn"><code>tl.Fn()</code></a> function.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">def</span> CausalAttention(d_feature, </span>
<span id="cb41-2">                    n_heads, </span>
<span id="cb41-3">                    compute_attention_heads_closure<span class="op" style="color: #5E5E5E;">=</span>compute_attention_heads_closure,</span>
<span id="cb41-4">                    dot_product_self_attention<span class="op" style="color: #5E5E5E;">=</span>dot_product_self_attention,</span>
<span id="cb41-5">                    compute_attention_output_closure<span class="op" style="color: #5E5E5E;">=</span>compute_attention_output_closure,</span>
<span id="cb41-6">                    mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>):</span>
<span id="cb41-7">    <span class="co" style="color: #5E5E5E;">"""Transformer-style multi-headed causal attention.</span></span>
<span id="cb41-8"></span>
<span id="cb41-9"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb41-10"><span class="co" style="color: #5E5E5E;">        d_feature (int):  dimensionality of feature embedding.</span></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads.</span></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;">        compute_attention_heads_closure (function): Closure around compute_attention heads.</span></span>
<span id="cb41-13"><span class="co" style="color: #5E5E5E;">        dot_product_self_attention (function): dot_product_self_attention function. </span></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;">        compute_attention_output_closure (function): Closure around compute_attention_output. </span></span>
<span id="cb41-15"><span class="co" style="color: #5E5E5E;">        mode (str): 'train' or 'eval'.</span></span>
<span id="cb41-16"></span>
<span id="cb41-17"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb41-18"><span class="co" style="color: #5E5E5E;">        trax.layers.combinators.Serial: Multi-headed self-attention model.</span></span>
<span id="cb41-19"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb41-20">    </span>
<span id="cb41-21">    <span class="cf" style="color: #003B4F;">assert</span> d_feature <span class="op" style="color: #5E5E5E;">%</span> n_heads <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb41-22">    d_head <span class="op" style="color: #5E5E5E;">=</span> d_feature <span class="op" style="color: #5E5E5E;">//</span> n_heads</span>
<span id="cb41-23">    </span>
<span id="cb41-24">    <span class="co" style="color: #5E5E5E;"># The second argument to tl.Fn() is an uncalled function (without the parentheses)</span></span>
<span id="cb41-25">    <span class="co" style="color: #5E5E5E;"># Since we are dealing with closures we might need to call the outer </span></span>
<span id="cb41-26">    <span class="co" style="color: #5E5E5E;"># function with the correct parameters to get the actual uncalled function.</span></span>
<span id="cb41-27">    ComputeAttentionHeads <span class="op" style="color: #5E5E5E;">=</span> tl.Fn(<span class="st" style="color: #20794D;">'AttnHeads'</span>, compute_attention_heads_closure(n_heads, d_head), n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb41-28">        </span>
<span id="cb41-29"></span>
<span id="cb41-30">    <span class="cf" style="color: #003B4F;">return</span> tl.Serial(</span>
<span id="cb41-31">        tl.Branch( <span class="co" style="color: #5E5E5E;"># creates three towers for one input, takes activations and creates queries keys and values</span></span>
<span id="cb41-32">            [tl.Dense(d_feature), ComputeAttentionHeads], <span class="co" style="color: #5E5E5E;"># queries</span></span>
<span id="cb41-33">            [tl.Dense(d_feature), ComputeAttentionHeads], <span class="co" style="color: #5E5E5E;"># keys</span></span>
<span id="cb41-34">            [tl.Dense(d_feature), ComputeAttentionHeads], <span class="co" style="color: #5E5E5E;"># values</span></span>
<span id="cb41-35">        ),</span>
<span id="cb41-36">        </span>
<span id="cb41-37">        tl.Fn(<span class="st" style="color: #20794D;">'DotProductAttn'</span>, dot_product_self_attention, n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>), <span class="co" style="color: #5E5E5E;"># takes QKV</span></span>
<span id="cb41-38">        <span class="co" style="color: #5E5E5E;"># The second argument to tl.Fn() is an uncalled function</span></span>
<span id="cb41-39">        <span class="co" style="color: #5E5E5E;"># Since we are dealing with closures we might need to call the outer </span></span>
<span id="cb41-40">        <span class="co" style="color: #5E5E5E;"># function with the correct parameters to get the actual uncalled function.</span></span>
<span id="cb41-41">        tl.Fn(<span class="st" style="color: #20794D;">'AttnOutput'</span>, compute_attention_output_closure(n_heads, d_head), n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>), <span class="co" style="color: #5E5E5E;"># to allow for parallel</span></span>
<span id="cb41-42">        tl.Dense(d_feature) <span class="co" style="color: #5E5E5E;"># Final dense layer</span></span>
<span id="cb41-43">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Take a look at the causal attention model</span></span>
<span id="cb42-2"><span class="bu" style="color: null;">print</span>(CausalAttention(d_feature<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>, n_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Serial[
  Branch_out3[
    [Dense_512, AttnHeads]
    [Dense_512, AttnHeads]
    [Dense_512, AttnHeads]
  ]
  DotProductAttn_in3
  AttnOutput
  Dense_512
]</code></pre>
</div>
</div>
</section>
<section id="transformer-decoder-block" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="transformer-decoder-block"><span class="header-section-number">4.5</span> Transformer decoder block</h3>
<p>Now that we have implemented the causal part of the transformer, we will implement the transformer decoder block. Concretely we will be implementing this image now.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/transformer_decoder_1.png" style="height:300px"></p>
<p>To implement this function, we will have to call the <code>CausalAttention</code> or Masked multi-head attention function we implemented above. We will have to add a feedforward which consists of:</p>
<ul>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.normalization.LayerNorm">tl.LayerNorm</a> </span>: used to layer normalize</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense">tl.Dense</a> </span>: the dense layer</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.activation_fns.Relu">ff_activation</a> </span>: feed forward activation (we use ReLu) here.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dropout">tl.Dropout</a> </span>: dropout layer</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense">tl.Dense</a> </span>: dense layer</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dropout">tl.Dropout</a> </span>: dropout layer</li>
</ul>
<p>Finally once we implement the feedforward, we can go ahead and implement the entire block using:</p>
<ul>
<li><p><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Residual">tl.Residual</a> </span>: takes in the tl.LayerNorm(), causal attention block, tl.dropout.</p></li>
<li><p><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Residual">tl.Residual</a> </span>: takes in the feedforward block you will implement.</p></li>
</ul>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;">def</span> DecoderBlock(d_model, d_ff, n_heads,</span>
<span id="cb44-2">                 dropout, mode, ff_activation):</span>
<span id="cb44-3">    <span class="co" style="color: #5E5E5E;">"""Returns a list of layers that implements a Transformer decoder block.</span></span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="co" style="color: #5E5E5E;">    The input is an activation tensor.</span></span>
<span id="cb44-6"></span>
<span id="cb44-7"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb44-8"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;">        d_ff (int): depth of feed-forward layer.</span></span>
<span id="cb44-10"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads.</span></span>
<span id="cb44-11"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb44-12"><span class="co" style="color: #5E5E5E;">        mode (str): 'train' or 'eval'.</span></span>
<span id="cb44-13"><span class="co" style="color: #5E5E5E;">        ff_activation (function): the non-linearity in feed-forward layer.</span></span>
<span id="cb44-14"></span>
<span id="cb44-15"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb44-16"><span class="co" style="color: #5E5E5E;">        list: list of trax.layers.combinators.Serial that maps an activation tensor to an activation tensor.</span></span>
<span id="cb44-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb44-18">        </span>
<span id="cb44-19">    <span class="co" style="color: #5E5E5E;"># Create masked multi-head attention block using CausalAttention function</span></span>
<span id="cb44-20">    causal_attention <span class="op" style="color: #5E5E5E;">=</span> CausalAttention( </span>
<span id="cb44-21">                        d_feature<span class="op" style="color: #5E5E5E;">=</span>d_model,</span>
<span id="cb44-22">                        n_heads<span class="op" style="color: #5E5E5E;">=</span>n_heads,</span>
<span id="cb44-23">                        mode<span class="op" style="color: #5E5E5E;">=</span>mode</span>
<span id="cb44-24">                        )</span>
<span id="cb44-25"></span>
<span id="cb44-26">    <span class="co" style="color: #5E5E5E;"># Create feed-forward block (list) with two dense layers with dropout and input normalized</span></span>
<span id="cb44-27">    feed_forward <span class="op" style="color: #5E5E5E;">=</span> [ </span>
<span id="cb44-28">        <span class="co" style="color: #5E5E5E;"># Normalize layer inputs</span></span>
<span id="cb44-29">        tl.LayerNorm(),</span>
<span id="cb44-30">        <span class="co" style="color: #5E5E5E;"># Add first feed forward (dense) layer (don't forget to set the correct value for n_units)</span></span>
<span id="cb44-31">        tl.Dense(d_ff),</span>
<span id="cb44-32">        <span class="co" style="color: #5E5E5E;"># Add activation function passed in as a parameter (you need to call it!)</span></span>
<span id="cb44-33">        ff_activation(), <span class="co" style="color: #5E5E5E;"># Generally ReLU</span></span>
<span id="cb44-34">        <span class="co" style="color: #5E5E5E;"># Add dropout with rate and mode specified (i.e., don't use dropout during evaluation)</span></span>
<span id="cb44-35">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode),</span>
<span id="cb44-36">        <span class="co" style="color: #5E5E5E;"># Add second feed forward layer (don't forget to set the correct value for n_units)</span></span>
<span id="cb44-37">        tl.Dense(d_model),</span>
<span id="cb44-38">        <span class="co" style="color: #5E5E5E;"># Add dropout with rate and mode specified (i.e., don't use dropout during evaluation)</span></span>
<span id="cb44-39">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode)</span>
<span id="cb44-40">    ]</span>
<span id="cb44-41"></span>
<span id="cb44-42">    <span class="co" style="color: #5E5E5E;"># Add list of two Residual blocks: the attention with normalization and dropout and feed-forward blocks</span></span>
<span id="cb44-43">    <span class="cf" style="color: #003B4F;">return</span> [</span>
<span id="cb44-44">      tl.Residual(</span>
<span id="cb44-45">          <span class="co" style="color: #5E5E5E;"># Normalize layer input</span></span>
<span id="cb44-46">          tl.LayerNorm(),</span>
<span id="cb44-47">          <span class="co" style="color: #5E5E5E;"># Add causal attention block previously defined (without parentheses)</span></span>
<span id="cb44-48">          causal_attention,</span>
<span id="cb44-49">          <span class="co" style="color: #5E5E5E;"># Add dropout with rate and mode specified</span></span>
<span id="cb44-50">          tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode)</span>
<span id="cb44-51">        ),</span>
<span id="cb44-52">      tl.Residual(</span>
<span id="cb44-53">          <span class="co" style="color: #5E5E5E;"># Add feed forward block (without parentheses)</span></span>
<span id="cb44-54">          feed_forward</span>
<span id="cb44-55">        ),</span>
<span id="cb44-56">      ]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># Take a look at the decoder block</span></span>
<span id="cb45-2"><span class="bu" style="color: null;">print</span>(DecoderBlock(d_model<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>, d_ff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2048</span>, n_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, dropout<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>, ff_activation<span class="op" style="color: #5E5E5E;">=</span>tl.Relu))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Serial[
  Branch_out2[
    None
    Serial[
      LayerNorm
      Serial[
        Branch_out3[
          [Dense_512, AttnHeads]
          [Dense_512, AttnHeads]
          [Dense_512, AttnHeads]
        ]
        DotProductAttn_in3
        AttnOutput
        Dense_512
      ]
      Dropout
    ]
  ]
  Add_in2
], Serial[
  Branch_out2[
    None
    Serial[
      LayerNorm
      Dense_2048
      Serial[
        Relu
      ]
      Dropout
      Dense_512
      Dropout
    ]
  ]
  Add_in2
]]</code></pre>
</div>
</div>
</section>
<section id="transformer-language-model" class="level3" data-number="4.6">
<h3 data-number="4.6" class="anchored" data-anchor-id="transformer-language-model"><span class="header-section-number">4.6</span> Transformer Language Model</h3>
<p>We will now bring it all together. In this part we will use all the subcomponents you previously built to make the final model. Concretely, here is the image we will be implementing. <img src="http://livingdatalab.com/posts/images/transformer_decoder.png" style="height:400px"></p>
<p>Previously we coded the decoder block. Now we will code the transformer language model. Here is what we will need.</p>
<ul>
<li><span style="color:blue"> positional_enconder </span>- a list containing the following layers:
<ul>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Embedding">tl.Embedding</a></span></li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dropout">tl.Dropout</a></span></li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.attention.PositionalEncoding">tl.PositionalEncoding</a></span></li>
</ul></li>
<li>A list of <code>n_layers</code> <span style="color:blue"> decoder blocks</span>.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Serial">tl.Serial</a>: </span> takes in the following layers or lists of layers:
<ul>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.attention.ShiftRight">tl.ShiftRight</a>: </span>: shift the tensor to the right by padding on axis 1.</li>
<li><span style="color:blue"> positional_encoder </span>: encodes the text positions.</li>
<li><span style="color:blue"> decoder_blocks </span>: the ones you created.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.normalization.LayerNorm">tl.LayerNorm</a> </span>: a layer norm.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense">tl.Dense</a> </span>: takes in the vocab_size.</li>
<li><span style="color:blue"> <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.LogSoftmax">tl.LogSoftmax</a> </span>: to predict.</li>
</ul></li>
</ul>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;">def</span> TransformerLM(vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">33300</span>,</span>
<span id="cb47-2">                  d_model<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb47-3">                  d_ff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2048</span>,</span>
<span id="cb47-4">                  n_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb47-5">                  n_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb47-6">                  dropout<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>,</span>
<span id="cb47-7">                  max_len<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4096</span>,</span>
<span id="cb47-8">                  mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>,</span>
<span id="cb47-9">                  ff_activation<span class="op" style="color: #5E5E5E;">=</span>tl.Relu):</span>
<span id="cb47-10">    <span class="co" style="color: #5E5E5E;">"""Returns a Transformer language model.</span></span>
<span id="cb47-11"></span>
<span id="cb47-12"><span class="co" style="color: #5E5E5E;">    The input to the model is a tensor of tokens. (This model uses only the</span></span>
<span id="cb47-13"><span class="co" style="color: #5E5E5E;">    decoder part of the overall Transformer.)</span></span>
<span id="cb47-14"></span>
<span id="cb47-15"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb47-16"><span class="co" style="color: #5E5E5E;">        vocab_size (int): vocab size.</span></span>
<span id="cb47-17"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb47-18"><span class="co" style="color: #5E5E5E;">        d_ff (int): depth of feed-forward layer.</span></span>
<span id="cb47-19"><span class="co" style="color: #5E5E5E;">        n_layers (int): number of decoder layers.</span></span>
<span id="cb47-20"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads.</span></span>
<span id="cb47-21"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb47-22"><span class="co" style="color: #5E5E5E;">        max_len (int): maximum symbol length for positional encoding.</span></span>
<span id="cb47-23"><span class="co" style="color: #5E5E5E;">        mode (str): 'train', 'eval' or 'predict', predict mode is for fast inference.</span></span>
<span id="cb47-24"><span class="co" style="color: #5E5E5E;">        ff_activation (function): the non-linearity in feed-forward layer.</span></span>
<span id="cb47-25"></span>
<span id="cb47-26"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb47-27"><span class="co" style="color: #5E5E5E;">        trax.layers.combinators.Serial: A Transformer language model as a layer that maps from a tensor of tokens</span></span>
<span id="cb47-28"><span class="co" style="color: #5E5E5E;">        to activations over a vocab set.</span></span>
<span id="cb47-29"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb47-30">        </span>
<span id="cb47-31">    <span class="co" style="color: #5E5E5E;"># Embedding inputs and positional encoder</span></span>
<span id="cb47-32">    positional_encoder <span class="op" style="color: #5E5E5E;">=</span> [ </span>
<span id="cb47-33">        <span class="co" style="color: #5E5E5E;"># Add embedding layer of dimension (vocab_size, d_model)</span></span>
<span id="cb47-34">        tl.Embedding(vocab_size<span class="op" style="color: #5E5E5E;">=</span>vocab_size, d_feature<span class="op" style="color: #5E5E5E;">=</span>d_model),</span>
<span id="cb47-35">        <span class="co" style="color: #5E5E5E;"># Use dropout with rate and mode specified</span></span>
<span id="cb47-36">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode),</span>
<span id="cb47-37">        <span class="co" style="color: #5E5E5E;"># Add positional encoding layer with maximum input length and mode specified</span></span>
<span id="cb47-38">        tl.PositionalEncoding(max_len<span class="op" style="color: #5E5E5E;">=</span>max_len, mode<span class="op" style="color: #5E5E5E;">=</span>mode)]</span>
<span id="cb47-39"></span>
<span id="cb47-40">    <span class="co" style="color: #5E5E5E;"># Create stack (list) of decoder blocks with n_layers with necessary parameters</span></span>
<span id="cb47-41">    decoder_blocks <span class="op" style="color: #5E5E5E;">=</span> [ </span>
<span id="cb47-42">        DecoderBlock(d_model, d_ff, n_heads, dropout, mode, ff_activation) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_layers)]</span>
<span id="cb47-43"></span>
<span id="cb47-44">    <span class="co" style="color: #5E5E5E;"># Create the complete model as written in the figure</span></span>
<span id="cb47-45">    <span class="cf" style="color: #003B4F;">return</span> tl.Serial(</span>
<span id="cb47-46">        <span class="co" style="color: #5E5E5E;"># Use teacher forcing (feed output of previous step to current step)</span></span>
<span id="cb47-47">        tl.ShiftRight(mode<span class="op" style="color: #5E5E5E;">=</span>mode), <span class="co" style="color: #5E5E5E;"># Specify the mode!</span></span>
<span id="cb47-48">        <span class="co" style="color: #5E5E5E;"># Add positional encoder</span></span>
<span id="cb47-49">        positional_encoder,</span>
<span id="cb47-50">        <span class="co" style="color: #5E5E5E;"># Add decoder blocks</span></span>
<span id="cb47-51">        decoder_blocks,</span>
<span id="cb47-52">        <span class="co" style="color: #5E5E5E;"># Normalize layer</span></span>
<span id="cb47-53">        tl.LayerNorm(),</span>
<span id="cb47-54"></span>
<span id="cb47-55">        <span class="co" style="color: #5E5E5E;"># Add dense layer of vocab_size (since need to select a word to translate to)</span></span>
<span id="cb47-56">        <span class="co" style="color: #5E5E5E;"># (a.k.a., logits layer. Note: activation already set by ff_activation)</span></span>
<span id="cb47-57">        tl.Dense(vocab_size),</span>
<span id="cb47-58">        <span class="co" style="color: #5E5E5E;"># Get probabilities with Logsoftmax</span></span>
<span id="cb47-59">        tl.LogSoftmax()</span>
<span id="cb47-60">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># Take a look at the Transformer</span></span>
<span id="cb48-2"><span class="bu" style="color: null;">print</span>(TransformerLM(n_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Serial[
  Serial[
    ShiftRight(1)
  ]
  Embedding_33300_512
  Dropout
  PositionalEncoding
  Serial[
    Branch_out2[
      None
      Serial[
        LayerNorm
        Serial[
          Branch_out3[
            [Dense_512, AttnHeads]
            [Dense_512, AttnHeads]
            [Dense_512, AttnHeads]
          ]
          DotProductAttn_in3
          AttnOutput
          Dense_512
        ]
        Dropout
      ]
    ]
    Add_in2
  ]
  Serial[
    Branch_out2[
      None
      Serial[
        LayerNorm
        Dense_2048
        Serial[
          Relu
        ]
        Dropout
        Dense_512
        Dropout
      ]
    ]
    Add_in2
  ]
  LayerNorm
  Dense_33300
  LogSoftmax
]</code></pre>
</div>
</div>
</section>
</section>
<section id="training" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="training"><span class="header-section-number">5</span> Training</h2>
<p>Now we are going to train our model. As usual, we have to define the cost function, the optimizer, and decide whether we will be training it on a <code>gpu</code> or <code>cpu</code>. In this case, we will train your model on a cpu for a few steps and we will load in a pre-trained model that we can use to predict with our own words.</p>
<section id="training-the-model" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="training-the-model"><span class="header-section-number">5.1</span> Training the model</h3>
<p>We will now write a function that takes in our model and trains it. To train our model we have to decide how many times we want to iterate over the entire data set. Each iteration is defined as an <code>epoch</code>. For each epoch, we have to go over all the data, using our training iterator.</p>
<p>Lets implement the <code>train_model</code> program below to train the neural network above. Here is a list of things we should do:</p>
<ul>
<li>Create the train task by calling <a href="https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.TrainTask"><code>trax.supervised.training.TrainTask</code></a> and pass in the following:
<ul>
<li><span style="color:blue"> labeled_data </span> = train_gen</li>
<li><span style="color:blue"> loss_layer </span> = <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.metrics.CrossEntropyLoss">tl.CrossEntropyLoss()</a></li>
<li><span style="color:blue"> optimizer </span> = <a href="https://trax-ml.readthedocs.io/en/latest/trax.optimizers.html#trax.optimizers.adam.Adam">trax.optimizers.Adam(0.01)</a></li>
<li><span style="color:blue"> lr_schedule </span> = <a href="https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.lr_schedules.warmup_and_rsqrt_decay">lr_schedule</a></li>
</ul></li>
<li>Create the eval task by calling <a href="https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.EvalTask"><code>trax.supervised.training.EvalTask</code></a> and pass in the following:
<ul>
<li><span style="color:blue"> labeled_data </span> = eval_gen</li>
<li><span style="color:blue"> metrics </span> = tl.CrossEntropyLoss() and <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.metrics.Accuracy">tl.Accuracy()</a></li>
</ul></li>
<li>Create the training loop by calling <a href="https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.Loop"><code>trax.supervised.Training.Loop</code></a> and pass in the following:
<ul>
<li><span style="color:blue"> TransformerLM </span></li>
<li><span style="color:blue"> train_task </span></li>
<li><span style="color:blue"> eval_task </span> = [eval_task]</li>
<li><span style="color:blue"> output_dir</span> = output_dir</li>
</ul></li>
</ul>
<p>We will be using a cross entropy loss, with Adam optimizer. Read the <a href="https://trax-ml.readthedocs.io/en/latest/index.html">Trax</a> documentation to get a full understanding.</p>
<p>The training loop that this function returns can be runned using the <code>run()</code> method by passing in the desired number of steps.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;">from</span> trax.supervised <span class="im" style="color: #00769E;">import</span> training</span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="kw" style="color: #003B4F;">def</span> training_loop(TransformerLM, train_gen, eval_gen, output_dir <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"~/model"</span>):</span>
<span id="cb50-4">    <span class="co" style="color: #5E5E5E;">'''</span></span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;">    Input:</span></span>
<span id="cb50-6"><span class="co" style="color: #5E5E5E;">        TransformerLM (trax.layers.combinators.Serial): The model you are building.</span></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;">        train_gen (generator): Training stream of data.</span></span>
<span id="cb50-8"><span class="co" style="color: #5E5E5E;">        eval_gen (generator): Evaluation stream of data.</span></span>
<span id="cb50-9"><span class="co" style="color: #5E5E5E;">        output_dir (str): folder to save your file.</span></span>
<span id="cb50-10"><span class="co" style="color: #5E5E5E;">        </span></span>
<span id="cb50-11"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb50-12"><span class="co" style="color: #5E5E5E;">        trax.supervised.training.Loop: Training loop.</span></span>
<span id="cb50-13"><span class="co" style="color: #5E5E5E;">    '''</span></span>
<span id="cb50-14">    output_dir <span class="op" style="color: #5E5E5E;">=</span> os.path.expanduser(output_dir)  <span class="co" style="color: #5E5E5E;"># trainer is an object</span></span>
<span id="cb50-15">    lr_schedule <span class="op" style="color: #5E5E5E;">=</span> trax.lr.warmup_and_rsqrt_decay(n_warmup_steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>, max_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb50-16"></span>
<span id="cb50-17">    train_task <span class="op" style="color: #5E5E5E;">=</span> training.TrainTask( </span>
<span id="cb50-18">      labeled_data<span class="op" style="color: #5E5E5E;">=</span>train_gen, <span class="co" style="color: #5E5E5E;"># The training generator</span></span>
<span id="cb50-19">      loss_layer<span class="op" style="color: #5E5E5E;">=</span>tl.CrossEntropyLoss(), <span class="co" style="color: #5E5E5E;"># Loss function </span></span>
<span id="cb50-20">      optimizer<span class="op" style="color: #5E5E5E;">=</span>trax.optimizers.Adam(<span class="fl" style="color: #AD0000;">0.01</span>), <span class="co" style="color: #5E5E5E;"># Optimizer (Don't forget to set LR to 0.01)</span></span>
<span id="cb50-21">      lr_schedule<span class="op" style="color: #5E5E5E;">=</span>lr_schedule,</span>
<span id="cb50-22">      n_steps_per_checkpoint<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb50-23">    )</span>
<span id="cb50-24"></span>
<span id="cb50-25">    eval_task <span class="op" style="color: #5E5E5E;">=</span> training.EvalTask( </span>
<span id="cb50-26">      labeled_data<span class="op" style="color: #5E5E5E;">=</span>eval_gen, <span class="co" style="color: #5E5E5E;"># The evaluation generator</span></span>
<span id="cb50-27">      metrics<span class="op" style="color: #5E5E5E;">=</span>[tl.CrossEntropyLoss(), tl.Accuracy()] <span class="co" style="color: #5E5E5E;"># CrossEntropyLoss and Accuracy</span></span>
<span id="cb50-28">    )</span>
<span id="cb50-29"></span>
<span id="cb50-30">    loop <span class="op" style="color: #5E5E5E;">=</span> training.Loop(TransformerLM(d_model<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb50-31">                                       d_ff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>,</span>
<span id="cb50-32">                                       n_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb50-33">                                       n_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb50-34">                                       mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>),</span>
<span id="cb50-35">                         train_task,</span>
<span id="cb50-36">                         eval_tasks<span class="op" style="color: #5E5E5E;">=</span>[eval_task],</span>
<span id="cb50-37">                         output_dir<span class="op" style="color: #5E5E5E;">=</span>output_dir)</span>
<span id="cb50-38">    </span>
<span id="cb50-39">    <span class="cf" style="color: #003B4F;">return</span> loop</span></code></pre></div>
</div>
<p>Notice that the model will be trained for only 10 steps.</p>
<p>Even with this constraint the model with the original default arguments took a very long time to finish. Because of this some parameters are changed when defining the model that is fed into the training loop in the function above.</p>
<div class="cell" data-outputid="aff859e5-8f4a-4d3b-f1d3-98e137581a77" data-execution_count="42">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># Should take around 1.5 minutes</span></span>
<span id="cb51-2"><span class="op" style="color: #5E5E5E;">!</span>rm <span class="op" style="color: #5E5E5E;">-</span>f <span class="op" style="color: #5E5E5E;">~/</span>model<span class="op" style="color: #5E5E5E;">/</span>model.pkl.gz</span>
<span id="cb51-3">loop <span class="op" style="color: #5E5E5E;">=</span> training_loop(TransformerLM, train_batch_stream, eval_batch_stream)</span>
<span id="cb51-4">loop.run(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Step      1: Total number of trainable weights: 316336
Step      1: Ran 1 train steps in 8.90 secs
Step      1: train CrossEntropyLoss |  10.41016102
Step      1: eval  CrossEntropyLoss |  10.41146946
Step      1: eval          Accuracy |  0.00000000

Step     10: Ran 9 train steps in 52.26 secs
Step     10: train CrossEntropyLoss |  10.41224766
Step     10: eval  CrossEntropyLoss |  10.40876579
Step     10: eval          Accuracy |  0.00000000</code></pre>
</div>
</div>
</section>
</section>
<section id="loading-in-a-pre-trained-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="loading-in-a-pre-trained-model"><span class="header-section-number">6</span> Loading in a Pre-trained model</h2>
<p>In this part we will evaluate by loading in an almost exact version of the model we coded, but this has been trained previously to save time.</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># THIS STEP COULD TAKE BETWEEN 15 SECONDS TO 15 MINUTES</span></span>
<span id="cb53-2"><span class="co" style="color: #5E5E5E;"># Get the model architecture</span></span>
<span id="cb53-3">model <span class="op" style="color: #5E5E5E;">=</span> TransformerLM(mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'eval'</span>)</span>
<span id="cb53-4"></span>
<span id="cb53-5"><span class="co" style="color: #5E5E5E;"># Load the pre-trained weights</span></span>
<span id="cb53-6">model.init_from_file(<span class="st" style="color: #20794D;">'model.pkl.gz'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="testing-with-our-own-input" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="testing-with-our-own-input"><span class="header-section-number">7</span> Testing with our own input</h2>
<p>We will now test our input. We are going to implement greedy decoding. This consists of two functions. The first one allows us to identify the next symbol. It gets the argmax of the output of our model and then returns that index.</p>
<p>We will now implement the next symbol function that takes in the cur_output_tokens and the trained model to return the the index of the next word.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;">def</span> next_symbol(cur_output_tokens, model):</span>
<span id="cb54-2">    <span class="co" style="color: #5E5E5E;">"""Returns the next symbol for a given sentence.</span></span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb54-5"><span class="co" style="color: #5E5E5E;">        cur_output_tokens (list): tokenized sentence with EOS and PAD tokens at the end.</span></span>
<span id="cb54-6"><span class="co" style="color: #5E5E5E;">        model (trax.layers.combinators.Serial): The transformer model.</span></span>
<span id="cb54-7"></span>
<span id="cb54-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb54-9"><span class="co" style="color: #5E5E5E;">        int: tokenized symbol.</span></span>
<span id="cb54-10"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb54-11">    </span>
<span id="cb54-12">    <span class="co" style="color: #5E5E5E;"># current output tokens length</span></span>
<span id="cb54-13">    token_length <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(cur_output_tokens)</span>
<span id="cb54-14">    <span class="co" style="color: #5E5E5E;"># calculate the minimum power of 2 big enough to store token_length</span></span>
<span id="cb54-15">    <span class="co" style="color: #5E5E5E;"># add 1 to token_length so np.log2() doesn't receive 0 when token_length is 0</span></span>
<span id="cb54-16">    padded_length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">**</span><span class="bu" style="color: null;">int</span>(np.ceil(np.log2(token_length <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb54-17"></span>
<span id="cb54-18">    <span class="co" style="color: #5E5E5E;"># Fill cur_output_tokens with 0's until it reaches padded_length</span></span>
<span id="cb54-19">    padded <span class="op" style="color: #5E5E5E;">=</span> cur_output_tokens <span class="op" style="color: #5E5E5E;">+</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> (padded_length <span class="op" style="color: #5E5E5E;">-</span> token_length)</span>
<span id="cb54-20">    padded_with_batch <span class="op" style="color: #5E5E5E;">=</span> np.array(padded)[<span class="va" style="color: #111111;">None</span>, :] <span class="co" style="color: #5E5E5E;"># Don't replace this 'None'! This is a way of setting the batch dim</span></span>
<span id="cb54-21"></span>
<span id="cb54-22">    <span class="co" style="color: #5E5E5E;"># model expects a tuple containing two padded tensors (with batch)</span></span>
<span id="cb54-23">    output, _ <span class="op" style="color: #5E5E5E;">=</span> model((padded_with_batch, padded_with_batch)) </span>
<span id="cb54-24">    <span class="co" style="color: #5E5E5E;"># To get log_probs you need to index output with 0 in the first dim</span></span>
<span id="cb54-25">    <span class="co" style="color: #5E5E5E;"># token_length in the second dim and all of the entries for the last dim.</span></span>
<span id="cb54-26">    log_probs <span class="op" style="color: #5E5E5E;">=</span> output[<span class="dv" style="color: #AD0000;">0</span>, token_length, :]</span>
<span id="cb54-27">    </span>
<span id="cb54-28">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">int</span>(np.argmax(log_probs))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># Test it out!</span></span>
<span id="cb55-2">sentence_test_nxt_symbl <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"I want to fly in the sky."</span></span>
<span id="cb55-3">detokenize([next_symbol(tokenize(sentence_test_nxt_symbl)<span class="op" style="color: #5E5E5E;">+</span>[<span class="dv" style="color: #AD0000;">0</span>], model)])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>'The'</code></pre>
</div>
</div>
<section id="greedy-decoding" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="greedy-decoding"><span class="header-section-number">7.1</span> Greedy decoding</h3>
<p>Now we will implement the greedy_decode algorithm that will call the <code>next_symbol</code> function. It takes in the input_sentence, the trained model and returns the the decoded sentence.</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># Decoding functions.</span></span>
<span id="cb57-2"><span class="kw" style="color: #003B4F;">def</span> greedy_decode(input_sentence, model, next_symbol<span class="op" style="color: #5E5E5E;">=</span>next_symbol, tokenize<span class="op" style="color: #5E5E5E;">=</span>tokenize, detokenize<span class="op" style="color: #5E5E5E;">=</span>detokenize):</span>
<span id="cb57-3">    <span class="co" style="color: #5E5E5E;">"""Greedy decode function.</span></span>
<span id="cb57-4"></span>
<span id="cb57-5"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb57-6"><span class="co" style="color: #5E5E5E;">        input_sentence (string): a sentence or article.</span></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;">        model (trax.layers.combinators.Serial): Transformer model.</span></span>
<span id="cb57-8"></span>
<span id="cb57-9"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb57-10"><span class="co" style="color: #5E5E5E;">        string: summary of the input.</span></span>
<span id="cb57-11"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb57-12">    </span>
<span id="cb57-13">    <span class="co" style="color: #5E5E5E;"># Use tokenize()</span></span>
<span id="cb57-14">    cur_output_tokens <span class="op" style="color: #5E5E5E;">=</span> tokenize(input_sentence) <span class="op" style="color: #5E5E5E;">+</span> [<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb57-15">    generated_output <span class="op" style="color: #5E5E5E;">=</span> [] </span>
<span id="cb57-16">    cur_output <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span> </span>
<span id="cb57-17">    EOS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb57-18">    </span>
<span id="cb57-19">    <span class="cf" style="color: #003B4F;">while</span> cur_output <span class="op" style="color: #5E5E5E;">!=</span> EOS:</span>
<span id="cb57-20">        <span class="co" style="color: #5E5E5E;"># Get next symbol</span></span>
<span id="cb57-21">        cur_output <span class="op" style="color: #5E5E5E;">=</span> next_symbol(cur_output_tokens, model)</span>
<span id="cb57-22">        <span class="co" style="color: #5E5E5E;"># Append next symbol to original sentence</span></span>
<span id="cb57-23">        cur_output_tokens.append(cur_output)</span>
<span id="cb57-24">        <span class="co" style="color: #5E5E5E;"># Append next symbol to generated sentence</span></span>
<span id="cb57-25">        generated_output.append(cur_output)</span>
<span id="cb57-26">        <span class="bu" style="color: null;">print</span>(detokenize(generated_output))</span>
<span id="cb57-27">        </span>
<span id="cb57-28">    <span class="cf" style="color: #003B4F;">return</span> detokenize(generated_output)</span></code></pre></div>
</div>
<div class="cell" data-outputid="2525ca2c-4625-47c0-8456-f75598581993" data-execution_count="55">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># Test it out on a sentence!</span></span>
<span id="cb58-2">test_sentence <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"It was a sunny day when I went to the market to buy some flowers. But I only found roses, not tulips."</span></span>
<span id="cb58-3"><span class="bu" style="color: null;">print</span>(wrapper.fill(test_sentence), <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb58-4"><span class="bu" style="color: null;">print</span>(greedy_decode(test_sentence, model))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It was a sunny day when I went to the market to buy some flowers. But
I only found roses, not tulips. 

:
: I
: I just
: I just found
: I just found ros
: I just found roses
: I just found roses,
: I just found roses, not
: I just found roses, not tu
: I just found roses, not tulips
: I just found roses, not tulips
: I just found roses, not tulips.
: I just found roses, not tulips.&lt;EOS&gt;
: I just found roses, not tulips.&lt;EOS&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="b901e164-48b3-4124-d21a-fe7443d15b79" data-execution_count="56">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># Test it out with a whole article!</span></span>
<span id="cb60-2">article <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"It’s the posing craze sweeping the U.S. after being brought to fame by skier Lindsey Vonn, soccer star Omar Cummings, baseball player Albert Pujols - and even Republican politician Rick Perry. But now four students at Riverhead High School on Long Island, New York, have been suspended for dropping to a knee and taking up a prayer pose to mimic Denver Broncos quarterback Tim Tebow. Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were all suspended for one day because the ‘Tebowing’ craze was blocking the hallway and presenting a safety hazard to students. Scroll down for video. Banned: Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll (all pictured left) were all suspended for one day by Riverhead High School on Long Island, New York, for their tribute to Broncos quarterback Tim Tebow. Issue: Four of the pupils were suspended for one day because they allegedly did not heed to warnings that the 'Tebowing' craze at the school was blocking the hallway and presenting a safety hazard to students."</span></span>
<span id="cb60-3"><span class="bu" style="color: null;">print</span>(wrapper.fill(article), <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb60-4"><span class="bu" style="color: null;">print</span>(greedy_decode(article, model))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It’s the posing craze sweeping the U.S. after being brought to fame by
skier Lindsey Vonn, soccer star Omar Cummings, baseball player Albert
Pujols - and even Republican politician Rick Perry. But now four
students at Riverhead High School on Long Island, New York, have been
suspended for dropping to a knee and taking up a prayer pose to mimic
Denver Broncos quarterback Tim Tebow. Jordan Fulcoly, Wayne Drexel,
Tyler Carroll and Connor Carroll were all suspended for one day
because the ‘Tebowing’ craze was blocking the hallway and presenting a
safety hazard to students. Scroll down for video. Banned: Jordan
Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll (all pictured
left) were all suspended for one day by Riverhead High School on Long
Island, New York, for their tribute to Broncos quarterback Tim Tebow.
Issue: Four of the pupils were suspended for one day because they
allegedly did not heed to warnings that the 'Tebowing' craze at the
school was blocking the hallway and presenting a safety hazard to
students. 

Jordan
Jordan Ful
Jordan Fulcol
Jordan Fulcoly
Jordan Fulcoly,
Jordan Fulcoly, Wayne
Jordan Fulcoly, Wayne Dre
Jordan Fulcoly, Wayne Drexe
Jordan Fulcoly, Wayne Drexel
Jordan Fulcoly, Wayne Drexel,
Jordan Fulcoly, Wayne Drexel, Tyler
Jordan Fulcoly, Wayne Drexel, Tyler Carroll
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day.
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not hee
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warn
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the '
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Te
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebow
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
cra
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocki
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hall
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard to
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard to
students
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard to
students.
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard to
students.&lt;EOS&gt;
Jordan Fulcoly, Wayne Drexel, Tyler Carroll and Connor Carroll were
suspended for one day. Four students were suspended for one day
because they allegedly did not heed to warnings that the 'Tebowing'
craze was blocking the hallway and presenting a safety hazard to
students.&lt;EOS&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">8</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.coursera.org/learn/attention-models-in-nlp">Natural Language Processing with Attention Models Course</a> which i completed, and acknowledge the use of some images and other materials from the course in this article.</p>


</section>

 ]]></description>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-03-18-creating-transformer-model-for-text-summarisation.html</guid>
  <pubDate>Sat, 18 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/summarization-img.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Implementing GPT-2 A Transfomer Decoder NLP Model</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-03-11-implementing-gpt2-a-transformer-decoder-nlp-model.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-03-04-three-types-of-attention-for-transformer-nlp-models.html">earlier article</a> we looked at 3 types of attention used for transformer based NLP models which was used in the 2017 paper <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a> which introduced the Transformer model. Since then, Transformers have come to dominate large-scale natural language applications.</p>
<p>In this article we’ll explore the transformer decoder and how to implement it with trax.</p>
<p>Previously we saw how to translate the mathematics of attention into NumPy code. Here, we’ll see how multi-head causal attention fits into GPT-2 which is essentially just a transformer decoder, and see how to build one with trax layers. We’ll implement causal attention from scratch, and exploit the handy-dandy <code>tl.CausalAttention()</code> layer.</p>
<p>The schematic depiction below illustrates the components and flow of a transformer decoder. Note that while the algorithm diagram flows from the bottom to the top, the overview and subsequent Trax layer codes are top-down.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L6_transformer-decoder_S01_transformer-decoder.png" width="1000"></p>
</section>
<section id="import-libraries-setup" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries-setup"><span class="header-section-number">2</span> Import Libraries &amp; Setup</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> gin</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> textwrap</span>
<span id="cb1-9">wrapper <span class="op" style="color: #5E5E5E;">=</span> textwrap.TextWrapper(width<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> trax</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> trax <span class="im" style="color: #00769E;">import</span> layers <span class="im" style="color: #00769E;">as</span> tl</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> trax.fastmath <span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> jnp</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># to print the entire np array</span></span>
<span id="cb1-16">np.set_printoptions(threshold<span class="op" style="color: #5E5E5E;">=</span>sys.maxsize)</span></code></pre></div>
</div>
</section>
<section id="sentence-gets-embedded-then-add-positional-encoding" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="sentence-gets-embedded-then-add-positional-encoding"><span class="header-section-number">3</span> Sentence gets embedded, then add positional encoding</h2>
<p>We will embed the words, then create vectors representing each word’s position in each sentence <img src="https://latex.codecogs.com/png.latex?%5Cin%20%5C%7B%200,%201,%202,%20%5Cldots%20,%20K%5C%7D"> = <code>range(max_len)</code>, where <code>max_len</code> = <img src="https://latex.codecogs.com/png.latex?K+1">)</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> PositionalEncoder(vocab_size, d_model, dropout, max_len, mode):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;">"""Returns a list of layers that: </span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">    1. takes a block of text as input, </span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">    2. embeds the words in that text, and </span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">    3. adds positional encoding, </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">       i.e. associates a number in range(max_len) with </span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">       each word in each sentence of embedded input text </span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">    The input is a list of tokenized blocks of text</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">        vocab_size (int): vocab size.</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;">        max_len (int): maximum symbol length for positional encoding.</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;">        mode (str): 'train' or 'eval'.</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;"># Embedding inputs and positional encoder</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;">return</span> [ </span>
<span id="cb2-20">        <span class="co" style="color: #5E5E5E;"># Add embedding layer of dimension (vocab_size, d_model)</span></span>
<span id="cb2-21">        tl.Embedding(vocab_size, d_model),  </span>
<span id="cb2-22">        <span class="co" style="color: #5E5E5E;"># Use dropout with rate and mode specified</span></span>
<span id="cb2-23">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode), </span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;"># Add positional encoding layer with maximum input length and mode specified</span></span>
<span id="cb2-25">        tl.PositionalEncoding(max_len<span class="op" style="color: #5E5E5E;">=</span>max_len, mode<span class="op" style="color: #5E5E5E;">=</span>mode)] </span></code></pre></div>
</div>
</section>
<section id="multi-head-causal-attention" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="multi-head-causal-attention"><span class="header-section-number">4</span> Multi-head causal attention</h2>
<p>The layers and array dimensions involved in multi-head causal attention (which looks at previous words in the input text) are summarized in the figure below:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L5_multi-head-attention_S05_multi-head-attention-concatenation_stripped.png" width="1000"></p>
<p><code>tl.CausalAttention()</code> does all of this for us! You might be wondering, though, whether we need to pass in our input text 3 times, since for causal attention, the queries Q, keys K, and values V all come from the same source. Fortunately, <code>tl.CausalAttention()</code> handles this as well by making use of the <a href="https://trax-ml.readthedocs.io/en/latest/trax.layers.html#module-trax.layers.combinators"><code>tl.Branch()</code></a> combinator layer. In general, each branch within a <code>tl.Branch()</code> layer performs parallel operations on copies of the layer’s inputs. For causal attention, each branch (representing Q, K, and V) applies a linear transformation (i.e.&nbsp;a dense layer without a subsequent activation) to its copy of the input, then splits that result into heads. You can see the syntax for this in the screenshot from the <code>trax.layers.attention.py</code> <a href="https://github.com/google/trax/blob/master/trax/layers/attention.py">source code</a> below:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/use-of-tl-Branch-in-tl-CausalAttention.png" width="500"></p>
</section>
<section id="feed-forward-layer" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="feed-forward-layer"><span class="header-section-number">5</span> Feed-forward layer</h2>
<ul>
<li>Typically ends with a ReLU activation, but we’ll leave open the possibility of a different activation</li>
<li>Most of the parameters are here</li>
</ul>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> FeedForward(d_model, d_ff, dropout, mode, ff_activation):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;">"""Returns a list of layers that implements a feed-forward block.</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">    The input is an activation tensor.</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;">        d_ff (int): depth of feed-forward layer.</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">        mode (str): 'train' or 'eval'.</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;">        ff_activation (function): the non-linearity in feed-forward layer.</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;">        list: list of trax.layers.combinators.Serial that maps an activation tensor to an activation tensor.</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb3-16">    </span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># Create feed-forward block (list) with two dense layers with dropout and input normalized</span></span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">return</span> [ </span>
<span id="cb3-19">        <span class="co" style="color: #5E5E5E;"># Normalize layer inputs</span></span>
<span id="cb3-20">        tl.LayerNorm(), </span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;"># Add first feed forward (dense) layer (don't forget to set the correct value for n_units)</span></span>
<span id="cb3-22">        tl.Dense(d_ff), </span>
<span id="cb3-23">        <span class="co" style="color: #5E5E5E;"># Add activation function passed in as a parameter (you need to call it!)</span></span>
<span id="cb3-24">        ff_activation(),  <span class="co" style="color: #5E5E5E;"># Generally ReLU</span></span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;"># Add dropout with rate and mode specified (i.e., don't use dropout during evaluation)</span></span>
<span id="cb3-26">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode), </span>
<span id="cb3-27">        <span class="co" style="color: #5E5E5E;"># Add second feed forward layer (don't forget to set the correct value for n_units)</span></span>
<span id="cb3-28">        tl.Dense(d_model), </span>
<span id="cb3-29">        <span class="co" style="color: #5E5E5E;"># Add dropout with rate and mode specified (i.e., don't use dropout during evaluation)</span></span>
<span id="cb3-30">        tl.Dropout(rate<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode) </span>
<span id="cb3-31">    ]</span></code></pre></div>
</div>
</section>
<section id="decoder-block" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="decoder-block"><span class="header-section-number">6</span> Decoder block</h2>
<p>Here, we return a list containing two residual blocks. The first wraps around the causal attention layer, whose inputs are normalized and to which we apply dropout regulation. The second wraps around the feed-forward layer. You may notice that the second call to <code>tl.Residual()</code> doesn’t call a normalization layer before calling the feed-forward layer. This is because the normalization layer is included in the feed-forward layer.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> DecoderBlock(d_model, d_ff, n_heads,</span>
<span id="cb4-2">                 dropout, mode, ff_activation):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;">"""Returns a list of layers that implements a Transformer decoder block.</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">    The input is an activation tensor.</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">        d_ff (int): depth of feed-forward layer.</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads.</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;">        mode (str): 'train' or 'eval'.</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;">        ff_activation (function): the non-linearity in feed-forward layer.</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;">        list: list of trax.layers.combinators.Serial that maps an activation tensor to an activation tensor.</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-18">        </span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;"># Add list of two Residual blocks: the attention with normalization and dropout and feed-forward blocks</span></span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;">return</span> [</span>
<span id="cb4-21">      tl.Residual(</span>
<span id="cb4-22">          <span class="co" style="color: #5E5E5E;"># Normalize layer input</span></span>
<span id="cb4-23">          tl.LayerNorm(), </span>
<span id="cb4-24">          <span class="co" style="color: #5E5E5E;"># Add causal attention </span></span>
<span id="cb4-25">          tl.CausalAttention(d_model, n_heads<span class="op" style="color: #5E5E5E;">=</span>n_heads, dropout<span class="op" style="color: #5E5E5E;">=</span>dropout, mode<span class="op" style="color: #5E5E5E;">=</span>mode) </span>
<span id="cb4-26">        ),</span>
<span id="cb4-27">      tl.Residual(</span>
<span id="cb4-28">          <span class="co" style="color: #5E5E5E;"># Add feed-forward block</span></span>
<span id="cb4-29">          <span class="co" style="color: #5E5E5E;"># We don't need to normalize the layer inputs here. The feed-forward block takes care of that for us.</span></span>
<span id="cb4-30">          FeedForward(d_model, d_ff, dropout, mode, ff_activation)</span>
<span id="cb4-31">        ),</span>
<span id="cb4-32">      ]</span></code></pre></div>
</div>
</section>
<section id="the-transformer-decoder-putting-it-all-together" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="the-transformer-decoder-putting-it-all-together"><span class="header-section-number">7</span> The Transformer Decoder: Putting it all together</h2>
<p>So we repeat N times, dense layer and softmax for output</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> TransformerLM(vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">33300</span>,</span>
<span id="cb5-2">                  d_model<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb5-3">                  d_ff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2048</span>,</span>
<span id="cb5-4">                  n_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb5-5">                  n_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb5-6">                  dropout<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>,</span>
<span id="cb5-7">                  max_len<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4096</span>,</span>
<span id="cb5-8">                  mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>,</span>
<span id="cb5-9">                  ff_activation<span class="op" style="color: #5E5E5E;">=</span>tl.Relu):</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;">"""Returns a Transformer language model.</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">    The input to the model is a tensor of tokens. (This model uses only the</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;">    decoder part of the overall Transformer.)</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;">        vocab_size (int): vocab size.</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;">        d_model (int):  depth of embedding.</span></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;">        d_ff (int): depth of feed-forward layer.</span></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;">        n_layers (int): number of decoder layers.</span></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;">        n_heads (int): number of attention heads.</span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;">        dropout (float): dropout rate (how much to drop out).</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;">        max_len (int): maximum symbol length for positional encoding.</span></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;">        mode (str): 'train', 'eval' or 'predict', predict mode is for fast inference.</span></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;">        ff_activation (function): the non-linearity in feed-forward layer.</span></span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;">        trax.layers.combinators.Serial: A Transformer language model as a layer that maps from a tensor of tokens</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;">        to activations over a vocab set.</span></span>
<span id="cb5-29"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-30">    </span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;"># Create stack (list) of decoder blocks with n_layers with necessary parameters</span></span>
<span id="cb5-32">    decoder_blocks <span class="op" style="color: #5E5E5E;">=</span> [ </span>
<span id="cb5-33">        DecoderBlock(d_model, d_ff, n_heads, dropout, mode, ff_activation) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_layers)] </span>
<span id="cb5-34"></span>
<span id="cb5-35">    <span class="co" style="color: #5E5E5E;"># Create the complete model as written in the figure</span></span>
<span id="cb5-36">    <span class="cf" style="color: #003B4F;">return</span> tl.Serial(</span>
<span id="cb5-37">        <span class="co" style="color: #5E5E5E;"># Use teacher forcing (feed output of previous step to current step)</span></span>
<span id="cb5-38">        tl.ShiftRight(mode<span class="op" style="color: #5E5E5E;">=</span>mode), </span>
<span id="cb5-39">        <span class="co" style="color: #5E5E5E;"># Add embedding inputs and positional encoder</span></span>
<span id="cb5-40">        PositionalEncoder(vocab_size, d_model, dropout, max_len, mode),</span>
<span id="cb5-41">        <span class="co" style="color: #5E5E5E;"># Add decoder blocks</span></span>
<span id="cb5-42">        decoder_blocks, </span>
<span id="cb5-43">        <span class="co" style="color: #5E5E5E;"># Normalize layer</span></span>
<span id="cb5-44">        tl.LayerNorm(), </span>
<span id="cb5-45"></span>
<span id="cb5-46">        <span class="co" style="color: #5E5E5E;"># Add dense layer of vocab_size (since need to select a word to translate to)</span></span>
<span id="cb5-47">        <span class="co" style="color: #5E5E5E;"># (a.k.a., logits layer. Note: activation already set by ff_activation)</span></span>
<span id="cb5-48">        tl.Dense(vocab_size), </span>
<span id="cb5-49">        <span class="co" style="color: #5E5E5E;"># Get probabilities with Logsoftmax</span></span>
<span id="cb5-50">        tl.LogSoftmax() </span>
<span id="cb5-51">    )</span></code></pre></div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">8</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.coursera.org/learn/attention-models-in-nlp">Natural Language Processing with Attention Models Course</a> which i completed, and acknowledge the use of some images and other materials from the course in this article.</p>


</section>

 ]]></description>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2023-03-11-implementing-gpt2-a-transformer-decoder-nlp-model.html</guid>
  <pubDate>Sat, 11 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/openai.png" medium="image" type="image/png"/>
</item>
<item>
  <title>3 Types of Attention for Transfomer based NLP Models</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-03-04-three-types-of-attention-for-transformer-nlp-models.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-03-02-improving-seq2seq-language-models-using-dot-product-attention.html">earlier article</a> we looked at scaled dot product attention which was used in the 2017 paper <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a> which introduced the Transformer model, sometimes also called QKV (<strong>Q</strong>ueries, <strong>K</strong>eys, <strong>V</strong>alues) attention. Since then, Transformers have come to dominate large-scale natural language applications.</p>
<p>In this article we’ll explore the three ways of attention (encoder-decoder attention, causal attention, and bi-directional self attention) and how to implement the latter two with dot product attention.</p>
<p><strong>Attention models</strong> constitute powerful tools in the NLP practitioner’s toolkit. Like LSTMs, they learn which words are most important to phrases, sentences, paragraphs, and so on. Moreover, they mitigate the vanishing gradient problem even better than LSTMs.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L3_dot-product-attention_S01_introducing-attention_stripped.png" width="500"></p>
<p>Now we will exlore how to integrate attention into <strong>transformers</strong>. Because transformers are not sequence models, they are much easier to parallelize and accelerate. Beyond machine translation, applications of transformers include:</p>
<ul>
<li>Auto-completion</li>
<li>Named Entity Recognition</li>
<li>Chatbots</li>
<li>Question-Answering</li>
<li>And more!</li>
</ul>
<p>Along with embedding, positional encoding, dense layers, and residual connections, attention is a crucial component of transformers. At the heart of any attention scheme used in a transformer is <strong>dot product attention</strong>, of which the figures below display a simplified picture:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L3_dot-product-attention_S03_concept-of-attention_stripped.png" width="500"></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L3_dot-product-attention_S04_attention-math_stripped.png" width="500"></p>
<p>With basic dot product attention, you capture the interactions between every word (embedding) in your query and every word in your key. If the queries and keys belong to the same sentences, this constitutes <strong>bi-directional self-attention</strong>. In some situations, however, it’s more appropriate to consider only words which have come before the current one. Such cases, particularly when the queries and keys come from the same sentences, fall into the category of <strong>causal attention</strong>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L4_causal-attention_S02_causal-attention_stripped.png" width="500"></p>
<p>For causal attention, we add a <strong>mask</strong> to the argument of our softmax function, as illustrated below:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L4_causal-attention_S03_causal-attention-math_stripped.png" width="500"></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/C4_W2_L4_causal-attention_S04_causal-attention-math-2_stripped.png" width="500"></p>
<p>Now let’s see how to implement attention with NumPy. When we integrate attention into a transformer network defined with the trax library, we’ll have to use <code>trax.fastmath.numpy</code> instead, since trax’s arrays are based on JAX DeviceArrays. Fortunately, the function interfaces are often identical.</p>
</section>
<section id="import-libraries-setup" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries-setup"><span class="header-section-number">2</span> Import Libraries &amp; Setup</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> scipy.special</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> textwrap</span>
<span id="cb1-7">wrapper <span class="op" style="color: #5E5E5E;">=</span> textwrap.TextWrapper(width<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># to print the entire np array</span></span>
<span id="cb1-10">np.set_printoptions(threshold<span class="op" style="color: #5E5E5E;">=</span>sys.maxsize)</span></code></pre></div>
</div>
<p>We will now create some helper functions that will help us create tensors and display useful information:</p>
<ul>
<li><code>create_tensor()</code> creates a numpy array from a list of lists.</li>
<li><code>display_tensor()</code> prints out the shape and the actual tensor.</li>
</ul>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> create_tensor(t):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;">"""Create tensor from list of lists"""</span></span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> np.array(t)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">def</span> display_tensor(t, name):</span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;">"""Display shape and tensor"""</span></span>
<span id="cb2-8">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> shape: </span><span class="sc" style="color: #5E5E5E;">{</span>t<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb2-9">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>t<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
</div>
<p>Let’s create some tensors and display their shapes. Note though, that the query, key, and value arrays must all have the same embedding dimensions (number of columns), and the mask array must have the same shape as <code>np.dot(query, key.T)</code>.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">q <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb3-2">display_tensor(q, <span class="st" style="color: #20794D;">'query'</span>)</span>
<span id="cb3-3">k <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>]])</span>
<span id="cb3-4">display_tensor(k, <span class="st" style="color: #20794D;">'key'</span>)</span>
<span id="cb3-5">v <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb3-6">display_tensor(v, <span class="st" style="color: #20794D;">'value'</span>)</span>
<span id="cb3-7">m <span class="op" style="color: #5E5E5E;">=</span> create_tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>], [<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1e9</span>, <span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb3-8">display_tensor(m, <span class="st" style="color: #20794D;">'mask'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>query shape: (2, 3)

[[1 0 0]
 [0 1 0]]

key shape: (2, 3)

[[1 2 3]
 [4 5 6]]

value shape: (2, 3)

[[0 1 0]
 [1 0 1]]

mask shape: (2, 2)

[[ 0.e+00  0.e+00]
 [-1.e+09  0.e+00]]
</code></pre>
</div>
</div>
</section>
<section id="dot-product-attention" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="dot-product-attention"><span class="header-section-number">3</span> Dot product attention</h2>
<p>Here we come to the crux of this article, in which we compute <img src="https://latex.codecogs.com/png.latex?%5Ctextrm%7Bsoftmax%7D%20%5Cleft(%5Cfrac%7BQ%20K%5ET%7D%7B%5Csqrt%7Bd%7D%7D%20+%20M%20%5Cright)%20V">, where the (optional, but default) scaling factor <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bd%7D"> is the square root of the embedding dimension.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> DotProductAttention(query, key, value, mask, scale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;">"""Dot product self-attention.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">        query (numpy.ndarray): array of query representations with shape (L_q by d)</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">        key (numpy.ndarray): array of key representations with shape (L_k by d)</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">        value (numpy.ndarray): array of value representations with shape (L_k by d) where L_v = L_k</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">        mask (numpy.ndarray): attention-mask, gates attention with shape (L_q by L_k)</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">        scale (bool): whether to scale the dot product of the query and transposed key</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;">        numpy.ndarray: Self-attention array for q, k, v arrays. (L_q by d)</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;">assert</span> query.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> key.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> value.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], <span class="st" style="color: #20794D;">"Embedding dimensions of q, k, v aren't all the same"</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;"># Save depth/dimension of the query embedding for scaling down the dot product</span></span>
<span id="cb5-17">    <span class="cf" style="color: #003B4F;">if</span> scale: </span>
<span id="cb5-18">        depth <span class="op" style="color: #5E5E5E;">=</span> query.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-20">        depth <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-21"></span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;"># Calculate scaled query key dot product according to formula above</span></span>
<span id="cb5-23">    dots <span class="op" style="color: #5E5E5E;">=</span> np.matmul(query, np.swapaxes(key, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>)) <span class="op" style="color: #5E5E5E;">/</span> np.sqrt(depth) </span>
<span id="cb5-24">    </span>
<span id="cb5-25">    <span class="co" style="color: #5E5E5E;"># Apply the mask</span></span>
<span id="cb5-26">    <span class="cf" style="color: #003B4F;">if</span> mask <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-27">        dots <span class="op" style="color: #5E5E5E;">=</span> np.where(mask, dots, np.full_like(dots, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1e9</span>)) </span>
<span id="cb5-28">    </span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;"># Softmax formula implementation</span></span>
<span id="cb5-30">    <span class="co" style="color: #5E5E5E;"># We use scipy.special.logsumexp of masked_qkT to avoid underflow by division by large numbers</span></span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;"># Note: softmax = e^(dots - logaddexp(dots)) = E^dots / sumexp(dots)</span></span>
<span id="cb5-32">    logsumexp <span class="op" style="color: #5E5E5E;">=</span> scipy.special.logsumexp(dots, axis<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, keepdims<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-33"></span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;"># Take exponential of dots minus logsumexp to get softmax</span></span>
<span id="cb5-35">    <span class="co" style="color: #5E5E5E;"># We use np.exp()</span></span>
<span id="cb5-36">    dots <span class="op" style="color: #5E5E5E;">=</span> np.exp(dots <span class="op" style="color: #5E5E5E;">-</span> logsumexp)</span>
<span id="cb5-37"></span>
<span id="cb5-38">    <span class="co" style="color: #5E5E5E;"># Multiply dots by value to get self-attention</span></span>
<span id="cb5-39">    <span class="co" style="color: #5E5E5E;"># We use np.matmul()</span></span>
<span id="cb5-40">    attention <span class="op" style="color: #5E5E5E;">=</span> np.matmul(dots, value)</span>
<span id="cb5-41">    </span>
<span id="cb5-42">    <span class="cf" style="color: #003B4F;">return</span> attention</span></code></pre></div>
</div>
<p>Now let’s implement the <em>masked</em> dot product self-attention (at the heart of causal attention) as a special case of dot product attention</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> dot_product_self_attention(q, k, v, scale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;">""" Masked dot product self attention.</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">        q (numpy.ndarray): queries.</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">        k (numpy.ndarray): keys.</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">        v (numpy.ndarray): values.</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">        numpy.ndarray: masked dot product self attention tensor.</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;"># Size of the penultimate dimension of the query</span></span>
<span id="cb6-12">    mask_size <span class="op" style="color: #5E5E5E;">=</span> q.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb6-13"></span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;"># Creates a matrix with ones below the diagonal and 0s above. It should have shape (1, mask_size, mask_size)</span></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># Use np.tril() - Lower triangle of an array and np.ones()</span></span>
<span id="cb6-16">    mask <span class="op" style="color: #5E5E5E;">=</span> np.tril(np.ones((<span class="dv" style="color: #AD0000;">1</span>, mask_size, mask_size), dtype<span class="op" style="color: #5E5E5E;">=</span>np.bool_), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)  </span>
<span id="cb6-17">        </span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;">return</span> DotProductAttention(q, k, v, mask, scale<span class="op" style="color: #5E5E5E;">=</span>scale)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dot_product_self_attention(q, k, v)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([[[0.        , 1.        , 0.        ],
        [0.84967455, 0.15032545, 0.84967455]]])</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">4</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.coursera.org/learn/attention-models-in-nlp">Natural Language Processing with Attention Models Course</a> which i completed, and acknowledge the use of some images and other materials from the course in this article.</p>


</section>

 ]]></description>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <category>research-paper-review</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2023-03-04-three-types-of-attention-for-transformer-nlp-models.html</guid>
  <pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/arxiv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Improving seq2seq Language Models using Scaled Dot-Product Attention</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-03-02-improving-seq2seq-language-models-using-dot-product-attention.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-03-01-improving-seq2seq-language-models-using-basic-attention.html">earlier article</a> we looked at the simple attention model used for language translation introduced in the Bhadanau, et al.&nbsp;(2014) paper.</p>
<p>The 2017 paper <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a> introduced the Transformer model and scaled dot-product attention, sometimes also called QKV (<strong>Q</strong>ueries, <strong>K</strong>eys, <strong>V</strong>alues) attention. Since then, Transformers have come to dominate large-scale natural language applications. Scaled dot-product attention can be used to improve seq2seq models as well. In this article, we’ll implement a simplified version of scaled dot-product attention and replicate word alignment between English and French, as shown in <a href="https://arxiv.org/abs/1409.0473">Bhadanau, et al.&nbsp;(2014)</a>.</p>
</section>
<section id="import-libraries-setup" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries-setup"><span class="header-section-number">2</span> Import Libraries &amp; Setup</h2>
<p>A Transformer model can learn how to align words in different languages. We won’t be training any weights here, so we’ve prepared some <a href="https://fasttext.cc/docs/en/aligned-vectors.html">pre-trained aligned word embeddings from here</a>.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Load the word2int dictionaries</span></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"./data/word2int_en.pkl"</span>, <span class="st" style="color: #20794D;">"rb"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb1-7">    en_words <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f)</span>
<span id="cb1-8">    </span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"./data/word2int_fr.pkl"</span>, <span class="st" style="color: #20794D;">"rb"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb1-10">    fr_words <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;"># Load the word embeddings</span></span>
<span id="cb1-13">en_embeddings <span class="op" style="color: #5E5E5E;">=</span> np.load(<span class="st" style="color: #20794D;">"./data/embeddings_en.npz"</span>)[<span class="st" style="color: #20794D;">"embeddings"</span>]</span>
<span id="cb1-14">fr_embeddings <span class="op" style="color: #5E5E5E;">=</span> np.load(<span class="st" style="color: #20794D;">"./data/embeddings_fr.npz"</span>)[<span class="st" style="color: #20794D;">"embeddings"</span>]</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;">def</span> tokenize(sentence, token_mapping):</span>
<span id="cb1-17">    tokenized <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-18">    </span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> sentence.lower().split(<span class="st" style="color: #20794D;">" "</span>):</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb1-21">            tokenized.append(token_mapping[word])</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">KeyError</span>:</span>
<span id="cb1-23">            <span class="co" style="color: #5E5E5E;"># Using -1 to indicate an unknown word</span></span>
<span id="cb1-24">            tokenized.append(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-25">        </span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;">return</span> tokenized</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;">def</span> embed(tokens, embeddings):</span>
<span id="cb1-29">    embed_size <span class="op" style="color: #5E5E5E;">=</span> embeddings.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    output <span class="op" style="color: #5E5E5E;">=</span> np.zeros((<span class="bu" style="color: null;">len</span>(tokens), embed_size))</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;">for</span> i, token <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tokens):</span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;">if</span> token <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb1-34">            output[i] <span class="op" style="color: #5E5E5E;">=</span> np.zeros((<span class="dv" style="color: #AD0000;">1</span>, embed_size))</span>
<span id="cb1-35">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-36">            output[i] <span class="op" style="color: #5E5E5E;">=</span> embeddings[token]</span>
<span id="cb1-37">            </span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;">return</span> output</span></code></pre></div>
</div>
</section>
<section id="scaled-dot-product-attention" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="scaled-dot-product-attention"><span class="header-section-number">3</span> Scaled Dot-Product Attention</h2>
<p>The scaled-dot product attention consists of two matrix multiplications and a softmax scaling as shown in the diagram below from <a href="https://arxiv.org/abs/1706.03762">Vaswani, et al.&nbsp;(2017)</a>. It takes three input matrices, the queries, keys, and values.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/attention.png" title="Scaled-dot product attention" class="img-fluid"></p>
<p>Mathematically, this is expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clarge%20%5Cmathrm%7BAttention%7D%5Cleft(Q,%20K,%20V%5Cright)%20=%20%5Cmathrm%7Bsoftmax%7D%5Cleft(%5Cfrac%7BQK%5E%7B%5Ctop%7D%7D%7B%5Csqrt%7Bd_k%7D%7D%5Cright)V%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?K">, and <img src="https://latex.codecogs.com/png.latex?V"> are the queries, keys, and values matrices respectively, and <img src="https://latex.codecogs.com/png.latex?d_k"> is the dimension of the keys. In practice, Q, K, and V all have the same dimensions. This form of attention is faster and more space-efficient than what <a href="2023-03-01-improving-seq2seq-language-models-using-basic-attention.html">we implemented before with the simple attention of Bhadanau, et al.&nbsp;(2014)</a> since it consists of only matrix multiplications instead of a learned feed-forward layer.</p>
<p>Conceptually, the first matrix multiplication is a measure of the similarity between the queries and the keys. This is transformed into weights using the softmax function. These weights are then applied to the values with the second matrix multiplication resulting in output attention vectors. Typically, decoder states are used as the queries while encoder states are the keys and values.</p>
<p>We will implement the softmax function with Numpy and use it to calculate the weights from the queries and keys. Let’s assume the queries and keys are 2D arrays (matrices). Note that since the dot-product of Q and K will be a matrix, we’ll need to take care to calculate softmax over a specific axis.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> softmax(x, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>):    </span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;">""" Calculate softmax function for an array x</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">        axis=0 calculates softmax across rows which means each column sums to 1 </span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">        axis=1 calculates softmax across columns which means each row sums to 1</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb2-7">    y <span class="op" style="color: #5E5E5E;">=</span> np.exp(x) </span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">return</span> y <span class="op" style="color: #5E5E5E;">/</span> np.expand_dims(np.<span class="bu" style="color: null;">sum</span>(y, axis<span class="op" style="color: #5E5E5E;">=</span>axis), axis)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;">def</span> calculate_weights(queries, keys):</span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;">""" Calculate the weights for scaled dot-product attention"""</span></span>
<span id="cb2-12">    dot <span class="op" style="color: #5E5E5E;">=</span> np.matmul(queries, keys.T)<span class="op" style="color: #5E5E5E;">/</span>np.sqrt(keys.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb2-13">    weights <span class="op" style="color: #5E5E5E;">=</span> softmax(dot, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-14">    </span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;">assert</span> weights.<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"Each row in weights must sum to 1"</span></span>
<span id="cb2-16">    </span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;">return</span> weights</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Tokenize example sentences in English and French, then get their embeddings</span></span>
<span id="cb3-2">sentence_en <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The agreement on the European Economic Area was signed in August 1992 ."</span></span>
<span id="cb3-3">tokenized_en <span class="op" style="color: #5E5E5E;">=</span> tokenize(sentence_en, en_words)</span>
<span id="cb3-4">embedded_en <span class="op" style="color: #5E5E5E;">=</span> embed(tokenized_en, en_embeddings)</span>
<span id="cb3-5"></span>
<span id="cb3-6">sentence_fr <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"L accord sur la zone économique européenne a été signé en août 1992 ."</span></span>
<span id="cb3-7">tokenized_fr <span class="op" style="color: #5E5E5E;">=</span> tokenize(sentence_fr, fr_words)</span>
<span id="cb3-8">embedded_fr <span class="op" style="color: #5E5E5E;">=</span> embed(tokenized_fr, fr_embeddings)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># These weights indicate alignment between words in English and French</span></span>
<span id="cb3-11">alignment <span class="op" style="color: #5E5E5E;">=</span> calculate_weights(embedded_fr, embedded_en)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;"># Visualize weights to check for alignment</span></span>
<span id="cb3-14">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb3-15">ax.imshow(alignment, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb3-16">ax.xaxis.tick_top()</span>
<span id="cb3-17">ax.set_xticks(np.arange(alignment.shape[<span class="dv" style="color: #AD0000;">1</span>]))</span>
<span id="cb3-18">ax.set_xticklabels(sentence_en.split(<span class="st" style="color: #20794D;">" "</span>), rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-19">ax.set_yticks(np.arange(alignment.shape[<span class="dv" style="color: #AD0000;">0</span>]))<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-20">ax.set_yticklabels(sentence_fr.split(<span class="st" style="color: #20794D;">" "</span>), size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-03-02-improving-seq2seq-language-models-using-dot-product-attention_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This is a demonstration of alignment where the model has learned which words in English correspond to words in French. For example, the words <em>signed</em> and <em>signé</em> have a large weight because they have the same meaning. Typically, these alignments are learned using linear layers in the model, but we’ve used pre-trained embeddings here.</p>
<p>Let’s now complete the implementation of scaled dot-product attention using our <code>calculate_weights</code> function.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> attention_qkv(queries, keys, values):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;">""" Calculate scaled dot-product attention from queries, keys, and values matrices """</span></span>
<span id="cb4-3">    </span>
<span id="cb4-4">    weights <span class="op" style="color: #5E5E5E;">=</span> calculate_weights(queries, keys)</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">return</span> np.matmul(weights, values)</span>
<span id="cb4-6"></span>
<span id="cb4-7"></span>
<span id="cb4-8">attention_qkv_result <span class="op" style="color: #5E5E5E;">=</span> attention_qkv(embedded_fr, embedded_en, embedded_en)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"The shape of the attention_qkv function is&nbsp;</span><span class="sc" style="color: #5E5E5E;">{</span>attention_qkv_result<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb4-11"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Some elements of the attention_qkv function are&nbsp;</span><span class="ch" style="color: #20794D;">\n</span><span class="sc" style="color: #5E5E5E;">{</span>attention_qkv_result[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>,:<span class="dv" style="color: #AD0000;">10</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The shape of the attention_qkv function is&nbsp;(14, 300)
Some elements of the attention_qkv function are&nbsp;
[[-0.04039161 -0.00275749  0.00389873  0.04842744 -0.02472726  0.01435613
  -0.00370253 -0.0619686  -0.00206159  0.01615228]
 [-0.04083253 -0.00245985  0.00409068  0.04830341 -0.02479128  0.01447497
  -0.00355203 -0.06196036 -0.00241327  0.01582606]]</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">4</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.coursera.org/learn/attention-models-in-nlp">Natural Language Processing with Attention Models Course</a> which i completed, and acknowledge the use of some images and other materials from the course in this article.</p>


</section>

 ]]></description>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <category>research-paper-review</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2023-03-02-improving-seq2seq-language-models-using-dot-product-attention.html</guid>
  <pubDate>Thu, 02 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/arxiv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Improving seq2seq Language Models using Basic Attention</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-03-01-improving-seq2seq-language-models-using-basic-attention.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>As of 2023, in deep learning the Transformer model architecture has been behind many recent advances in deep learning model performance in many areas including Natural Language Processing and Computer Vision. An <strong>Attention</strong> mechanism is a key part of Transformer architecture. Attention was first introduced by <a href="https://arxiv.org/abs/1409.0473">Bhadanau, et al (2014)</a> as a method for improving seq2seq language models.</p>
<p>In this article we will look at this first use of an attention mechanism as proposed by <a href="https://arxiv.org/abs/1409.0473">Bhadanau, et al (2014)</a> and implement it in NumPy.</p>
<p>Attention allows a seq2seq decoder to use information from each encoder step instead of just the final encoder hidden state. In the attention operation, the encoder outputs are weighted based on the decoder hidden state, then combined into one context vector. This vector is then used as input to the decoder to predict the next output step.</p>
</section>
<section id="machine-translation-and-the-information-bottleneck" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="machine-translation-and-the-information-bottleneck"><span class="header-section-number">2</span> Machine translation and the ‘Information Bottleneck’</h2>
<p>The traditional seq2seq model was introduced by Google in 2014 and it was a revolution at the time for helping with Machine Translation from text in one language to another. Basically, it works by taking one sequence of items such as words and its output, is another sequence. The way this is done is by mapping variable length sequences to a fixed length memory, which in machine translation, encodes the overall meaning of sentences. For example, you can have a text of length that varies and you can encode it into a vector or fixed dimension like 300, for example. This feature is what’s made this model a powerhouse for machine translation. Additionally, the inputs and outputs don’t need to have matching lengths, which is a desirable feature when translating texts.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-6.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>In a seq2seq model, you have an encoder and a decoder. The encoder takes word tokens as input, and it returns its final hidden states as outputs.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-5.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>This hidden state is used by the decoder to generate the translated sentence in the target language.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-4.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>One major limitation of the traditional seq2seq model is what’s referred to as the <strong>information bottleneck</strong>. Since seq2seq uses a fixed length memory for the hidden states, long sequences become problematic. This is due to the fact that in traditional seq2seq models, only a fixed amount of information can be passed from the encoder to the decoder no matter how much information is contained in the input sequence.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-3.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>The power of seq2seq, which allows for inputs and outputs to be different sizes, becomes not effective when the input sequence is long. The result is lower model performance, a sequence size increases and that’s no good. The issue with having one fixed size encoder hidden states is that it struggles to compress longer sequences and it ends up throttling itself and punishing the decoder who only wants to make a good prediction. One workaround is to use the encoder hidden states for each word instead of trying to smash it all into one big vector. But this model would have flaws with memory and contexts.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-2.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>How could you build a time and memory efficient model that predicts accurately from a long sequence? This becomes possible if the model has a way to select and focus on the most important words at each time step. We can think of this as giving the model a new layer to process this information, which we call <strong>Attention</strong>. If we provide the information specific to each input word, you can give the model a way to focus it’s attention in the right place at each step of the decoding process.</p>
<p>Seq2seq models perform well for sentences with about 10-20 words, but they fall off beyond that. This is what you should expect. These are the results from the <a href="https://arxiv.org/abs/1409.0473">Bhadanau, et al (2014)</a> paper comparing models with and without attention.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/seq2seq-1.png" title="Seq2Seq Models" class="img-fluid"></p>
<p>The models with attention perform better than the traditional Seq2Seq models across all sentence lengths.</p>
</section>
<section id="import-libraries-setup" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="import-libraries-setup"><span class="header-section-number">3</span> Import Libraries &amp; Setup</h2>
<p>Let’s import NumPy and define a softmax function we will use later.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Run this first, a bit of setup for the rest of the lab</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> softmax(x, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;">""" Calculate softmax function for an array x along specified axis</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">        axis=0 calculates softmax across rows which means each column sums to 1 </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">        axis=1 calculates softmax across columns which means each row sums to 1</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;">return</span> np.exp(x) <span class="op" style="color: #5E5E5E;">/</span> np.expand_dims(np.<span class="bu" style="color: null;">sum</span>(np.exp(x), axis<span class="op" style="color: #5E5E5E;">=</span>axis), axis)</span></code></pre></div>
</div>
</section>
<section id="calculating-alignment-scores" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="calculating-alignment-scores"><span class="header-section-number">4</span> Calculating alignment scores</h2>
<p>The first step is to calculate the alignment scores. This is a measure of similarity between the decoder hidden state and each encoder hidden state. From the paper Appendix Section A.1.2, this operation looks like</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clarge%20e_%7Bij%7D%20=%20v_a%5E%5Ctop%20%5Ctanh%7B%5Cleft(W_a%20s_%7Bi-1%7D%20+%20U_a%20h_j%5Cright)%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?W_a%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%5Ctimes%20m%7D">, <img src="https://latex.codecogs.com/png.latex?U_a%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20m%7D">, and <img src="https://latex.codecogs.com/png.latex?v_a%20%5Cin%20%5Cmathbb%7BR%7D%5Em"> are the weight matrices and <img src="https://latex.codecogs.com/png.latex?n"> is the hidden state size. In practice, this is implemented as a feedforward neural network with two layers, where <img src="https://latex.codecogs.com/png.latex?m"> is the size of the layers in the alignment network. It looks something like:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/alignment_model_3.png" title="alignment model" class="img-fluid"></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?h_j"> are the encoder hidden states for each input step <img src="https://latex.codecogs.com/png.latex?j"> and <img src="https://latex.codecogs.com/png.latex?s_%7Bi%20-%201%7D"> is the decoder hidden state of the previous step. The first layer corresponds to <img src="https://latex.codecogs.com/png.latex?W_a"> and <img src="https://latex.codecogs.com/png.latex?U_a">, while the second layer corresponds to <img src="https://latex.codecogs.com/png.latex?v_a">.</p>
<p>To implement this, lets first concatenate the encoder and decoder hidden states to produce an array with size <img src="https://latex.codecogs.com/png.latex?K%20%5Ctimes%202n"> where <img src="https://latex.codecogs.com/png.latex?K"> is the number of encoder states/steps. For this, we use <code>np.concatenate</code> (<a href="https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html">docs</a>). Note that there is only one decoder state so we’ll need to reshape it to successfully concatenate the arrays. The easiest way is to use <code>decoder_state.repeat</code> (<a href="https://numpy.org/doc/stable/reference/generated/numpy.repeat.html#numpy.repeat">docs</a>) to match the hidden state array size.</p>
<p>Then, we apply the first layer as a matrix multiplication between the weights and the concatenated input. We will use the tanh function to get the activations. Finally, we compute the matrix multiplication of the second layer weights and the activations. This returns the alignment scores.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">hidden_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">16</span></span>
<span id="cb2-2">attention_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-3">input_length <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">np.random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># Synthetic vectors used to test</span></span>
<span id="cb2-8">encoder_states <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(input_length, hidden_size)</span>
<span id="cb2-9">decoder_state <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">1</span>, hidden_size)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># Weights for the neural network, these are typically learned through training</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;"># Use these in the alignment function below as the layer weights</span></span>
<span id="cb2-13">layer_1 <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>hidden_size, attention_size)</span>
<span id="cb2-14">layer_2 <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(attention_size, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;"># Alignment function</span></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;">def</span> alignment(encoder_states, decoder_state):</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;"># First, concatenate the encoder states and the decoder state</span></span>
<span id="cb2-19">    inputs <span class="op" style="color: #5E5E5E;">=</span> np.concatenate((encoder_states, decoder_state.repeat(input_length, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)), axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-20">    <span class="cf" style="color: #003B4F;">assert</span> inputs.shape <span class="op" style="color: #5E5E5E;">==</span> (input_length, <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>hidden_size)</span>
<span id="cb2-21">    </span>
<span id="cb2-22">    <span class="co" style="color: #5E5E5E;"># Matrix multiplication of the concatenated inputs and layer_1, with tanh activation</span></span>
<span id="cb2-23">    activations <span class="op" style="color: #5E5E5E;">=</span> np.tanh(np.matmul(inputs, layer_1))</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;">assert</span> activations.shape <span class="op" style="color: #5E5E5E;">==</span> (input_length, attention_size)</span>
<span id="cb2-25">    </span>
<span id="cb2-26">    <span class="co" style="color: #5E5E5E;"># Matrix multiplication of the activations with layer_2. We don't need tanh here</span></span>
<span id="cb2-27">    scores <span class="op" style="color: #5E5E5E;">=</span> np.matmul(activations, layer_2)</span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;">assert</span> scores.shape <span class="op" style="color: #5E5E5E;">==</span> (input_length, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-29">    </span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;">return</span> scores</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Run to test the alignment function</span></span>
<span id="cb3-2">scores <span class="op" style="color: #5E5E5E;">=</span> alignment(encoder_states, decoder_state)</span>
<span id="cb3-3"><span class="bu" style="color: null;">print</span>(scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[4.35790943]
 [5.92373433]
 [4.18673175]
 [2.11437202]
 [0.95767155]]</code></pre>
</div>
</div>
</section>
<section id="turning-alignment-into-weights" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="turning-alignment-into-weights"><span class="header-section-number">5</span> Turning alignment into weights</h2>
<p>The next step is to calculate the weights from the alignment scores. These weights determine the encoder outputs that are the most important for the decoder output. These weights should be between 0 and 1, and add up to 1. We can use the softmax function already implemented to get these weights from the attention scores. We will pass the attention scores vector to the softmax function to get the weights. Mathematically,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clarge%20%5Calpha_%7Bij%7D%20=%20%5Cfrac%7B%5Cexp%7B%5Cleft(e_%7Bij%7D%5Cright)%7D%7D%7B%5Csum_%7Bk=1%7D%5EK%20%5Cexp%7B%5Cleft(e_%7Bik%7D%5Cright)%7D%7D%0A"></p>
<p>This is as described in Appendix section A.2.2 of the paper.</p>
</section>
<section id="weight-the-encoder-output-vectors-and-sum" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="weight-the-encoder-output-vectors-and-sum"><span class="header-section-number">6</span> Weight the encoder output vectors and sum</h2>
<p>The weights tell us the importance of each input word with respect to the decoder state. In this step, we use the weights to modulate the magnitude of the encoder vectors. Words with little importance will be scaled down relative to important words. We will multiply each encoder vector by its respective weight to get the alignment vectors, then sum up the weighted alignment vectors to get the context vector. Mathematically,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clarge%20c_i%20=%20%5Csum_%7Bj=1%7D%5EK%5Calpha_%7Bij%7D%20h_%7Bj%7D%0A"></p>
<p>This is as described in Appendix section A.2.2 of the paper.</p>
<p>We wil implement these steps in the <code>attention</code> function below.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Attention function</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> attention(encoder_states, decoder_state):</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;">""" Function that calculates attention, returns the context vector </span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">    </span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">        Arguments:</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">        encoder_vectors: NxM numpy array, where N is the number of vectors and M is the vector length</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">        decoder_vector: 1xM numpy array, M is the vector length, much be the same M as encoder_vectors</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">    """</span> </span>
<span id="cb5-9">    </span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;"># First, calculate the alignment scores</span></span>
<span id="cb5-11">    scores <span class="op" style="color: #5E5E5E;">=</span> alignment(encoder_states, decoder_state)</span>
<span id="cb5-12">    </span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;"># Then take the softmax of the alignment scores to get a weight distribution</span></span>
<span id="cb5-14">    weights <span class="op" style="color: #5E5E5E;">=</span> softmax(scores)</span>
<span id="cb5-15">    </span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;"># Multiply each encoder state by its respective weight</span></span>
<span id="cb5-17">    weighted_scores <span class="op" style="color: #5E5E5E;">=</span> encoder_states <span class="op" style="color: #5E5E5E;">*</span> weights</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Sum up weighted alignment vectors to get the context vector and return it</span></span>
<span id="cb5-20">    context <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">sum</span>(weighted_scores, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;">return</span> context</span>
<span id="cb5-22"></span>
<span id="cb5-23">context_vector <span class="op" style="color: #5E5E5E;">=</span> attention(encoder_states, decoder_state)</span>
<span id="cb5-24"><span class="bu" style="color: null;">print</span>(context_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-0.63514569  0.04917298 -0.43930867 -0.9268003   1.01903919 -0.43181409
  0.13365099 -0.84746874 -0.37572203  0.18279832 -0.90452701  0.17872958
 -0.58015282 -0.58294027 -0.75457577  1.32985756]</code></pre>
</div>
</div>
<p>This context vector created using the new attention process will hold much more useful information relevant for producing more accurate output and better translations by the decoder of the Seq2Seq model.</p>
</section>
<section id="acknowledgements" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">7</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.coursera.org/learn/attention-models-in-nlp">Natural Language Processing with Attention Models Course</a> which i completed, and acknowledge the use of some images and other materials from the course in this article.</p>


</section>

 ]]></description>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <category>research-paper-review</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2023-03-01-improving-seq2seq-language-models-using-basic-attention.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/arxiv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Custom Models and human-in-the-loop pipelines with AWS Augmented AI (A2I)</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-24-custom-models-human-loop-pipelines-aws-augmented-ai.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this project we will create our own human workforce, a human task UI, and then define the human review workflow to perform data labeling for an ML task. We will make the original predictions of the labels with the custom ML model, and then create a human loop if the probability scores are lower than the preset threshold. After the completion of the human loop tasks, we will review the results and prepare data for re-training.</p>
<p>Let’s install and import the required modules.</p>
<div class="cell" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c3/w3'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-14">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-15"></span>
<span id="cb1-16">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-17">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-18"></span>
<span id="cb1-19">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-20">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-21">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span>
<span id="cb1-22"></span>
<span id="cb1-23">s3 <span class="op" style="color: #5E5E5E;">=</span> boto3.Session().client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3'</span>, </span>
<span id="cb1-24">                            config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-25">cognito_idp <span class="op" style="color: #5E5E5E;">=</span> boto3.Session().client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cognito-idp'</span>, </span>
<span id="cb1-26">                                     config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-27">a2i <span class="op" style="color: #5E5E5E;">=</span> boto3.Session().client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker-a2i-runtime'</span>, </span>
<span id="cb1-28">                             config<span class="op" style="color: #5E5E5E;">=</span>config)</span></code></pre></div>
</div>
</section>
<section id="set-up-amazon-cognito-user-pool-and-define-human-workforce" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="set-up-amazon-cognito-user-pool-and-define-human-workforce"><span class="header-section-number">2</span> Set up Amazon Cognito user pool and define human workforce</h2>
<p>The first step in the creation of the human-in-the-loop pipeline will be to create our own private workforce.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/human-loop-workflow-1-workforce.png" title="Human in the loop workforce" class="img-fluid"></p>
<p>Amazon Cognito provides authentication, authorization, and user management for apps. This enables our workers to sign in directly to the labeling UI with a username and password.</p>
<p>We will construct an Amazon Cognito user pool, setting up its client, domain, and group. Then we’ll create a SageMaker workforce, linking it to the Cognito user pool. Followed by the creation of a SageMaker workteam, linking it to the Cognito user pool and group. And finally, we will create a pool user and add it to the group.</p>
<p>To get started, let’s construct the user pool and user pool client names.</p>
<div class="cell" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb2-2">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb2-3"></span>
<span id="cb2-4">user_pool_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-user-pool-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb2-5">user_pool_client_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-user-pool-client-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user pool name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(user_pool_name))</span>
<span id="cb2-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user pool client name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(user_pool_client_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Amazon Cognito user pool name: groundtruth-user-pool-1677153775
Amazon Cognito user pool client name: groundtruth-user-pool-client-1677153775</code></pre>
</div>
</div>
<section id="create-amazon-cognito-user-pool" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="create-amazon-cognito-user-pool"><span class="header-section-number">2.1</span> Create Amazon Cognito user pool</h3>
<p>The function <code>cognito_idp.create_user_pool</code> creates a new Amazon Cognito user pool. Passing the function result into a variable we can get the information about the response. The result is in dictionary format.</p>
<div class="cell" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">create_user_pool_response <span class="op" style="color: #5E5E5E;">=</span> cognito_idp.create_user_pool(PoolName<span class="op" style="color: #5E5E5E;">=</span>user_pool_name)</span>
<span id="cb4-2">user_pool_id <span class="op" style="color: #5E5E5E;">=</span> create_user_pool_response[<span class="st" style="color: #20794D;">'UserPool'</span>][<span class="st" style="color: #20794D;">'Id'</span>]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user pool ID: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(user_pool_id))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Amazon Cognito user pool ID: us-east-1_8s0SOCEPn</code></pre>
</div>
</div>
<p>Let’s pull the Amazon Cognito user pool name from its description.</p>
<div class="cell" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;">print</span>(create_user_pool_response[<span class="st" style="color: #20794D;">'UserPool'</span>].keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['Id', 'Name', 'Policies', 'DeletionProtection', 'LambdaConfig', 'LastModifiedDate', 'CreationDate', 'SchemaAttributes', 'VerificationMessageTemplate', 'UserAttributeUpdateSettings', 'MfaConfiguration', 'EstimatedNumberOfUsers', 'EmailConfiguration', 'AdminCreateUserConfig', 'Arn'])</code></pre>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">user_pool_name <span class="op" style="color: #5E5E5E;">=</span> create_user_pool_response[<span class="st" style="color: #20794D;">'UserPool'</span>][<span class="st" style="color: #20794D;">'Name'</span>] </span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Amazon Cognito user pool name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(user_pool_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Amazon Cognito user pool name: groundtruth-user-pool-1677153775</code></pre>
</div>
</div>
</section>
<section id="create-amazon-cognito-user-pool-client" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="create-amazon-cognito-user-pool-client"><span class="header-section-number">2.2</span> Create Amazon Cognito user pool client</h3>
<p>Now let’s set up the Amazon Cognito user pool client for the created above user pool.</p>
<p>The Amazon Cognito user pool client implements an open standard for authorization framework, <code>OAuth</code>. The standard enables apps to obtain limited access (scopes) to a user’s data without giving away a user’s password. It decouples authentication from authorization and supports multiple use cases addressing different device capabilities.</p>
<p>Lets create the Amazon Cognito user pool client for the constructed user pool.</p>
<div class="cell" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">create_user_pool_client_response <span class="op" style="color: #5E5E5E;">=</span> cognito_idp.create_user_pool_client( <span class="co" style="color: #5E5E5E;"># Replace None</span></span>
<span id="cb10-2">    UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id, </span>
<span id="cb10-3">    ClientName<span class="op" style="color: #5E5E5E;">=</span>user_pool_client_name, </span>
<span id="cb10-4">    GenerateSecret<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="co" style="color: #5E5E5E;"># boolean to specify whether you want to generate a secret</span></span>
<span id="cb10-5">    <span class="co" style="color: #5E5E5E;"># a list of provider names for the identity providers that are supported on this client, e.g. Cognito, Facebook, Google</span></span>
<span id="cb10-6">    SupportedIdentityProviders<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-7">        <span class="st" style="color: #20794D;">'COGNITO'</span> </span>
<span id="cb10-8">    ],</span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;"># a list of the allowed OAuth flows, e.g. code, implicit, client_credentials</span></span>
<span id="cb10-10">    AllowedOAuthFlows<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-11">        <span class="st" style="color: #20794D;">'code'</span>,</span>
<span id="cb10-12">        <span class="st" style="color: #20794D;">'implicit'</span></span>
<span id="cb10-13">    ],</span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;"># a list of the allowed OAuth scopes, e.g. phone, email, openid, and profile</span></span>
<span id="cb10-15">    AllowedOAuthScopes<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-16">        <span class="st" style="color: #20794D;">'email'</span>,</span>
<span id="cb10-17">        <span class="st" style="color: #20794D;">'openid'</span>,</span>
<span id="cb10-18">        <span class="st" style="color: #20794D;">'profile'</span></span>
<span id="cb10-19">    ],</span>
<span id="cb10-20">    <span class="co" style="color: #5E5E5E;"># a list of allowed redirect (callback) URLs for the identity providers</span></span>
<span id="cb10-21">    CallbackURLs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-22">        <span class="st" style="color: #20794D;">'https://datascienceonaws.com'</span>, </span>
<span id="cb10-23">    ],</span>
<span id="cb10-24">    <span class="co" style="color: #5E5E5E;"># set to true if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools</span></span>
<span id="cb10-25">    AllowedOAuthFlowsUserPoolClient<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb10-26">)</span>
<span id="cb10-27"></span>
<span id="cb10-28">client_id <span class="op" style="color: #5E5E5E;">=</span> create_user_pool_client_response[<span class="st" style="color: #20794D;">'UserPoolClient'</span>][<span class="st" style="color: #20794D;">'ClientId'</span>]</span>
<span id="cb10-29"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Amazon Cognito user pool client ID: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(client_id))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Amazon Cognito user pool client ID: 4ebq1ga0irfdvssomfjhbh5fgq</code></pre>
</div>
</div>
</section>
<section id="create-amazon-cognito-user-pool-domain-and-group" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="create-amazon-cognito-user-pool-domain-and-group"><span class="header-section-number">2.3</span> Create Amazon Cognito user pool domain and group</h3>
<p>Now we set up the Amazon Cognito user pool domain for the constructed user pool.</p>
<div class="cell" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">user_pool_domain_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-user-pool-domain-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb12-4">    cognito_idp.create_user_pool_domain( </span>
<span id="cb12-5">        UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id, </span>
<span id="cb12-6">        Domain<span class="op" style="color: #5E5E5E;">=</span>user_pool_domain_name </span>
<span id="cb12-7">    )</span>
<span id="cb12-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Created Amazon Cognito user pool domain: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(user_pool_domain_name))</span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb12-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user pool domain </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(user_pool_domain_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Created Amazon Cognito user pool domain: groundtruth-user-pool-domain-1677153775</code></pre>
</div>
</div>
<p>We will use the following function to check if the Amazon Cognito user group already exists.</p>
<div class="cell" data-tags="[]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> check_user_pool_group_existence(user_pool_id, user_pool_group_name):  </span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;">for</span> group <span class="kw" style="color: #003B4F;">in</span> cognito_idp.list_groups(UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id)[<span class="st" style="color: #20794D;">'Groups'</span>]:</span>
<span id="cb14-3">        <span class="cf" style="color: #003B4F;">if</span> user_pool_group_name <span class="op" style="color: #5E5E5E;">==</span> group[<span class="st" style="color: #20794D;">'GroupName'</span>]:</span>
<span id="cb14-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Now we will set up the Amazon Cognito user group.</p>
<div class="cell" data-tags="[]" data-execution_count="19">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">user_pool_group_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-user-pool-group-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_user_pool_group_existence(user_pool_id, user_pool_group_name):</span>
<span id="cb15-4">    cognito_idp.create_group( </span>
<span id="cb15-5">        UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id, </span>
<span id="cb15-6">        GroupName<span class="op" style="color: #5E5E5E;">=</span>user_pool_group_name</span>
<span id="cb15-7">    )</span>
<span id="cb15-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Created Amazon Cognito user group: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(user_pool_group_name))</span>
<span id="cb15-9"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb15-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user group </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(user_pool_group_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Created Amazon Cognito user group: groundtruth-user-pool-group-1677153775</code></pre>
</div>
</div>
</section>
<section id="create-workforce-and-workteam" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="create-workforce-and-workteam"><span class="header-section-number">2.4</span> Create workforce and workteam</h3>
<p>We can use the following function to check if the workforce already exists. We can only create one workforce per region, therefore we’ll have to delete any other existing workforce, together with all of the related workteams.</p>
<div class="cell" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> check_workforce_existence(workforce_name):  </span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;">for</span> workforce <span class="kw" style="color: #003B4F;">in</span> sm.list_workforces()[<span class="st" style="color: #20794D;">'Workforces'</span>]:</span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;">if</span> workforce_name <span class="op" style="color: #5E5E5E;">==</span> workforce[<span class="st" style="color: #20794D;">'WorkforceName'</span>]:</span>
<span id="cb17-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb17-6">            <span class="cf" style="color: #003B4F;">for</span> workteam <span class="kw" style="color: #003B4F;">in</span> sm.list_workteams()[<span class="st" style="color: #20794D;">'Workteams'</span>]:</span>
<span id="cb17-7">                sm.delete_workteam(WorkteamName<span class="op" style="color: #5E5E5E;">=</span>workteam[<span class="st" style="color: #20794D;">'WorkteamName'</span>])</span>
<span id="cb17-8">            sm.delete_workforce(WorkforceName<span class="op" style="color: #5E5E5E;">=</span>workforce[<span class="st" style="color: #20794D;">'WorkforceName'</span>])</span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Lets create a workforce.</p>
<div class="cell" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">workforce_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-workforce-name-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_workforce_existence(workforce_name):</span>
<span id="cb18-4">    create_workforce_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_workforce(</span>
<span id="cb18-5">        WorkforceName<span class="op" style="color: #5E5E5E;">=</span>workforce_name,</span>
<span id="cb18-6">        CognitoConfig<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb18-7">            <span class="st" style="color: #20794D;">'UserPool'</span>: user_pool_id, </span>
<span id="cb18-8">            <span class="st" style="color: #20794D;">'ClientId'</span>: client_id</span>
<span id="cb18-9">        }</span>
<span id="cb18-10">    )</span>
<span id="cb18-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Workforce name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(workforce_name))</span>
<span id="cb18-12">    pprint(create_workforce_response)</span>
<span id="cb18-13"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb18-14">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Workforce </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(workforce_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Workforce name: groundtruth-workforce-name-1677153775
{'ResponseMetadata': {'HTTPHeaders': {'content-length': '107',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Thu, 23 Feb 2023 12:04:42 GMT',
                                      'x-amzn-requestid': '8e749026-4d1e-4758-949a-ab78fdfaafbe'},
                      'HTTPStatusCode': 200,
                      'RequestId': '8e749026-4d1e-4758-949a-ab78fdfaafbe',
                      'RetryAttempts': 0},
 'WorkforceArn': 'arn:aws:sagemaker:us-east-1:753124839657:workforce/groundtruth-workforce-name-1677153775'}</code></pre>
</div>
</div>
<p>You can use the <code>sm.describe_workforce</code> function to get the information about the workforce.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">describe_workforce_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_workforce(WorkforceName<span class="op" style="color: #5E5E5E;">=</span>workforce_name)</span>
<span id="cb20-2">describe_workforce_response</span></code></pre></div>
</div>
<p>We use the following function to check if the workteam already exists. If there are no workteams in the list, we will give some time for the workforce to set up.</p>
<div class="cell" data-tags="[]" data-execution_count="22">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> check_workteam_existence(workteam_name):  </span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;">if</span> sm.list_workteams()[<span class="st" style="color: #20794D;">'Workteams'</span>]:</span>
<span id="cb21-3">        <span class="cf" style="color: #003B4F;">for</span> workteam <span class="kw" style="color: #003B4F;">in</span> sm.list_workteams()[<span class="st" style="color: #20794D;">'Workteams'</span>]:</span>
<span id="cb21-4">            <span class="cf" style="color: #003B4F;">if</span> workteam_name <span class="op" style="color: #5E5E5E;">==</span> workteam[<span class="st" style="color: #20794D;">'WorkteamName'</span>]:</span>
<span id="cb21-5">                <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb21-7">        time.sleep(<span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb21-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb21-9">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Now lets create a workteam.</p>
<div class="cell" data-tags="[]" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">workteam_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'groundtruth-workteam-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_workteam_existence(workteam_name):</span>
<span id="cb22-4">    create_workteam_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_workteam(</span>
<span id="cb22-5">        Description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'groundtruth workteam'</span>,</span>
<span id="cb22-6">        WorkforceName<span class="op" style="color: #5E5E5E;">=</span>workforce_name,</span>
<span id="cb22-7">        WorkteamName<span class="op" style="color: #5E5E5E;">=</span>workteam_name,</span>
<span id="cb22-8">        <span class="co" style="color: #5E5E5E;"># objects that identify the workers that make up the work team</span></span>
<span id="cb22-9">        MemberDefinitions<span class="op" style="color: #5E5E5E;">=</span>[{</span>
<span id="cb22-10">            <span class="st" style="color: #20794D;">'CognitoMemberDefinition'</span>: {</span>
<span id="cb22-11">                <span class="st" style="color: #20794D;">'UserPool'</span>: user_pool_id, </span>
<span id="cb22-12">                <span class="st" style="color: #20794D;">'ClientId'</span>: client_id, </span>
<span id="cb22-13">                <span class="st" style="color: #20794D;">'UserGroup'</span>: user_pool_group_name </span>
<span id="cb22-14">            }</span>
<span id="cb22-15">        }]</span>
<span id="cb22-16">    )</span>
<span id="cb22-17">    pprint(create_workteam_response)</span>
<span id="cb22-18"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb22-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Workteam </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(workteam_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ResponseMetadata': {'HTTPHeaders': {'content-length': '113',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Thu, 23 Feb 2023 12:06:06 GMT',
                                      'x-amzn-requestid': 'bd89c3fa-45bb-439b-aa33-f2c685e69d8a'},
                      'HTTPStatusCode': 200,
                      'RequestId': 'bd89c3fa-45bb-439b-aa33-f2c685e69d8a',
                      'RetryAttempts': 0},
 'WorkteamArn': 'arn:aws:sagemaker:us-east-1:753124839657:workteam/private-crowd/groundtruth-workteam-1677153775'}</code></pre>
</div>
</div>
<p>We can use the <code>sm.describe_workteam</code> function to get information about the workteam.</p>
<div class="cell" data-tags="[]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">describe_workteam_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_workteam(WorkteamName<span class="op" style="color: #5E5E5E;">=</span>workteam_name)</span>
<span id="cb24-2">describe_workteam_response</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>{'Workteam': {'WorkteamName': 'groundtruth-workteam-1677153775',
  'MemberDefinitions': [{'CognitoMemberDefinition': {'UserPool': 'us-east-1_8s0SOCEPn',
     'UserGroup': 'groundtruth-user-pool-group-1677153775',
     'ClientId': '4ebq1ga0irfdvssomfjhbh5fgq'}}],
  'WorkteamArn': 'arn:aws:sagemaker:us-east-1:753124839657:workteam/private-crowd/groundtruth-workteam-1677153775',
  'Description': 'groundtruth workteam',
  'SubDomain': 'aqa042udc1.labeling.us-east-1.sagemaker.aws',
  'CreateDate': datetime.datetime(2023, 2, 23, 12, 6, 5, 715000, tzinfo=tzlocal()),
  'LastUpdatedDate': datetime.datetime(2023, 2, 23, 12, 6, 7, 175000, tzinfo=tzlocal()),
  'NotificationConfiguration': {}},
 'ResponseMetadata': {'RequestId': '615a618f-d243-4c27-a8d5-f94290f6c790',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': '615a618f-d243-4c27-a8d5-f94290f6c790',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '544',
   'date': 'Thu, 23 Feb 2023 12:06:06 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Now we can pull the workteam ARN either from <code>create_workteam_response</code> or <code>describe_workteam_response</code>.</p>
<div class="cell" data-tags="[]" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">workteam_arn <span class="op" style="color: #5E5E5E;">=</span> describe_workteam_response[<span class="st" style="color: #20794D;">'Workteam'</span>][<span class="st" style="color: #20794D;">'WorkteamArn'</span>]</span>
<span id="cb26-2">workteam_arn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>'arn:aws:sagemaker:us-east-1:753124839657:workteam/private-crowd/groundtruth-workteam-1677153775'</code></pre>
</div>
</div>
</section>
<section id="create-an-amazon-cognito-user-and-add-the-user-to-the-group" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="create-an-amazon-cognito-user-and-add-the-user-to-the-group"><span class="header-section-number">2.5</span> Create an Amazon Cognito user and add the user to the group</h3>
<p>We will use the following function to check if the Amazon Cognito user already exists.</p>
<div class="cell" data-tags="[]" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> check_user_existence(user_pool_id, user_name):  </span>
<span id="cb28-2">    <span class="cf" style="color: #003B4F;">for</span> user <span class="kw" style="color: #003B4F;">in</span> cognito_idp.list_users(UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id)[<span class="st" style="color: #20794D;">'Users'</span>]:</span>
<span id="cb28-3">        <span class="cf" style="color: #003B4F;">if</span> user_name <span class="op" style="color: #5E5E5E;">==</span> user[<span class="st" style="color: #20794D;">'Username'</span>]:</span>
<span id="cb28-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb28-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Now we create a user passing the username, temporary password, and the Amazon Cognito user pool ID.</p>
<div class="cell" data-tags="[]" data-execution_count="28">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">user_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'user-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb29-2"></span>
<span id="cb29-3">temporary_password <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Password@420'</span></span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_user_existence(user_pool_id, user_name):</span>
<span id="cb29-6">    create_user_response<span class="op" style="color: #5E5E5E;">=</span>cognito_idp.admin_create_user(</span>
<span id="cb29-7">        Username<span class="op" style="color: #5E5E5E;">=</span>user_name,</span>
<span id="cb29-8">        UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id,</span>
<span id="cb29-9">        TemporaryPassword<span class="op" style="color: #5E5E5E;">=</span>temporary_password,</span>
<span id="cb29-10">        MessageAction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'SUPPRESS'</span> <span class="co" style="color: #5E5E5E;"># suppress sending the invitation message to a user that already exists</span></span>
<span id="cb29-11">    )</span>
<span id="cb29-12">    pprint(create_user_response)</span>
<span id="cb29-13"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb29-14">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Amazon Cognito user </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(user_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',
                                      'content-length': '242',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Thu, 23 Feb 2023 12:06:07 GMT',
                                      'x-amzn-requestid': '9799ecf1-9400-4385-a696-f3067a8ee4ab'},
                      'HTTPStatusCode': 200,
                      'RequestId': '9799ecf1-9400-4385-a696-f3067a8ee4ab',
                      'RetryAttempts': 0},
 'User': {'Attributes': [{'Name': 'sub',
                          'Value': '7e22b0c1-059a-45b4-b69a-e1b378950097'}],
          'Enabled': True,
          'UserCreateDate': datetime.datetime(2023, 2, 23, 12, 6, 7, 848000, tzinfo=tzlocal()),
          'UserLastModifiedDate': datetime.datetime(2023, 2, 23, 12, 6, 7, 848000, tzinfo=tzlocal()),
          'UserStatus': 'FORCE_CHANGE_PASSWORD',
          'Username': 'user-1677153775'}}</code></pre>
</div>
</div>
<p>Add the user into the Amazon Cognito user group.</p>
<div class="cell" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">cognito_idp.admin_add_user_to_group(</span>
<span id="cb31-2">    UserPoolId<span class="op" style="color: #5E5E5E;">=</span>user_pool_id,</span>
<span id="cb31-3">    Username<span class="op" style="color: #5E5E5E;">=</span>user_name,</span>
<span id="cb31-4">    GroupName<span class="op" style="color: #5E5E5E;">=</span>user_pool_group_name</span>
<span id="cb31-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>{'ResponseMetadata': {'RequestId': '18dd685f-63f6-4d5b-8f81-cd22d9304a5e',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'date': 'Thu, 23 Feb 2023 12:06:08 GMT',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '0',
   'connection': 'keep-alive',
   'x-amzn-requestid': '18dd685f-63f6-4d5b-8f81-cd22d9304a5e'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
</section>
</section>
<section id="create-human-task-ui" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="create-human-task-ui"><span class="header-section-number">3</span> Create Human Task UI</h2>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/human-loop-workflow-2-taskUI.png" title="Human in the loop Workflow" class="img-fluid"></p>
<p>We will create a Human Task UI resource, using a worker task UI template. This template will be rendered to the human workers whenever human interaction is required.</p>
<p>Below there is a simple template, that is compatible with the current use case of classifying product reviews into the three sentiment classes. For other pre-built UIs (there are 70+), check: https://github.com/aws-samples/amazon-a2i-sample-task-uis</p>
<div class="cell" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">template <span class="op" style="color: #5E5E5E;">=</span> <span class="vs" style="color: #20794D;">r"""</span></span>
<span id="cb33-2"><span class="vs" style="color: #20794D;">&lt;script src="https://assets.crowd.aws/crowd-html-elements.js"&gt;&lt;/script&gt;</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="vs" style="color: #20794D;">&lt;crowd-form&gt;</span></span>
<span id="cb33-5"><span class="vs" style="color: #20794D;">    &lt;crowd-classifier name="sentiment"</span></span>
<span id="cb33-6"><span class="vs" style="color: #20794D;">                      categories="['-1', '0', '1']"</span></span>
<span id="cb33-7"><span class="vs" style="color: #20794D;">                      initial-value="</span><span class="sc" style="color: #5E5E5E;">{{</span><span class="vs" style="color: #20794D;"> task.input.initialValue </span><span class="sc" style="color: #5E5E5E;">}}</span><span class="vs" style="color: #20794D;">"</span></span>
<span id="cb33-8"><span class="vs" style="color: #20794D;">                      header="Classify Reviews into Sentiment:  -1 (negative), 0 (neutral), and 1 (positive)"&gt;</span></span>
<span id="cb33-9"><span class="vs" style="color: #20794D;">      </span></span>
<span id="cb33-10"><span class="vs" style="color: #20794D;">        &lt;classification-target&gt;</span></span>
<span id="cb33-11"><span class="vs" style="color: #20794D;">            </span><span class="sc" style="color: #5E5E5E;">{{</span><span class="vs" style="color: #20794D;"> task.input.taskObject </span><span class="sc" style="color: #5E5E5E;">}}</span></span>
<span id="cb33-12"><span class="vs" style="color: #20794D;">        &lt;/classification-target&gt;</span></span>
<span id="cb33-13"><span class="vs" style="color: #20794D;">      </span></span>
<span id="cb33-14"><span class="vs" style="color: #20794D;">        &lt;full-instructions header="Classify reviews into sentiment:  -1 (negative), 0 (neutral), and 1 (positive)"&gt;</span></span>
<span id="cb33-15"><span class="vs" style="color: #20794D;">            &lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;: joy, excitement, delight&lt;/p&gt;       </span></span>
<span id="cb33-16"><span class="vs" style="color: #20794D;">            &lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;: neither positive or negative, such as stating a fact&lt;/p&gt;</span></span>
<span id="cb33-17"><span class="vs" style="color: #20794D;">            &lt;p&gt;&lt;strong&gt;-1&lt;/strong&gt;: anger, sarcasm, anxiety&lt;/p&gt;</span></span>
<span id="cb33-18"><span class="vs" style="color: #20794D;">        &lt;/full-instructions&gt;</span></span>
<span id="cb33-19"></span>
<span id="cb33-20"><span class="vs" style="color: #20794D;">        &lt;short-instructions&gt;</span></span>
<span id="cb33-21"><span class="vs" style="color: #20794D;">            Classify reviews into sentiment:  -1 (negative), 0 (neutral), and 1 (positive)</span></span>
<span id="cb33-22"><span class="vs" style="color: #20794D;">        &lt;/short-instructions&gt;</span></span>
<span id="cb33-23"><span class="vs" style="color: #20794D;">    &lt;/crowd-classifier&gt;</span></span>
<span id="cb33-24"><span class="vs" style="color: #20794D;">&lt;/crowd-form&gt;</span></span>
<span id="cb33-25"><span class="vs" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<p>We will now create a human task UI resource.</p>
<div class="cell" data-tags="[]" data-execution_count="31">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># Task UI name - this value is unique per account and region. </span></span>
<span id="cb34-2">task_ui_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'ui-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb34-3"></span>
<span id="cb34-4">human_task_ui_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_human_task_ui(</span>
<span id="cb34-5">    HumanTaskUiName<span class="op" style="color: #5E5E5E;">=</span>task_ui_name,</span>
<span id="cb34-6">    UiTemplate<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb34-7">        <span class="st" style="color: #20794D;">"Content"</span>: template  </span>
<span id="cb34-8">    }</span>
<span id="cb34-9">)</span>
<span id="cb34-10">human_task_ui_response</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>{'HumanTaskUiArn': 'arn:aws:sagemaker:us-east-1:753124839657:human-task-ui/ui-1677153775',
 'ResponseMetadata': {'RequestId': 'a3561000-dec3-44de-b527-1c26ea8b443d',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'a3561000-dec3-44de-b527-1c26ea8b443d',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '89',
   'date': 'Thu, 23 Feb 2023 12:06:08 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Pull the ARN of the human task UI:</p>
<div class="cell" data-tags="[]" data-execution_count="32">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">human_task_ui_arn <span class="op" style="color: #5E5E5E;">=</span> human_task_ui_response[<span class="st" style="color: #20794D;">"HumanTaskUiArn"</span>]</span>
<span id="cb36-2"><span class="bu" style="color: null;">print</span>(human_task_ui_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:753124839657:human-task-ui/ui-1677153775</code></pre>
</div>
</div>
</section>
<section id="define-human-review-workflow" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="define-human-review-workflow"><span class="header-section-number">4</span> Define human review workflow</h2>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/human-loop-workflow-3-review.png" title="Human in the loop Workflow" class="img-fluid"></p>
<p>In this section, we are going to create a Flow Definition. A flow Definitions allows you to specify:</p>
<ul>
<li>The workforce (in fact, it is a workteam) that our tasks will be sent to.</li>
<li>The instructions that our workforce will receive (worker task template).</li>
<li>The configuration of our worker tasks, including the number of workers that receive a task and time limits to complete tasks.</li>
<li>Where our output data will be stored.</li>
</ul>
<p>Here we are going to use the API, but we can optionally create this workflow definition in the console as well.</p>
<p>For more details and instructions, see: https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-create-flow-definition.html.</p>
<p>Let’s construct the S3 bucket output path.</p>
<div class="cell" data-tags="[]" data-execution_count="33">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/a2i-results-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(bucket, timestamp)</span>
<span id="cb38-2"><span class="bu" style="color: null;">print</span>(output_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-753124839657/a2i-results-1677153775</code></pre>
</div>
</div>
<p>Lets construct the Flow Definition with the workteam and human task UI in the human loop configurations that we created above.</p>
<div class="cell" data-tags="[]" data-execution_count="34">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Flow definition name - this value is unique per account and region</span></span>
<span id="cb40-2">flow_definition_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'fd-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb40-3"></span>
<span id="cb40-4">create_workflow_definition_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_flow_definition(</span>
<span id="cb40-5">    FlowDefinitionName<span class="op" style="color: #5E5E5E;">=</span>flow_definition_name,</span>
<span id="cb40-6">    RoleArn<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb40-7">    HumanLoopConfig<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb40-8">        <span class="st" style="color: #20794D;">"WorkteamArn"</span>: workteam_arn, </span>
<span id="cb40-9">        <span class="st" style="color: #20794D;">"HumanTaskUiArn"</span>: human_task_ui_arn, </span>
<span id="cb40-10">        <span class="st" style="color: #20794D;">"TaskCount"</span>: <span class="dv" style="color: #AD0000;">1</span>, <span class="co" style="color: #5E5E5E;"># the number of workers that receive a task</span></span>
<span id="cb40-11">        <span class="st" style="color: #20794D;">"TaskDescription"</span>: <span class="st" style="color: #20794D;">"Classify Reviews into sentiment:  -1 (negative), 0 (neutral), 1 (positive)"</span>,</span>
<span id="cb40-12">        <span class="st" style="color: #20794D;">"TaskTitle"</span>: <span class="st" style="color: #20794D;">"Classify Reviews into sentiment:  -1 (negative), 0 (neutral), 1 (positive)"</span>,</span>
<span id="cb40-13">    },</span>
<span id="cb40-14">    OutputConfig<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"S3OutputPath"</span>: output_path},</span>
<span id="cb40-15">)</span>
<span id="cb40-16"></span>
<span id="cb40-17">augmented_ai_flow_definition_arn <span class="op" style="color: #5E5E5E;">=</span> create_workflow_definition_response[<span class="st" style="color: #20794D;">"FlowDefinitionArn"</span>]</span></code></pre></div>
</div>
<p>You can pull information about the Flow Definition with the function <code>sm.describe_flow_definition</code> and wait for its status value <code>FlowDefinitionStatus</code> to become <code>Active</code>.</p>
<div class="cell" data-scrolled="true" data-tags="[]" data-execution_count="35">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">60</span>):</span>
<span id="cb41-2">    describe_flow_definition_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_flow_definition(FlowDefinitionName<span class="op" style="color: #5E5E5E;">=</span>flow_definition_name)</span>
<span id="cb41-3">    <span class="bu" style="color: null;">print</span>(describe_flow_definition_response[<span class="st" style="color: #20794D;">"FlowDefinitionStatus"</span>])</span>
<span id="cb41-4">    <span class="cf" style="color: #003B4F;">if</span> describe_flow_definition_response[<span class="st" style="color: #20794D;">"FlowDefinitionStatus"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Active"</span>:</span>
<span id="cb41-5">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Flow Definition is active"</span>)</span>
<span id="cb41-6">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb41-7">    time.sleep(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Active
Flow Definition is active</code></pre>
</div>
</div>
</section>
<section id="start-human-loop-with-custom-ml-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="start-human-loop-with-custom-ml-model"><span class="header-section-number">5</span> Start human loop with custom ML model</h2>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/human-loop-workflow-4-start.png" title="Human in the loop Workflow" class="img-fluid"></p>
<p>We will now deploy a custom ML model into an endpoint and call it to predict labels for some sample reviews. We need to check the confidence score for each prediction. If it is smaller than the threshold, we will engage our workforce for a human review, starting a human loop. We can fix the labels by completing the human loop tasks and review the results.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/augmented-ai-loop.png" title="Human in the loop Workflow" class="img-fluid"></p>
<p>Lets set up a sentiment predictor class to be wrapped later into the PyTorch Model.</p>
<div class="cell" data-tags="[]" data-execution_count="36">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb43-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb43-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb43-4"></span>
<span id="cb43-5"><span class="kw" style="color: #003B4F;">class</span> SentimentPredictor(Predictor):</span>
<span id="cb43-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, endpoint_name, sagemaker_session):</span>
<span id="cb43-7">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(</span>
<span id="cb43-8">            endpoint_name, </span>
<span id="cb43-9">            sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sagemaker_session,</span>
<span id="cb43-10">            serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(), </span>
<span id="cb43-11">            deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer() </span>
<span id="cb43-12">        )</span></code></pre></div>
</div>
<p>Now we create a SageMaker model based on the model artifact saved in the S3 bucket.</p>
<div class="cell" data-tags="[]" data-execution_count="37">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch.model <span class="im" style="color: #00769E;">import</span> PyTorchModel</span>
<span id="cb44-2"></span>
<span id="cb44-3">pytorch_model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'model-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb44-4"></span>
<span id="cb44-5">model <span class="op" style="color: #5E5E5E;">=</span> PyTorchModel(name<span class="op" style="color: #5E5E5E;">=</span>pytorch_model_name,</span>
<span id="cb44-6">                     model_data<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/models/ab/variant_a/model.tar.gz'</span>,</span>
<span id="cb44-7">                     predictor_cls<span class="op" style="color: #5E5E5E;">=</span>SentimentPredictor,</span>
<span id="cb44-8">                     entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'inference.py'</span>,</span>
<span id="cb44-9">                     source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb44-10">                     framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb44-11">                     py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb44-12">                     role<span class="op" style="color: #5E5E5E;">=</span>role)</span></code></pre></div>
</div>
<p>Now we will create a SageMaker Endpoint from the model. For the purposes of this project, we will use a relatively small instance type. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases outside of this lab.</p>
<div class="cell" data-tags="[]" data-execution_count="38">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb45-2"></span>
<span id="cb45-3">pytorch_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'endpoint-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb45-4"></span>
<span id="cb45-5">predictor <span class="op" style="color: #5E5E5E;">=</span> model.deploy(initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb45-6">                         instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>, </span>
<span id="cb45-7">                         endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pytorch_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------!CPU times: user 2min 15s, sys: 9.67 s, total: 2min 24s
Wall time: 7min 24s</code></pre>
</div>
</div>
<section id="start-the-human-loop" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="start-the-human-loop"><span class="header-section-number">5.1</span> Start the human loop</h3>
<p>Let’s create a list of sample reviews.</p>
<div class="cell" data-tags="[]" data-execution_count="40">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">reviews <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"I enjoy this product"</span>, </span>
<span id="cb47-2">           <span class="st" style="color: #20794D;">"I am unhappy with this product"</span>, </span>
<span id="cb47-3">           <span class="st" style="color: #20794D;">"It is okay"</span>, </span>
<span id="cb47-4">           <span class="st" style="color: #20794D;">"sometimes it works"</span>]</span></code></pre></div>
</div>
<p>Now we can send each of the sample reviews to the model via the <code>predictor.predict()</code> API call. Note that we need to pass the reviews in the JSON format that model expects as input. Then, we parse the model’s response to obtain the predicted label and the confidence score.</p>
<p>After that, we check the condition for when you want to engage a human for review. We can check whether the returned confidence score is under the defined threshold of 90%, which would mean that we would want to start the human loop with the predicted label and the review as inputs. Finally, we start the human loop passing the input content and Flow Definition defined above.</p>
<div class="cell" data-tags="[]" data-execution_count="41">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb48-2"></span>
<span id="cb48-3">human_loops_started <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb48-4"></span>
<span id="cb48-5">CONFIDENCE_SCORE_THRESHOLD <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.90</span></span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="cf" style="color: #003B4F;">for</span> review <span class="kw" style="color: #003B4F;">in</span> reviews:</span>
<span id="cb48-8">    inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb48-9">        {<span class="st" style="color: #20794D;">"features"</span>: [review]},</span>
<span id="cb48-10">    ]</span>
<span id="cb48-11"></span>
<span id="cb48-12">    response <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb48-13">    <span class="bu" style="color: null;">print</span>(response)</span>
<span id="cb48-14">    prediction <span class="op" style="color: #5E5E5E;">=</span> response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'predicted_label'</span>]</span>
<span id="cb48-15">    confidence_score <span class="op" style="color: #5E5E5E;">=</span> response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'probability'</span>]</span>
<span id="cb48-16"></span>
<span id="cb48-17">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Checking prediction confidence </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> for sample review: "</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"'</span>.<span class="bu" style="color: null;">format</span>(confidence_score, review))</span>
<span id="cb48-18"></span>
<span id="cb48-19">    <span class="co" style="color: #5E5E5E;"># condition for when we want to engage a human for review</span></span>
<span id="cb48-20">    <span class="cf" style="color: #003B4F;">if</span> confidence_score <span class="op" style="color: #5E5E5E;">&lt;</span> CONFIDENCE_SCORE_THRESHOLD:</span>
<span id="cb48-21">        human_loop_name <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(time.time()).replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">'-'</span>) <span class="co" style="color: #5E5E5E;"># using milliseconds</span></span>
<span id="cb48-22">        input_content <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb48-23">            <span class="st" style="color: #20794D;">"initialValue"</span>: prediction, </span>
<span id="cb48-24">            <span class="st" style="color: #20794D;">"taskObject"</span>: review </span>
<span id="cb48-25">        }</span>
<span id="cb48-26">        start_loop_response <span class="op" style="color: #5E5E5E;">=</span> a2i.start_human_loop(</span>
<span id="cb48-27">            HumanLoopName<span class="op" style="color: #5E5E5E;">=</span>human_loop_name,</span>
<span id="cb48-28">            FlowDefinitionArn<span class="op" style="color: #5E5E5E;">=</span>augmented_ai_flow_definition_arn,</span>
<span id="cb48-29">            HumanLoopInput<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"InputContent"</span>: json.dumps(input_content)},</span>
<span id="cb48-30">        )</span>
<span id="cb48-31"></span>
<span id="cb48-32">        human_loops_started.append(human_loop_name)</span>
<span id="cb48-33"></span>
<span id="cb48-34">        <span class="bu" style="color: null;">print</span>(</span>
<span id="cb48-35">            <span class="ss" style="color: #20794D;">f"Confidence score of </span><span class="sc" style="color: #5E5E5E;">{</span>confidence_score <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">% for prediction of </span><span class="sc" style="color: #5E5E5E;">{</span>prediction<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> is less than the threshold of </span><span class="sc" style="color: #5E5E5E;">{</span>CONFIDENCE_SCORE_THRESHOLD <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">%"</span></span>
<span id="cb48-36">        )</span>
<span id="cb48-37">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"*** ==&gt; Starting human loop with name: </span><span class="sc" style="color: #5E5E5E;">{</span>human_loop_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">  </span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb48-38">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb48-39">        <span class="bu" style="color: null;">print</span>(</span>
<span id="cb48-40">            <span class="ss" style="color: #20794D;">f"Confidence score of </span><span class="sc" style="color: #5E5E5E;">{</span>confidence_score <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">% for star rating of </span><span class="sc" style="color: #5E5E5E;">{</span>prediction<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> is above threshold of </span><span class="sc" style="color: #5E5E5E;">{</span>CONFIDENCE_SCORE_THRESHOLD <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">%"</span></span>
<span id="cb48-41">        )</span>
<span id="cb48-42">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Human loop not needed. </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'probability': 0.9376369118690491, 'predicted_label': 1}]
Checking prediction confidence 0.9376369118690491 for sample review: "I enjoy this product"
Confidence score of 93.76369118690491% for star rating of 1 is above threshold of 90.0%
Human loop not needed. 

[{'probability': 0.6340296864509583, 'predicted_label': -1}]
Checking prediction confidence 0.6340296864509583 for sample review: "I am unhappy with this product"
Confidence score of 63.402968645095825% for prediction of -1 is less than the threshold of 90.0%
*** ==&gt; Starting human loop with name: 1677154445-9813657  

[{'probability': 0.5422114729881287, 'predicted_label': 1}]
Checking prediction confidence 0.5422114729881287 for sample review: "It is okay"
Confidence score of 54.221147298812866% for prediction of 1 is less than the threshold of 90.0%
*** ==&gt; Starting human loop with name: 1677154446-4558146  

[{'probability': 0.3931102454662323, 'predicted_label': 1}]
Checking prediction confidence 0.3931102454662323 for sample review: "sometimes it works"
Confidence score of 39.31102454662323% for prediction of 1 is less than the threshold of 90.0%
*** ==&gt; Starting human loop with name: 1677154446-8940263  
</code></pre>
</div>
</div>
<p>Three of the sample reviews with the probability scores lower than the threshold went into the human loop. The original predicted labels are passed together with the review text and will be seen in the task.</p>
</section>
<section id="check-status-of-the-human-loop" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="check-status-of-the-human-loop"><span class="header-section-number">5.2</span> Check status of the human loop</h3>
<p>Function <code>a2i.describe_human_loop</code> can be used to pull the information about the human loop.</p>
<div class="cell" data-tags="[]" data-execution_count="42">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">completed_human_loops <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb50-2"><span class="cf" style="color: #003B4F;">for</span> human_loop_name <span class="kw" style="color: #003B4F;">in</span> human_loops_started:</span>
<span id="cb50-3">    resp <span class="op" style="color: #5E5E5E;">=</span> a2i.describe_human_loop(HumanLoopName<span class="op" style="color: #5E5E5E;">=</span>human_loop_name)</span>
<span id="cb50-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"HumanLoop Name: </span><span class="sc" style="color: #5E5E5E;">{</span>human_loop_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb50-5">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'HumanLoop Status: </span><span class="sc" style="color: #5E5E5E;">{</span>resp[<span class="st" style="color: #20794D;">"HumanLoopStatus"</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb50-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'HumanLoop Output Destination: </span><span class="sc" style="color: #5E5E5E;">{</span>resp[<span class="st" style="color: #20794D;">"HumanLoopOutput"</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb50-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb50-8"></span>
<span id="cb50-9">    <span class="cf" style="color: #003B4F;">if</span> resp[<span class="st" style="color: #20794D;">"HumanLoopStatus"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Completed"</span>:</span>
<span id="cb50-10">        completed_human_loops.append(resp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HumanLoop Name: 1677154445-9813657
HumanLoop Status: InProgress
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154445-9813657/output.json'}

HumanLoop Name: 1677154446-4558146
HumanLoop Status: InProgress
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154446-4558146/output.json'}

HumanLoop Name: 1677154446-8940263
HumanLoop Status: InProgress
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154446-8940263/output.json'}
</code></pre>
</div>
</div>
</section>
<section id="complete-the-human-loop-tasks" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="complete-the-human-loop-tasks"><span class="header-section-number">5.3</span> Complete the human loop tasks</h3>
<p>Now we will pull the labeling UI from the workteam information to get into the human loop tasks in the AWS console.</p>
<div class="cell" data-tags="[]" data-execution_count="43">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">labeling_ui <span class="op" style="color: #5E5E5E;">=</span> sm.describe_workteam(WorkteamName<span class="op" style="color: #5E5E5E;">=</span>workteam_name)[<span class="st" style="color: #20794D;">"Workteam"</span>][<span class="st" style="color: #20794D;">"SubDomain"</span>]</span>
<span id="cb52-2"><span class="bu" style="color: null;">print</span>(labeling_ui)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>aqa042udc1.labeling.us-east-1.sagemaker.aws</code></pre>
</div>
</div>
<p>We will navigate to a link and login with the defined username and password.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/label-data-job-instructions.png" title="Human in the loop Workflow" class="img-fluid"></p>
</section>
<section id="verify-that-the-human-loops-were-completed-by-the-workforce" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="verify-that-the-human-loops-were-completed-by-the-workforce"><span class="header-section-number">5.4</span> Verify that the human loops were completed by the workforce</h3>
<div class="cell" data-tags="[]" data-execution_count="45">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb54-2"></span>
<span id="cb54-3">completed_human_loops <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb54-4"><span class="cf" style="color: #003B4F;">for</span> human_loop_name <span class="kw" style="color: #003B4F;">in</span> human_loops_started:</span>
<span id="cb54-5">    resp <span class="op" style="color: #5E5E5E;">=</span> a2i.describe_human_loop(HumanLoopName<span class="op" style="color: #5E5E5E;">=</span>human_loop_name)</span>
<span id="cb54-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"HumanLoop Name: </span><span class="sc" style="color: #5E5E5E;">{</span>human_loop_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb54-7">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'HumanLoop Status: </span><span class="sc" style="color: #5E5E5E;">{</span>resp[<span class="st" style="color: #20794D;">"HumanLoopStatus"</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb54-8">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'HumanLoop Output Destination: </span><span class="sc" style="color: #5E5E5E;">{</span>resp[<span class="st" style="color: #20794D;">"HumanLoopOutput"</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb54-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb54-10">    <span class="cf" style="color: #003B4F;">while</span> resp[<span class="st" style="color: #20794D;">"HumanLoopStatus"</span>] <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"Completed"</span>:</span>
<span id="cb54-11">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Waiting for HumanLoop to complete."</span>)</span>
<span id="cb54-12">        time.sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb54-13">        resp <span class="op" style="color: #5E5E5E;">=</span> a2i.describe_human_loop(HumanLoopName<span class="op" style="color: #5E5E5E;">=</span>human_loop_name)</span>
<span id="cb54-14">    <span class="cf" style="color: #003B4F;">if</span> resp[<span class="st" style="color: #20794D;">"HumanLoopStatus"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Completed"</span>:</span>
<span id="cb54-15">        completed_human_loops.append(resp)</span>
<span id="cb54-16">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Completed!"</span>)</span>
<span id="cb54-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HumanLoop Name: 1677154445-9813657
HumanLoop Status: InProgress
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154445-9813657/output.json'}

Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Waiting for HumanLoop to complete.
Completed!

HumanLoop Name: 1677154446-4558146
HumanLoop Status: Completed
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154446-4558146/output.json'}

Completed!

HumanLoop Name: 1677154446-8940263
HumanLoop Status: Completed
HumanLoop Output Destination: {'OutputS3Uri': 's3://sagemaker-us-east-1-753124839657/a2i-results-1677153775/fd-1677153775/2023/02/23/12/14/06/1677154446-8940263/output.json'}

Completed!
</code></pre>
</div>
</div>
<p><strong>This process ^^ above ^^ will not complete until we label the data following the instructions above.</strong></p>
</section>
<section id="view-human-labels-and-prepare-the-data-for-re-training" class="level3" data-number="5.5">
<h3 data-number="5.5" class="anchored" data-anchor-id="view-human-labels-and-prepare-the-data-for-re-training"><span class="header-section-number">5.5</span> View human labels and prepare the data for re-training</h3>
<p>Once the work is complete, Amazon A2I stores the results in the specified S3 bucket and sends a Cloudwatch Event. Let’s check the S3 contents.</p>
<div class="cell" data-scrolled="true" data-tags="[]" data-execution_count="46">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb56-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb56-3"></span>
<span id="cb56-4">fixed_items <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb56-5"></span>
<span id="cb56-6"><span class="cf" style="color: #003B4F;">for</span> resp <span class="kw" style="color: #003B4F;">in</span> completed_human_loops:</span>
<span id="cb56-7">    split_string <span class="op" style="color: #5E5E5E;">=</span> re.split(<span class="st" style="color: #20794D;">"s3://"</span> <span class="op" style="color: #5E5E5E;">+</span> bucket <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"/"</span>, resp[<span class="st" style="color: #20794D;">"HumanLoopOutput"</span>][<span class="st" style="color: #20794D;">"OutputS3Uri"</span>])</span>
<span id="cb56-8">    output_bucket_key <span class="op" style="color: #5E5E5E;">=</span> split_string[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb56-9"></span>
<span id="cb56-10">    response <span class="op" style="color: #5E5E5E;">=</span> s3.get_object(Bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, Key<span class="op" style="color: #5E5E5E;">=</span>output_bucket_key)</span>
<span id="cb56-11">    content <span class="op" style="color: #5E5E5E;">=</span> response[<span class="st" style="color: #20794D;">"Body"</span>].read().decode(<span class="st" style="color: #20794D;">"utf-8"</span>)</span>
<span id="cb56-12">    json_output <span class="op" style="color: #5E5E5E;">=</span> json.loads(content)</span>
<span id="cb56-13">    pprint(json_output)</span>
<span id="cb56-14"></span>
<span id="cb56-15">    input_content <span class="op" style="color: #5E5E5E;">=</span> json_output[<span class="st" style="color: #20794D;">"inputContent"</span>]</span>
<span id="cb56-16">    human_answer <span class="op" style="color: #5E5E5E;">=</span> json_output[<span class="st" style="color: #20794D;">"humanAnswers"</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">"answerContent"</span>]</span>
<span id="cb56-17">    fixed_item <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"input_content"</span>: input_content, <span class="st" style="color: #20794D;">"human_answer"</span>: human_answer}</span>
<span id="cb56-18">    fixed_items.append(fixed_item)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'flowDefinitionArn': 'arn:aws:sagemaker:us-east-1:753124839657:flow-definition/fd-1677153775',
 'humanAnswers': [{'acceptanceTime': '2023-02-23T12:16:28.736Z',
                   'answerContent': {'sentiment': {'label': '-1'}},
                   'submissionTime': '2023-02-23T12:16:33.547Z',
                   'timeSpentInSeconds': 4.811,
                   'workerId': '0e31fea759d04da1',
                   'workerMetadata': {'identityData': {'identityProviderType': 'Cognito',
                                                       'issuer': 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_8s0SOCEPn',
                                                       'sub': '7e22b0c1-059a-45b4-b69a-e1b378950097'}}}],
 'humanLoopName': '1677154445-9813657',
 'inputContent': {'initialValue': -1,
                  'taskObject': 'I am unhappy with this product'}}
{'flowDefinitionArn': 'arn:aws:sagemaker:us-east-1:753124839657:flow-definition/fd-1677153775',
 'humanAnswers': [{'acceptanceTime': '2023-02-23T12:16:06.376Z',
                   'answerContent': {'sentiment': {'label': '0'}},
                   'submissionTime': '2023-02-23T12:16:23.626Z',
                   'timeSpentInSeconds': 17.25,
                   'workerId': '0e31fea759d04da1',
                   'workerMetadata': {'identityData': {'identityProviderType': 'Cognito',
                                                       'issuer': 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_8s0SOCEPn',
                                                       'sub': '7e22b0c1-059a-45b4-b69a-e1b378950097'}}}],
 'humanLoopName': '1677154446-4558146',
 'inputContent': {'initialValue': 1, 'taskObject': 'It is okay'}}
{'flowDefinitionArn': 'arn:aws:sagemaker:us-east-1:753124839657:flow-definition/fd-1677153775',
 'humanAnswers': [{'acceptanceTime': '2023-02-23T12:16:23.694Z',
                   'answerContent': {'sentiment': {'label': '0'}},
                   'submissionTime': '2023-02-23T12:16:28.668Z',
                   'timeSpentInSeconds': 4.974,
                   'workerId': '0e31fea759d04da1',
                   'workerMetadata': {'identityData': {'identityProviderType': 'Cognito',
                                                       'issuer': 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_8s0SOCEPn',
                                                       'sub': '7e22b0c1-059a-45b4-b69a-e1b378950097'}}}],
 'humanLoopName': '1677154446-8940263',
 'inputContent': {'initialValue': 1, 'taskObject': 'sometimes it works'}}</code></pre>
</div>
</div>
<p>Now we can prepare the data for re-training.</p>
<div class="cell" data-tags="[]" data-execution_count="47">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">df_fixed_items <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(fixed_items)  </span>
<span id="cb58-2">df_fixed_items.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>input_content</th>
      <th>human_answer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>{'initialValue': -1, 'taskObject': 'I am unhap...</td>
      <td>{'sentiment': {'label': '-1'}}</td>
    </tr>
    <tr>
      <th>1</th>
      <td>{'initialValue': 1, 'taskObject': 'It is okay'}</td>
      <td>{'sentiment': {'label': '0'}}</td>
    </tr>
    <tr>
      <th>2</th>
      <td>{'initialValue': 1, 'taskObject': 'sometimes i...</td>
      <td>{'sentiment': {'label': '0'}}</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">6</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-24-custom-models-human-loop-pipelines-aws-augmented-ai.html</guid>
  <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Advanced Model Deployment on AWS - A/B testing traffic shifting and autoscaling</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>AWS Sagemaker offers many options for deploying models, in this project we will create an endpoint for a text classification model, splitting the traffic between them. Then after testing and reviewing the endpoint performance metrics, we will shift the traffic to one variant and configure it to autoscale.</p>
</section>
<section id="deployment-options" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="deployment-options"><span class="header-section-number">2</span> Deployment Options</h2>
<p>There are normally 3 main deployment options available for cloud computing services such as AWS.</p>
<ul>
<li><strong>Real-Time Inference:</strong> This involves a continually running process that responds to individual prediction requests on demand</li>
<li><strong>Batch Inference:</strong> This involves spinning up computing resources, performing a batch of predictions in one go, then switching off these resources when the process is complete</li>
<li><strong>Edge:</strong> This involves optimising a model for running closer to the user on edge devices such as mobile phones to generate predictions there</li>
</ul>
<p>Real time inference can be useful to respond to requests on demand, such as allowing quick responses to negative customer reviews.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy1.png" title="Deployment Options" class="img-fluid"></p>
<p>Batch inference can be useful when time is less critical, for example if we want to indentify a vendor with potential quality issues, we would want to look at a large number of reviews over time.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy2.png" title="Deployment Options" class="img-fluid"></p>
<p>Edge deployment can be useful when we want to provide predictions on the device itself, for example when privacy is a concern and we want to keep the data on the users device.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy3.png" title="Deployment Options" class="img-fluid"></p>
<p>When should we use each option? this will depend on your use case and a number of factors such as cost and how quickly and where the predictions are needed.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploy4.png" title="Deployment Options" class="img-fluid"></p>
<p>As a general rule, you should use the option that meets your use case and is the most cost effective.</p>
</section>
<section id="deployment-strategies-autoscaling" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="deployment-strategies-autoscaling"><span class="header-section-number">3</span> Deployment Strategies &amp; Autoscaling</h2>
<p>When we deploy models we have 3 key objectives:</p>
<ul>
<li>Minimise risk</li>
<li>Minimise down time</li>
<li>Measure model performance</li>
</ul>
<p>There are a range of possible deployment strategies including:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat2.png" title="Deployment Strategies" class="img-fluid"></p>
<p>In this project we will be using A/B testing.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat3.png" title="Deployment Strategies" class="img-fluid"></p>
<p>Another interesting strategy thats more dynamic is Multi Armed Bandits which use machine learning to switch between different models dynamically depending on changing performance.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_deploystrat4.png" title="Deployment Strategies" class="img-fluid"></p>
<p>But we will be using A/B testing.</p>
<p>We will also be using AWS Sagemaker Hosting to automatically scale our resources depending on demand.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_autoscale2.png" title="Deployment Strategies" class="img-fluid"></p>
</section>
<section id="setup" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="setup"><span class="header-section-number">4</span> Setup</h2>
<p>Let’s install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb2-5"></span>
<span id="cb2-6">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c3/w2'</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb2-9">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb2-10">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-11"></span>
<span id="cb2-12">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb2-13">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-14"></span>
<span id="cb2-15">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb2-16">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb2-17"></span>
<span id="cb2-18">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb2-19">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb2-20">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span>
<span id="cb2-21"></span>
<span id="cb2-22">cw <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cloudwatch'</span>, </span>
<span id="cb2-23">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb2-24"></span>
<span id="cb2-25">autoscale <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"application-autoscaling"</span>, </span>
<span id="cb2-26">                         config<span class="op" style="color: #5E5E5E;">=</span>config)</span></code></pre></div>
</div>
</section>
<section id="create-an-endpoint-with-multiple-variants" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="create-an-endpoint-with-multiple-variants"><span class="header-section-number">5</span> Create an endpoint with multiple variants</h2>
<p>We have two models trained to analyze customer feedback and classify the messages into positive (1), neutral (0), and negative (-1) sentiments are saved in the following S3 bucket paths. These <code>tar.gz</code> files contain the model artifacts, which result from model training.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">model_a_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/models/ab/variant_a/model.tar.gz'</span></span>
<span id="cb3-2">model_b_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/models/ab/variant_b/model.tar.gz'</span></span></code></pre></div>
</div>
<p>Let’s deploy an endpoint splitting the traffic between these two models 50/50 to perform A/B Testing. Instead of creating a PyTorch Model object and calling <code>model.deploy()</code> function, we will create an <code>Endpoint configuration</code> with multiple model variants. Here is the workflow we will follow to create an endpoint:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/endpoint-workflow.png" title="Endpoint Workflow" class="img-fluid"></p>
<section id="construct-docker-image-uri" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="construct-docker-image-uri"><span class="header-section-number">5.1</span> Construct Docker Image URI</h3>
<p>We will need to create the models in Amazon SageMaker, which retrieves the URI for the pre-built SageMaker Docker image stored in Amazon Elastic Container Re gistry (ECR). Let’s construct the ECR URI which we will pass into the <code>create_model</code> function later.</p>
<p>Now lets set the instance type. For the purposes of this project, we will use a relatively small instance. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">inference_instance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'ml.m5.large'</span></span></code></pre></div>
</div>
<p>Let’s create an ECR URI using the <code>'PyTorch'</code> framework.</p>
<div class="cell" data-outputid="86feb216-d666-4b46-cad8-1a542370ec59">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">inference_image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb5-2">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'pytorch'</span>, </span>
<span id="cb5-3">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb5-4">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type,</span>
<span id="cb5-5">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb5-6">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb5-7">    image_scope<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'inference'</span></span>
<span id="cb5-8">)</span>
<span id="cb5-9"><span class="bu" style="color: null;">print</span>(inference_image_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py3</code></pre>
</div>
</div>
</section>
<section id="create-amazon-sagemaker-models" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="create-amazon-sagemaker-models"><span class="header-section-number">5.2</span> Create Amazon SageMaker Models</h3>
<p>Amazon SageMaker Model includes information such as the S3 location of the model, the container image that can be used for inference with that model, the execution role, and the model name.</p>
<p>Let’s construct the model names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb7-3"></span>
<span id="cb7-4">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb7-5"></span>
<span id="cb7-6">model_name_a <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'a'</span>, timestamp)</span>
<span id="cb7-7">model_name_b <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'b'</span>, timestamp)</span></code></pre></div>
</div>
<p>We will use the following function to check if the model already exists in Amazon SageMaker.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> check_model_existence(model_name):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;">for</span> model <span class="kw" style="color: #003B4F;">in</span> sm.list_models()[<span class="st" style="color: #20794D;">'Models'</span>]:</span>
<span id="cb8-3">        <span class="cf" style="color: #003B4F;">if</span> model_name <span class="op" style="color: #5E5E5E;">==</span> model[<span class="st" style="color: #20794D;">'ModelName'</span>]:</span>
<span id="cb8-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Now we shall create an Amazon SageMaker Model based on the <code>model_a_s3_uri</code> data.</p>
<p>We will use the <code>sm.create_model</code> function, which requires the model name, Amazon SageMaker execution role and a primary container description (<code>PrimaryContainer</code> dictionary). The <code>PrimaryContainer</code> includes the S3 bucket location of the model artifacts (<code>ModelDataUrl</code> key) and ECR URI (<code>Image</code> key).</p>
<div class="cell" data-outputid="869025f6-49ee-4893-d99e-205ef7841156">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_model_existence(model_name_a):</span>
<span id="cb9-2">    model_a <span class="op" style="color: #5E5E5E;">=</span> sm.create_model(</span>
<span id="cb9-3">        ModelName<span class="op" style="color: #5E5E5E;">=</span>model_name_a,</span>
<span id="cb9-4">        ExecutionRoleArn<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb9-5">        PrimaryContainer<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;">'ModelDataUrl'</span>: model_a_s3_uri,</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;">'Image'</span>: inference_image_uri </span>
<span id="cb9-8">        }</span>
<span id="cb9-9">    )</span>
<span id="cb9-10">    pprint(model_a)</span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_name_a))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelArn': 'arn:aws:sagemaker:us-east-1:266291165402:model/a-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '74',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:15:03 GMT',
                                      'x-amzn-requestid': '8f653536-35b7-40ee-8b7f-de44570c71b9'},
                      'HTTPStatusCode': 200,
                      'RequestId': '8f653536-35b7-40ee-8b7f-de44570c71b9',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Now lets create an Amazon SageMaker Model based on the <code>model_b_s3_uri</code> data.</p>
<div class="cell" data-outputid="cabdbd7d-8679-40ac-b13b-32219ea1dcc0">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_model_existence(model_name_b):</span>
<span id="cb11-2">    model_b <span class="op" style="color: #5E5E5E;">=</span> sm.create_model(</span>
<span id="cb11-3">        ModelName<span class="op" style="color: #5E5E5E;">=</span>model_name_b, </span>
<span id="cb11-4">        ExecutionRoleArn<span class="op" style="color: #5E5E5E;">=</span>role, </span>
<span id="cb11-5">        PrimaryContainer<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb11-6">            <span class="st" style="color: #20794D;">'ModelDataUrl'</span>: model_b_s3_uri, </span>
<span id="cb11-7">            <span class="st" style="color: #20794D;">'Image'</span>: inference_image_uri</span>
<span id="cb11-8">        }</span>
<span id="cb11-9">    )</span>
<span id="cb11-10">    pprint(model_b)</span>
<span id="cb11-11"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb11-12">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Model </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_name_b))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelArn': 'arn:aws:sagemaker:us-east-1:266291165402:model/b-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '74',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:15:23 GMT',
                                      'x-amzn-requestid': 'a58a4de2-8ba0-4388-99b8-4f10031c606d'},
                      'HTTPStatusCode': 200,
                      'RequestId': 'a58a4de2-8ba0-4388-99b8-4f10031c606d',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
</section>
<section id="set-up-amazon-sagemaker-production-variants" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="set-up-amazon-sagemaker-production-variants"><span class="header-section-number">5.3</span> Set up Amazon SageMaker production variants</h3>
<p>A production variant is a packaged SageMaker Model combined with the configuration related to how that model will be hosted.</p>
<p>We have constructed the model in the section above. The hosting resources configuration includes information on how we want that model to be hosted: the number and type of instances, a pointer to the SageMaker package model, as well as a variant name and variant weight. A single SageMaker Endpoint can actually include multiple production variants.</p>
<p>Let’s create an Amazon SageMaker production variant for the SageMaker Model with the <code>model_name_a</code>.</p>
<div class="cell" data-outputid="0b32393f-161e-43fc-bcf4-2e36f3a51773">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> sagemaker.session <span class="im" style="color: #00769E;">import</span> production_variant</span>
<span id="cb13-2"></span>
<span id="cb13-3">variantA <span class="op" style="color: #5E5E5E;">=</span> production_variant(</span>
<span id="cb13-4">    model_name<span class="op" style="color: #5E5E5E;">=</span>model_name_a, </span>
<span id="cb13-5">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type, </span>
<span id="cb13-6">    initial_weight<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb13-7">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb13-8">    variant_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'VariantA'</span>,</span>
<span id="cb13-9">)</span>
<span id="cb13-10"><span class="bu" style="color: null;">print</span>(variantA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelName': 'a-1677082486', 'InstanceType': 'ml.m5.large', 'InitialInstanceCount': 1, 'VariantName': 'VariantA', 'InitialVariantWeight': 50}</code></pre>
</div>
</div>
<p>Now lets create an Amazon SageMaker production variant for the SageMaker Model with the <code>model_name_b</code>.</p>
<div class="cell" data-outputid="20ff2b26-1a2f-4775-fcb2-073a9e7e33ec">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">variantB <span class="op" style="color: #5E5E5E;">=</span> production_variant(</span>
<span id="cb15-2">    model_name<span class="op" style="color: #5E5E5E;">=</span>model_name_b, </span>
<span id="cb15-3">    instance_type<span class="op" style="color: #5E5E5E;">=</span>inference_instance_type, </span>
<span id="cb15-4">    initial_weight<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, </span>
<span id="cb15-5">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb15-6">    variant_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'VariantB'</span></span>
<span id="cb15-7">)</span>
<span id="cb15-8"><span class="bu" style="color: null;">print</span>(variantB)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelName': 'b-1677082486', 'InstanceType': 'ml.m5.large', 'InitialInstanceCount': 1, 'VariantName': 'VariantB', 'InitialVariantWeight': 50}</code></pre>
</div>
</div>
</section>
<section id="configure-and-create-the-endpoint" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="configure-and-create-the-endpoint"><span class="header-section-number">5.4</span> Configure and create the endpoint</h3>
<p>We will use the following functions to check if the endpoint configuration and endpoint itself already exist in Amazon SageMaker.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> check_endpoint_config_existence(endpoint_config_name):</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;">for</span> endpoint_config <span class="kw" style="color: #003B4F;">in</span> sm.list_endpoint_configs()[<span class="st" style="color: #20794D;">'EndpointConfigs'</span>]:</span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;">if</span> endpoint_config_name <span class="op" style="color: #5E5E5E;">==</span> endpoint_config[<span class="st" style="color: #20794D;">'EndpointConfigName'</span>]:</span>
<span id="cb17-4">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;">def</span> check_endpoint_existence(endpoint_name):</span>
<span id="cb17-8">    <span class="cf" style="color: #003B4F;">for</span> endpoint <span class="kw" style="color: #003B4F;">in</span> sm.list_endpoints()[<span class="st" style="color: #20794D;">'Endpoints'</span>]:</span>
<span id="cb17-9">        <span class="cf" style="color: #003B4F;">if</span> endpoint_name <span class="op" style="color: #5E5E5E;">==</span> endpoint[<span class="st" style="color: #20794D;">'EndpointName'</span>]:</span>
<span id="cb17-10">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb17-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>We create the endpoint configuration by specifying the name and pointing to the two production variants that we just configured that tell SageMaker how we want to host those models.</p>
<div class="cell" data-outputid="66a28e4e-384c-4b60-eaea-42825e53e3e3">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">endpoint_config_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'ab'</span>, timestamp)</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_endpoint_config_existence(endpoint_config_name):</span>
<span id="cb18-4">    endpoint_config <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint_config(</span>
<span id="cb18-5">        EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name, </span>
<span id="cb18-6">        ProductionVariants<span class="op" style="color: #5E5E5E;">=</span>[variantA, variantB]</span>
<span id="cb18-7">    )</span>
<span id="cb18-8">    pprint(endpoint_config)</span>
<span id="cb18-9"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb18-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Endpoint configuration </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(endpoint_config_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'EndpointConfigArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint-config/ab-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '94',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:16:04 GMT',
                                      'x-amzn-requestid': 'caa4197d-8d8a-4b0e-ab55-e20d5bfe31d6'},
                      'HTTPStatusCode': 200,
                      'RequestId': 'caa4197d-8d8a-4b0e-ab55-e20d5bfe31d6',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Construct the endpoint name.</p>
<div class="cell" data-outputid="c9a67886-c5c9-4ed9-cdfe-c92a6e93c5ee">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'ab'</span>, timestamp)</span>
<span id="cb20-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Endpoint name: ab-1677082486</code></pre>
</div>
</div>
<p>Lets create an endpoint with the endpoint name and configuration defined above.</p>
<div class="cell" data-outputid="407b9d29-b278-4944-ada4-c0b013801046">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> check_endpoint_existence(model_ab_endpoint_name):</span>
<span id="cb22-2">    endpoint_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint(</span>
<span id="cb22-3">        EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb22-4">        EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name</span>
<span id="cb22-5">    )</span>
<span id="cb22-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Creating endpoint </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span>
<span id="cb22-7">    pprint(endpoint_response)</span>
<span id="cb22-8"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb22-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Endpoint </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> already exists"</span>.<span class="bu" style="color: null;">format</span>(model_ab_endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Creating endpoint ab-1677082486
{'EndpointArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint/ab-1677082486',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '81',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Wed, 22 Feb 2023 16:16:24 GMT',
                                      'x-amzn-requestid': '0d5dd2d5-519a-4618-ab29-809c0e3e28da'},
                      'HTTPStatusCode': 200,
                      'RequestId': '0d5dd2d5-519a-4618-ab29-809c0e3e28da',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Now we wait for the endpoint to deploy.</p>
<div class="cell" data-outputid="94aef061-5938-4e6a-a283-462310c69b20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb24-2"></span>
<span id="cb24-3">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">'endpoint_in_service'</span>)</span>
<span id="cb24-4">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 133 ms, sys: 21 ms, total: 154 ms
Wall time: 5min 1s</code></pre>
</div>
</div>
</section>
</section>
<section id="test-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="test-model"><span class="header-section-number">6</span> Test model</h2>
<section id="test-the-model-on-a-few-sample-strings" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="test-the-model-on-a-few-sample-strings"><span class="header-section-number">6.1</span> Test the model on a few sample strings</h3>
<p>Here, we will pass sample strings of text to the endpoint in order to see the sentiment. We give one example of each.</p>
<p>Now we create an Amazon SageMaker Predictor based on the deployed endpoint.</p>
<p>We will use the <code>Predictor</code> object with the following parameters. We pass JSON serializer and deserializer objects here, calling them with the functions <code>JSONLinesSerializer()</code> and <code>JSONLinesDeserializer()</code>, respectively. More information about the serializers can be found <a href="https://sagemaker.readthedocs.io/en/stable/api/inference/serializers.html">here</a>.</p>
<div class="cell" data-outputid="cfc735a5-c2e0-4385-f206-cabeb05bb66f">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb26-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb26-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb26-4"></span>
<span id="cb26-5">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb26-6">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb26-7">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb26-8">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb26-9">]</span>
<span id="cb26-10"></span>
<span id="cb26-11">predictor <span class="op" style="color: #5E5E5E;">=</span> Predictor(</span>
<span id="cb26-12">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb26-13">    serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(), </span>
<span id="cb26-14">    deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer(), </span>
<span id="cb26-15">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb26-16">)</span>
<span id="cb26-17"></span>
<span id="cb26-18">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb26-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9605445861816406
Predicted class 0 with probability 0.5798221230506897
Predicted class -1 with probability 0.7667604684829712</code></pre>
</div>
</div>
</section>
<section id="generate-traffic-and-review-the-endpoint-performance-metrics" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="generate-traffic-and-review-the-endpoint-performance-metrics"><span class="header-section-number">6.2</span> Generate traffic and review the endpoint performance metrics</h3>
<p>Now we will generate some traffic. To analyze the endpoint performance we will review some of the metrics that Amazon SageMaker emits in CloudWatch: CPU Utilization, Latency and Invocations.</p>
<p>A full list of namespaces and metrics can be found <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/monitoring-cloudwatch.html">here</a>. CloudWatch <code>get_metric_statistics</code> documentation can be found <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">here</a>.</p>
<p>But before that, let’s create a function that will help to extract the results from CloudWatch and plot them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> plot_endpoint_metrics_for_variants(endpoint_name, </span>
<span id="cb28-2">                                       namespace_name, </span>
<span id="cb28-3">                                       metric_name, </span>
<span id="cb28-4">                                       variant_names, </span>
<span id="cb28-5">                                       start_time, </span>
<span id="cb28-6">                                       end_time):</span>
<span id="cb28-7">    </span>
<span id="cb28-8">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb28-9">        joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb28-10"></span>
<span id="cb28-11">        <span class="cf" style="color: #003B4F;">for</span> variant_name <span class="kw" style="color: #003B4F;">in</span> variant_names:</span>
<span id="cb28-12">            metrics <span class="op" style="color: #5E5E5E;">=</span> cw.get_metric_statistics( <span class="co" style="color: #5E5E5E;"># extracts the results in a dictionary format</span></span>
<span id="cb28-13">                Namespace<span class="op" style="color: #5E5E5E;">=</span>namespace_name, <span class="co" style="color: #5E5E5E;"># the namespace of the metric, e.g. "AWS/SageMaker"</span></span>
<span id="cb28-14">                MetricName<span class="op" style="color: #5E5E5E;">=</span>metric_name, <span class="co" style="color: #5E5E5E;"># the name of the metric, e.g. "CPUUtilization"</span></span>
<span id="cb28-15">                StartTime<span class="op" style="color: #5E5E5E;">=</span>start_time, <span class="co" style="color: #5E5E5E;"># the time stamp that determines the first data point to return</span></span>
<span id="cb28-16">                EndTime<span class="op" style="color: #5E5E5E;">=</span>end_time, <span class="co" style="color: #5E5E5E;"># the time stamp that determines the last data point to return</span></span>
<span id="cb28-17">                Period<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>, <span class="co" style="color: #5E5E5E;"># the granularity, in seconds, of the returned data points</span></span>
<span id="cb28-18">                Statistics<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Sum"</span>], <span class="co" style="color: #5E5E5E;"># the metric statistics</span></span>
<span id="cb28-19">                Dimensions<span class="op" style="color: #5E5E5E;">=</span>[ <span class="co" style="color: #5E5E5E;"># dimensions, as CloudWatch treats each unique combination of dimensions as a separate metric</span></span>
<span id="cb28-20">                    {<span class="st" style="color: #20794D;">"Name"</span>: <span class="st" style="color: #20794D;">"EndpointName"</span>, <span class="st" style="color: #20794D;">"Value"</span>: endpoint_name}, </span>
<span id="cb28-21">                    {<span class="st" style="color: #20794D;">"Name"</span>: <span class="st" style="color: #20794D;">"VariantName"</span>, <span class="st" style="color: #20794D;">"Value"</span>: variant_name}</span>
<span id="cb28-22">                ],</span>
<span id="cb28-23">            )</span>
<span id="cb28-24">            </span>
<span id="cb28-25">            <span class="cf" style="color: #003B4F;">if</span> metrics[<span class="st" style="color: #20794D;">"Datapoints"</span>]: <span class="co" style="color: #5E5E5E;"># access the results from the distionary using the key "Datapoints"</span></span>
<span id="cb28-26">                df_metrics <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(metrics[<span class="st" style="color: #20794D;">"Datapoints"</span>]) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-27">                    .sort_values(<span class="st" style="color: #20794D;">"Timestamp"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-28">                    .set_index(<span class="st" style="color: #20794D;">"Timestamp"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-29">                    .drop(<span class="st" style="color: #20794D;">"Unit"</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-30">                    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"Sum"</span>: variant_name}) <span class="co" style="color: #5E5E5E;"># rename the column with the metric results as a variant_name</span></span>
<span id="cb28-31">                </span>
<span id="cb28-32">                <span class="cf" style="color: #003B4F;">if</span> joint_variant_metrics <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb28-33">                    joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> df_metrics</span>
<span id="cb28-34">                <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb28-35">                    joint_variant_metrics <span class="op" style="color: #5E5E5E;">=</span> joint_variant_metrics.join(df_metrics, how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"outer"</span>)</span>
<span id="cb28-36">        </span>
<span id="cb28-37">        joint_variant_metrics.plot(title<span class="op" style="color: #5E5E5E;">=</span>metric_name)</span>
<span id="cb28-38">    <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb28-39">        <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</div>
<p>We must establish wide enough time bounds to show all the charts using the same timeframe:</p>
<div class="cell" data-outputid="0a306d5a-4efb-429b-f768-d26e436ead4d">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">from</span> datetime <span class="im" style="color: #00769E;">import</span> datetime, timedelta</span>
<span id="cb29-2"></span>
<span id="cb29-3">start_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now() <span class="op" style="color: #5E5E5E;">-</span> timedelta(minutes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb29-4">end_time <span class="op" style="color: #5E5E5E;">=</span> datetime.now() <span class="op" style="color: #5E5E5E;">+</span> timedelta(minutes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb29-5"></span>
<span id="cb29-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Start Time: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(start_time))</span>
<span id="cb29-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'End Time: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(end_time))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Start Time: 2023-02-22 15:52:19.078234
End Time: 2023-02-22 16:52:19.078289</code></pre>
</div>
</div>
<p>Set the list of the the variant names to analyze.</p>
<div class="cell" data-outputid="9e038c7b-050a-43cc-d819-10b94cb4f8ae">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">variant_names <span class="op" style="color: #5E5E5E;">=</span> [variantA[<span class="st" style="color: #20794D;">"VariantName"</span>], variantB[<span class="st" style="color: #20794D;">"VariantName"</span>]]</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="bu" style="color: null;">print</span>(variant_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['VariantA', 'VariantB']</code></pre>
</div>
</div>
<p>Now run some predictions and view the metrics for each variant.</p>
<div class="cell" data-outputid="4cbc34f7-ab23-4bb0-a400-d99b467c19f4">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb33-4">    predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 239 ms, sys: 4.17 ms, total: 243 ms
Wall time: 1min 28s</code></pre>
</div>
</div>
<p>Let’s query CloudWatch to get a few metrics that are split across variants.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">time.sleep(<span class="dv" style="color: #AD0000;">30</span>) <span class="co" style="color: #5E5E5E;"># Sleep to accomodate a slight delay in metrics gathering</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="64b5f9fe-a87b-4015-c900-fb65110bcdf6">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># CPUUtilization</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># The sum of each individual CPU core's utilization. </span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;"># The CPU utilization of each core can range between 0 and 100. For example, if there are four CPUs, CPUUtilization can range from 0% to 400%.</span></span>
<span id="cb36-4">plot_endpoint_metrics_for_variants(</span>
<span id="cb36-5">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb36-6">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/aws/sagemaker/Endpoints"</span>, </span>
<span id="cb36-7">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPUUtilization"</span>,</span>
<span id="cb36-8">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb36-9">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb36-10">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb36-11">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="41d5eee9-7ce5-4724-d6ef-cbe383b2e7d5">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Invocations</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;"># The number of requests sent to a model endpoint.</span></span>
<span id="cb37-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb37-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb37-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb37-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Invocations"</span>,</span>
<span id="cb37-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb37-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb37-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb37-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ad929f1d-4e6f-46e8-8f85-a0ddcdb226e5">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># InvocationsPerInstance</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;"># The number of invocations sent to a model, normalized by InstanceCount in each production variant.</span></span>
<span id="cb38-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb38-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb38-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb38-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InvocationsPerInstance"</span>,</span>
<span id="cb38-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb38-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb38-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb38-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ff52adee-6936-44e8-d9b7-12a4cd64cdf8">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># ModelLatency</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;"># The interval of time taken by a model to respond as viewed from SageMaker (in microseconds).</span></span>
<span id="cb39-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb39-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb39-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb39-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelLatency"</span>,</span>
<span id="cb39-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb39-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb39-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb39-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="shift-the-traffic-to-one-variant-and-review-the-endpoint-performance-metrics" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="shift-the-traffic-to-one-variant-and-review-the-endpoint-performance-metrics"><span class="header-section-number">7</span> Shift the traffic to one variant and review the endpoint performance metrics</h2>
<p>Generally, the winning model would need to be chosen. The decision would be made based on the endpoint performance metrics and some other business related evaluations. Here we will assume that the winning model is in the Variant B and shift all traffic to it.</p>
<p>Let’s now construct a list with the updated endpoint weights.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">updated_endpoint_config <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb40-2">    {</span>
<span id="cb40-3">        <span class="st" style="color: #20794D;">"VariantName"</span>: variantA[<span class="st" style="color: #20794D;">"VariantName"</span>],</span>
<span id="cb40-4">        <span class="st" style="color: #20794D;">"DesiredWeight"</span>: <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb40-5">    },</span>
<span id="cb40-6">    {</span>
<span id="cb40-7">        <span class="st" style="color: #20794D;">"VariantName"</span>: variantB[<span class="st" style="color: #20794D;">"VariantName"</span>],</span>
<span id="cb40-8">        <span class="st" style="color: #20794D;">"DesiredWeight"</span>: <span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb40-9">    },</span>
<span id="cb40-10">]</span></code></pre></div>
</div>
<p>Now we update variant weights in the configuration of the existing endpoint.</p>
<p>We will use the <code>sm.update_endpoint_weights_and_capacities</code> function, passing the endpoint name and list of updated weights for each of the variants that we defined above.</p>
<div class="cell" data-outputid="9357749c-ae5a-40e6-b2f3-2b818fcbf2b5">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">sm.update_endpoint_weights_and_capacities(</span>
<span id="cb41-2">    EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb41-3">    DesiredWeightsAndCapacities<span class="op" style="color: #5E5E5E;">=</span>updated_endpoint_config </span>
<span id="cb41-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>{'EndpointArn': 'arn:aws:sagemaker:us-east-1:266291165402:endpoint/ab-1677082486',
 'ResponseMetadata': {'RequestId': 'd150d0c7-90d9-48bd-b9fd-06aed5f7c4b7',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'd150d0c7-90d9-48bd-b9fd-06aed5f7c4b7',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '81',
   'date': 'Wed, 22 Feb 2023 16:24:19 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb43-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
<p>Now run some more predictions and view the metrics for each variant.</p>
<div class="cell" data-outputid="da6a1da3-5f2d-4458-9a01-77b0c102f4b2">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb44-4">    predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 256 ms, sys: 3.23 ms, total: 259 ms
Wall time: 1min 27s</code></pre>
</div>
</div>
<div class="cell" data-outputid="e119b348-3703-4af6-b941-a45cfbfd45d1">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># CPUUtilization</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;"># The sum of each individual CPU core's utilization. </span></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;"># The CPU utilization of each core can range between 0 and 100. For example, if there are four CPUs, CPUUtilization can range from 0% to 400%.</span></span>
<span id="cb46-4">plot_endpoint_metrics_for_variants(</span>
<span id="cb46-5">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb46-6">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/aws/sagemaker/Endpoints"</span>,</span>
<span id="cb46-7">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CPUUtilization"</span>,</span>
<span id="cb46-8">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb46-9">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb46-10">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time</span>
<span id="cb46-11">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-33-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="b1a13d87-90ba-4aa9-e11f-c7683d031b90">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># Invocations</span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;"># The number of requests sent to a model endpoint.</span></span>
<span id="cb47-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb47-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb47-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb47-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Invocations"</span>,</span>
<span id="cb47-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb47-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb47-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb47-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-34-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="f395a3b6-57f1-456b-d532-c96a54464f63">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># InvocationsPerInstance</span></span>
<span id="cb48-2"><span class="co" style="color: #5E5E5E;"># The number of invocations sent to a model, normalized by InstanceCount in each production variant.</span></span>
<span id="cb48-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb48-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb48-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb48-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InvocationsPerInstance"</span>,</span>
<span id="cb48-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb48-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb48-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb48-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-35-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="49321bfa-73df-4178-9657-73159fcbb7a5">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># ModelLatency</span></span>
<span id="cb49-2"><span class="co" style="color: #5E5E5E;"># The interval of time taken by a model to respond as viewed from SageMaker (in microseconds).</span></span>
<span id="cb49-3">plot_endpoint_metrics_for_variants(</span>
<span id="cb49-4">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name, </span>
<span id="cb49-5">    namespace_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AWS/SageMaker"</span>, </span>
<span id="cb49-6">    metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelLatency"</span>,</span>
<span id="cb49-7">    variant_names<span class="op" style="color: #5E5E5E;">=</span>variant_names,</span>
<span id="cb49-8">    start_time<span class="op" style="color: #5E5E5E;">=</span>start_time,</span>
<span id="cb49-9">    end_time<span class="op" style="color: #5E5E5E;">=</span>end_time    </span>
<span id="cb49-10">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="configure-one-variant-to-autoscale" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="configure-one-variant-to-autoscale"><span class="header-section-number">8</span> Configure one variant to autoscale</h2>
<p>Let’s configure Variant B to autoscale. We would not autoscale Variant A since no traffic is being passed to it at this time.</p>
<p>First, we need to define a scalable target. It is an AWS resource and in this case you want to scale a <code>sagemaker</code> resource as indicated in the <code>ServiceNameSpace</code> parameter. Then the <code>ResourceId</code> is a SageMaker Endpoint. Because autoscaling is used by other AWS resources, we’ll see a few parameters that will remain static for scaling SageMaker Endpoints. Thus the <code>ScalableDimension</code> is a set value for SageMaker Endpoint scaling.</p>
<p>We also need to specify a few key parameters that control the min and max behavior for our Machine Learning instances. The <code>MinCapacity</code> indicates the minimum number of instances we plan to scale in to. The <code>MaxCapacity</code> is the maximum number of instances we want to scale out to. So in this case we always want to have at least 1 instance running and a maximum of 2 during peak periods.</p>
<div class="cell" data-outputid="614b0b70-6abd-4eb4-cc68-314fcf099a54">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">autoscale.register_scalable_target(</span>
<span id="cb50-2">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb50-3">    ResourceId<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"endpoint/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"/variant/VariantB"</span>,</span>
<span id="cb50-4">    ScalableDimension<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker:variant:DesiredInstanceCount"</span>,</span>
<span id="cb50-5">    MinCapacity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb50-6">    MaxCapacity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb50-7">    RoleARN<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb50-8">    SuspendedState<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb50-9">        <span class="st" style="color: #20794D;">"DynamicScalingInSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-10">        <span class="st" style="color: #20794D;">"DynamicScalingOutSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-11">        <span class="st" style="color: #20794D;">"ScheduledScalingSuspended"</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-12">    },</span>
<span id="cb50-13">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>{'ResponseMetadata': {'RequestId': '1df51ac9-60ae-4b21-9c3a-2b676e32802c',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': '1df51ac9-60ae-4b21-9c3a-2b676e32802c',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '2',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb52-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
<p>Check that the parameters from the function above are in the description of the scalable target:</p>
<div class="cell" data-outputid="d6e26b2b-9a67-4a44-9471-2fceab47737e">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">autoscale.describe_scalable_targets(</span>
<span id="cb53-2">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb53-3">    MaxResults<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb53-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>{'ScalableTargets': [{'ServiceNamespace': 'sagemaker',
   'ResourceId': 'endpoint/ab-1677082486/variant/VariantB',
   'ScalableDimension': 'sagemaker:variant:DesiredInstanceCount',
   'MinCapacity': 1,
   'MaxCapacity': 2,
   'RoleARN': 'arn:aws:iam::266291165402:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint',
   'CreationTime': datetime.datetime(2023, 2, 22, 16, 27, 20, 908000, tzinfo=tzlocal()),
   'SuspendedState': {'DynamicScalingInSuspended': False,
    'DynamicScalingOutSuspended': False,
    'ScheduledScalingSuspended': False}}],
 'ResponseMetadata': {'RequestId': 'bd518cbf-fc90-40e5-9d45-56f2252dfe71',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'bd518cbf-fc90-40e5-9d45-56f2252dfe71',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '522',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Define and apply scaling policy using the <code>put_scaling_policy</code> function. The scaling policy provides additional information about the scaling behavior for our instance. <code>TargetTrackingScaling</code> refers to a specific autoscaling type supported by SageMaker, that uses a scaling metric and a target value as the indicator to scale.</p>
<p>In the scaling policy configuration, we have the predefined metric <code>PredefinedMetricSpecification</code> which is the number of invocations on our instance and the <code>TargetValue</code> which indicates the number of invocations per ML instance we want to allow before triggering your scaling policy. A scale out cooldown of 60 seconds means that after autoscaling successfully scales out it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again until the cooldown period ends.</p>
<p>The scale in cooldown setting of 300 seconds means that SageMaker will not attempt to start another cooldown policy within 300 seconds of when the last one completed.</p>
<div class="cell" data-outputid="3812a528-43a1-4a65-8e2b-371e68a49650">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">autoscale.put_scaling_policy(</span>
<span id="cb55-2">    PolicyName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bert-reviews-autoscale-policy"</span>,</span>
<span id="cb55-3">    ServiceNamespace<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker"</span>,</span>
<span id="cb55-4">    ResourceId<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"endpoint/"</span> <span class="op" style="color: #5E5E5E;">+</span> model_ab_endpoint_name <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"/variant/VariantB"</span>,</span>
<span id="cb55-5">    ScalableDimension<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sagemaker:variant:DesiredInstanceCount"</span>,</span>
<span id="cb55-6">    PolicyType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TargetTrackingScaling"</span>,</span>
<span id="cb55-7">    TargetTrackingScalingPolicyConfiguration<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb55-8">        <span class="st" style="color: #20794D;">"TargetValue"</span>: <span class="fl" style="color: #AD0000;">2.0</span>, <span class="co" style="color: #5E5E5E;"># the number of invocations per ML instance you want to allow before triggering your scaling policy</span></span>
<span id="cb55-9">        <span class="st" style="color: #20794D;">"PredefinedMetricSpecification"</span>: {</span>
<span id="cb55-10">            <span class="st" style="color: #20794D;">"PredefinedMetricType"</span>: <span class="st" style="color: #20794D;">"SageMakerVariantInvocationsPerInstance"</span>, <span class="co" style="color: #5E5E5E;"># scaling metric</span></span>
<span id="cb55-11">        },</span>
<span id="cb55-12">        <span class="st" style="color: #20794D;">"ScaleOutCooldown"</span>: <span class="dv" style="color: #AD0000;">60</span>, <span class="co" style="color: #5E5E5E;"># wait time, in seconds, before beginning another scale out activity after last one completes</span></span>
<span id="cb55-13">        <span class="st" style="color: #20794D;">"ScaleInCooldown"</span>: <span class="dv" style="color: #AD0000;">300</span>, <span class="co" style="color: #5E5E5E;"># wait time, in seconds, before beginning another scale in activity after last one completes</span></span>
<span id="cb55-14">    },</span>
<span id="cb55-15">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>{'PolicyARN': 'arn:aws:autoscaling:us-east-1:266291165402:scalingPolicy:913d3148-a6ef-4773-a62f-44892892074e:resource/sagemaker/endpoint/ab-1677082486/variant/VariantB:policyName/bert-reviews-autoscale-policy',
 'Alarms': [{'AlarmName': 'TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmHigh-c3f6ea38-0824-48ec-b42f-dbacfbe50cc4',
   'AlarmARN': 'arn:aws:cloudwatch:us-east-1:266291165402:alarm:TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmHigh-c3f6ea38-0824-48ec-b42f-dbacfbe50cc4'},
  {'AlarmName': 'TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmLow-15074d95-12ab-446d-8ebe-b17964112be7',
   'AlarmARN': 'arn:aws:cloudwatch:us-east-1:266291165402:alarm:TargetTracking-endpoint/ab-1677082486/variant/VariantB-AlarmLow-15074d95-12ab-446d-8ebe-b17964112be7'}],
 'ResponseMetadata': {'RequestId': 'c82eb21e-613e-4143-a40c-3a852ac5b1e8',
  'HTTPStatusCode': 200,
  'HTTPHeaders': {'x-amzn-requestid': 'c82eb21e-613e-4143-a40c-3a852ac5b1e8',
   'content-type': 'application/x-amz-json-1.1',
   'content-length': '780',
   'date': 'Wed, 22 Feb 2023 16:27:20 GMT'},
  'RetryAttempts': 0}}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">"endpoint_in_service"</span>)</span>
<span id="cb57-2">waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>model_ab_endpoint_name)</span></code></pre></div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">9</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-22-advanced-model-deployment-on-aws.html</guid>
  <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Optimize Models in the Cloud using AWS Automatic Model Tuning</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-14-optimize-models-in-the-cloud-using-aws-automatic-model-tuning.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>When training ML models, hyperparameter tuning is a step taken to find the best performing training model. In this project we will apply a random algorithm of Automated Hyperparameter Tuning to train a BERT-based natural language processing (NLP) classifier.</p>
<p>We will use the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - and will prepare it to train a deep learning BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>Amazon SageMaker supports Automated Hyperparameter Tuning. It runs multiple training jobs on the training dataset using the hyperparameter ranges specified by the user. Then it chooses the combination of hyperparameters that leads to the best model candidate. The choice is made based on the objective metrics, e.g.&nbsp;maximization of the validation accuracy.</p>
<p>For the choice of hyperparameters combinations, SageMaker supports two different types of tuning strategies: random and Bayesian. This capability can be further extended by providing an implementation of a custom tuning strategy as a Docker container.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/hpt.png" title="Hyperparameter Tuning" class="img-fluid"></p>
<p>In this project we will perform the following three steps:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sagemaker_hpt.png" title="Hyperparameter Tuning with AWS" class="img-fluid"></p>
<p>First, let’s install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-5"></span>
<span id="cb1-6">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c3/w1'</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-9">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-10">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-11"></span>
<span id="cb1-12">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)</span>
<span id="cb1-13"></span>
<span id="cb1-14">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-15">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-16">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
</section>
<section id="configure-dataset-and-hyperparameter-tuning-job-htp" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="configure-dataset-and-hyperparameter-tuning-job-htp"><span class="header-section-number">2</span> Configure dataset and Hyperparameter Tuning Job (HTP)</h2>
<section id="configure-dataset" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">2.1</span> Configure dataset</h3>
<p>Let’s set up the paths and copy the data to the S3 bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-train/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb2-2">processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-validation/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb2-3">processed_test_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/transformed/data/sentiment-test/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span></code></pre></div>
</div>
<p>Upload the data to the S3 bucket:</p>
<div class="cell" data-outputid="f6dbc801-1f8d-4a03-ce2d-d2630517774f">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train $processed_train_data_s3_uri</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation $processed_validation_data_s3_uri</span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test $processed_test_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Check the existence of those files in the S3 bucket:</p>
<div class="cell" data-outputid="c6058d35-bbf8-49c7-b9be-8c9c46d5b93c">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_train_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:41    4894416 transformed/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="736b7a72-d04b-46ed-c94d-2da565beeddf">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:42     276522 transformed/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="c26e1338-e788-4b01-ebc9-663aa02ed54d">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_test_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 17:36:43     273414 transformed/data/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Now we set up a dictionary of the input training and validation data channels, wrapping the corresponding S3 locations in a <code>TrainingInput</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> TrainingInput</span>
<span id="cb11-2"></span>
<span id="cb11-3">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb11-4">    <span class="st" style="color: #20794D;">'train'</span>: processed_train_data_s3_uri, </span>
<span id="cb11-5">    <span class="st" style="color: #20794D;">'validation'</span>: processed_validation_data_s3_uri </span>
<span id="cb11-6">}</span></code></pre></div>
</div>
<p>There is no need to create a test data channel, as the test data is used later at the evaluation stage and does not need to be wrapped into the <code>sagemaker.inputs.TrainingInput</code> function.</p>
</section>
<section id="configure-hyperparameter-tuning-job" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="configure-hyperparameter-tuning-job"><span class="header-section-number">2.2</span> Configure Hyperparameter Tuning Job</h3>
<p>Model hyperparameters need to be set prior to starting the model training as they control the process of learning. Some of the hyperparameters you will set up as static - they will not be explored during the tuning job. For the non-static hyperparameters we will set the range of possible values to be explored.</p>
<p>First, we configure static hyperparameters including the instance type, instance count, maximum sequence length, etc. For the purposes of this project, we will use a relatively small instance type. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span> <span class="co" style="color: #5E5E5E;"># maximum number of input tokens passed to BERT model</span></span>
<span id="cb12-2">freeze_bert_layer<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># specifies the depth of training within the network</span></span>
<span id="cb12-3">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb12-4">train_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb12-5">validation_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb12-6">validation_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb12-7">seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">train_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-10">train_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span></span>
<span id="cb12-11">train_volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb12-12">input_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span></span>
<span id="cb12-13">run_validation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span></code></pre></div>
</div>
<p>Some of these will be passed into the PyTorch estimator and tuner in the hyperparameters argument. Let’s set up the dictionary for that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">hyperparameters_static<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb13-2">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb13-3">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb13-10">}</span></code></pre></div>
</div>
<p>Now we configure hyperparameter ranges to explore in the Tuning Job. The values of the ranges typically come from prior experience, research papers, or other models similar to the task you are trying to do.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> IntegerParameter</span>
<span id="cb14-2"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> ContinuousParameter</span>
<span id="cb14-3"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> CategoricalParameter</span>
<span id="cb14-4">                                                </span>
<span id="cb14-5">hyperparameter_ranges <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb14-6">    <span class="st" style="color: #20794D;">'learning_rate'</span>: ContinuousParameter(<span class="fl" style="color: #AD0000;">0.00001</span>, <span class="fl" style="color: #AD0000;">0.00005</span>, scaling_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Linear'</span>), <span class="co" style="color: #5E5E5E;"># specifying continuous variable type, the tuning job will explore the range of values</span></span>
<span id="cb14-7">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: CategoricalParameter([<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>]), <span class="co" style="color: #5E5E5E;"># specifying categorical variable type, the tuning job will explore only listed values</span></span>
<span id="cb14-8">}</span></code></pre></div>
</div>
</section>
<section id="set-up-evaluation-metrics" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="set-up-evaluation-metrics"><span class="header-section-number">2.3</span> Set up evaluation metrics</h3>
<p>Choose loss and accuracy as the evaluation metrics. The regular expressions <code>Regex</code> will capture the values of metrics that the algorithm will emit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb15-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb15-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb15-4">]</span></code></pre></div>
</div>
<p>In the Tuning Job, we will be maximizing validation accuracy as the objective metric.</p>
</section>
</section>
<section id="run-tuning-job" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="run-tuning-job"><span class="header-section-number">3</span> Run Tuning Job</h2>
<section id="set-up-the-roberta-and-pytorch-script-to-run-on-sagemaker" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="set-up-the-roberta-and-pytorch-script-to-run-on-sagemaker"><span class="header-section-number">3.1</span> Set up the RoBERTa and PyTorch script to run on SageMaker</h3>
<p>We will now prepare the PyTorch model to run as a SageMaker Training Job. The estimator takes into the entry point a separate Python file, which will be called during the training. We can open and review this file <a href="https://pranath.github.io/pds/tuning/train.py">src/train.py</a>.</p>
<p>For more information on the <code>PyTorchEstimator</code>, see the documentation here: https://sagemaker.readthedocs.io/</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Note: we don't have to rename the PyTorch estimator,</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># but this is useful for code clarity, especially when a few modules of 'sagemaker.pytorch' are used</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb16-6">    entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb16-7">    source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb16-8">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb16-9">    instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb16-10">    instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb16-11">    volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb16-12">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb16-13">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb16-14">    hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters_static,</span>
<span id="cb16-15">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb16-16">    input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode,</span>
<span id="cb16-17">)</span></code></pre></div>
</div>
</section>
<section id="launch-the-hyperparameter-tuning-job" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="launch-the-hyperparameter-tuning-job"><span class="header-section-number">3.2</span> Launch the Hyperparameter Tuning Job</h3>
<p>A hyperparameter tuning job runs a series of training jobs that each test a combination of hyperparameters for a given objective metric (i.e.&nbsp;<code>validation:accuracy</code>). In this project, we will use a <code>Random</code> search strategy to determine the combinations of hyperparameters - within the specific ranges - to use for each training job within the tuning job. For more information on hyperparameter tuning search strategies, please see the following documentation: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html</p>
<p>When the tuning job completes, we can select the hyperparameters used by the best-performing training job relative to the objective metric.</p>
<p>The <code>max_jobs</code> parameter is a stop criteria that limits the number of overall training jobs (and therefore hyperparameter combinations) to run within the tuning job.</p>
<p>The <code>max_parallel_jobs</code> parameter limits the number of training jobs (and therefore hyperparameter combinations) to run in parallel within the tuning job. This parameter is often used in combination with the <code>Bayesian</code> search strategy when you want to test a smaller set of training jobs (less than the <code>max_jobs</code>), learn from the smaller set of training jobs, then apply Bayesian methods to determine the next set of hyperparameters used by the next set of training jobs. Bayesian methods can improve hyperparameter-tuning performance in some cases.</p>
<p>The <code>early_stopping_type</code> parameter is used by SageMaker hyper-parameter tuning jobs to automatically stop a training job if the job is not improving the objective metrics (i.e.&nbsp;<code>validation:accuracy</code>) relative to previous training jobs within the tuning job. For more information on early stopping, please see the following documentation: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html.</p>
<p>Let’s set up the Hyperparameter Tuner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sagemaker.tuner <span class="im" style="color: #00769E;">import</span> HyperparameterTuner</span>
<span id="cb17-2"></span>
<span id="cb17-3">tuner <span class="op" style="color: #5E5E5E;">=</span> HyperparameterTuner(</span>
<span id="cb17-4">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator, </span>
<span id="cb17-5">    hyperparameter_ranges<span class="op" style="color: #5E5E5E;">=</span>hyperparameter_ranges, </span>
<span id="cb17-6">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions, </span>
<span id="cb17-7">    strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Random'</span>, </span>
<span id="cb17-8">    objective_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Maximize'</span>,</span>
<span id="cb17-9">    objective_metric_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'validation:accuracy'</span>,</span>
<span id="cb17-10">    max_jobs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># maximum number of jobs to run</span></span>
<span id="cb17-11">    max_parallel_jobs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="co" style="color: #5E5E5E;"># maximum number of jobs to run in parallel</span></span>
<span id="cb17-12">    early_stopping_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Auto'</span> <span class="co" style="color: #5E5E5E;"># early stopping criteria</span></span>
<span id="cb17-13">)</span></code></pre></div>
</div>
<p>Now we launch the SageMaker Hyper-Parameter Tuning (HPT) Job.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">tuner.fit(</span>
<span id="cb18-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb18-3">    include_cls_metadata<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb18-4">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb18-5">)</span></code></pre></div>
</div>
</section>
<section id="check-tuning-job-status" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="check-tuning-job-status"><span class="header-section-number">3.3</span> Check Tuning Job status</h3>
<p>We can see the Tuning Job status in the console.</p>
<div class="cell" data-outputid="18d3bff8-09d1-4c2f-e4f8-092a9f9fd450" data-scrolled="true">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">tuning_job_name <span class="op" style="color: #5E5E5E;">=</span> tuner.latest_tuning_job.job_name</span>
<span id="cb19-2"><span class="bu" style="color: null;">print</span>(tuning_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>pytorch-training-230213-1736</code></pre>
</div>
</div>
<div class="cell" data-outputid="885c59c6-02a5-4410-fa72-8e5c4061c397">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb21-2"></span>
<span id="cb21-3">tuner.wait()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.....................................................................................................................................................................................................................................................................................................!
CPU times: user 1.37 s, sys: 191 ms, total: 1.56 s
Wall time: 24min 53s</code></pre>
</div>
</div>
<p>The results of the SageMaker Hyperparameter Tuning Job are available on the <code>analytics</code> of the <code>tuner object</code>. The <code>dataframe</code> function converts the result directly into the dataframe. We can explore the results with the following lines of the code:</p>
<div class="cell" data-outputid="b87d480a-0a86-4216-d88b-0e89b1face48">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb23-2"></span>
<span id="cb23-3">time.sleep(<span class="dv" style="color: #AD0000;">10</span>) <span class="co" style="color: #5E5E5E;"># slight delay to allow the analytics to be calculated</span></span>
<span id="cb23-4"></span>
<span id="cb23-5">df_results <span class="op" style="color: #5E5E5E;">=</span> tuner.analytics().dataframe()</span>
<span id="cb23-6">df_results.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(2, 8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="53838327-3ae5-4bf2-fc7b-cb46ee637777">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df_results.sort_values(<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>learning_rate</th>
      <th>train_batch_size</th>
      <th>TrainingJobName</th>
      <th>TrainingJobStatus</th>
      <th>FinalObjectiveValue</th>
      <th>TrainingStartTime</th>
      <th>TrainingEndTime</th>
      <th>TrainingElapsedTimeSeconds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.000020</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-002-23e15b91</td>
      <td>Completed</td>
      <td>73.050003</td>
      <td>2023-02-13 17:38:06+00:00</td>
      <td>2023-02-13 18:01:09+00:00</td>
      <td>1383.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.000017</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-001-44bd7477</td>
      <td>Completed</td>
      <td>72.269997</td>
      <td>2023-02-13 17:38:02+00:00</td>
      <td>2023-02-13 18:01:24+00:00</td>
      <td>1402.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>When training and tuning at scale, it is important to continuously monitor and use the right compute resources. While we have the flexibility of choosing different compute options how do you choose the specific instance types and sizes to use? There is no standard answer for this. It comes down to understanding the workload and running empirical testing to determine the best compute resources to use for the training.</p>
<p>SageMaker Training Jobs emit CloudWatch metrics for resource utilization. We can review them in the AWS console.</p>
</section>
</section>
<section id="evaluate-the-results" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="evaluate-the-results"><span class="header-section-number">4</span> Evaluate the results</h2>
<p>An important part of developing a model is evaluating the model with a test data set - one that the model has never seen during its training process. The final metrics resulting from this evaluation can be used to compare competing machine learning models. The higher the value of these metrics, the better the model is able to generalize.</p>
<section id="show-the-best-candidate" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="show-the-best-candidate"><span class="header-section-number">4.1</span> Show the best candidate</h3>
<p>Let’s now show the best candidate - the one with the highest accuracy result.</p>
<div class="cell" data-outputid="58699c9c-5c70-4df3-b231-b1ef3ad2b716">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df_results.sort_values(</span>
<span id="cb26-2">    <span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, </span>
<span id="cb26-3">    ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).head(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>learning_rate</th>
      <th>train_batch_size</th>
      <th>TrainingJobName</th>
      <th>TrainingJobStatus</th>
      <th>FinalObjectiveValue</th>
      <th>TrainingStartTime</th>
      <th>TrainingEndTime</th>
      <th>TrainingElapsedTimeSeconds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.00002</td>
      <td>"128"</td>
      <td>pytorch-training-230213-1736-002-23e15b91</td>
      <td>Completed</td>
      <td>73.050003</td>
      <td>2023-02-13 17:38:06+00:00</td>
      <td>2023-02-13 18:01:09+00:00</td>
      <td>1383.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="evaluate-the-best-candidate" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="evaluate-the-best-candidate"><span class="header-section-number">4.2</span> Evaluate the best candidate</h3>
<p>Let’s pull the information about the best candidate from the dataframe and then take the Training Job name from the column <code>TrainingJobName</code>.</p>
<div class="cell" data-outputid="d000d21b-8e0b-4fe4-a726-0864b589a731">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">best_candidate <span class="op" style="color: #5E5E5E;">=</span> df_results.sort_values(<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb27-2"></span>
<span id="cb27-3">best_candidate_training_job_name <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb27-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate Training Job name: pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Now lets show the accuracy result for the best candidate.</p>
<div class="cell" data-outputid="1d6a7aee-827a-40b3-d89c-27cb8218d653">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">best_candidate_accuracy <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'FinalObjectiveValue'</span>] </span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate accuracy result: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_accuracy))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate accuracy result: 73.05000305175781</code></pre>
</div>
</div>
<p>We can use the function <code>describe_training_job</code> of the service client to get some more information about the best candidate. The result is in dictionary format. Let’s check that it has the same Training Job name:</p>
<div class="cell" data-outputid="f6804e74-19d9-415f-9549-c9a09b7aecd6">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">best_candidate_description <span class="op" style="color: #5E5E5E;">=</span> sm.describe_training_job(TrainingJobName<span class="op" style="color: #5E5E5E;">=</span>best_candidate_training_job_name)</span>
<span id="cb31-2"></span>
<span id="cb31-3">best_candidate_training_job_name2 <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_name2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Now lets pull the Tuning Job and Training Job Amazon Resource Name (ARN) from the best candidate training job description.</p>
<div class="cell" data-outputid="3528b282-76f7-45ff-bbeb-c1656bd77280">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;">print</span>(best_candidate_description.keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['TrainingJobName', 'TrainingJobArn', 'TuningJobArn', 'ModelArtifacts', 'TrainingJobStatus', 'SecondaryStatus', 'HyperParameters', 'AlgorithmSpecification', 'RoleArn', 'InputDataConfig', 'OutputDataConfig', 'ResourceConfig', 'StoppingCondition', 'CreationTime', 'TrainingStartTime', 'TrainingEndTime', 'LastModifiedTime', 'SecondaryStatusTransitions', 'FinalMetricDataList', 'EnableNetworkIsolation', 'EnableInterContainerTrafficEncryption', 'EnableManagedSpotTraining', 'TrainingTimeInSeconds', 'BillableTimeInSeconds', 'ProfilingStatus', 'WarmPoolStatus', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="cf019137-fd79-4c70-e931-a39b98fbc0b8">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">best_candidate_tuning_job_arn <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TuningJobArn'</span>] </span>
<span id="cb35-2">best_candidate_training_job_arn <span class="op" style="color: #5E5E5E;">=</span> best_candidate_description[<span class="st" style="color: #20794D;">'TrainingJobArn'</span>] </span>
<span id="cb35-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Tuning Job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_tuning_job_arn))</span>
<span id="cb35-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Best candidate Training Job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(best_candidate_training_job_arn))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best candidate Tuning Job ARN: arn:aws:sagemaker:us-east-1:058323655887:hyper-parameter-tuning-job/pytorch-training-230213-1736
Best candidate Training Job ARN: arn:aws:sagemaker:us-east-1:058323655887:training-job/pytorch-training-230213-1736-002-23e15b91</code></pre>
</div>
</div>
<p>Next, we pull the path of the best candidate model in the S3 bucket. We will need it later to set up the Processing Job for the evaluation.</p>
<div class="cell" data-outputid="107f7d5d-d89b-47ba-9484-f707d1d7d9e7">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">model_tar_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sm.describe_training_job(TrainingJobName<span class="op" style="color: #5E5E5E;">=</span>best_candidate_training_job_name)[<span class="st" style="color: #20794D;">'ModelArtifacts'</span>][<span class="st" style="color: #20794D;">'S3ModelArtifacts'</span>]</span>
<span id="cb37-2"><span class="bu" style="color: null;">print</span>(model_tar_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz</code></pre>
</div>
</div>
<p>To perform model evaluation we will use a scikit-learn-based Processing Job. This is essentially a generic Python Processing Job with scikit-learn pre-installed. We can specify the version of scikit-learn we wish to use. Also we need to pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb39-2"></span>
<span id="cb39-3">processing_instance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ml.c5.2xlarge"</span></span>
<span id="cb39-4">processing_instance_count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb39-5"></span>
<span id="cb39-6">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb39-7">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.23-1"</span>,</span>
<span id="cb39-8">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb39-9">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb39-10">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb39-11">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span>,</span>
<span id="cb39-12">)</span></code></pre></div>
</div>
<p>The model evaluation Processing Job will be running the Python code from the file <a href="https://pranath.github.io/pds/tuning/evaluate_model_metrics.py">src/evaluate_model_metrics.py</a>. You can open and review the file.</p>
<p>Let’s launch the Processing Job, passing the defined above parameters, custom script, path and the S3 bucket location of the test data.</p>
<div class="cell" data-outputid="a4d26510-3c5e-4bd1-bb75-edd8619d257d">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb40-2"></span>
<span id="cb40-3">processor.run(</span>
<span id="cb40-4">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"src/evaluate_model_metrics.py"</span>,</span>
<span id="cb40-5">    inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb40-6">        ProcessingInput(  </span>
<span id="cb40-7">            input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"model-tar-s3-uri"</span>,                        </span>
<span id="cb40-8">            source<span class="op" style="color: #5E5E5E;">=</span>model_tar_s3_uri,                               </span>
<span id="cb40-9">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/input/model/"</span></span>
<span id="cb40-10">        ),</span>
<span id="cb40-11">        ProcessingInput(</span>
<span id="cb40-12">            input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"evaluation-data-s3-uri"</span>,</span>
<span id="cb40-13">            source<span class="op" style="color: #5E5E5E;">=</span>processed_test_data_s3_uri,                                    </span>
<span id="cb40-14">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/input/data/"</span>,</span>
<span id="cb40-15">        ),</span>
<span id="cb40-16">    ],</span>
<span id="cb40-17">    outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb40-18">        ProcessingOutput(s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"EndOfJob"</span>, output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"metrics"</span>, source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/processing/output/metrics"</span>),</span>
<span id="cb40-19">    ],</span>
<span id="cb40-20">    arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"--max-seq-length"</span>, <span class="bu" style="color: null;">str</span>(max_seq_length)],</span>
<span id="cb40-21">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb40-22">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb40-23">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  sagemaker-scikit-learn-2023-02-13-18-04-08-342
Inputs:  [{'InputName': 'model-tar-s3-uri', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz', 'LocalPath': '/opt/ml/processing/input/model/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'evaluation-data-s3-uri', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/', 'LocalPath': '/opt/ml/processing/input/data/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'code', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/input/code/evaluate_model_metrics.py', 'LocalPath': '/opt/ml/processing/input/code', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'metrics', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics', 'LocalPath': '/opt/ml/processing/output/metrics', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<p>We can see the information about the Processing Jobs using the <code>describe</code> function. The result is in dictionary format. Let’s pull the Processing Job name:</p>
<div class="cell" data-outputid="3fe215be-7c07-4f9d-dbc8-4bf43a0746a8">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">scikit_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">"ProcessingJobName"</span>]</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing Job name: sagemaker-scikit-learn-2023-02-13-18-04-08-342</code></pre>
</div>
</div>
<p>Now lets pull the Processing Job status from the Processing Job description.</p>
<div class="cell" data-outputid="833388eb-4228-423f-a974-4623df207ace">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;">print</span>(processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['ProcessingInputs', 'ProcessingOutputConfig', 'ProcessingJobName', 'ProcessingResources', 'StoppingCondition', 'AppSpecification', 'RoleArn', 'ProcessingJobArn', 'ProcessingJobStatus', 'LastModifiedTime', 'CreationTime', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="1c84660f-929d-4b8a-eea4-736f6bc82e21">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">scikit_processing_job_status <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobStatus'</span>] </span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job status: InProgress</code></pre>
</div>
</div>
<p>Let’s monitor the Processing Job.</p>
<div class="cell" data-outputid="40404e21-48fe-49ff-ee39-5eb801a174db">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb48-2"></span>
<span id="cb48-3">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(</span>
<span id="cb48-4">    processing_job_name<span class="op" style="color: #5E5E5E;">=</span>scikit_processing_job_name, sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb48-5">)</span>
<span id="cb48-6"></span>
<span id="cb48-7">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb48-8"></span>
<span id="cb48-9">pprint(processing_job_description)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AppSpecification': {'ContainerArguments': ['--max-seq-length', '128'],
                      'ContainerEntrypoint': ['python3',
                                              '/opt/ml/processing/input/code/evaluate_model_metrics.py'],
                      'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
 'CreationTime': datetime.datetime(2023, 2, 13, 18, 4, 9, 1000, tzinfo=tzlocal()),
 'LastModifiedTime': datetime.datetime(2023, 2, 13, 18, 4, 9, 766000, tzinfo=tzlocal()),
 'ProcessingInputs': [{'AppManaged': False,
                       'InputName': 'model-tar-s3-uri',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/model/',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/pytorch-training-230213-1736-002-23e15b91/output/model.tar.gz'}},
                      {'AppManaged': False,
                       'InputName': 'evaluation-data-s3-uri',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/data/',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/transformed/data/sentiment-test/'}},
                      {'AppManaged': False,
                       'InputName': 'code',
                       'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                   'S3CompressionType': 'None',
                                   'S3DataDistributionType': 'FullyReplicated',
                                   'S3DataType': 'S3Prefix',
                                   'S3InputMode': 'File',
                                   'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/input/code/evaluate_model_metrics.py'}}],
 'ProcessingJobArn': 'arn:aws:sagemaker:us-east-1:058323655887:processing-job/sagemaker-scikit-learn-2023-02-13-18-04-08-342',
 'ProcessingJobName': 'sagemaker-scikit-learn-2023-02-13-18-04-08-342',
 'ProcessingJobStatus': 'InProgress',
 'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                         'OutputName': 'metrics',
                                         'S3Output': {'LocalPath': '/opt/ml/processing/output/metrics',
                                                      'S3UploadMode': 'EndOfJob',
                                                      'S3Uri': 's3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics'}}]},
 'ProcessingResources': {'ClusterConfig': {'InstanceCount': 1,
                                           'InstanceType': 'ml.c5.2xlarge',
                                           'VolumeSizeInGB': 30}},
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '2328',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Mon, 13 Feb 2023 18:04:09 GMT',
                                      'x-amzn-requestid': '27108fc5-7782-41b6-ac72-25de5e9245dc'},
                      'HTTPStatusCode': 200,
                      'RequestId': '27108fc5-7782-41b6-ac72-25de5e9245dc',
                      'RetryAttempts': 0},
 'RoleArn': 'arn:aws:iam::058323655887:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
 'StoppingCondition': {'MaxRuntimeInSeconds': 7200}}</code></pre>
</div>
</div>
<div class="cell" data-outputid="28e8fc5e-cf8d-4f8d-8d20-c840b94af512">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb50-2"></span>
<span id="cb50-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.........................................................................!CPU times: user 338 ms, sys: 40.8 ms, total: 379 ms
Wall time: 6min 9s</code></pre>
</div>
</div>
</section>
<section id="inspect-the-processed-output-data" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="inspect-the-processed-output-data"><span class="header-section-number">4.3</span> Inspect the processed output data</h3>
<p>Let’s take a look at the results of the Processing Job. Get the S3 bucket location of the output metrics:</p>
<div class="cell" data-outputid="f3ba6a45-9a70-40e4-e490-35ef80f49d5f">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb52-2"></span>
<span id="cb52-3">output_config <span class="op" style="color: #5E5E5E;">=</span> processing_job_description[<span class="st" style="color: #20794D;">"ProcessingOutputConfig"</span>]</span>
<span id="cb52-4"><span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> output_config[<span class="st" style="color: #20794D;">"Outputs"</span>]:</span>
<span id="cb52-5">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">"OutputName"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"metrics"</span>:</span>
<span id="cb52-6">        processed_metrics_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">"S3Output"</span>][<span class="st" style="color: #20794D;">"S3Uri"</span>]</span>
<span id="cb52-7"></span>
<span id="cb52-8"><span class="bu" style="color: null;">print</span>(processed_metrics_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics</code></pre>
</div>
</div>
<p>List the content of the folder:</p>
<div class="cell" data-outputid="c00b6ef0-b45e-44dc-a5a2-1aa6bae5d1ba">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_metrics_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-13 18:10:13      21764 confusion_matrix.png
2023-02-13 18:10:13         56 evaluation.json</code></pre>
</div>
</div>
<p>The test accuracy can be pulled from the <code>evaluation.json</code> file.</p>
<div class="cell" data-outputid="884bea2a-63bc-49d7-b47b-550759874538">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb56-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb56-3"></span>
<span id="cb56-4">metrics_json <span class="op" style="color: #5E5E5E;">=</span> sagemaker.s3.S3Downloader.read_file(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb56-5">    processed_metrics_s3_uri</span>
<span id="cb56-6">))</span>
<span id="cb56-7"></span>
<span id="cb56-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Test accuracy: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(json.loads(metrics_json)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test accuracy: {'metrics': {'accuracy': {'value': 0.7378640776699029}}}</code></pre>
</div>
</div>
<p>Copy image with the confusion matrix generated during the model evaluation into the folder <code>generated</code>.</p>
<div class="cell" data-outputid="708667b1-9f41-4beb-92ca-1dc68ab2538d">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_metrics_s3_uri<span class="op" style="color: #5E5E5E;">/</span>confusion_matrix.png .<span class="op" style="color: #5E5E5E;">/</span>generated<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb58-2"></span>
<span id="cb58-3"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb58-4">time.sleep(<span class="dv" style="color: #AD0000;">10</span>) <span class="co" style="color: #5E5E5E;"># Slight delay for our notebook to recognize the newly-downloaded file</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-058323655887/sagemaker-scikit-learn-2023-02-13-18-04-08-342/output/metrics/confusion_matrix.png to generated/confusion_matrix.png</code></pre>
</div>
</div>
<p>Lets show and review the confusion matrix, which is a table of all combinations of true (actual) and predicted labels. Each cell contains the number of the reviews for the corresponding sentiments.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/confusion_matrix.png" title="Confusion Matrix" class="img-fluid"></p>
<p>We can see that the highest numbers of the reviews appear in the diagonal cells, which are the correct predictions for each sentiment class.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">5</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-14-optimize-models-in-the-cloud-using-aws-automatic-model-tuning.html</guid>
  <pubDate>Tue, 14 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Building an AWS SageMaker Pipeline for a BERT Based text classifier</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-12-building-aws-sagemaker-pipeline-train-deploy-bert-text-classifier.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this project will look at the deploy and manage phase for the workflow using <strong>AWS Sagemaker Pipelines</strong>, which will actually involve all previous phases.</p>
<p>In particular we will do the following:</p>
<ul>
<li>Define and run a pipeline using a directed acyclic graph (DAG) with specific pipeline parameters and model hyper-parameters</li>
<li>Define a processing step that cleans, balances, transforms, and splits our dataset into train, validation, and test dataset</li>
<li>Define a training step that trains a model using the train and validation datasets</li>
<li>Define a processing step that evaluates the trained model’s performance on the test dataset</li>
<li>Define a register model step that creates a model package from the trained model</li>
<li>Define a conditional step that checks the model’s performance and conditionally registers the model for deployment</li>
</ul>
<p>Using the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - we will prepare it to train a deep learning BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
</section>
<section id="what-are-mlops" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="what-are-mlops"><span class="header-section-number">2</span> What are MLOPS ?</h2>
<p>MLOPS stands for Machine Learning Operations - but what does that mean?</p>
<p>MLOps builds on DevOps practices that encompass people, process, and technology. However, MLOps also includes considerations and practices that are really unique to machine learning workloads. All of these practices aim to be able to deliver machine learning workloads quickly to production while still maintaining high quality consistency and ensuring end-to-end traceability.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_path_mlmodels.png" title="Consideratons" class="img-fluid"></p>
<p>It’s important to consider that the machine learning development life cycle is very different than the software development life cycle for a variety of reasons.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_path_mlmodels2.png" title="Challenges" class="img-fluid"></p>
<p>First, the model development life cycle is difficult to plan for from a project management perspective. It typically includes longer experimentation cycles than you would see in a standard agile software development process. Also the development of machine learning models includes data tasks like feature engineering and data preparation. You also have data processing code, as well as new inputs and artifacts to consider for versioning. You also have additional pipeline task as well. When you start to look at automating the machine learning workflow, the inputs and artifacts that are generated across these tasks result in multiple disparate pipelines with dependencies that can be a bit more challenging, stitched together than a typical software development workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml.png" title="Goals" class="img-fluid"></p>
<p>Second, some models exist by themselves where you might be manually reading prediction requests and getting responses through a batch process or even within your notebook on an ad hoc basis. This is especially true in research environments. However, in many cases, a model is typically a small part of an overall solution that incorporates machine-learning. While that model is still a very key component to that solution, most often there is a need for other components that need to be built or integrated. As an example, consider your product review use case and your model that is predicting the classes of sentiment for a product review. That model itself will be able to classify the sentiment related to a product, but you also need to consider how that prediction will actually be used and potentially integrated into other existing applications. For this, there may be additional tasks like creating a rest API as a common interface for other applications to integrate with your model or even building applications that can respond to those reviews. This could mean creating automation to initiate back-end processes that allow for customer support engineers to quickly react and respond to any negative reviews.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml2.png" title="Path to production" class="img-fluid"></p>
<p>A third consideration is that where typically multiple personas span the machine learning development lifecycle, and all are really needed to ultimately be able to build, deploy, integrate, and operate a machine learning workload. This can create challenges as these personas often have competing priorities and needs. There may also be skill gaps in building an operating machine learning workloads. As an example, a data scientist may not have a traditional IT background. While they may be very comfortable in creating a model that meets the performance objectives that have been identified for your particular machine learning use case, they may not know how to host that model in a way that it can be consumed by other applications or other systems. In this case, there may be a need to have a deployment engineer that is also engaged to help in building out the infrastructure and the resources that are needed to operate and host that model.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml3.png" title="Accelerating the path to production" class="img-fluid"></p>
<p>Also, you might need to integrate that hosted model with another application. In this case, you’re likely to depend on a software engineer to perform that integration. If there isn’t a cross-functional team with the same project goals in place, competing priorities and skill gaps across these personas make it really difficult to provide that path to production for your model.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml4.png" title="Improving the Quality of Deployed Models" class="img-fluid"></p>
<p>Finally, many teams have processes in place supporting different regulatory or even internal corporate requirements. This means that when you’re creating your machine learning pipeline, sometimes you also need to be able to ensure that traditional practices can be included inside the steps of your pipeline. Something like change management as an example here. This may mean that within your pipeline, you’re going to automatically open a change ticket anytime a new model gets deployed to production. Or maybe it’s a manual approval that’s required before your model can deploy to production. All of these processes may need to be incorporated inside your machine learning pipeline.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_opml5.png" title="Key Considerations" class="img-fluid"></p>
<p><strong>MLOps aims to provide the most efficient path to production by reducing manual hand-offs between the steps in your workflow, increasing automation within those steps in your workflow, and then going a step further to orchestrate the steps across your workflow.</strong></p>
</section>
<section id="aws-pipelines-terminology" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="aws-pipelines-terminology"><span class="header-section-number">3</span> AWS Pipelines Terminology</h2>
<p>This project focuses on the following features of Amazon SageMaker Pipelines:</p>
<ul>
<li><strong>Pipelines</strong> - a directed acyclic graph (DAG) of steps and conditions to orchestrate SageMaker jobs and resource creation</li>
<li><strong>Processing job steps</strong> - a simplified, managed experience on SageMaker to run data processing workloads, such as feature engineering, data validation, model evaluation, and model explainability</li>
<li><strong>Training job steps</strong> - an iterative process that teaches a model to make predictions on new data by presenting examples from a training dataset</li>
<li><strong>Conditional step execution</strong> - provides conditional execution of branches in a pipeline</li>
<li><strong>Registering models</strong> - register a model in a model registry to create a deployable models in Amazon SageMaker</li>
<li><strong>Parameterized pipeline executions</strong> - allows pipeline executions to vary by supplied parameters</li>
<li><strong>Model endpoint</strong> - hosts the model as a REST endpoint to serve predictions from new data</li>
</ul>
</section>
<section id="creating-a-bert-pipeline" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="creating-a-bert-pipeline"><span class="header-section-number">4</span> Creating a BERT Pipeline</h2>
<p>The pipeline that we will create follows a typical machine learning application pattern of pre-processing, training, evaluation, and model registration.</p>
<p>In the processing step, we will perform feature engineering to transform the <code>review_body</code> text into BERT embeddings using the pre-trained BERT model and split the dataset into train, validation and test files. The transformed dataset is stored in a feature store. To optimize for Tensorflow training, the transformed dataset files are saved using the TFRecord format in Amazon S3.</p>
<p>In the training step, we will fine-tune the BERT model to the customer reviews dataset and add a new classification layer to predict the <code>sentiment</code> for a given <code>review_body</code>.</p>
<p>In the evaluation step, we will take the trained model and a test dataset as input, and produce a JSON file containing classification evaluation metrics.</p>
<p>In the condition step, we will register the trained model if the accuracy of the model, as determined by our evaluation step, exceeds a given threshold value.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/bert_sagemaker_pipeline.png" title="BERT Sagemaker Pipelines" class="img-fluid"></p>
<p>First, let’s install the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> logging</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> botocore.exceptions <span class="im" style="color: #00769E;">import</span> ClientError</span>
<span id="cb1-10"></span>
<span id="cb1-11">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w3'</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-14">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-15">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-16"></span>
<span id="cb1-17">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-18">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-19"></span>
<span id="cb1-20">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-21">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-22"></span>
<span id="cb1-23">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-24">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-25">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<p>Let’s setup the pipeline name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb2-2">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb2-3"></span>
<span id="cb2-4">pipeline_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'BERT-pipeline-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span></code></pre></div>
</div>
</section>
<section id="configure-the-dataset-and-processing-step" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="configure-the-dataset-and-processing-step"><span class="header-section-number">5</span> Configure the dataset and processing step</h2>
<section id="configure-s3-path-for-raw-input-data" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="configure-s3-path-for-raw-input-data"><span class="header-section-number">5.1</span> Configure S3 path for raw input data</h3>
<p>The raw dataset is in the public S3 bucket. Let’s start by specifying the S3 location of it:</p>
<div class="cell" data-outputid="bf6a9f74-3ac8-41f3-9687-cd1b46820068">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">raw_input_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/raw/'</span></span>
<span id="cb3-2"><span class="bu" style="color: null;">print</span>(raw_input_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://dlai-practical-data-science/data/raw/</code></pre>
</div>
</div>
<p>List the files in the S3 bucket (in this case it will be just one file):</p>
<div class="cell" data-outputid="704edfd2-2e74-445d-fd0a-d261ce456342">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $raw_input_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="configure-processing-step" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="configure-processing-step"><span class="header-section-number">5.2</span> Configure processing step</h3>
<p>For the pipeline workflow we will need to create workflow parameters of a specific type: integer, string, or float.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.parameters <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb7-2">    ParameterInteger,</span>
<span id="cb7-3">    ParameterString,</span>
<span id="cb7-4">    ParameterFloat,</span>
<span id="cb7-5">)</span></code></pre></div>
</div>
<p>Now set the parameters for the processing step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">processing_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ProcessingInstanceType"</span>,</span>
<span id="cb8-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.c5.2xlarge"</span></span>
<span id="cb8-4">)</span>
<span id="cb8-5"></span>
<span id="cb8-6">processing_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb8-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ProcessingInstanceCount"</span>,</span>
<span id="cb8-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-9">)</span>
<span id="cb8-10"></span>
<span id="cb8-11">train_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainSplitPercentage"</span>,</span>
<span id="cb8-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.90</span>,</span>
<span id="cb8-14">)</span>
<span id="cb8-15"></span>
<span id="cb8-16">validation_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationSplitPercentage"</span>,</span>
<span id="cb8-18">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb8-19">)</span>
<span id="cb8-20"></span>
<span id="cb8-21">test_split_percentage <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb8-22">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TestSplitPercentage"</span>,</span>
<span id="cb8-23">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb8-24">)</span>
<span id="cb8-25"></span>
<span id="cb8-26">balance_dataset <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-27">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"BalanceDataset"</span>,</span>
<span id="cb8-28">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"True"</span>,</span>
<span id="cb8-29">)</span>
<span id="cb8-30"></span>
<span id="cb8-31">max_seq_length <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb8-32">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MaxSeqLength"</span>,</span>
<span id="cb8-33">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>,</span>
<span id="cb8-34">)</span>
<span id="cb8-35"></span>
<span id="cb8-36">feature_store_offline_prefix <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-37">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FeatureStoreOfflinePrefix"</span>,</span>
<span id="cb8-38">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews-feature-store-"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb8-39">)</span>
<span id="cb8-40"></span>
<span id="cb8-41">feature_group_name <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-42">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FeatureGroupName"</span>,</span>
<span id="cb8-43">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews-feature-group-"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb8-44">)</span>
<span id="cb8-45"></span>
<span id="cb8-46">input_data <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb8-47">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InputData"</span>,</span>
<span id="cb8-48">    default_value<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb8-49">)</span></code></pre></div>
</div>
<p>Setting up scikit-learn-based processor, pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb9-2"></span>
<span id="cb9-3">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb9-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb9-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb9-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb9-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb9-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},                             </span>
<span id="cb9-9">)</span></code></pre></div>
</div>
<p>Now we will use the processor instance to construct a <code>ProcessingStep</code>, along with the input and output channels and the code that will be executed when the pipeline invokes pipeline execution. This is very similar to a processor instance’s <code>run</code> method, for those familiar with the existing Python SDK.</p>
<p>Note the <code>"sentiment-train"</code>, <code>"sentiment-validation"</code> and <code>"sentiment-test"</code> named channels specified in the output configuration for the processing job. Such step <code>Properties</code> can be used in subsequent steps and will resolve to their runtime values at execution. In particular, we will call out this usage defining the training step.</p>
<div class="cell" data-outputid="cccebd03-d359-47d4-cb04-6cb53cde120a">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb10-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> ProcessingStep</span>
<span id="cb10-3"></span>
<span id="cb10-4">processing_inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-5">    ProcessingInput(</span>
<span id="cb10-6">        input_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'raw-input-data'</span>,</span>
<span id="cb10-7">        source<span class="op" style="color: #5E5E5E;">=</span>input_data,</span>
<span id="cb10-8">        destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data/'</span>,</span>
<span id="cb10-9">        s3_data_distribution_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ShardedByS3Key'</span></span>
<span id="cb10-10">    )</span>
<span id="cb10-11">]</span>
<span id="cb10-12"></span>
<span id="cb10-13">processing_outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb10-14">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-train'</span>,</span>
<span id="cb10-15">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/train'</span>,</span>
<span id="cb10-16">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb10-17">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-validation'</span>,</span>
<span id="cb10-18">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/validation'</span>,</span>
<span id="cb10-19">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb10-20">    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-test'</span>,</span>
<span id="cb10-21">                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/test'</span>,</span>
<span id="cb10-22">                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>)</span>
<span id="cb10-23">]        </span>
<span id="cb10-24"></span>
<span id="cb10-25">processing_step <span class="op" style="color: #5E5E5E;">=</span> ProcessingStep(</span>
<span id="cb10-26">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Processing'</span>, </span>
<span id="cb10-27">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/prepare_data.py'</span>,</span>
<span id="cb10-28">    processor<span class="op" style="color: #5E5E5E;">=</span>processor,</span>
<span id="cb10-29">    inputs<span class="op" style="color: #5E5E5E;">=</span>processing_inputs,</span>
<span id="cb10-30">    outputs<span class="op" style="color: #5E5E5E;">=</span>processing_outputs,</span>
<span id="cb10-31">    job_arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'--train-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(train_split_percentage.default_value),                   </span>
<span id="cb10-32">                   <span class="st" style="color: #20794D;">'--validation-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(validation_split_percentage.default_value),</span>
<span id="cb10-33">                   <span class="st" style="color: #20794D;">'--test-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(test_split_percentage.default_value),</span>
<span id="cb10-34">                   <span class="st" style="color: #20794D;">'--balance-dataset'</span>, <span class="bu" style="color: null;">str</span>(balance_dataset.default_value),</span>
<span id="cb10-35">                   <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length.default_value),                   </span>
<span id="cb10-36">                   <span class="st" style="color: #20794D;">'--feature-store-offline-prefix'</span>, <span class="bu" style="color: null;">str</span>(feature_store_offline_prefix.default_value),</span>
<span id="cb10-37">                   <span class="st" style="color: #20794D;">'--feature-group-name'</span>, <span class="bu" style="color: null;">str</span>(feature_group_name.default_value)</span>
<span id="cb10-38">                  ]</span>
<span id="cb10-39">)        </span>
<span id="cb10-40"></span>
<span id="cb10-41"><span class="bu" style="color: null;">print</span>(processing_step)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ProcessingStep(name='Processing', step_type=&lt;StepTypeEnum.PROCESSING: 'Processing'&gt;)</code></pre>
</div>
</div>
<p>Now we can call out the properties of the processing job as an object using the command <code>processing_step.properties</code>. To print out and explore the attributes use <code>__dict__</code> method.</p>
<div class="cell" data-outputid="24eec809-fdf8-45c0-dc04-721ac29153c2">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># print out the list of the processing job properties</span></span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb12-3">    processing_step.properties.__dict__,</span>
<span id="cb12-4">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb12-5">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "AppSpecification": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298a10&gt;",
    "AutoMLJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431d10&gt;",
    "CreationTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431950&gt;",
    "Environment": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298690&gt;",
    "ExitMessage": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431d50&gt;",
    "ExperimentConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf52a0b10&gt;",
    "FailureReason": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431750&gt;",
    "LastModifiedTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431a10&gt;",
    "MonitoringScheduleArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431190&gt;",
    "NetworkConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298b90&gt;",
    "ProcessingEndTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431610&gt;",
    "ProcessingInputs": "&lt;sagemaker.workflow.properties.PropertiesList object at 0x7fcdf5298350&gt;",
    "ProcessingJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431410&gt;",
    "ProcessingJobName": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298590&gt;",
    "ProcessingJobStatus": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431310&gt;",
    "ProcessingOutputConfig": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298510&gt;",
    "ProcessingResources": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf52984d0&gt;",
    "ProcessingStartTime": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431ed0&gt;",
    "RoleArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298650&gt;",
    "StoppingCondition": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5298a50&gt;",
    "TrainingJobArn": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5431bd0&gt;",
    "_path": "Steps.Processing",
    "_shape_name": "DescribeProcessingJobResponse"
}</code></pre>
</div>
</div>
<p>Pull the channel <code>sentiment-train</code> from the output configuration of the processing job. Print out the attributes of the resulting object:</p>
<div class="cell" data-outputid="1a5369ca-8996-42cc-a2d7-6db70c5aede9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb14-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-train'</span>].__dict__, </span>
<span id="cb14-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb14-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "AppManaged": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf543c490&gt;",
    "FeatureStoreOutput": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf54d4510&gt;",
    "OutputName": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf5384650&gt;",
    "S3Output": "&lt;sagemaker.workflow.properties.Properties object at 0x7fcdf53845d0&gt;",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train']",
    "_shape_name": "ProcessingOutput"
}</code></pre>
</div>
</div>
<p>Now we can pull and print out attributes of the S3 output path related to the <code>sentiment-train</code> output channel:</p>
<div class="cell" data-outputid="dfa191f0-ccff-4e84-c304-4a64f757b7f7">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb16-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-train'</span>].S3Output.S3Uri.__dict__,</span>
<span id="cb16-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb16-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "__str__": "S3Uri",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train'].S3Output.S3Uri",
    "_shape_name": "S3Uri"
}</code></pre>
</div>
</div>
<p>Let’s pull and print out attributes of the S3 output path object related to the <code>sentiment-test</code> output channel.</p>
<div class="cell" data-outputid="da8c78c7-73fc-49b9-ae1b-de5351dd2c23">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;">print</span>(json.dumps(</span>
<span id="cb18-2">    processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-test'</span>].S3Output.S3Uri.__dict__, </span>
<span id="cb18-3">    indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span></span>
<span id="cb18-4">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "__str__": "S3Uri",
    "_path": "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-test'].S3Output.S3Uri",
    "_shape_name": "S3Uri"
}</code></pre>
</div>
</div>
<p>These objects can be passed into the next steps of the workflow. Also, we can pull the arguments of the processing step with the corresponding function. The result is in the dictionary format.</p>
<div class="cell" data-outputid="1cad757e-7257-4de9-9839-87e1064dbb23">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">processing_step.arguments.keys()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>dict_keys(['ProcessingResources', 'AppSpecification', 'RoleArn', 'ProcessingInputs', 'ProcessingOutputConfig', 'Environment'])</code></pre>
</div>
</div>
<p>Let’s pull and review processing inputs from the arguments of the processing step:</p>
<div class="cell" data-outputid="d923a819-de37-4576-ce4a-f121a31e5b25">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">processing_step.arguments[<span class="st" style="color: #20794D;">'ProcessingInputs'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[{'InputName': 'raw-input-data',
  'AppManaged': False,
  'S3Input': {'S3Uri': ParameterString(name='InputData', parameter_type=&lt;ParameterTypeEnum.STRING: 'String'&gt;, default_value='s3://dlai-practical-data-science/data/raw/'),
   'LocalPath': '/opt/ml/processing/input/data/',
   'S3DataType': 'S3Prefix',
   'S3InputMode': 'File',
   'S3DataDistributionType': 'ShardedByS3Key',
   'S3CompressionType': 'None'}},
 {'InputName': 'code',
  'AppManaged': False,
  'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-22-918/input/code/prepare_data.py',
   'LocalPath': '/opt/ml/processing/input/code',
   'S3DataType': 'S3Prefix',
   'S3InputMode': 'File',
   'S3DataDistributionType': 'FullyReplicated',
   'S3CompressionType': 'None'}}]</code></pre>
</div>
</div>
<p>Let’s now pull and review configuration of the processing outputs from the arguments of the processing step.</p>
<div class="cell" data-outputid="b1a5bc56-0416-441d-a771-8e40ca39c1ec">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">processing_step.arguments[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>] </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>{'Outputs': [{'OutputName': 'sentiment-train',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train',
    'LocalPath': '/opt/ml/processing/output/sentiment/train',
    'S3UploadMode': 'EndOfJob'}},
  {'OutputName': 'sentiment-validation',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-validation',
    'LocalPath': '/opt/ml/processing/output/sentiment/validation',
    'S3UploadMode': 'EndOfJob'}},
  {'OutputName': 'sentiment-test',
   'AppManaged': False,
   'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-test',
    'LocalPath': '/opt/ml/processing/output/sentiment/test',
    'S3UploadMode': 'EndOfJob'}}]}</code></pre>
</div>
</div>
</section>
</section>
<section id="configure-training-step" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="configure-training-step"><span class="header-section-number">6</span> Configure training step</h2>
<section id="define-parameters" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="define-parameters"><span class="header-section-number">6.1</span> Define parameters</h3>
<p>Setup the parameters for the workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">freeze_bert_layer <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"FreezeBertLayer"</span>,</span>
<span id="cb26-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"False"</span>,</span>
<span id="cb26-4">)</span>
<span id="cb26-5"></span>
<span id="cb26-6">epochs <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Epochs"</span>,</span>
<span id="cb26-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb26-9">)</span>
<span id="cb26-10">    </span>
<span id="cb26-11">learning_rate <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb26-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"LearningRate"</span>,</span>
<span id="cb26-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.00001</span></span>
<span id="cb26-14">) </span>
<span id="cb26-15">    </span>
<span id="cb26-16">train_batch_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainBatchSize"</span>,</span>
<span id="cb26-18">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb26-19">)</span>
<span id="cb26-20"></span>
<span id="cb26-21">train_steps_per_epoch <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-22">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainStepsPerEpoch"</span>,</span>
<span id="cb26-23">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb26-24">)</span>
<span id="cb26-25"></span>
<span id="cb26-26">validation_batch_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-27">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationBatchSize"</span>,</span>
<span id="cb26-28">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb26-29">)</span>
<span id="cb26-30"></span>
<span id="cb26-31">validation_steps_per_epoch <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-32">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ValidationStepsPerEpoch"</span>,</span>
<span id="cb26-33">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb26-34">)</span>
<span id="cb26-35"></span>
<span id="cb26-36">seed <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-37">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Seed"</span>,</span>
<span id="cb26-38">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb26-39">)</span>
<span id="cb26-40"></span>
<span id="cb26-41">run_validation <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-42">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RunValidation"</span>,</span>
<span id="cb26-43">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"True"</span>,</span>
<span id="cb26-44">)</span>
<span id="cb26-45"></span>
<span id="cb26-46">train_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-47">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainInstanceCount"</span>,</span>
<span id="cb26-48">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb26-49">)</span>
<span id="cb26-50"></span>
<span id="cb26-51">train_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-52">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainInstanceType"</span>,</span>
<span id="cb26-53">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.c5.9xlarge"</span></span>
<span id="cb26-54">)</span>
<span id="cb26-55"></span>
<span id="cb26-56">train_volume_size <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb26-57">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"TrainVolumeSize"</span>,</span>
<span id="cb26-58">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb26-59">) </span>
<span id="cb26-60"></span>
<span id="cb26-61">input_mode <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb26-62">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"InputMode"</span>,</span>
<span id="cb26-63">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"File"</span>,</span>
<span id="cb26-64">)</span></code></pre></div>
</div>
</section>
<section id="configure-hyper-parameters" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="configure-hyper-parameters"><span class="header-section-number">6.2</span> Configure hyper-parameters</h3>
<p>Setup the dictionary that will be passed into the hyperparameters argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">hyperparameters<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb27-2">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb27-3">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb27-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb27-5">    <span class="st" style="color: #20794D;">'learning_rate'</span>: learning_rate,</span>
<span id="cb27-6">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: train_batch_size,</span>
<span id="cb27-7">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb27-8">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb27-9">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,</span>
<span id="cb27-10">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb27-11">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb27-12">}</span></code></pre></div>
</div>
</section>
<section id="configure-model-evaluation-metrics" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="configure-model-evaluation-metrics"><span class="header-section-number">6.3</span> Configure model-evaluation metrics</h3>
<p>Choose loss and accuracy as the evaluation metrics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb28-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb28-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb28-4">]</span></code></pre></div>
</div>
</section>
<section id="configure-the-pytorchestimator" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="configure-the-pytorchestimator"><span class="header-section-number">6.4</span> Configure the <code>PyTorchEstimator</code></h3>
<p>Let’s configure an estimator and the input dataset. A typical training script loads data from the input channels, configures training with hyperparameters, trains a model, and saves a model to <code>model_dir</code> so that it can be hosted later.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb29-2"></span>
<span id="cb29-3">estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb29-4">    entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb29-5">    source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb29-6">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb29-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb29-8">    instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb29-9">    volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb29-10">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb29-11">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb29-12">    hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters,</span>
<span id="cb29-13">    metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb29-14">    input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode</span>
<span id="cb29-15">)</span></code></pre></div>
</div>
</section>
<section id="setup-pipeline-step-caching" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="setup-pipeline-step-caching"><span class="header-section-number">6.5</span> Setup pipeline step caching</h3>
<p>Step signature caching allows SageMaker Pipelines, before executing a step, to find a previous execution of a step that was called using the same arguments. Cache hit gets created if the previous execution is found. Then during execution instead of recomputing the step, pipelines propagates the values from the cache hit.</p>
<p>Timeout period is defined using <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> format, it can contain a year, month, week, day, hour, and minute value.</p>
<p>More details on SageMaker Pipeline step caching can be found <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-caching.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> CacheConfig</span>
<span id="cb30-2"></span>
<span id="cb30-3">cache_config <span class="op" style="color: #5E5E5E;">=</span> CacheConfig(enable_caching<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, expire_after<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"PT1H"</span>) <span class="co" style="color: #5E5E5E;"># PT1H represents `one hour`</span></span></code></pre></div>
</div>
</section>
<section id="configure-the-trainingstep" class="level3" data-number="6.6">
<h3 data-number="6.6" class="anchored" data-anchor-id="configure-the-trainingstep"><span class="header-section-number">6.6</span> Configure the <code>TrainingStep</code></h3>
<p>Now we configure the <code>TrainingStep</code> calling the outputs of the processing step:</p>
<div class="cell" data-outputid="1cb4774c-ee9a-4e9d-c088-b062621abaa9">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> TrainingInput</span>
<span id="cb31-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> TrainingStep</span>
<span id="cb31-3"></span>
<span id="cb31-4">training_step <span class="op" style="color: #5E5E5E;">=</span> TrainingStep(</span>
<span id="cb31-5">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Train'</span>,</span>
<span id="cb31-6">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator,</span>
<span id="cb31-7">    inputs<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb31-8">        <span class="st" style="color: #20794D;">'train'</span>: TrainingInput(</span>
<span id="cb31-9">            s3_data<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[</span>
<span id="cb31-10">                <span class="st" style="color: #20794D;">'sentiment-train'</span></span>
<span id="cb31-11">            ].S3Output.S3Uri,</span>
<span id="cb31-12">            content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb31-13">        ),</span>
<span id="cb31-14">        <span class="st" style="color: #20794D;">'validation'</span>: TrainingInput(</span>
<span id="cb31-15">            s3_data<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[</span>
<span id="cb31-16">                <span class="st" style="color: #20794D;">'sentiment-validation'</span></span>
<span id="cb31-17">            ].S3Output.S3Uri,</span>
<span id="cb31-18">            content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb31-19">        )</span>
<span id="cb31-20">    },</span>
<span id="cb31-21">    cache_config<span class="op" style="color: #5E5E5E;">=</span>cache_config</span>
<span id="cb31-22">)</span>
<span id="cb31-23"></span>
<span id="cb31-24"><span class="bu" style="color: null;">print</span>(training_step)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>TrainingStep(name='Train', step_type=&lt;StepTypeEnum.TRAINING: 'Training'&gt;)</code></pre>
</div>
</div>
<p>We will use the <code>__dict__</code> method to print out attributes of the training step properties. Briefly review the result. The attributes match the object model of the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a> response object.</p>
<div class="cell" data-outputid="593d96f5-84ad-46e2-c89e-c2d19fe5f68a">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">training_step.properties.__dict__ </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>{'_path': 'Steps.Train',
 '_shape_name': 'DescribeTrainingJobResponse',
 'TrainingJobName': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101310&gt;,
 'TrainingJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101350&gt;,
 'TuningJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101390&gt;,
 'LabelingJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51013d0&gt;,
 'AutoMLJobArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101210&gt;,
 'ModelArtifacts': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101250&gt;,
 'TrainingJobStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51012d0&gt;,
 'SecondaryStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101110&gt;,
 'FailureReason': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101150&gt;,
 'HyperParameters': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101190&gt;,
 'AlgorithmSpecification': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51011d0&gt;,
 'RoleArn': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101850&gt;,
 'InputDataConfig': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5101750&gt;,
 'OutputDataConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5101490&gt;,
 'ResourceConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf51015d0&gt;,
 'VpcConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424e10&gt;,
 'StoppingCondition': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424350&gt;,
 'CreationTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424910&gt;,
 'TrainingStartTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424750&gt;,
 'TrainingEndTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424950&gt;,
 'LastModifiedTime': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424550&gt;,
 'SecondaryStatusTransitions': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5424a10&gt;,
 'FinalMetricDataList': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf5424590&gt;,
 'EnableNetworkIsolation': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424e50&gt;,
 'EnableInterContainerTrafficEncryption': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424690&gt;,
 'EnableManagedSpotTraining': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424150&gt;,
 'CheckpointConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424fd0&gt;,
 'TrainingTimeInSeconds': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424490&gt;,
 'BillableTimeInSeconds': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf5424ad0&gt;,
 'DebugHookConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf54246d0&gt;,
 'ExperimentConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7d50&gt;,
 'DebugRuleConfigurations': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7890&gt;,
 'TensorBoardOutputConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7e50&gt;,
 'DebugRuleEvaluationStatuses': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7dd0&gt;,
 'ProfilerConfig': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7d90&gt;,
 'ProfilerRuleConfigurations': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a79d0&gt;,
 'ProfilerRuleEvaluationStatuses': &lt;sagemaker.workflow.properties.PropertiesList at 0x7fcdf53a7410&gt;,
 'ProfilingStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7ad0&gt;,
 'RetryStrategy': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7a10&gt;,
 'Environment': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7950&gt;,
 'WarmPoolStatus': &lt;sagemaker.workflow.properties.Properties at 0x7fcdf53a7f10&gt;}</code></pre>
</div>
</div>
</section>
</section>
<section id="configure-model-evaluation-step" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="configure-model-evaluation-step"><span class="header-section-number">7</span> Configure model-evaluation step</h2>
<p>First, we will develop an evaluation script that will be specified in the model evaluation processing step. The evaluation script users the trained model and the test dataset to produce a JSON file with classification evaluation metrics such as accuracy.</p>
<p>The evaluation script performs the following steps: * loads in the model * reads in the test data * issues a bunch of predictions against the test data * builds a classification report, including accuracy * saves the evaluation report to the evaluation directory</p>
<p>Create an instance of the <code>SKLearnProcessor</code> to run our evaluation script as a scikit-learn-based SageMaker processing job.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb35-2"></span>
<span id="cb35-3">evaluation_processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb35-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb35-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb35-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb35-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb35-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},</span>
<span id="cb35-9">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb35-10">)</span></code></pre></div>
</div>
<p>Setup the output <code>PropertyFile</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.properties <span class="im" style="color: #00769E;">import</span> PropertyFile</span>
<span id="cb36-2"></span>
<span id="cb36-3">evaluation_report <span class="op" style="color: #5E5E5E;">=</span> PropertyFile(</span>
<span id="cb36-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EvaluationReport'</span>,</span>
<span id="cb36-5">    output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'metrics'</span>,</span>
<span id="cb36-6">    path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'evaluation.json'</span></span>
<span id="cb36-7">)</span></code></pre></div>
</div>
<p>Now we use the processor instance to construct a <code>ProcessingStep</code>, along with the input and output channels and the code that will be executed when the pipeline invokes pipeline execution. This is very similar to a processor instance’s <code>run</code> method.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb37-2"></span>
<span id="cb37-3">evaluation_step <span class="op" style="color: #5E5E5E;">=</span> ProcessingStep(</span>
<span id="cb37-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EvaluateModel'</span>,</span>
<span id="cb37-5">    processor<span class="op" style="color: #5E5E5E;">=</span>evaluation_processor,</span>
<span id="cb37-6">    code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/evaluate_model_metrics.py'</span>,</span>
<span id="cb37-7">    inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-8">        ProcessingInput(</span>
<span id="cb37-9">            source<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb37-10">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/model'</span></span>
<span id="cb37-11">        ),</span>
<span id="cb37-12">        ProcessingInput(</span>
<span id="cb37-13">            source<span class="op" style="color: #5E5E5E;">=</span>processing_step.properties.ProcessingOutputConfig.Outputs[<span class="st" style="color: #20794D;">'sentiment-test'</span>].S3Output.S3Uri,</span>
<span id="cb37-14">            destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data'</span></span>
<span id="cb37-15">        )</span>
<span id="cb37-16">    ],</span>
<span id="cb37-17">    outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-18">        ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'metrics'</span>, </span>
<span id="cb37-19">                         s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>,</span>
<span id="cb37-20">                         source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/metrics/'</span>),</span>
<span id="cb37-21">    ],</span>
<span id="cb37-22">    job_arguments<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb37-23">        <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length.default_value),</span>
<span id="cb37-24">    ],</span>
<span id="cb37-25">    property_files<span class="op" style="color: #5E5E5E;">=</span>[evaluation_report],</span>
<span id="cb37-26">)</span></code></pre></div>
</div>
</section>
<section id="configure-and-register-model-step" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="configure-and-register-model-step"><span class="header-section-number">8</span> Configure and register model step</h2>
<section id="configure-the-model-for-deployment" class="level3" data-number="8.1">
<h3 data-number="8.1" class="anchored" data-anchor-id="configure-the-model-for-deployment"><span class="header-section-number">8.1</span> Configure the model for deployment</h3>
<p>We will now use the estimator instance that was used for the training step to construct an instance of <code>RegisterModel</code>. The result of executing <code>RegisterModel</code> in a pipeline is a model package. A model package is a reusable model artifacts abstraction that packages all ingredients necessary for inference. Primarily, it consists of an inference specification that defines the inference image to use along with an optional model weights location.</p>
<p>A model package group is a collection of model packages. You can create a model package group for a specific ML business problem, and you can keep adding versions/model packages into it. Typically, customers are expected to create a ModelPackageGroup for a SageMaker workflow pipeline so that they can keep adding versions/model packages to the group for every workflow pipeline run.</p>
<p>The construction of <code>RegisterModel</code> is very similar to an estimator instance’s <code>register</code> method, for those familiar with the existing Python SDK.</p>
<p>In particular, we will pass in the <code>S3ModelArtifacts</code> from the <code>training_step</code> properties.</p>
<p>Of note, here we will be provided a specific model package group name which will be used in the Model Registry and Continuous Integration/Continuous Deployment (CI/CD) work later on. Let’s setup the variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">model_approval_status <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb38-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ModelApprovalStatus"</span>,</span>
<span id="cb38-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"PendingManualApproval"</span></span>
<span id="cb38-4">)</span>
<span id="cb38-5"></span>
<span id="cb38-6">deploy_instance_type <span class="op" style="color: #5E5E5E;">=</span> ParameterString(</span>
<span id="cb38-7">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"DeployInstanceType"</span>,</span>
<span id="cb38-8">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ml.m5.large"</span></span>
<span id="cb38-9">)</span>
<span id="cb38-10"></span>
<span id="cb38-11">deploy_instance_count <span class="op" style="color: #5E5E5E;">=</span> ParameterInteger(</span>
<span id="cb38-12">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"DeployInstanceCount"</span>,</span>
<span id="cb38-13">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb38-14">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="801217b4-4c41-46bd-c1e7-e3eecf95cb47">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">model_package_group_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"BERT-Reviews-</span><span class="sc" style="color: #5E5E5E;">{</span>timestamp<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="bu" style="color: null;">print</span>(model_package_group_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>BERT-Reviews-1676208665</code></pre>
</div>
</div>
<p>Configure the <code>ModelMetrics</code> to be stored as metadata.</p>
<div class="cell" data-outputid="686e843f-9bf2-49ea-c0cb-e530838f774a">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;">from</span> sagemaker.model_metrics <span class="im" style="color: #00769E;">import</span> MetricsSource, ModelMetrics </span>
<span id="cb41-2"></span>
<span id="cb41-3">model_metrics <span class="op" style="color: #5E5E5E;">=</span> ModelMetrics(</span>
<span id="cb41-4">    model_statistics<span class="op" style="color: #5E5E5E;">=</span>MetricsSource(</span>
<span id="cb41-5">        s3_uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb41-6">            evaluation_step.arguments[<span class="st" style="color: #20794D;">"ProcessingOutputConfig"</span>][<span class="st" style="color: #20794D;">"Outputs"</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">"S3Output"</span>][<span class="st" style="color: #20794D;">"S3Uri"</span>]</span>
<span id="cb41-7">        ),</span>
<span id="cb41-8">        content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"application/json"</span></span>
<span id="cb41-9">    )</span>
<span id="cb41-10">)</span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="bu" style="color: null;">print</span>(model_metrics)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;sagemaker.model_metrics.ModelMetrics object at 0x7fcdf40cd5d0&gt;</code></pre>
</div>
</div>
<p>Define deployment image for inference.</p>
<div class="cell" data-outputid="c9e17fee-616b-4f13-8431-c3eab06105c8">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">inference_image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb43-2">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pytorch"</span>,</span>
<span id="cb43-3">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb43-4">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.6.0"</span>,</span>
<span id="cb43-5">    py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"py36"</span>,</span>
<span id="cb43-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>deploy_instance_type,</span>
<span id="cb43-7">    image_scope<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"inference"</span></span>
<span id="cb43-8">)</span>
<span id="cb43-9"><span class="bu" style="color: null;">print</span>(inference_image_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36</code></pre>
</div>
</div>
</section>
<section id="register-the-model-for-deployment" class="level3" data-number="8.2">
<h3 data-number="8.2" class="anchored" data-anchor-id="register-the-model-for-deployment"><span class="header-section-number">8.2</span> Register the model for deployment</h3>
<p>Let’s now configure the register model step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.step_collections <span class="im" style="color: #00769E;">import</span> RegisterModel</span>
<span id="cb45-2"></span>
<span id="cb45-3">register_step <span class="op" style="color: #5E5E5E;">=</span> RegisterModel(</span>
<span id="cb45-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RegisterModel"</span>,</span>
<span id="cb45-5">    estimator<span class="op" style="color: #5E5E5E;">=</span>estimator,</span>
<span id="cb45-6">    image_uri<span class="op" style="color: #5E5E5E;">=</span>inference_image_uri, </span>
<span id="cb45-7">    model_data<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb45-8">    content_types<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"application/jsonlines"</span>],</span>
<span id="cb45-9">    response_types<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"application/jsonlines"</span>],</span>
<span id="cb45-10">    inference_instances<span class="op" style="color: #5E5E5E;">=</span>[deploy_instance_type],</span>
<span id="cb45-11">    transform_instances<span class="op" style="color: #5E5E5E;">=</span>[deploy_instance_type], </span>
<span id="cb45-12">    model_package_group_name<span class="op" style="color: #5E5E5E;">=</span>model_package_group_name,</span>
<span id="cb45-13">    approval_status<span class="op" style="color: #5E5E5E;">=</span>model_approval_status,</span>
<span id="cb45-14">    model_metrics<span class="op" style="color: #5E5E5E;">=</span>model_metrics</span>
<span id="cb45-15">)</span></code></pre></div>
</div>
</section>
</section>
<section id="create-model-for-deployment-step" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="create-model-for-deployment-step"><span class="header-section-number">9</span> Create model for deployment step</h2>
<p>Let’s configure the model for deployment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;">from</span> sagemaker.model <span class="im" style="color: #00769E;">import</span> Model</span>
<span id="cb46-2"></span>
<span id="cb46-3">model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb46-4"></span>
<span id="cb46-5">model <span class="op" style="color: #5E5E5E;">=</span> Model(</span>
<span id="cb46-6">    name<span class="op" style="color: #5E5E5E;">=</span>model_name,</span>
<span id="cb46-7">    image_uri<span class="op" style="color: #5E5E5E;">=</span>inference_image_uri, </span>
<span id="cb46-8">    model_data<span class="op" style="color: #5E5E5E;">=</span>training_step.properties.ModelArtifacts.S3ModelArtifacts,</span>
<span id="cb46-9">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb46-10">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb46-11">)</span></code></pre></div>
</div>
<p>Now we configure create model input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;">from</span> sagemaker.inputs <span class="im" style="color: #00769E;">import</span> CreateModelInput</span>
<span id="cb47-2"></span>
<span id="cb47-3">create_inputs <span class="op" style="color: #5E5E5E;">=</span> CreateModelInput(</span>
<span id="cb47-4">    instance_type<span class="op" style="color: #5E5E5E;">=</span>deploy_instance_type, </span>
<span id="cb47-5">)</span></code></pre></div>
</div>
<p>Lastly we configure the create model step for the workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.steps <span class="im" style="color: #00769E;">import</span> CreateModelStep</span>
<span id="cb48-2"></span>
<span id="cb48-3">create_step <span class="op" style="color: #5E5E5E;">=</span> CreateModelStep(</span>
<span id="cb48-4">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"CreateModel"</span>,</span>
<span id="cb48-5">    model<span class="op" style="color: #5E5E5E;">=</span>model, </span>
<span id="cb48-6">    inputs<span class="op" style="color: #5E5E5E;">=</span>create_inputs, </span>
<span id="cb48-7">)</span></code></pre></div>
</div>
</section>
<section id="check-accuracy-condition-step" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="check-accuracy-condition-step"><span class="header-section-number">10</span> Check accuracy condition step</h2>
<p>Finally, we would like to only register this model if the accuracy of the model, as determined by our evaluation step <code>evaluation_step</code>, exceeded some value. A <code>ConditionStep</code> allows for pipelines to support conditional execution in the pipeline DAG based on conditions of step properties.</p>
<p>Below, we will:</p>
<ul>
<li>define a minimum accuracy value as a parameter</li>
<li>define a <code>ConditionGreaterThan</code> on the accuracy value found in the output of the evaluation step, <code>evaluation_step</code>.</li>
<li>use the condition in the list of conditions in a <code>ConditionStep</code></li>
<li>pass the <code>RegisterModel</code> step collection into the <code>if_steps</code> of the <code>ConditionStep</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">min_accuracy_value <span class="op" style="color: #5E5E5E;">=</span> ParameterFloat(</span>
<span id="cb49-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MinAccuracyValue"</span>,</span>
<span id="cb49-3">    default_value<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.33</span> <span class="co" style="color: #5E5E5E;"># random choice from three classes</span></span>
<span id="cb49-4">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.conditions <span class="im" style="color: #00769E;">import</span> ConditionGreaterThanOrEqualTo</span>
<span id="cb50-2"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.condition_step <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb50-3">    ConditionStep,</span>
<span id="cb50-4">    JsonGet,</span>
<span id="cb50-5">)</span>
<span id="cb50-6"></span>
<span id="cb50-7">minimum_accuracy_condition <span class="op" style="color: #5E5E5E;">=</span> ConditionGreaterThanOrEqualTo(</span>
<span id="cb50-8">    left<span class="op" style="color: #5E5E5E;">=</span>JsonGet(</span>
<span id="cb50-9">        step<span class="op" style="color: #5E5E5E;">=</span>evaluation_step,</span>
<span id="cb50-10">        property_file<span class="op" style="color: #5E5E5E;">=</span>evaluation_report,</span>
<span id="cb50-11">        json_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"metrics.accuracy.value"</span>,</span>
<span id="cb50-12">    ),</span>
<span id="cb50-13">    right<span class="op" style="color: #5E5E5E;">=</span>min_accuracy_value <span class="co" style="color: #5E5E5E;"># minimum accuracy threshold</span></span>
<span id="cb50-14">)</span>
<span id="cb50-15"></span>
<span id="cb50-16">minimum_accuracy_condition_step <span class="op" style="color: #5E5E5E;">=</span> ConditionStep(</span>
<span id="cb50-17">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"AccuracyCondition"</span>,</span>
<span id="cb50-18">    conditions<span class="op" style="color: #5E5E5E;">=</span>[minimum_accuracy_condition],</span>
<span id="cb50-19">    if_steps<span class="op" style="color: #5E5E5E;">=</span>[register_step, create_step], <span class="co" style="color: #5E5E5E;"># successfully exceeded or equaled the minimum accuracy, continue with model registration</span></span>
<span id="cb50-20">    else_steps<span class="op" style="color: #5E5E5E;">=</span>[], <span class="co" style="color: #5E5E5E;"># did not exceed the minimum accuracy, the model will not be registered</span></span>
<span id="cb50-21">)</span></code></pre></div>
</div>
</section>
<section id="create-pipeline" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="create-pipeline"><span class="header-section-number">11</span> Create pipeline</h2>
<section id="define-a-pipeline-of-parameters-steps-and-conditions" class="level3" data-number="11.1">
<h3 data-number="11.1" class="anchored" data-anchor-id="define-a-pipeline-of-parameters-steps-and-conditions"><span class="header-section-number">11.1</span> Define a pipeline of parameters, steps, and conditions</h3>
<p>Let’s tie it all up into a workflow pipeline so we can execute it, and even schedule it.</p>
<p>A pipeline requires a <code>name</code>, <code>parameters</code>, and <code>steps</code>. Names must be unique within an <code>(account, region)</code> pair so you can append the timestamp to the name to reduce the chance of name conflict.</p>
<p>Note:</p>
<ul>
<li>All the parameters used in the definitions must be present.</li>
<li>Steps passed into the pipeline need not be in the order of execution. The SageMaker workflow service will resolve the <em>data dependency</em> DAG as steps the execution complete.</li>
<li>Steps must be unique to either pipeline step list or a single condition step if/else list.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;">from</span> sagemaker.workflow.pipeline <span class="im" style="color: #00769E;">import</span> Pipeline</span>
<span id="cb51-2"></span>
<span id="cb51-3">pipeline <span class="op" style="color: #5E5E5E;">=</span> Pipeline(</span>
<span id="cb51-4">    name<span class="op" style="color: #5E5E5E;">=</span>pipeline_name,</span>
<span id="cb51-5">    parameters<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb51-6">        input_data,</span>
<span id="cb51-7">        processing_instance_count,</span>
<span id="cb51-8">        processing_instance_type,</span>
<span id="cb51-9">        max_seq_length,</span>
<span id="cb51-10">        balance_dataset,</span>
<span id="cb51-11">        train_split_percentage,</span>
<span id="cb51-12">        validation_split_percentage,</span>
<span id="cb51-13">        test_split_percentage,</span>
<span id="cb51-14">        feature_store_offline_prefix,</span>
<span id="cb51-15">        feature_group_name,</span>
<span id="cb51-16">        epochs,</span>
<span id="cb51-17">        learning_rate,</span>
<span id="cb51-18">        train_batch_size,</span>
<span id="cb51-19">        train_steps_per_epoch,</span>
<span id="cb51-20">        validation_batch_size,</span>
<span id="cb51-21">        validation_steps_per_epoch,</span>
<span id="cb51-22">        freeze_bert_layer,</span>
<span id="cb51-23">        seed,</span>
<span id="cb51-24">        train_instance_count,</span>
<span id="cb51-25">        train_instance_type,</span>
<span id="cb51-26">        train_volume_size,        </span>
<span id="cb51-27">        input_mode,</span>
<span id="cb51-28">        run_validation,</span>
<span id="cb51-29">        min_accuracy_value,</span>
<span id="cb51-30">        model_approval_status,</span>
<span id="cb51-31">        deploy_instance_type,</span>
<span id="cb51-32">        deploy_instance_count</span>
<span id="cb51-33">    ],</span>
<span id="cb51-34">    steps<span class="op" style="color: #5E5E5E;">=</span>[processing_step, training_step, evaluation_step, minimum_accuracy_condition_step],</span>
<span id="cb51-35">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb51-36">)</span></code></pre></div>
</div>
<p>Let’s examine the JSON of the pipeline definition that meets the SageMaker Workflow Pipeline DSL specification.</p>
<p>By examining the definition, you are also confirming that the pipeline was well-defined, and that the parameters and step properties resolve correctly.</p>
<div class="cell" data-outputid="27f05fa4-8980-4dbb-b3e9-52ba548492b0" data-scrolled="true">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb52-2"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb52-3"></span>
<span id="cb52-4">definition <span class="op" style="color: #5E5E5E;">=</span> json.loads(pipeline.definition())</span>
<span id="cb52-5"></span>
<span id="cb52-6">pprint(definition)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No finished training job found associated with this estimator. Please make sure this estimator is only used for building workflow config</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Metadata': {},
 'Parameters': [{'DefaultValue': 's3://dlai-practical-data-science/data/raw/',
                 'Name': 'InputData',
                 'Type': 'String'},
                {'DefaultValue': 1,
                 'Name': 'ProcessingInstanceCount',
                 'Type': 'Integer'},
                {'DefaultValue': 'ml.c5.2xlarge',
                 'Name': 'ProcessingInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 128,
                 'Name': 'MaxSeqLength',
                 'Type': 'Integer'},
                {'DefaultValue': 'True',
                 'Name': 'BalanceDataset',
                 'Type': 'String'},
                {'DefaultValue': 0.9,
                 'Name': 'TrainSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 0.05,
                 'Name': 'ValidationSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 0.05,
                 'Name': 'TestSplitPercentage',
                 'Type': 'Float'},
                {'DefaultValue': 'reviews-feature-store-1676208665',
                 'Name': 'FeatureStoreOfflinePrefix',
                 'Type': 'String'},
                {'DefaultValue': 'reviews-feature-group-1676208665',
                 'Name': 'FeatureGroupName',
                 'Type': 'String'},
                {'DefaultValue': 3, 'Name': 'Epochs', 'Type': 'Integer'},
                {'DefaultValue': 1e-05,
                 'Name': 'LearningRate',
                 'Type': 'Float'},
                {'DefaultValue': 64,
                 'Name': 'TrainBatchSize',
                 'Type': 'Integer'},
                {'DefaultValue': 50,
                 'Name': 'TrainStepsPerEpoch',
                 'Type': 'Integer'},
                {'DefaultValue': 64,
                 'Name': 'ValidationBatchSize',
                 'Type': 'Integer'},
                {'DefaultValue': 50,
                 'Name': 'ValidationStepsPerEpoch',
                 'Type': 'Integer'},
                {'DefaultValue': 'False',
                 'Name': 'FreezeBertLayer',
                 'Type': 'String'},
                {'DefaultValue': 42, 'Name': 'Seed', 'Type': 'Integer'},
                {'DefaultValue': 1,
                 'Name': 'TrainInstanceCount',
                 'Type': 'Integer'},
                {'DefaultValue': 'ml.c5.9xlarge',
                 'Name': 'TrainInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 256,
                 'Name': 'TrainVolumeSize',
                 'Type': 'Integer'},
                {'DefaultValue': 'File', 'Name': 'InputMode', 'Type': 'String'},
                {'DefaultValue': 'True',
                 'Name': 'RunValidation',
                 'Type': 'String'},
                {'DefaultValue': 0.33,
                 'Name': 'MinAccuracyValue',
                 'Type': 'Float'},
                {'DefaultValue': 'PendingManualApproval',
                 'Name': 'ModelApprovalStatus',
                 'Type': 'String'},
                {'DefaultValue': 'ml.m5.large',
                 'Name': 'DeployInstanceType',
                 'Type': 'String'},
                {'DefaultValue': 1,
                 'Name': 'DeployInstanceCount',
                 'Type': 'Integer'}],
 'Steps': [{'Arguments': {'AppSpecification': {'ContainerArguments': ['--train-split-percentage',
                                                                      '0.9',
                                                                      '--validation-split-percentage',
                                                                      '0.05',
                                                                      '--test-split-percentage',
                                                                      '0.05',
                                                                      '--balance-dataset',
                                                                      'True',
                                                                      '--max-seq-length',
                                                                      '128',
                                                                      '--feature-store-offline-prefix',
                                                                      'reviews-feature-store-1676208665',
                                                                      '--feature-group-name',
                                                                      'reviews-feature-group-1676208665'],
                                               'ContainerEntrypoint': ['python3',
                                                                       '/opt/ml/processing/input/code/prepare_data.py'],
                                               'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
                          'Environment': {'AWS_DEFAULT_REGION': 'us-east-1'},
                          'ProcessingInputs': [{'AppManaged': False,
                                                'InputName': 'raw-input-data',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/data/',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'ShardedByS3Key',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': 'Parameters.InputData'}}},
                                               {'AppManaged': False,
                                                'InputName': 'code',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-37-28-563/input/code/prepare_data.py'}}],
                          'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                                                  'OutputName': 'sentiment-train',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/train',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train'}},
                                                                 {'AppManaged': False,
                                                                  'OutputName': 'sentiment-validation',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/validation',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-validation'}},
                                                                 {'AppManaged': False,
                                                                  'OutputName': 'sentiment-test',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/sentiment/test',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-test'}}]},
                          'ProcessingResources': {'ClusterConfig': {'InstanceCount': {'Get': 'Parameters.ProcessingInstanceCount'},
                                                                    'InstanceType': {'Get': 'Parameters.ProcessingInstanceType'},
                                                                    'VolumeSizeInGB': 30}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role'},
            'Name': 'Processing',
            'Type': 'Processing'},
           {'Arguments': {'AlgorithmSpecification': {'EnableSageMakerMetricsTimeSeries': True,
                                                     'MetricDefinitions': [{'Name': 'validation:loss',
                                                                            'Regex': 'val_loss: '
                                                                                     '([0-9.]+)'},
                                                                           {'Name': 'validation:accuracy',
                                                                            'Regex': 'val_acc: '
                                                                                     '([0-9.]+)'}],
                                                     'TrainingImage': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.6.0-cpu-py3',
                                                     'TrainingInputMode': {'Get': 'Parameters.InputMode'}},
                          'DebugHookConfig': {'CollectionConfigurations': [],
                                              'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'HyperParameters': {'epochs': '3',
                                              'freeze_bert_layer': '"False"',
                                              'learning_rate': '1e-05',
                                              'max_seq_length': '128',
                                              'run_validation': '"True"',
                                              'sagemaker_container_log_level': '20',
                                              'sagemaker_job_name': '"pytorch-training-2023-02-12-13-37-28-707"',
                                              'sagemaker_program': '"train.py"',
                                              'sagemaker_region': '"us-east-1"',
                                              'sagemaker_submit_directory': '"s3://sagemaker-us-east-1-912822595625/pytorch-training-2023-02-12-13-37-28-707/source/sourcedir.tar.gz"',
                                              'seed': '42',
                                              'train_batch_size': '64',
                                              'train_steps_per_epoch': '50',
                                              'validation_batch_size': '64',
                                              'validation_steps_per_epoch': '50'},
                          'InputDataConfig': [{'ChannelName': 'train',
                                               'ContentType': 'text/csv',
                                               'DataSource': {'S3DataSource': {'S3DataDistributionType': 'FullyReplicated',
                                                                               'S3DataType': 'S3Prefix',
                                                                               'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-train'].S3Output.S3Uri"}}}},
                                              {'ChannelName': 'validation',
                                               'ContentType': 'text/csv',
                                               'DataSource': {'S3DataSource': {'S3DataDistributionType': 'FullyReplicated',
                                                                               'S3DataType': 'S3Prefix',
                                                                               'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-validation'].S3Output.S3Uri"}}}}],
                          'OutputDataConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'ProfilerConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-912822595625/'},
                          'ProfilerRuleConfigurations': [{'RuleConfigurationName': 'ProfilerReport-1676209048',
                                                          'RuleEvaluatorImage': '503895931360.dkr.ecr.us-east-1.amazonaws.com/sagemaker-debugger-rules:latest',
                                                          'RuleParameters': {'rule_to_invoke': 'ProfilerReport'}}],
                          'ResourceConfig': {'InstanceCount': {'Get': 'Parameters.TrainInstanceCount'},
                                             'InstanceType': {'Get': 'Parameters.TrainInstanceType'},
                                             'VolumeSizeInGB': {'Get': 'Parameters.TrainVolumeSize'}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                          'StoppingCondition': {'MaxRuntimeInSeconds': 86400}},
            'CacheConfig': {'Enabled': True, 'ExpireAfter': 'PT1H'},
            'Name': 'Train',
            'Type': 'Training'},
           {'Arguments': {'AppSpecification': {'ContainerArguments': ['--max-seq-length',
                                                                      '128'],
                                               'ContainerEntrypoint': ['python3',
                                                                       '/opt/ml/processing/input/code/evaluate_model_metrics.py'],
                                               'ImageUri': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3'},
                          'Environment': {'AWS_DEFAULT_REGION': 'us-east-1'},
                          'ProcessingInputs': [{'AppManaged': False,
                                                'InputName': 'input-1',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/model',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}},
                                               {'AppManaged': False,
                                                'InputName': 'input-2',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/data',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': {'Get': "Steps.Processing.ProcessingOutputConfig.Outputs['sentiment-test'].S3Output.S3Uri"}}},
                                               {'AppManaged': False,
                                                'InputName': 'code',
                                                'S3Input': {'LocalPath': '/opt/ml/processing/input/code',
                                                            'S3CompressionType': 'None',
                                                            'S3DataDistributionType': 'FullyReplicated',
                                                            'S3DataType': 'S3Prefix',
                                                            'S3InputMode': 'File',
                                                            'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-37-29-187/input/code/evaluate_model_metrics.py'}}],
                          'ProcessingOutputConfig': {'Outputs': [{'AppManaged': False,
                                                                  'OutputName': 'metrics',
                                                                  'S3Output': {'LocalPath': '/opt/ml/processing/output/metrics/',
                                                                               'S3UploadMode': 'EndOfJob',
                                                                               'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics'}}]},
                          'ProcessingResources': {'ClusterConfig': {'InstanceCount': {'Get': 'Parameters.ProcessingInstanceCount'},
                                                                    'InstanceType': {'Get': 'Parameters.ProcessingInstanceType'},
                                                                    'VolumeSizeInGB': 30}},
                          'RoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                          'StoppingCondition': {'MaxRuntimeInSeconds': 7200}},
            'Name': 'EvaluateModel',
            'PropertyFiles': [{'FilePath': 'evaluation.json',
                               'OutputName': 'metrics',
                               'PropertyFileName': 'EvaluationReport'}],
            'Type': 'Processing'},
           {'Arguments': {'Conditions': [{'LeftValue': {'Std:JsonGet': {'Path': 'metrics.accuracy.value',
                                                                        'PropertyFile': {'Get': 'Steps.EvaluateModel.PropertyFiles.EvaluationReport'}}},
                                          'RightValue': {'Get': 'Parameters.MinAccuracyValue'},
                                          'Type': 'GreaterThanOrEqualTo'}],
                          'ElseSteps': [],
                          'IfSteps': [{'Arguments': {'InferenceSpecification': {'Containers': [{'Image': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36',
                                                                                                'ModelDataUrl': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}],
                                                                                'SupportedContentTypes': ['application/jsonlines'],
                                                                                'SupportedRealtimeInferenceInstanceTypes': [{'Get': 'Parameters.DeployInstanceType'}],
                                                                                'SupportedResponseMIMETypes': ['application/jsonlines'],
                                                                                'SupportedTransformInstanceTypes': [{'Get': 'Parameters.DeployInstanceType'}]},
                                                     'ModelApprovalStatus': {'Get': 'Parameters.ModelApprovalStatus'},
                                                     'ModelMetrics': {'ModelQuality': {'Statistics': {'ContentType': 'application/json',
                                                                                                      'S3Uri': 's3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics/evaluation.json'}}},
                                                     'ModelPackageGroupName': 'BERT-Reviews-1676208665'},
                                       'Name': 'RegisterModel',
                                       'Type': 'RegisterModel'},
                                      {'Arguments': {'ExecutionRoleArn': 'arn:aws:iam::912822595625:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role',
                                                     'PrimaryContainer': {'Environment': {},
                                                                          'Image': '763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.6.0-cpu-py36',
                                                                          'ModelDataUrl': {'Get': 'Steps.Train.ModelArtifacts.S3ModelArtifacts'}}},
                                       'Name': 'CreateModel',
                                       'Type': 'Model'}]},
            'Name': 'AccuracyCondition',
            'Type': 'Condition'}],
 'Version': '2020-12-01'}</code></pre>
</div>
</div>
<p>Now we create a pipeline using the <code>create</code> method and then print the Amazon Resource Name (ARN) of it.</p>
<div class="cell" data-outputid="8c60e97f-d45b-4ea1-be6e-ee42b7c36822">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">response <span class="op" style="color: #5E5E5E;">=</span> pipeline.create(role_arn<span class="op" style="color: #5E5E5E;">=</span>role)</span>
<span id="cb55-2"></span>
<span id="cb55-3">pipeline_arn <span class="op" style="color: #5E5E5E;">=</span> response[<span class="st" style="color: #20794D;">"PipelineArn"</span>]</span>
<span id="cb55-4"><span class="bu" style="color: null;">print</span>(pipeline_arn)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No finished training job found associated with this estimator. Please make sure this estimator is only used for building workflow config</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665</code></pre>
</div>
</div>
</section>
<section id="start-pipeline" class="level3" data-number="11.2">
<h3 data-number="11.2" class="anchored" data-anchor-id="start-pipeline"><span class="header-section-number">11.2</span> Start Pipeline</h3>
<p>Let’s submit our pipeline definition to the Amazon SageMaker Pipeline service. The role passed in will be used by the service to create all the jobs defined in the steps. We will start the pipeline using the parameters passed into the <code>start()</code> function.</p>
<div class="cell" data-outputid="fed7b243-649f-4834-c4ee-42c21e3ce00d">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">execution <span class="op" style="color: #5E5E5E;">=</span> pipeline.start(</span>
<span id="cb58-2">    parameters<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(</span>
<span id="cb58-3">        InputData<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb58-4">        ProcessingInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb58-5">        ProcessingInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.2xlarge'</span>,</span>
<span id="cb58-6">        MaxSeqLength<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>,</span>
<span id="cb58-7">        BalanceDataset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'True'</span>,</span>
<span id="cb58-8">        TrainSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>,</span>
<span id="cb58-9">        ValidationSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb58-10">        TestSplitPercentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>,</span>
<span id="cb58-11">        FeatureStoreOfflinePrefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews-feature-store-'</span><span class="op" style="color: #5E5E5E;">+</span><span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb58-12">        FeatureGroupName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews-feature-group-'</span><span class="op" style="color: #5E5E5E;">+</span><span class="bu" style="color: null;">str</span>(timestamp),</span>
<span id="cb58-13">        Epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb58-14">        LearningRate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.000012</span>,</span>
<span id="cb58-15">        TrainBatchSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-16">        TrainStepsPerEpoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb58-17">        ValidationBatchSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-18">        ValidationStepsPerEpoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb58-19">        FreezeBertLayer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'False'</span>,</span>
<span id="cb58-20">        Seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>,         </span>
<span id="cb58-21">        TrainInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb58-22">        TrainInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span>,</span>
<span id="cb58-23">        TrainVolumeSize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,</span>
<span id="cb58-24">        InputMode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span>,</span>
<span id="cb58-25">        RunValidation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'True'</span>,</span>
<span id="cb58-26">        MinAccuracyValue<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>,</span>
<span id="cb58-27">        ModelApprovalStatus<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'PendingManualApproval'</span>, </span>
<span id="cb58-28">        DeployInstanceType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb58-29">        DeployInstanceCount<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb58-30">    )</span>
<span id="cb58-31">)</span>
<span id="cb58-32"></span>
<span id="cb58-33"><span class="bu" style="color: null;">print</span>(execution.arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
<section id="wait-for-pipeline-execution" class="level3" data-number="11.3">
<h3 data-number="11.3" class="anchored" data-anchor-id="wait-for-pipeline-execution"><span class="header-section-number">11.3</span> Wait for pipeline execution</h3>
<p>Now we can describe execution instance and list the steps in the execution to find out more about the execution.</p>
<div class="cell" data-outputid="efe604fa-ddc1-4e23-ad4d-203a0aaadfe2">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb60-2"></span>
<span id="cb60-3">execution_run <span class="op" style="color: #5E5E5E;">=</span> execution.describe()</span>
<span id="cb60-4">pprint(execution_run)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'CreatedBy': {'DomainId': 'd-h9yolcap5nrc',
               'UserProfileArn': 'arn:aws:sagemaker:us-east-1:912822595625:user-profile/d-h9yolcap5nrc/sagemaker-user-profile-us-east-1',
               'UserProfileName': 'sagemaker-user-profile-us-east-1'},
 'CreationTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal()),
 'LastModifiedBy': {'DomainId': 'd-h9yolcap5nrc',
                    'UserProfileArn': 'arn:aws:sagemaker:us-east-1:912822595625:user-profile/d-h9yolcap5nrc/sagemaker-user-profile-us-east-1',
                    'UserProfileName': 'sagemaker-user-profile-us-east-1'},
 'LastModifiedTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal()),
 'PipelineArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665',
 'PipelineExecutionArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk',
 'PipelineExecutionDisplayName': 'execution-1676209061894',
 'PipelineExecutionStatus': 'Executing',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '815',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 12 Feb 2023 13:37:46 GMT',
                                      'x-amzn-requestid': '5d8ec01a-6a95-4737-802b-82302f7ab368'},
                      'HTTPStatusCode': 200,
                      'RequestId': '5d8ec01a-6a95-4737-802b-82302f7ab368',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
<p>Print the execution display name and its ARN:</p>
<div class="cell" data-outputid="4da59038-01c5-44fb-8b66-b757f6202406">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">execution_run_name <span class="op" style="color: #5E5E5E;">=</span> execution_run[<span class="st" style="color: #20794D;">'PipelineExecutionDisplayName'</span>]</span>
<span id="cb62-2"><span class="bu" style="color: null;">print</span>(execution_run_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>execution-1676209061894</code></pre>
</div>
</div>
<div class="cell" data-outputid="20e767dc-cde1-493c-b769-fd94a2e32c90">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">pipeline_execution_arn <span class="op" style="color: #5E5E5E;">=</span> execution_run[<span class="st" style="color: #20794D;">'PipelineExecutionArn'</span>]</span>
<span id="cb64-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
<section id="describe-completed-pipeline" class="level3" data-number="11.4">
<h3 data-number="11.4" class="anchored" data-anchor-id="describe-completed-pipeline"><span class="header-section-number">11.4</span> Describe completed pipeline</h3>
<p>We will wait for the first step to start running and print the information about it:</p>
<div class="cell" data-outputid="c02195a7-bafb-4e5d-a1e6-91b1d30d3723">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb66-2"></span>
<span id="cb66-3">time.sleep(<span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb66-4"></span>
<span id="cb66-5">execution.list_steps()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>[{'StepName': 'Processing',
  'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 42, 570000, tzinfo=tzlocal()),
  'StepStatus': 'Executing',
  'AttemptCount': 0,
  'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-processing-mwnbfz07z3'}}}]</code></pre>
</div>
</div>
</section>
<section id="wait-for-the-pipeline-to-complete" class="level3" data-number="11.5">
<h3 data-number="11.5" class="anchored" data-anchor-id="wait-for-the-pipeline-to-complete"><span class="header-section-number">11.5</span> Wait for the pipeline to complete</h3>
<p>To get the information about the pipeline execution we can use a low-level service client of the boto3 session. It is also useful for other operations that you will see below.</p>
<p>In the code below we will be observing the pipeline execution summary and waiting for the execution status to change from <code>Executing</code> to <code>Succeeded</code>.</p>
<div class="cell" data-outputid="380b6722-6362-4805-8654-9e398e28f874">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb68-4"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb68-5"></span>
<span id="cb68-6">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.Session().client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, region_name<span class="op" style="color: #5E5E5E;">=</span>region)</span>
<span id="cb68-7"></span>
<span id="cb68-8">executions_response <span class="op" style="color: #5E5E5E;">=</span> sm.list_pipeline_executions(PipelineName<span class="op" style="color: #5E5E5E;">=</span>pipeline_name)[<span class="st" style="color: #20794D;">'PipelineExecutionSummaries'</span>]</span>
<span id="cb68-9">pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb68-10"><span class="bu" style="color: null;">print</span>(pipeline_execution_status)</span>
<span id="cb68-11"></span>
<span id="cb68-12"><span class="cf" style="color: #003B4F;">while</span> pipeline_execution_status<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'Executing'</span>:</span>
<span id="cb68-13">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb68-14">        executions_response <span class="op" style="color: #5E5E5E;">=</span> sm.list_pipeline_executions(PipelineName<span class="op" style="color: #5E5E5E;">=</span>pipeline_name)[<span class="st" style="color: #20794D;">'PipelineExecutionSummaries'</span>]</span>
<span id="cb68-15">        pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb68-16">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span> <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb68-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Please wait...'</span>)</span>
<span id="cb68-18">        time.sleep(<span class="dv" style="color: #AD0000;">30</span>)    </span>
<span id="cb68-19">    </span>
<span id="cb68-20">pprint(executions_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Executing
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
Please wait...
[{'PipelineExecutionArn': 'arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk',
  'PipelineExecutionDisplayName': 'execution-1676209061894',
  'PipelineExecutionStatus': 'Succeeded',
  'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 41, 761000, tzinfo=tzlocal())}]
CPU times: user 14.7 s, sys: 641 ms, total: 15.4 s
Wall time: 32min 38s</code></pre>
</div>
</div>
<p>We can list the execution steps to check out the status and artifacts:</p>
<div class="cell" data-outputid="35bed80d-fa02-4dbf-8dd7-1c049f4f2b14">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">pipeline_execution_status <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionStatus'</span>]</span>
<span id="cb70-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_status)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Succeeded</code></pre>
</div>
</div>
<div class="cell" data-outputid="ae57cfe1-cc01-4d7f-9509-0a123e8f5fc5">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">pipeline_execution_arn <span class="op" style="color: #5E5E5E;">=</span> executions_response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'PipelineExecutionArn'</span>]</span>
<span id="cb72-2"><span class="bu" style="color: null;">print</span>(pipeline_execution_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:pipeline/bert-pipeline-1676208665/execution/h4inlmq7fqwk</code></pre>
</div>
</div>
</section>
</section>
<section id="evaluate-the-model" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="evaluate-the-model"><span class="header-section-number">12</span> Evaluate the model</h2>
<section id="describe-evaluation-metrics" class="level3" data-number="12.1">
<h3 data-number="12.1" class="anchored" data-anchor-id="describe-evaluation-metrics"><span class="header-section-number">12.1</span> Describe evaluation metrics</h3>
<p>Now we examine the resulting model evaluation after the pipeline completes.</p>
<div class="cell" data-outputid="71c01fc4-2b17-4b05-830c-b54ed89c1e7a">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">processing_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;"># pull the processing step name</span></span>
<span id="cb74-4"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb74-5">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Processing'</span>:</span>
<span id="cb74-6">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb74-7"></span>
<span id="cb74-8"><span class="co" style="color: #5E5E5E;"># get the description of the processing job</span></span>
<span id="cb74-9">describe_transform_processing_job_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_processing_job(ProcessingJobName<span class="op" style="color: #5E5E5E;">=</span>processing_job_name)</span>
<span id="cb74-10"></span>
<span id="cb74-11"><span class="co" style="color: #5E5E5E;"># get the output S3 path</span></span>
<span id="cb74-12">transform_output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> describe_transform_processing_job_response[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>][<span class="st" style="color: #20794D;">'Outputs'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb74-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Transform output </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(transform_output_s3_uri))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Transform output s3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train</code></pre>
</div>
</div>
<div class="cell" data-outputid="9e51d7c5-bbd5-4397-e79b-4a8112a8674d">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># list the files in the resulting output S3 path</span></span>
<span id="cb76-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $transform_output_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-12 13:48:45    4882265 sagemaker-scikit-learn-2023-02-12-13-32-20-378/output/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Let’s pull the name of the model-evaluation step and then get the S3 path of the evaluation metrics, which will contain the evaluation report.</p>
<div class="cell" data-outputid="89be571d-1417-4fff-ed89-7429df045686">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">processing_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb78-2"></span>
<span id="cb78-3"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb78-4">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'EvaluateModel'</span>: </span>
<span id="cb78-5">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb78-6"></span>
<span id="cb78-7">describe_evaluation_processing_job_response <span class="op" style="color: #5E5E5E;">=</span> sm.describe_processing_job(ProcessingJobName<span class="op" style="color: #5E5E5E;">=</span>processing_job_name)</span>
<span id="cb78-8"></span>
<span id="cb78-9">evaluation_metrics_s3_uri <span class="op" style="color: #5E5E5E;">=</span> describe_evaluation_processing_job_response[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>][<span class="st" style="color: #20794D;">'Outputs'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb78-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Evaluation output </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(evaluation_metrics_s3_uri))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Evaluation output s3://sagemaker-us-east-1-912822595625/sagemaker-scikit-learn-2023-02-12-13-35-32-414/output/metrics</code></pre>
</div>
</div>
</section>
<section id="review-the-evaluation-report" class="level3" data-number="12.2">
<h3 data-number="12.2" class="anchored" data-anchor-id="review-the-evaluation-report"><span class="header-section-number">12.2</span> Review the evaluation report</h3>
<p>Download the evaluation report and print the accuracy.</p>
<div class="cell" data-outputid="7b1c79b8-2c63-4392-d604-57888208403b">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb80-2"></span>
<span id="cb80-3">evaluation_json <span class="op" style="color: #5E5E5E;">=</span> sagemaker.s3.S3Downloader.read_file(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/evaluation.json"</span>.<span class="bu" style="color: null;">format</span>(</span>
<span id="cb80-4">    evaluation_metrics_s3_uri</span>
<span id="cb80-5">))</span>
<span id="cb80-6"></span>
<span id="cb80-7">pprint(json.loads(evaluation_json))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'metrics': {'accuracy': {'value': 0.7313915857605178}}}</code></pre>
</div>
</div>
</section>
<section id="list-pipeline-artifacts" class="level3" data-number="12.3">
<h3 data-number="12.3" class="anchored" data-anchor-id="list-pipeline-artifacts"><span class="header-section-number">12.3</span> List pipeline artifacts</h3>
<p>Now let’s find and print the ARN and job name of the training job.</p>
<div class="cell" data-outputid="7ab73b20-8c68-4d38-b603-d2bea3a64094">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">training_job_arn<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb82-2"></span>
<span id="cb82-3"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb82-4">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Train'</span>:</span>
<span id="cb82-5">        training_job_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'TrainingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]        </span>
<span id="cb82-6">        pprint(execution_step)</span>
<span id="cb82-7">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb82-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job ARN: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_arn))</span>
<span id="cb82-9">        </span>
<span id="cb82-10">training_job_name <span class="op" style="color: #5E5E5E;">=</span> training_job_arn.split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb82-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job Name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 4, 49, 838000, tzinfo=tzlocal()),
 'Metadata': {'TrainingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 48, 54, 641000, tzinfo=tzlocal()),
 'StepName': 'Train',
 'StepStatus': 'Succeeded'}
Training job ARN: arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5
Training job Name: pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5</code></pre>
</div>
</div>
<p>Using similar approach we can find and print the pipeline artifacts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">processing_job_name<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span>
<span id="cb84-2">training_job_name<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="0cf68005-c1d1-4277-9e23-ea043e62f970">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb85-2"><span class="im" style="color: #00769E;">from</span> sagemaker.lineage.visualizer <span class="im" style="color: #00769E;">import</span> LineageTableVisualizer</span>
<span id="cb85-3"></span>
<span id="cb85-4">viz <span class="op" style="color: #5E5E5E;">=</span> LineageTableVisualizer(sagemaker.session.Session())</span>
<span id="cb85-5"></span>
<span id="cb85-6"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">reversed</span>(execution.list_steps()):</span>
<span id="cb85-7">    pprint(execution_step)</span>
<span id="cb85-8">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Processing'</span>:</span>
<span id="cb85-9">        processing_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'ProcessingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(processing_job_name))</span>
<span id="cb85-11">        display(viz.show(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>processing_job_name))</span>
<span id="cb85-12">    <span class="cf" style="color: #003B4F;">elif</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Train'</span>:</span>
<span id="cb85-13">        training_job_name<span class="op" style="color: #5E5E5E;">=</span>execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'TrainingJob'</span>][<span class="st" style="color: #20794D;">'Arn'</span>].split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-14">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span>
<span id="cb85-15">        display(viz.show(training_job_name<span class="op" style="color: #5E5E5E;">=</span>training_job_name))</span>
<span id="cb85-16">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb85-17">        display(viz.show(pipeline_execution_step<span class="op" style="color: #5E5E5E;">=</span>execution_step))</span>
<span id="cb85-18">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 13, 48, 53, 920000, tzinfo=tzlocal()),
 'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-processing-mwnbfz07z3'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 37, 42, 570000, tzinfo=tzlocal()),
 'StepName': 'Processing',
 'StepStatus': 'Succeeded'}
Processing job name: pipelines-h4inlmq7fqwk-processing-mwnbfz07z3</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...-13-37-36-257/input/code/prepare_data.py</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://dlai-practical-data-science/data/raw/</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>68331...om/sagemaker-scikit-learn:0.23-1-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>s3://...02-12-13-32-20-378/output/sentiment-test</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>4</th>
      <td>s3://...13-32-20-378/output/sentiment-validation</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>5</th>
      <td>s3://...2-12-13-32-20-378/output/sentiment-train</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 4, 49, 838000, tzinfo=tzlocal()),
 'Metadata': {'TrainingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:training-job/pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5'}},
 'StartTime': datetime.datetime(2023, 2, 12, 13, 48, 54, 641000, tzinfo=tzlocal()),
 'StepName': 'Train',
 'StepStatus': 'Succeeded'}
Training job name: pipelines-h4inlmq7fqwk-Train-nYXyWGwBe5</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...13-32-20-378/output/sentiment-validation</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://...2-12-13-32-20-378/output/sentiment-train</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>76310...onaws.com/pytorch-training:1.6.0-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Output</td>
      <td>Model</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 48, 729000, tzinfo=tzlocal()),
 'Metadata': {'ProcessingJob': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:processing-job/pipelines-h4inlmq7fqwk-evaluatemodel-uqvunnu2ks'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 4, 50, 615000, tzinfo=tzlocal()),
 'StepName': 'EvaluateModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...640/input/code/evaluate_model_metrics.py</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>s3://...02-12-13-32-20-378/output/sentiment-test</td>
      <td>Input</td>
      <td>DataSet</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Input</td>
      <td>Model</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>3</th>
      <td>68331...om/sagemaker-scikit-learn:0.23-1-cpu-py3</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>4</th>
      <td>s3://...n-2023-02-12-13-35-32-414/output/metrics</td>
      <td>Output</td>
      <td>DataSet</td>
      <td>Produced</td>
      <td>artifact</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 50, 320000, tzinfo=tzlocal()),
 'Metadata': {'Condition': {'Outcome': 'True'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 49, 585000, tzinfo=tzlocal()),
 'StepName': 'AccuracyCondition',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 52, 545000, tzinfo=tzlocal()),
 'Metadata': {'Model': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:model/pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 51, 78000, tzinfo=tzlocal()),
 'StepName': 'CreateModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AttemptCount': 0,
 'EndTime': datetime.datetime(2023, 2, 12, 14, 10, 52, 324000, tzinfo=tzlocal()),
 'Metadata': {'RegisterModel': {'Arn': 'arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1'}},
 'StartTime': datetime.datetime(2023, 2, 12, 14, 10, 51, 78000, tzinfo=tzlocal()),
 'StepName': 'RegisterModel',
 'StepStatus': 'Succeeded'}</code></pre>
</div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Name/Source</th>
      <th>Direction</th>
      <th>Type</th>
      <th>Association Type</th>
      <th>Lineage Type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>s3://...qwk-Train-nYXyWGwBe5/output/model.tar.gz</td>
      <td>Input</td>
      <td>Model</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>1</th>
      <td>76310...aws.com/pytorch-inference:1.6.0-cpu-py36</td>
      <td>Input</td>
      <td>Image</td>
      <td>ContributedTo</td>
      <td>artifact</td>
    </tr>
    <tr>
      <th>2</th>
      <td>bert-reviews-1676208665-1-PendingManualApprova...</td>
      <td>Input</td>
      <td>Approval</td>
      <td>ContributedTo</td>
      <td>action</td>
    </tr>
    <tr>
      <th>3</th>
      <td>BERT-Reviews-1676208665-1676211052-aws-model-p...</td>
      <td>Output</td>
      <td>ModelGroup</td>
      <td>AssociatedWith</td>
      <td>context</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="deploy-and-test-the-model" class="level2" data-number="13">
<h2 data-number="13" class="anchored" data-anchor-id="deploy-and-test-the-model"><span class="header-section-number">13</span> Deploy and test the model</h2>
<section id="approve-trained-model" class="level3" data-number="13.1">
<h3 data-number="13.1" class="anchored" data-anchor-id="approve-trained-model"><span class="header-section-number">13.1</span> Approve trained model</h3>
<p>The pipeline created a model package version within the specified model package group and an approval status of <code>PendingManualApproval</code>. This requires a separate step to manually approve the model before deploying to production.</p>
<p>We can approve the model using the SageMaker Studio UI or programmatically as shown below.</p>
<p>Get the model package ARN.</p>
<div class="cell" data-outputid="b5a1f02f-625f-43b6-9c17-18972e1ca6b1">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb94-2">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'RegisterModel'</span>:</span>
<span id="cb94-3">        model_package_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'RegisterModel'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]</span>
<span id="cb94-4">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb94-5"><span class="bu" style="color: null;">print</span>(model_package_arn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1</code></pre>
</div>
</div>
<p>Update the model package with the <code>Approved</code> status to prepare for deployment.</p>
<p>The model must be <code>Approved</code> before it can be deployed.</p>
<div class="cell" data-outputid="49ae389d-3b0b-4529-b77c-09f035f94b9c">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">model_package_update_response <span class="op" style="color: #5E5E5E;">=</span> sm.update_model_package(</span>
<span id="cb96-2">    ModelPackageArn<span class="op" style="color: #5E5E5E;">=</span>model_package_arn,</span>
<span id="cb96-3">    ModelApprovalStatus<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Approved"</span>,</span>
<span id="cb96-4">)</span>
<span id="cb96-5"></span>
<span id="cb96-6">pprint(model_package_update_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'ModelPackageArn': 'arn:aws:sagemaker:us-east-1:912822595625:model-package/bert-reviews-1676208665/1',
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '102',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 12 Feb 2023 14:15:24 GMT',
                                      'x-amzn-requestid': '95e70fcf-b3f0-4925-be40-73450c40a5ec'},
                      'HTTPStatusCode': 200,
                      'RequestId': '95e70fcf-b3f0-4925-be40-73450c40a5ec',
                      'RetryAttempts': 0}}</code></pre>
</div>
</div>
</section>
<section id="deploy-model" class="level3" data-number="13.2">
<h3 data-number="13.2" class="anchored" data-anchor-id="deploy-model"><span class="header-section-number">13.2</span> Deploy model</h3>
<p>Get the model ARN and the model name from it.</p>
<div class="cell" data-outputid="4a79b3a9-63ca-4182-dfed-063d0827cb1b">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="cf" style="color: #003B4F;">for</span> execution_step <span class="kw" style="color: #003B4F;">in</span> execution.list_steps():</span>
<span id="cb98-2">    <span class="bu" style="color: null;">print</span>(execution_step[<span class="st" style="color: #20794D;">'StepName'</span>])</span>
<span id="cb98-3">    <span class="cf" style="color: #003B4F;">if</span> execution_step[<span class="st" style="color: #20794D;">'StepName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'CreateModel'</span>:</span>
<span id="cb98-4">        model_arn <span class="op" style="color: #5E5E5E;">=</span> execution_step[<span class="st" style="color: #20794D;">'Metadata'</span>][<span class="st" style="color: #20794D;">'Model'</span>][<span class="st" style="color: #20794D;">'Arn'</span>]</span>
<span id="cb98-5">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb98-6"><span class="bu" style="color: null;">print</span>(model_arn)</span>
<span id="cb98-7"></span>
<span id="cb98-8">model_name <span class="op" style="color: #5E5E5E;">=</span> model_arn.split(<span class="st" style="color: #20794D;">'/'</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb98-9"><span class="bu" style="color: null;">print</span>(model_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RegisterModel
CreateModel
arn:aws:sagemaker:us-east-1:912822595625:model/pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6
pipelines-h4inlmq7fqwk-createmodel-tu0lobcfq6</code></pre>
</div>
</div>
</section>
<section id="create-endpoint-from-registry" class="level3" data-number="13.3">
<h3 data-number="13.3" class="anchored" data-anchor-id="create-endpoint-from-registry"><span class="header-section-number">13.3</span> Create endpoint from registry</h3>
<p>Configure the endpoint.</p>
<div class="cell" data-outputid="8d65d1cc-8ed2-4682-8eae-52ad417070e9">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">endpoint_config_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-epc-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb100-2"><span class="bu" style="color: null;">print</span>(endpoint_config_name)</span>
<span id="cb100-3"></span>
<span id="cb100-4">create_endpoint_config_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint_config(</span>
<span id="cb100-5">    EndpointConfigName <span class="op" style="color: #5E5E5E;">=</span> endpoint_config_name,</span>
<span id="cb100-6">    ProductionVariants<span class="op" style="color: #5E5E5E;">=</span>[{</span>
<span id="cb100-7">        <span class="st" style="color: #20794D;">'InstanceType'</span>:<span class="st" style="color: #20794D;">'ml.m5.xlarge'</span>,</span>
<span id="cb100-8">        <span class="st" style="color: #20794D;">'InitialVariantWeight'</span>:<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb100-9">        <span class="st" style="color: #20794D;">'InitialInstanceCount'</span>:<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb100-10">        <span class="st" style="color: #20794D;">'ModelName'</span>: model_name,</span>
<span id="cb100-11">        <span class="st" style="color: #20794D;">'VariantName'</span>:<span class="st" style="color: #20794D;">'AllTraffic'</span>}])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bert-model-epc-1676208665</code></pre>
</div>
</div>
<p>Create the endpoint.</p>
<div class="cell" data-outputid="8e6c05ae-6a88-4e71-fc09-307995983c70">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">pipeline_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'bert-model-ep-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span>
<span id="cb102-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"EndpointName=</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(pipeline_endpoint_name))</span>
<span id="cb102-3"></span>
<span id="cb102-4">create_endpoint_response <span class="op" style="color: #5E5E5E;">=</span> sm.create_endpoint(</span>
<span id="cb102-5">    EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name,</span>
<span id="cb102-6">    EndpointConfigName<span class="op" style="color: #5E5E5E;">=</span>endpoint_config_name)</span>
<span id="cb102-7"><span class="bu" style="color: null;">print</span>(create_endpoint_response[<span class="st" style="color: #20794D;">'EndpointArn'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>EndpointName=bert-model-ep-1676208665
arn:aws:sagemaker:us-east-1:912822595625:endpoint/bert-model-ep-1676208665</code></pre>
</div>
</div>
<div class="cell" data-outputid="816fc01f-bff8-404c-fe80-f4d416405b6a">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb104-2"></span>
<span id="cb104-3"><span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb104-4">    <span class="cf" style="color: #003B4F;">try</span>: </span>
<span id="cb104-5">        waiter <span class="op" style="color: #5E5E5E;">=</span> sm.get_waiter(<span class="st" style="color: #20794D;">'endpoint_in_service'</span>)</span>
<span id="cb104-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Waiting for endpoint to be in `InService`...'</span>)</span>
<span id="cb104-7">        waiter.wait(EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name)</span>
<span id="cb104-8">        <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb104-9">    <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb104-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Waiting for endpoint...'</span>)</span>
<span id="cb104-11">        endpoint_status <span class="op" style="color: #5E5E5E;">=</span> sm.describe_endpoint(EndpointName<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name)[<span class="st" style="color: #20794D;">'EndpointStatus'</span>]</span>
<span id="cb104-12">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(endpoint_status))</span>
<span id="cb104-13">        <span class="cf" style="color: #003B4F;">if</span> endpoint_status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Failed'</span>:</span>
<span id="cb104-14">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb104-15">        time.sleep(<span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb104-16">        </span>
<span id="cb104-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint deployed.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Waiting for endpoint to be in `InService`...
Endpoint deployed.
CPU times: user 109 ms, sys: 30.6 ms, total: 140 ms
Wall time: 4min 31s</code></pre>
</div>
</div>
</section>
<section id="test-model" class="level3" data-number="13.4">
<h3 data-number="13.4" class="anchored" data-anchor-id="test-model"><span class="header-section-number">13.4</span> Test model</h3>
<p>Let’s predict the <code>sentiment</code> with <code>review_body</code> samples and review the result:</p>
<div class="cell" data-outputid="09f68f38-d201-44c0-a111-5ff2b2b7da19">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb106-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb106-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb106-4"></span>
<span id="cb106-5">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb106-6">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb106-7">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb106-8">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb106-9">]</span>
<span id="cb106-10"></span>
<span id="cb106-11">predictor <span class="op" style="color: #5E5E5E;">=</span> Predictor(</span>
<span id="cb106-12">    endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pipeline_endpoint_name,</span>
<span id="cb106-13">    serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(),</span>
<span id="cb106-14">    deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer(),</span>
<span id="cb106-15">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb106-16">)</span>
<span id="cb106-17"></span>
<span id="cb106-18">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb106-19"></span>
<span id="cb106-20"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb106-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9203698635101318
Predicted class 0 with probability 0.44024962186813354
Predicted class -1 with probability 0.778016209602356</code></pre>
</div>
</div>
</section>
<section id="sagemaker-studio-extensions" class="level3" data-number="13.5">
<h3 data-number="13.5" class="anchored" data-anchor-id="sagemaker-studio-extensions"><span class="header-section-number">13.5</span> SageMaker Studio extensions</h3>
<p>SageMaker Studio provides a rich set of features to visually inspect SageMaker resources including pipelines, training jobs, and endpoints.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sm_studio_extensions_pipelines.png" title="Sagemaker Studio Extensions" class="img-fluid"></p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="14">
<h2 data-number="14" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">14</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-12-building-aws-sagemaker-pipeline-train-deploy-bert-text-classifier.html</guid>
  <pubDate>Sun, 12 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Train a Review Classifier with BERT and Amazon SageMaker</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In the previous article we performed <a href="2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html">Feature Engineering on a raw dataset of product text reviews</a> using AWS Sagemaker, preparing it for training the model. Now we will train a text classifier using a variant of BERT called <a href="https://arxiv.org/abs/1907.11692">RoBERTa</a> - a Robustly Optimized BERT Pretraining Approach - within a PyTorch model ran as a SageMaker Training Job.</p>
<p>Let’s review the Amazon SageMaker “Bring Your Own Script” scheme:</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/sagemaker_scriptmode.png" title="AWS Bring your own script scheme" class="img-fluid"></p>
<p>In this project we will cover each part of this scheme. First, we need to install and import the required modules:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w2'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-14">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-15"></span>
<span id="cb1-16">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-17">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-18"></span>
<span id="cb1-19">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-20">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-21">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="aws-built-in-algorithms-vs-pre-trained-models" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="aws-built-in-algorithms-vs-pre-trained-models"><span class="header-section-number">2</span> AWS Built-in algorithms vs Pre-Trained Models</h2>
<p>Training an NLP model from scratch can be a very time-consuming and expensive. For example, training the BERT models 110 or 340 million parameters from scratch could take multiple days, depending on the CPU or GPU resources you have available. Luckily, there are many pretrained models available, which you can use to simply adapt them to your use case and your data set.</p>
<p>Lets also highlight the differences between AWS built-in algorithms and pretrained models. In <a href="https://livingdatalab.com/categories/#aws">earlier articles</a>, we looked at how to use built-in AWS algorithms, for example, the blazing text algorithm, to quickly train a model.</p>
<p>The built-in algorithm all required code to train the text classifier. We just pointed the algorithm to the prepared training data. In this project, we will work with pretrained models. <strong>The main difference here is that the model has already been trained on large collections of text data.</strong> For example, wikipedia text data.</p>
<p>We looked at <a href="https://livingdatalab.com/categories/#fastai">pre-trained deep learning models previously as the Fastai deep learning library provides these by default</a>.</p>
<p>With pre-trained models there are usually 2 steps:</p>
<ul>
<li><strong>Model pre-training</strong>: a task to help the model understand language better e.g.&nbsp;to predict the next word in a sequence</li>
<li><strong>Model fine-tuning</strong>: the main task at hand, where we use the pre-trained model that already understands language well and then customise that for a task e.g.&nbsp;classify text for sentiment</li>
</ul>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_model_pretrain_finetune.png" title="Pre-training and fine tuning models" class="img-fluid"></p>
<p>This helps improve the speed and performance of training a deep learning model by using a pre-training step, as opposed to say training a deep learning text classifier from scratch. This concept is also known as <em>transfer learning</em>.</p>
<p>Here using AWS we will provide specific text data, the product reviews data, to adapt a pre-trained model to our text domain and also provide the task and model training code. We wll be telling the pretrained model to perform a text classification task, with the three sentiment classes supplied.</p>
</section>
<section id="pre-trained-bert-and-roberta-models" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="pre-trained-bert-and-roberta-models"><span class="header-section-number">3</span> Pre-Trained BERT and Roberta Models</h2>
<p>While you can use BERT as is without training from scratch, it’s useful to understand how BERT uses word masking and next sentence prediction in parallel to learn and understand language. As BERT sees new text, the model masks 15 percent of the words in each sentence. BERT then predicts the masked words and corrects itself, meaning it updates the model weights when it predicts incorrectly.</p>
<p>This step is called <em>masked language model or masked LM</em>. Masking forces the model to learn the surrounding words for each sentence. At the same time, BERT is masking and predicting words, or to be more precise, input tokens. It is also performing next sentence prediction, or NSP, on pairs of input sequences.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_pretrain.png" title="Pretraining a BERT Model" class="img-fluid"></p>
<p>To perform NSP, BERT randomly chooses 50 percent of the sentence pairs and replaces one of the two sentences with a random sentence from another part of the document. BERT then predicts if the two sentences are a valid sentence pair or not. BERT again will correct itself when it predicts incorrectly. Both of those training tasks are performed in parallel to create a single accuracy score for the combined training efforts.</p>
<p>This results in a more robust model capable of performing word and sentence level predictive tasks. The input data is large collections of unlabeled text.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_finetune.png" title="Finetuning a BERT Model" class="img-fluid"></p>
<p>Since BERT has already been pre-trained on millions of public documents from Wikipedia and the Google Books corpus, the vocabulary and learned representations are indeed transferable to a large number of NLP and NLU tasks across a wide variety of domains.</p>
<p>In the fine-tuning step, you also configure the model for the actual NLP task, such as question and answer, text classification, or a named entity recognition. Fine-tuning is implemented as supervised learning and no masking or next sentence prediction happens. As a result, fine-tuning is very fast and requires a relatively small number of samples or product reviews, in our case.</p>
<p>The RoBERTa model architecture builds on BERT’s language masking strategy, but removes the next sentence pre-training objective. It also trains with much larger mini-batches and learning rates and with a 160 gigabyte of text, RoBERTa also uses much more training data compared to BERT, which is pre-trained with 16 gigabytes of text data.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_roberta.png" title="AWS Pretrain &amp; Finetune a Roberta Model" class="img-fluid"></p>
<p>These model architecture changes focus on building an even better performing masked language model for the NLP downstream tasks, such as text classification.</p>
</section>
<section id="configure-dataset-hyper-parameters-and-evaluation-metrics" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="configure-dataset-hyper-parameters-and-evaluation-metrics"><span class="header-section-number">4</span> Configure dataset, hyper-parameters and evaluation metrics</h2>
<section id="configure-dataset" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">4.1</span> Configure dataset</h3>
<p>We have already transformed and balanced the data into a format that the model expects. Let’s copy this data to S3. We will be using training and validation datasets to train the model. The test dataset will be used for tuning later.</p>
<p>Let’s setup the paths:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/sentiment-train/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb3-2">processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/sentiment-validation/'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span></code></pre></div>
</div>
<p>Upload the data to S3 bucket:</p>
<div class="cell" data-outputid="48c9d0c2-2eb4-4c7b-a335-b5dd46a30dbb">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train $processed_train_data_s3_uri</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive .<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-215290792315/data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
upload: data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to s3://sagemaker-us-east-1-215290792315/data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Check the existence of those files in the S3 bucket:</p>
<div class="cell" data-outputid="ef3a5da4-a37e-4137-94f9-e3cce56b85b2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_train_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-11 11:21:43    4894416 data/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="46dd16e0-7745-4a9f-dc96-e3cc57e84bed">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive $processed_validation_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-11 11:21:44     276522 data/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>We need to setup the input data channels, wrapping the S3 locations in a <code>TrainingInput</code> object to use with the SageMaker Training Job. This can be organized as a dictionary where training and validation data are the Amazon SageMaker channels for S3 input data sources.</p>
<p>Let’s create a train data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">s3_input_train_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb10-2">    s3_data<span class="op" style="color: #5E5E5E;">=</span>processed_train_data_s3_uri </span>
<span id="cb10-3">)</span></code></pre></div>
</div>
<p>Now create a validation data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">s3_input_validation_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb11-2">    s3_data<span class="op" style="color: #5E5E5E;">=</span>processed_validation_data_s3_uri </span>
<span id="cb11-3">)</span></code></pre></div>
</div>
<p>Organize the data channels defined above as a dictionary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb12-2">    <span class="st" style="color: #20794D;">'train'</span>: s3_input_train_data, </span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">'validation'</span>: s3_input_validation_data </span>
<span id="cb12-4">}</span></code></pre></div>
</div>
</section>
<section id="configure-model-hyper-parameters" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="configure-model-hyper-parameters"><span class="header-section-number">4.2</span> Configure model hyper-parameters</h3>
<p>Now we need to set the Training Job parameters including the instance type, instance count, learning rate, batch size etc. For the purposes of this project, we will use a relatively small instance type. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this link</a> for additional instance types that may work for your use cases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span> <span class="co" style="color: #5E5E5E;"># maximum number of input tokens passed to BERT model</span></span>
<span id="cb13-2">freeze_bert_layer<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># specifies the depth of training within the network</span></span>
<span id="cb13-3">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb13-4">learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2e-5</span></span>
<span id="cb13-5">train_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-6">train_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-7">validation_batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-8">validation_steps_per_epoch<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-9">seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb13-10">run_validation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb13-11"></span>
<span id="cb13-12">train_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-13">train_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.9xlarge'</span></span>
<span id="cb13-14">train_volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span></span>
<span id="cb13-15">input_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'File'</span></span></code></pre></div>
</div>
<p>Some of them will be passed into the PyTorch estimator in the hyperparameters argument. Let’s setup the dictionary for that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">hyperparameters<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb14-2">    <span class="st" style="color: #20794D;">'max_seq_length'</span>: max_seq_length,</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'freeze_bert_layer'</span>: freeze_bert_layer,</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'epochs'</span>: epochs,</span>
<span id="cb14-5">    <span class="st" style="color: #20794D;">'learning_rate'</span>: learning_rate,</span>
<span id="cb14-6">    <span class="st" style="color: #20794D;">'train_batch_size'</span>: train_batch_size,</span>
<span id="cb14-7">    <span class="st" style="color: #20794D;">'train_steps_per_epoch'</span>: train_steps_per_epoch,</span>
<span id="cb14-8">    <span class="st" style="color: #20794D;">'validation_batch_size'</span>: validation_batch_size,</span>
<span id="cb14-9">    <span class="st" style="color: #20794D;">'validation_steps_per_epoch'</span>: validation_steps_per_epoch,    </span>
<span id="cb14-10">    <span class="st" style="color: #20794D;">'seed'</span>: seed,</span>
<span id="cb14-11">    <span class="st" style="color: #20794D;">'run_validation'</span>: run_validation</span>
<span id="cb14-12">}</span></code></pre></div>
</div>
</section>
<section id="setup-evaluation-metrics" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="setup-evaluation-metrics"><span class="header-section-number">4.3</span> Setup evaluation metrics</h3>
<p>We will choose loss and accuracy as the evaluation metrics. The regular expressions <code>Regex</code> will capture the values of metrics that the algorithm will emit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">metric_definitions <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb15-2">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:loss'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_loss: ([0-9.]+)'</span>},</span>
<span id="cb15-3">     {<span class="st" style="color: #20794D;">'Name'</span>: <span class="st" style="color: #20794D;">'validation:accuracy'</span>, <span class="st" style="color: #20794D;">'Regex'</span>: <span class="st" style="color: #20794D;">'val_acc: ([0-9.]+)'</span>},</span>
<span id="cb15-4">]</span></code></pre></div>
</div>
<p>For example, these sample log lines…</p>
<pre><code>[step: 100] val_loss: 0.76 - val_acc: 70.92%</code></pre>
<p>…will produce the following metrics in CloudWatch:</p>
<p><code>validation:loss</code> = 0.76</p>
<p><code>validation:accuracy</code> = 70.92</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/cloudwatch_validation_metrics.png" title="Evaluation metrics" class="img-fluid"></p>
</section>
<section id="setup-debugger-and-profiler" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="setup-debugger-and-profiler"><span class="header-section-number">4.4</span> Setup Debugger and Profiler</h3>
<p>Amazon SageMaker Debugger can be used to profile machine learning models, helping to identify and fix training issues caused by hardware resource usage. Setting some parameters in the SageMaker estimator, without any change to the training code, can enable the collection of infrastructure and model metrics such as: CPU and GPU, RAM and GPU RAM, data loading time, time spent in ML operators running on CPU and GPU, distributed training metrics and many more.</p>
<p>In addition, we can visualize how much time is spent in different phases, such as preprocessing, training loop, and postprocessing. If needed, you can drill down on each training epoch, and even on each function in your training script.</p>
<p>You can define Debugger Rules as are described here: https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> Rule, ProfilerRule, rule_configs</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> DebuggerHookConfig</span>
<span id="cb17-3"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> ProfilerConfig, FrameworkProfile</span></code></pre></div>
</div>
<p><code>DebuggerHookConfig</code> provides options to customize how debugging information is emitted and saved. <code>s3_output_path</code> argument value defines the location in Amazon S3 to store the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">debugger_hook_config <span class="op" style="color: #5E5E5E;">=</span> DebuggerHookConfig(</span>
<span id="cb18-2">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(bucket),</span>
<span id="cb18-3">)</span></code></pre></div>
</div>
<p><code>ProfilerConfig</code> sets the configuration for collecting system and framework metrics of SageMaker Training Jobs. Parameter <code>system_monitor_interval_millis</code> sets the time interval to collect system metrics (in milliseconds). Parameter <code>framework_profile_params</code> is the object for framework metrics profiling. Here we will set its local path, the step at which to start profiling, <code>start_step</code>, and the number of steps to profile, <code>num_steps</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">from</span> sagemaker.debugger <span class="im" style="color: #00769E;">import</span> ProfilerConfig, FrameworkProfile</span>
<span id="cb19-2"></span>
<span id="cb19-3">profiler_config <span class="op" style="color: #5E5E5E;">=</span> ProfilerConfig(</span>
<span id="cb19-4">    system_monitor_interval_millis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">500</span>,</span>
<span id="cb19-5">    framework_profile_params<span class="op" style="color: #5E5E5E;">=</span>FrameworkProfile(local_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/opt/ml/output/profiler/"</span>, start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, num_steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb19-6">)</span></code></pre></div>
</div>
<p>For monitoring and profiling the built-in rules we can use the <code>ProfilerReport</code>. It creates a profiling report and updates when the individual rules are triggered. If you trigger this <code>ProfilerReport</code> rule without any customized parameter as in the cell below, then the <code>ProfilerReport</code> rule triggers all of the built-in rules for monitoring and profiling with their default parameter values.</p>
<p>The profiling report can be downloaded while the Training Job is running or after the job has finished.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">rules<span class="op" style="color: #5E5E5E;">=</span>[ProfilerRule.sagemaker(rule_configs.ProfilerReport())]</span></code></pre></div>
</div>
</section>
</section>
<section id="train-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="train-model"><span class="header-section-number">5</span> Train model</h2>
<section id="setup-the-roberta-and-pytorch-script-to-run-on-sagemaker" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="setup-the-roberta-and-pytorch-script-to-run-on-sagemaker"><span class="header-section-number">5.1</span> Setup the RoBERTa and PyTorch script to run on SageMaker</h3>
<p>We will prepare the PyTorch model to run as a SageMaker Training Job in a separate Python file, which will be called during the training.</p>
<p>Here we will be using the pre-trained model <code>roberta-base</code>. The information about the available models can be found in the <a href="https://huggingface.co/models">Hugging Face website</a>.</p>
<div class="cell" data-outputid="c2e3988f-0967-4dd0-8353-d13e7f71b752">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;">import</span> sys, importlib</span>
<span id="cb21-2">sys.path.append(<span class="st" style="color: #20794D;">'src/'</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="im" style="color: #00769E;">import</span> train</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;"># reload the module if it has been previously loaded</span></span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'train'</span> <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb21-8">    importlib.<span class="bu" style="color: null;">reload</span>(train)</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;"># Ignore warnings below</span></span>
<span id="cb21-11">config <span class="op" style="color: #5E5E5E;">=</span> train.configure_model()</span>
<span id="cb21-12"></span>
<span id="cb21-13">label_0 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb21-14">label_1 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-15">label_2 <span class="op" style="color: #5E5E5E;">=</span> config.id2label[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb21-16"></span>
<span id="cb21-17">updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb21-18"></span>
<span id="cb21-19"><span class="cf" style="color: #003B4F;">if</span> label_0 <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">or</span> label_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="kw" style="color: #003B4F;">or</span> label_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb21-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'#######################################################################################'</span>)</span>
<span id="cb21-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">configure_model</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/train.py is complete.'</span>)</span>
<span id="cb21-22">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'########################################################################################'</span>)</span>
<span id="cb21-23">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="st" style="color: #20794D;">'Check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">configure_model</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/train.py is complete.'</span>)</span>
<span id="cb21-24"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb21-25">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)    </span>
<span id="cb21-26">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Updated correctly!'</span>)        </span>
<span id="cb21-27">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)        </span>
<span id="cb21-28"></span>
<span id="cb21-29">    updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3913195754df496ab1e9b41497fc6739","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
##################
Updated correctly!
##################</code></pre>
</div>
</div>
<p>Setup the PyTorch estimator to train our model. For more information on the PyTorch estimator, see the documentation <a href="https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/sagemaker.pytorch.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch <span class="im" style="color: #00769E;">import</span> PyTorch <span class="im" style="color: #00769E;">as</span> PyTorchEstimator</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="cf" style="color: #003B4F;">if</span> updated_correctly:</span>
<span id="cb23-4">    estimator <span class="op" style="color: #5E5E5E;">=</span> PyTorchEstimator(</span>
<span id="cb23-5">        entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train.py'</span>,</span>
<span id="cb23-6">        source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb23-7">        role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb23-8">        instance_count<span class="op" style="color: #5E5E5E;">=</span>train_instance_count,</span>
<span id="cb23-9">        instance_type<span class="op" style="color: #5E5E5E;">=</span>train_instance_type,</span>
<span id="cb23-10">        volume_size<span class="op" style="color: #5E5E5E;">=</span>train_volume_size,</span>
<span id="cb23-11">        py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>, <span class="co" style="color: #5E5E5E;"># dynamically retrieves the correct training image (Python 3)</span></span>
<span id="cb23-12">        framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>, <span class="co" style="color: #5E5E5E;"># dynamically retrieves the correct training image (PyTorch)</span></span>
<span id="cb23-13">        hyperparameters<span class="op" style="color: #5E5E5E;">=</span>hyperparameters,</span>
<span id="cb23-14">        metric_definitions<span class="op" style="color: #5E5E5E;">=</span>metric_definitions,</span>
<span id="cb23-15">        input_mode<span class="op" style="color: #5E5E5E;">=</span>input_mode,</span>
<span id="cb23-16">        debugger_hook_config<span class="op" style="color: #5E5E5E;">=</span>debugger_hook_config,</span>
<span id="cb23-17">        profiler_config<span class="op" style="color: #5E5E5E;">=</span>profiler_config,</span>
<span id="cb23-18">        rules<span class="op" style="color: #5E5E5E;">=</span>rules</span>
<span id="cb23-19">    )</span></code></pre></div>
</div>
<p>Lets now launch the SageMaker Training Job which will be fitting the model to the dataset. We can use the <code>estimator.fit</code> function, passing the configured train and validation inputs (data channels).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">estimator.fit(</span>
<span id="cb24-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb24-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb24-4">)</span></code></pre></div>
</div>
<p>We can refer to the last Training Job using the estimator function <code>latest_training_job</code>. Then the Training Job name can be found with the <code>name</code> function:</p>
<div class="cell" data-outputid="985f7efd-a155-4784-b1bd-5e2c9a5a2ec5">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.name</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-2023-02-11-11-22-02-024</code></pre>
</div>
</div>
<p>We can also load the information about the Training Job using the function <code>describe()</code>. The result is in dictionary format. Let’s check that it has the same Training Job name:</p>
<div class="cell" data-outputid="83c51a67-93dc-436a-9b22-b682c806c683">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.describe()[<span class="st" style="color: #20794D;">'TrainingJobName'</span>]</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job name: pytorch-training-2023-02-11-11-22-02-024</code></pre>
</div>
</div>
<p>Let’s pull the Training Job status from the Training Job description.</p>
<div class="cell" data-outputid="17e1fd2c-3db0-458f-ead5-bc7391134802">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;">print</span>(estimator.latest_training_job.describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['TrainingJobName', 'TrainingJobArn', 'TrainingJobStatus', 'SecondaryStatus', 'HyperParameters', 'AlgorithmSpecification', 'RoleArn', 'InputDataConfig', 'OutputDataConfig', 'ResourceConfig', 'StoppingCondition', 'CreationTime', 'LastModifiedTime', 'SecondaryStatusTransitions', 'EnableNetworkIsolation', 'EnableInterContainerTrafficEncryption', 'EnableManagedSpotTraining', 'DebugHookConfig', 'ProfilerConfig', 'ProfilerRuleConfigurations', 'ProfilerRuleEvaluationStatuses', 'ProfilingStatus', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="8f57ce0a-fa4c-48ba-b246-db24734663c5">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">training_job_status_primary <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.describe()[<span class="st" style="color: #20794D;">'TrainingJobStatus'</span>] </span>
<span id="cb31-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_status_primary))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job status: InProgress</code></pre>
</div>
</div>
<p>Wait for the Training Job to complete.</p>
<div class="cell" data-outputid="752461d7-2cf6-4cd7-d043-1a143e0f5281">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb33-2"></span>
<span id="cb33-3">estimator.latest_training_job.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
2023-02-11 11:44:39 Starting - Preparing the instances for training
2023-02-11 11:44:39 Downloading - Downloading input data
2023-02-11 11:44:39 Training - Training image download completed. Training in progress.....................................................................................................................................................................................................................
2023-02-11 12:02:56 Uploading - Uploading generated training model....................................
2023-02-11 12:06:06 Completed - Training job completed
CPU times: user 1.19 s, sys: 131 ms, total: 1.32 s
Wall time: 21min 9s</code></pre>
</div>
</div>
<p>Review the training metrics.</p>
<div class="cell" data-outputid="a8344d15-8a6f-498c-9457-da067937674c">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df_metrics <span class="op" style="color: #5E5E5E;">=</span> estimator.training_job_analytics.dataframe()</span>
<span id="cb35-2">df_metrics</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>timestamp</th>
      <th>metric_name</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>validation:loss</td>
      <td>1.10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1320.0</td>
      <td>validation:loss</td>
      <td>1.02</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1800.0</td>
      <td>validation:loss</td>
      <td>0.66</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.0</td>
      <td>validation:accuracy</td>
      <td>34.77</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1320.0</td>
      <td>validation:accuracy</td>
      <td>50.39</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1800.0</td>
      <td>validation:accuracy</td>
      <td>69.14</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can query and plot the training metrics:</p>
<div class="cell" data-outputid="6a84ab14-11fb-40ce-d96d-0e29e4dd3ae5">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df_metrics.query(<span class="st" style="color: #20794D;">"metric_name=='validation:accuracy'"</span>).plot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'timestamp'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'value'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f40865b1a90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="download-sagemaker-debugger-profiling-report" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="download-sagemaker-debugger-profiling-report"><span class="header-section-number">5.2</span> Download SageMaker debugger profiling report</h3>
<p>We can download and review the debugger profiling report.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">profiler_report_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/rule-output/ProfilerReport/profiler-output"</span>.<span class="bu" style="color: null;">format</span>(bucket, training_job_name)</span></code></pre></div>
</div>
<p>Then we can list the report files:</p>
<div class="cell" data-outputid="89304a1b-e467-4bcc-b7c8-03d89d655527">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $profiler_report_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                           PRE profiler-reports/
2023-02-11 12:03:09     364394 profiler-report.html
2023-02-11 12:03:08     211444 profiler-report.ipynb</code></pre>
</div>
</div>
<p>The folder <code>profiler-reports</code> contains the built-in rule analysis components, stored in JSON and a Jupyter notebook. They are aggregated into the report.</p>
<div class="cell" data-outputid="f391389f-c01c-4fa4-9687-9711abd67366">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive $profiler_report_s3_uri .<span class="op" style="color: #5E5E5E;">/</span>profiler_report<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/CPUBottleneck.json to profiler_report/profiler-reports/CPUBottleneck.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/MaxInitializationTime.json to profiler_report/profiler-reports/MaxInitializationTime.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/Dataloader.json to profiler_report/profiler-reports/Dataloader.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/OverallFrameworkMetrics.json to profiler_report/profiler-reports/OverallFrameworkMetrics.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/BatchSize.json to profiler_report/profiler-reports/BatchSize.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/OverallSystemUsage.json to profiler_report/profiler-reports/OverallSystemUsage.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/GPUMemoryIncrease.json to profiler_report/profiler-reports/GPUMemoryIncrease.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/IOBottleneck.json to profiler_report/profiler-reports/IOBottleneck.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/LoadBalancing.json to profiler_report/profiler-reports/LoadBalancing.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-report.ipynb to profiler_report/profiler-report.ipynb
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/LowGPUUtilization.json to profiler_report/profiler-reports/LowGPUUtilization.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-reports/StepOutlier.json to profiler_report/profiler-reports/StepOutlier.json
download: s3://sagemaker-us-east-1-215290792315/pytorch-training-2023-02-11-11-22-02-024/rule-output/ProfilerReport/profiler-output/profiler-report.html to profiler_report/profiler-report.html</code></pre>
</div>
</div>
<p>You can review the profiler report <a href="https://pranath.github.io/pds/profiler-report.html">here</a>.</p>
</section>
</section>
<section id="deploy-the-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="deploy-the-model"><span class="header-section-number">6</span> Deploy the model</h2>
<p>Now we will create a custom <code>SentimentPredictor</code> that encapsulates a JSONLines serializer and deserializer. To be passed into the <code>PyTorchModel</code> it needs to be wrapped as a class.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;">from</span> sagemaker.predictor <span class="im" style="color: #00769E;">import</span> Predictor</span>
<span id="cb43-2"><span class="im" style="color: #00769E;">from</span> sagemaker.serializers <span class="im" style="color: #00769E;">import</span> JSONLinesSerializer</span>
<span id="cb43-3"><span class="im" style="color: #00769E;">from</span> sagemaker.deserializers <span class="im" style="color: #00769E;">import</span> JSONLinesDeserializer</span>
<span id="cb43-4"></span>
<span id="cb43-5"><span class="kw" style="color: #003B4F;">class</span> SentimentPredictor(Predictor):</span>
<span id="cb43-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, endpoint_name, sagemaker_session):</span>
<span id="cb43-7">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(endpoint_name, </span>
<span id="cb43-8">                         sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sagemaker_session, </span>
<span id="cb43-9">                         serializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesSerializer(),</span>
<span id="cb43-10">                         deserializer<span class="op" style="color: #5E5E5E;">=</span>JSONLinesDeserializer())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb44-2"><span class="im" style="color: #00769E;">from</span> sagemaker.pytorch.model <span class="im" style="color: #00769E;">import</span> PyTorchModel</span>
<span id="cb44-3"></span>
<span id="cb44-4">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb44-5"></span>
<span id="cb44-6">pytorch_model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name, <span class="st" style="color: #20794D;">'pt'</span>, timestamp)</span>
<span id="cb44-7"></span>
<span id="cb44-8">model <span class="op" style="color: #5E5E5E;">=</span> PyTorchModel(name<span class="op" style="color: #5E5E5E;">=</span>pytorch_model_name,</span>
<span id="cb44-9">                     model_data<span class="op" style="color: #5E5E5E;">=</span>estimator.model_data,</span>
<span id="cb44-10">                     predictor_cls<span class="op" style="color: #5E5E5E;">=</span>SentimentPredictor,</span>
<span id="cb44-11">                     entry_point<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'inference.py'</span>,</span>
<span id="cb44-12">                     source_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src'</span>,</span>
<span id="cb44-13">                     framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'1.6.0'</span>,</span>
<span id="cb44-14">                     py_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'py3'</span>,</span>
<span id="cb44-15">                     role<span class="op" style="color: #5E5E5E;">=</span>role)</span></code></pre></div>
</div>
<div class="cell" data-outputid="4922a522-8c15-428f-a648-02597f213c11">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb45-2"></span>
<span id="cb45-3">pytorch_endpoint_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name, <span class="st" style="color: #20794D;">'pt'</span>, timestamp)</span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="bu" style="color: null;">print</span>(pytorch_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>pytorch-training-2023-02-11-11-22-02-024-pt-1676117278</code></pre>
</div>
</div>
<p>Now we deploy the model as an endpoint.</p>
<div class="cell" data-outputid="72355abe-ebf0-4fa7-8079-7ee6c2bdba90">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb47-2"></span>
<span id="cb47-3">predictor <span class="op" style="color: #5E5E5E;">=</span> model.deploy(initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb47-4">                         instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>, </span>
<span id="cb47-5">                         endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pytorch_endpoint_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------!CPU times: user 2min 15s, sys: 9.35 s, total: 2min 25s
Wall time: 7min 23s</code></pre>
</div>
</div>
</section>
<section id="test-model" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="test-model"><span class="header-section-number">7</span> Test model</h2>
<p>Here, we will pass sample strings of text to the endpoint in order to see the sentiment. We will try one example of each sentiment.</p>
<div class="cell" data-outputid="47d672de-b9cb-48f6-b13e-2c3a277ebb99">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">inputs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb49-2">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"I love this product!"</span>]},</span>
<span id="cb49-3">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"OK, but not great."</span>]},</span>
<span id="cb49-4">    {<span class="st" style="color: #20794D;">"features"</span>: [<span class="st" style="color: #20794D;">"This is not the right product."</span>]},</span>
<span id="cb49-5">]</span>
<span id="cb49-6"></span>
<span id="cb49-7">predictor <span class="op" style="color: #5E5E5E;">=</span> SentimentPredictor(endpoint_name<span class="op" style="color: #5E5E5E;">=</span>pytorch_endpoint_name,</span>
<span id="cb49-8">                               sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span>
<span id="cb49-9"></span>
<span id="cb49-10">predicted_classes <span class="op" style="color: #5E5E5E;">=</span> predictor.predict(inputs)</span>
<span id="cb49-11"></span>
<span id="cb49-12"><span class="cf" style="color: #003B4F;">for</span> predicted_class <span class="kw" style="color: #003B4F;">in</span> predicted_classes:</span>
<span id="cb49-13">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Predicted class </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> with probability </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(predicted_class[<span class="st" style="color: #20794D;">'predicted_label'</span>], predicted_class[<span class="st" style="color: #20794D;">'probability'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class 1 with probability 0.9605445861816406
Predicted class 0 with probability 0.5798221230506897
Predicted class -1 with probability 0.7667604684829712</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">8</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-11-train-reviews-text-classifier-with-bert-and-aws-sagemaker.html</guid>
  <pubDate>Sat, 11 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Feature Transformation with Amazon SageMaker Processing Job and Feature Store</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will look at the <strong>Prepare &amp; Transform</strong> stage using AWS including:</p>
<ul>
<li>Feature engineering</li>
<li>Feature store</li>
</ul>
<p>Using the raw <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> dataset - we will prepare it to train a BERT-based natural language processing (NLP) model. The model will be used to classify customer reviews into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>We will convert the original review text into machine-readable features used by BERT. To perform the required feature transformation we will configure an Amazon SageMaker processing job, which will be running a custom Python script.</p>
</section>
<section id="the-bert-language-model" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="the-bert-language-model"><span class="header-section-number">2</span> The Bert language model</h2>
<p>BERT stands for ‘Bidirectional Encoder Representations from Transformers’. So Bert language models are based on the transformer type models first created in 2017.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_history.png" title="The History of Language Models" class="img-fluid"></p>
<p>In a <a href="2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext.html">previous article we used a Blazing Text Language Model</a> to create a text classifier. Blazing Text language models are in turn based on Word2Vec type language models. But how do word2vec/Blazing text language models work? essentially these models convert individual words into a series of numbers or a <em>vector</em>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_blazingtext_embed.png" title="Blazing Text Embeddings" class="img-fluid"></p>
<p>I used word2vec in one of my first data science/deep learning projects back in 2019 <a href="https://docs.google.com/presentation/d/164oDiuEZFR35X9QEJN1R-rOb4sp5r32DxR4Xm6z-Qgs/edit#slide=id.p">classifying disaster text messages</a>.</p>
<p>This means with word2vec similar meaning words will have similar numbers and vector positions, this is what this language model learns. The downside of this approach though is it allows only for one sense of what a word might mean - but we know in practice the meaning of a word can be effected by the context.</p>
<p>For example, if we were trying to decide if these two phrases were positive or negative:</p>
<ul>
<li>I love the dress</li>
<li>I love the dress, but not the price</li>
</ul>
<p>A word2vec model might end up giving quite positive sentiment to both of these phrases when summing up the meaning of these words individually, yet we can see that the second phrase might have more neutral if not negative sentiment, because here ‘love’, usually positive, has been modified by the context of the words its within.</p>
<p>This is one key thing that transformer models such as BERT or GPT can do, <strong>they can take into account the context of a word, and indeed process an entire phrase in one go to give a vector for that group of words, rather than for one word at a time.</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_bert_embed.png" title="The Bert Embeddings" class="img-fluid"></p>
<p>In particular transformers use <em>attention</em> to capture the relationship and meaning between words used together. You can find out more about the differences between word2vec and transformer models <a href="https://towardsdatascience.com/word2vec-to-transformers-caf5a3daa08a">here</a>.</p>
</section>
<section id="feature-engineering-at-scale" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="feature-engineering-at-scale"><span class="header-section-number">3</span> Feature Engineering at Scale</h2>
<p>Amazon SageMaker processing allows you to perform data related tasks such as, preprocessing, postprocessing, and model evaluation at scale. SageMaker processing provides this capability by using a distributed cluster. By specifying some parameters, you can control how many notes and the type of the notes that make up the distributed cluster.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_processing.png" title="Amazon SageMaker Processing" class="img-fluid"></p>
<p>Sagemaker Feature Store is a fully managed service that provides purpose-built feature store. SageMaker Feature Store provides you with a centralized repository to securely save and serve features from.</p>
<p>Next, SageMaker Feature Store provides you with the capabilities to reuse the features, not just across a single machine learning project, but across multiple projects. A typical challenge that data scientist sees is training an inference skew that could result from discrepancies in the data used for training and the data used for inferencing. Sagemaker Feature Store helps reduce the skew by reusing the features across training and inference traces and by keeping the features consistent.</p>
<p>Finally, SageMaker Feature Store provides the capabilities to create it for the features both in real time and batch. The ability to creating for features in real time suppose use cases such as near real time ML predictions. Similarly, the ability to look up features in batch mode can be used to support use cases, such as model training.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_feature_store.png" title="AWS Feature Store" class="img-fluid"></p>
</section>
<section id="import-libraries-initialise" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="import-libraries-initialise"><span class="header-section-number">4</span> Import Libraries &amp; Initialise</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-4"></span>
<span id="cb1-5">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c2/w1'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-8">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-9">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-10"></span>
<span id="cb1-11">featurestore_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker-featurestore-runtime'</span>, </span>
<span id="cb1-12">                                    config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-13"></span>
<span id="cb1-14">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-15">                         sagemaker_featurestore_runtime_client<span class="op" style="color: #5E5E5E;">=</span>featurestore_runtime)</span>
<span id="cb1-16"></span>
<span id="cb1-17">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-18">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-19">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
</section>
<section id="configure-the-sagemaker-feature-store" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="configure-the-sagemaker-feature-store"><span class="header-section-number">5</span> Configure the SageMaker Feature Store</h2>
<section id="configure-dataset" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="configure-dataset"><span class="header-section-number">5.1</span> Configure dataset</h3>
<p>The raw dataset is in the public S3 bucket. Let’s start by specifying the S3 location of it:</p>
<div class="cell" data-outputid="b4ddde35-0d6b-4320-a9be-f29a22f1be3c">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">raw_input_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/raw/'</span></span>
<span id="cb2-2"><span class="bu" style="color: null;">print</span>(raw_input_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://dlai-practical-data-science/data/raw/</code></pre>
</div>
</div>
<p>List the files in the S3 bucket (in this case it will be just one file):</p>
<div class="cell" data-outputid="5712b73b-7dd8-47d6-b0a9-f2b69298a913">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $raw_input_data_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="configure-the-sagemaker-feature-store-1" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="configure-the-sagemaker-feature-store-1"><span class="header-section-number">5.2</span> Configure the SageMaker feature store</h3>
<p>As the result of the transformation, in addition to generating files in S3 bucket, we will also save the transformed data in the <strong>Amazon SageMaker Feature Store</strong> to be used by others in our organization, for example.</p>
<p>To configure a Feature Store we need to setup a <strong>Feature Group</strong>. This is the main resource containing all of the metadata related to the data stored in the Feature Store.</p>
<p>A Feature Group should contain a list of <strong>Feature Definitions</strong>. A Feature Definition consists of a name and the data type. The Feature Group also contains an online store configuration and an offline store configuration controlling where the data is stored. Enabling the online store allows quick access to the latest value for a record via the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_GetRecord.html">GetRecord API</a>. The offline store allows storage of the data in your S3 bucket. We will be using the offline store here.</p>
<p>Let’s setup the Feature Group name and the Feature Store offline prefix in S3 bucket.</p>
<div class="cell" data-outputid="fc9ed9db-1b5f-4575-f4f9-516bcb663856">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb6-2">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb6-3"></span>
<span id="cb6-4">feature_group_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews-feature-group-'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb6-5">feature_store_offline_prefix <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews-feature-store-'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(timestamp)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Feature group name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_group_name))</span>
<span id="cb6-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Feature store offline prefix in S3: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_store_offline_prefix))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Feature group name: reviews-feature-group-1675799708
Feature store offline prefix in S3: reviews-feature-store-1675799708</code></pre>
</div>
</div>
<p>Taking two features from the original raw dataset (<code>Review Text</code> and <code>Rating</code>), we will transform it preparing to be used for the model training and then to be saved in the Feature Store. Here we will define the related features to be stored as a list of <code>FeatureDefinition</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">from</span> sagemaker.feature_store.feature_definition <span class="im" style="color: #00769E;">import</span> (</span>
<span id="cb8-2">    FeatureDefinition,</span>
<span id="cb8-3">    FeatureTypeEnum,</span>
<span id="cb8-4">)</span>
<span id="cb8-5"></span>
<span id="cb8-6">feature_definitions<span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;"># unique ID of the review</span></span>
<span id="cb8-8">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'review_id'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING), </span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;"># ingestion timestamp</span></span>
<span id="cb8-10">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'date'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;"># sentiment: -1 (negative), 0 (neutral) or 1 (positive). It will be found the Rating values (1, 2, 3, 4, 5)</span></span>
<span id="cb8-12">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING), </span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;"># label ID of the target class (sentiment)</span></span>
<span id="cb8-14">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'label_id'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;"># reviews encoded with the BERT tokenizer</span></span>
<span id="cb8-16">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'input_ids'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;"># original Review Text</span></span>
<span id="cb8-18">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'review_body'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING),</span>
<span id="cb8-19">    <span class="co" style="color: #5E5E5E;"># train/validation/test label</span></span>
<span id="cb8-20">    FeatureDefinition(feature_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'split_type'</span>, feature_type<span class="op" style="color: #5E5E5E;">=</span>FeatureTypeEnum.STRING)</span>
<span id="cb8-21">]</span></code></pre></div>
</div>
<p>Let’s create the feature group using the feature definitions defined above.</p>
<div class="cell" data-outputid="1bb637b8-7887-46dd-8634-575fc8095b69">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">from</span> sagemaker.feature_store.feature_group <span class="im" style="color: #00769E;">import</span> FeatureGroup</span>
<span id="cb9-2"></span>
<span id="cb9-3">feature_group <span class="op" style="color: #5E5E5E;">=</span> FeatureGroup(</span>
<span id="cb9-4">    name<span class="op" style="color: #5E5E5E;">=</span>feature_group_name, </span>
<span id="cb9-5">    feature_definitions<span class="op" style="color: #5E5E5E;">=</span>feature_definitions, </span>
<span id="cb9-6">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb9-7">)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="bu" style="color: null;">print</span>(feature_group)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FeatureGroup(name='reviews-feature-group-1675799708', sagemaker_session=&lt;sagemaker.session.Session object at 0x7f9cb912c350&gt;, feature_definitions=[FeatureDefinition(feature_name='review_id', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='date', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='sentiment', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='label_id', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='input_ids', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='review_body', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;), FeatureDefinition(feature_name='split_type', feature_type=&lt;FeatureTypeEnum.STRING: 'String'&gt;)])</code></pre>
</div>
</div>
<p>We will use the defined Feature Group later in this project, the actual creation of the Feature Group will take place in the processing job. Now let’s move into the setup of the processing job to transform the dataset.</p>
</section>
</section>
<section id="transform-the-dataset" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="transform-the-dataset"><span class="header-section-number">6</span> Transform the dataset</h2>
<p>We will configure a SageMaker processing job to run a custom Python script to balance and transform the raw data into a format used by BERT model.</p>
<p>Let’s set the transformation parameters including the instance type, instance count, and train/validation/test split percentages. We will use a relatively small instance type for this project. Please refer to <a href="https://aws.amazon.com/sagemaker/pricing/">this</a> link for additional instance types that may work for your use case.</p>
<p>We can also choose whether you want to balance the dataset or not. In this case, we will balance the dataset to avoid class imbalance in the target variable, <code>sentiment</code>.</p>
<p>Another important parameter of the model is the <code>max_seq_length</code>, which specifies the maximum length of the classified reviews for the RoBERTa model. If the sentence is shorter than the maximum length parameter, it will be padded. In another case, when the sentence is longer, it will be truncated from the right side.</p>
<p>Since a smaller <code>max_seq_length</code> leads to faster training and lower resource utilization, you want to find the smallest power-of-2 that captures <code>100%</code> of our reviews. For this dataset, the <code>100th</code> percentile is <code>115</code>. However, it’s best to stick with powers-of-2 when using BERT. So let’s choose <code>128</code> as this is the smallest power-of-2 greater than <code>115</code>. We will see below how the shorter sentences will be padded to a maximum length.</p>
<pre><code>mean        52.512374
std         31.387048
min          1.000000
10%         10.000000
20%         22.000000
30%         32.000000
40%         41.000000
50%         51.000000
60%         61.000000
70%         73.000000
80%         88.000000
90%         97.000000
100%       115.000000
max        115.000000</code></pre>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/distribution_num_words_per_review.png" title="Histogram of text sequence lengths" class="img-fluid"></p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">processing_instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.c5.xlarge'</span></span>
<span id="cb12-2">processing_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-3">train_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.90</span></span>
<span id="cb12-4">validation_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb12-5">test_split_percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb12-6">balance_dataset<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb12-7">max_seq_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span></span></code></pre></div>
</div>
<p>To balance and transform our data, we will use a scikit-learn-based processing job. This is essentially a generic Python processing job with scikit-learn pre-installed. We can specify the version of scikit-learn we wish to use. Also we will pass the SageMaker execution role, processing instance type and instance count.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> sagemaker.sklearn.processing <span class="im" style="color: #00769E;">import</span> SKLearnProcessor</span>
<span id="cb13-2"></span>
<span id="cb13-3">processor <span class="op" style="color: #5E5E5E;">=</span> SKLearnProcessor(</span>
<span id="cb13-4">    framework_version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'0.23-1'</span>,</span>
<span id="cb13-5">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb13-6">    instance_type<span class="op" style="color: #5E5E5E;">=</span>processing_instance_type,</span>
<span id="cb13-7">    instance_count<span class="op" style="color: #5E5E5E;">=</span>processing_instance_count,</span>
<span id="cb13-8">    env<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AWS_DEFAULT_REGION'</span>: region},                             </span>
<span id="cb13-9">    max_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb13-10">)</span></code></pre></div>
</div>
<p>The processing job will be running the Python code from the file <a href="https://github.com/pranath/pds/blob/main/prepare_data.py"><code>src/prepare_data.py</code></a>.</p>
<div class="cell" data-outputid="36d16e53-c76f-4665-9a17-5cbaa581c55c">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> sys, importlib</span>
<span id="cb14-2">sys.path.append(<span class="st" style="color: #20794D;">'src/'</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;"># import the `prepare_data.py` module</span></span>
<span id="cb14-5"><span class="im" style="color: #00769E;">import</span> prepare_data</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;"># reload the module if it has been previously loaded </span></span>
<span id="cb14-8"><span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'prepare_data'</span> <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb14-9">    importlib.<span class="bu" style="color: null;">reload</span>(prepare_data)</span>
<span id="cb14-10"></span>
<span id="cb14-11">input_ids <span class="op" style="color: #5E5E5E;">=</span> prepare_data.convert_to_bert_input_ids(<span class="st" style="color: #20794D;">"this product is great!"</span>, max_seq_length)</span>
<span id="cb14-12">    </span>
<span id="cb14-13">updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(input_ids) <span class="op" style="color: #5E5E5E;">!=</span> max_seq_length:</span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">Exception</span>(<span class="st" style="color: #20794D;">'Please check that the function </span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">convert_to_bert_input_ids</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;"> in the file src/prepare_data.py is complete.'</span>)</span>
<span id="cb14-17"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb14-18">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)</span>
<span id="cb14-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Updated correctly!'</span>)</span>
<span id="cb14-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'##################'</span>)</span>
<span id="cb14-21"></span>
<span id="cb14-22">    updated_correctly <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>##################
Updated correctly!
##################</code></pre>
</div>
</div>
<div class="cell" data-outputid="1d816a68-2ca9-4893-c5d9-b942dfe893e7">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">input_ids <span class="op" style="color: #5E5E5E;">=</span> prepare_data.convert_to_bert_input_ids(<span class="st" style="color: #20794D;">"this product is great!"</span>, max_seq_length)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="bu" style="color: null;">print</span>(input_ids)</span>
<span id="cb16-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Length of the sequence: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">len</span>(input_ids)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 9226, 1152, 16, 372, 328, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Length of the sequence: 128</code></pre>
</div>
</div>
<p>Now we launch the processing job with the custom script passing defined above parameters.</p>
<div class="cell" data-outputid="bcbfb17d-a9cf-4bc3-f0b6-c3ffd4bb542b">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">from</span> sagemaker.processing <span class="im" style="color: #00769E;">import</span> ProcessingInput, ProcessingOutput</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;">if</span> (updated_correctly):</span>
<span id="cb18-4"></span>
<span id="cb18-5">    processor.run(code<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'src/prepare_data.py'</span>,</span>
<span id="cb18-6">              inputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb18-7">                    ProcessingInput(source<span class="op" style="color: #5E5E5E;">=</span>raw_input_data_s3_uri,</span>
<span id="cb18-8">                                    destination<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/input/data/'</span>,</span>
<span id="cb18-9">                                    s3_data_distribution_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ShardedByS3Key'</span>)</span>
<span id="cb18-10">              ],</span>
<span id="cb18-11">              outputs<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb18-12">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-train'</span>,</span>
<span id="cb18-13">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/train'</span>,</span>
<span id="cb18-14">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb18-15">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-validation'</span>,</span>
<span id="cb18-16">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/validation'</span>,</span>
<span id="cb18-17">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>),</span>
<span id="cb18-18">                    ProcessingOutput(output_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment-test'</span>,</span>
<span id="cb18-19">                                     source<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'/opt/ml/processing/output/sentiment/test'</span>,</span>
<span id="cb18-20">                                     s3_upload_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'EndOfJob'</span>)</span>
<span id="cb18-21">              ],</span>
<span id="cb18-22">              arguments<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'--train-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(train_split_percentage),</span>
<span id="cb18-23">                         <span class="st" style="color: #20794D;">'--validation-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(validation_split_percentage),</span>
<span id="cb18-24">                         <span class="st" style="color: #20794D;">'--test-split-percentage'</span>, <span class="bu" style="color: null;">str</span>(test_split_percentage),</span>
<span id="cb18-25">                         <span class="st" style="color: #20794D;">'--balance-dataset'</span>, <span class="bu" style="color: null;">str</span>(balance_dataset),</span>
<span id="cb18-26">                         <span class="st" style="color: #20794D;">'--max-seq-length'</span>, <span class="bu" style="color: null;">str</span>(max_seq_length),                         </span>
<span id="cb18-27">                         <span class="st" style="color: #20794D;">'--feature-store-offline-prefix'</span>, <span class="bu" style="color: null;">str</span>(feature_store_offline_prefix),</span>
<span id="cb18-28">                         <span class="st" style="color: #20794D;">'--feature-group-name'</span>, <span class="bu" style="color: null;">str</span>(feature_group_name)                         </span>
<span id="cb18-29">              ],</span>
<span id="cb18-30">              logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb18-31">              wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  sagemaker-scikit-learn-2023-02-07-19-57-59-405
Inputs:  [{'InputName': 'input-1', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://dlai-practical-data-science/data/raw/', 'LocalPath': '/opt/ml/processing/input/data/', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'ShardedByS3Key', 'S3CompressionType': 'None'}}, {'InputName': 'code', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/input/code/prepare_data.py', 'LocalPath': '/opt/ml/processing/input/code', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'sentiment-train', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train', 'LocalPath': '/opt/ml/processing/output/sentiment/train', 'S3UploadMode': 'EndOfJob'}}, {'OutputName': 'sentiment-validation', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation', 'LocalPath': '/opt/ml/processing/output/sentiment/validation', 'S3UploadMode': 'EndOfJob'}}, {'OutputName': 'sentiment-test', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test', 'LocalPath': '/opt/ml/processing/output/sentiment/test', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<p>You can see the information about the processing jobs using the <code>describe</code> function. The result is in dictionary format. Let’s pull the processing job name:</p>
<div class="cell" data-outputid="30efa06b-9280-4261-e383-cfdb58d55f4d" data-scrolled="true">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">scikit_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobName'</span>]</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job name: sagemaker-scikit-learn-2023-02-07-19-57-59-405</code></pre>
</div>
</div>
<p>Let’s pull the processing job status from the processing job description.</p>
<div class="cell" data-outputid="bbb0d2fb-094a-4cbb-ad88-fc1dc5c6a48f" data-scrolled="true">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;">print</span>(processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe().keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['ProcessingInputs', 'ProcessingOutputConfig', 'ProcessingJobName', 'ProcessingResources', 'StoppingCondition', 'AppSpecification', 'Environment', 'RoleArn', 'ProcessingJobArn', 'ProcessingJobStatus', 'LastModifiedTime', 'CreationTime', 'ResponseMetadata'])</code></pre>
</div>
</div>
<div class="cell" data-outputid="f88ffba6-dd55-4c57-ff3e-60f28e7819ea" data-scrolled="true">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">scikit_processing_job_status <span class="op" style="color: #5E5E5E;">=</span> processor.jobs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].describe()[<span class="st" style="color: #20794D;">'ProcessingJobStatus'</span>]</span>
<span id="cb24-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Processing job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(scikit_processing_job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing job status: InProgress</code></pre>
</div>
</div>
<div class="cell" data-outputid="d7e17737-e44f-439d-e860-9ad9045b906b">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb26-2"></span>
<span id="cb26-3">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(</span>
<span id="cb26-4">    processing_job_name<span class="op" style="color: #5E5E5E;">=</span>scikit_processing_job_name,</span>
<span id="cb26-5">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb26-6">)</span>
<span id="cb26-7"></span>
<span id="cb26-8">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>....................................................................................................................................!CPU times: user 647 ms, sys: 44.3 ms, total: 691 ms
Wall time: 11min 13s</code></pre>
</div>
</div>
<p>Let’s inspect the transformed and balanced data in the S3 bucket.</p>
<div class="cell" data-outputid="5bd636b5-220b-4d92-e570-f61ef08ceaef">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">processing_job_description <span class="op" style="color: #5E5E5E;">=</span> running_processor.describe()</span>
<span id="cb28-2"></span>
<span id="cb28-3">output_config <span class="op" style="color: #5E5E5E;">=</span> processing_job_description[<span class="st" style="color: #20794D;">'ProcessingOutputConfig'</span>]</span>
<span id="cb28-4"><span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> output_config[<span class="st" style="color: #20794D;">'Outputs'</span>]:</span>
<span id="cb28-5">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-train'</span>:</span>
<span id="cb28-6">        processed_train_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-validation'</span>:</span>
<span id="cb28-8">        processed_validation_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;">if</span> output[<span class="st" style="color: #20794D;">'OutputName'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'sentiment-test'</span>:</span>
<span id="cb28-10">        processed_test_data_s3_uri <span class="op" style="color: #5E5E5E;">=</span> output[<span class="st" style="color: #20794D;">'S3Output'</span>][<span class="st" style="color: #20794D;">'S3Uri'</span>]</span>
<span id="cb28-11">        </span>
<span id="cb28-12"><span class="bu" style="color: null;">print</span>(processed_train_data_s3_uri)</span>
<span id="cb28-13"><span class="bu" style="color: null;">print</span>(processed_validation_data_s3_uri)</span>
<span id="cb28-14"><span class="bu" style="color: null;">print</span>(processed_test_data_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train
s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation
s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test</code></pre>
</div>
</div>
<div class="cell" data-outputid="f11a5fe8-12f7-4997-ff23-bf263ad744f7" data-scrolled="true">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_train_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:54    4896333 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="0e77df43-82cf-4331-fca4-260076006e8d" data-scrolled="true">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_validation_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:54     269735 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<div class="cell" data-outputid="963692e4-adde-4975-e2a3-03af2ac7934c" data-scrolled="true">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $processed_test_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:10:55     269933 part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Now we copy the data into the folder <code>balanced</code>.</p>
<div class="cell" data-outputid="96f547ff-ca9e-4d69-b853-c28e53a957f1">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_train_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb36-2"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_validation_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp $processed_test_data_s3_uri<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-train/part-algo-1-womens_clothing_ecommerce_reviews.tsv
download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-validation/part-algo-1-womens_clothing_ecommerce_reviews.tsv
download: s3://sagemaker-us-east-1-951182689916/sagemaker-scikit-learn-2023-02-07-19-57-59-405/output/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv to balanced/sentiment-test/part-algo-1-womens_clothing_ecommerce_reviews.tsv</code></pre>
</div>
</div>
<p>Let’s review the training, validation and test data outputs:</p>
<div class="cell" data-outputid="627eb440-3ec3-4ecd-e7c0-e88c2920a4ce">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>train<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
15231   -1  0   [0, 100, 657, 13855, 27734, 111, 4682, 13, 42, 65, 4, 5, 10199, 16, 38596, 4, 24, 18, 227, 4136, 8, 5, 1468, 14, 51, 146, 9287, 66, 9, 4, 5, 5780, 16, 15652, 8, 5, 14893, 62, 5, 760, 32, 2422, 11962, 4, 5, 3318, 631, 14, 18, 95, 7209, 89, 116, 1437, 24, 18, 10, 3318, 631, 14, 95, 23835, 89, 4, 24, 630, 75, 1437, 356, 205, 7209, 1437, 8, 24, 630, 75, 356, 205, 3016, 4, 1437, 42, 13855, 6439, 56, 98, 203, 801, 4, 939, 437, 2299, 5779, 4, 1437, 13, 39328, 5135, 1437, 939, 524, 195, 108, 245, 113, 1437, 16157, 1437, 2631, 438, 8, 10, 650, 21, 1969, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   "I love jumpsuits - except for this one. the fabric is blah. it's between plastic and the material that they make flags out of. the print is adorable and the buttons up the front are super cute. the tie thing that's just hanging there?  it's a tie thing that just hangs there. it doesn't  look good hanging  and it doesn't look good tied.  this jumpsuit had so much potential. i'm definitely disappointed.  for sizing reference  i am 5'5""  135  34c and a small was perfect." 2023-02-07T20:04:40Z
8389    -1  0   [0, 100, 269, 770, 7, 101, 209, 1437, 53, 51, 95, 399, 75, 356, 235, 15, 127, 195, 108, 246, 2345, 102, 35156, 5120, 4, 939, 33, 380, 35841, 8, 460, 619, 66, 9, 317, 2498, 2084, 6149, 1033, 1437, 98, 2085, 939, 437, 95, 45, 5, 235, 1002, 13, 209, 1437, 53, 51, 1415, 98, 11962, 8, 939, 770, 7, 492, 106, 10, 860, 4, 5, 13977, 21, 350, 239, 13, 127, 25896, 1437, 8, 5, 2985, 18459, 58, 350, 380, 8, 851, 162, 10, 33062, 3786, 356, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I really wanted to like these  but they just didn't look right on my 5'3 sorta bulky frame. i have big thighs and always feel out of place wearing leggings  so maybe i'm just not the right target for these  but they looked so cute and i wanted to give them a try. the waist was too high for my liking  and the leg openings were too big and gave me a stumpified look.  2023-02-07T20:04:40Z
17752   1   2   [0, 713, 16, 10, 1528, 5262, 299, 42514, 571, 26875, 1827, 8, 1237, 650, 4, 939, 2333, 3568, 10, 650, 50, 4761, 11, 6215, 13657, 1437, 53, 15679, 219, 939, 460, 1836, 62, 4, 939, 437, 10, 2491, 438, 1437, 8, 10, 739, 10698, 1969, 4, 5, 760, 16, 10, 828, 11708, 1437, 53, 45, 98, 203, 47, 240, 10, 740, 5602, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   This is a true tiny top........gorgeous and runs small. i usually wear a small or medium in retailer tops  but timy i always size up. i'm a 36c  and a large fits perfect. the front is a bit sheer  but not so much you need a cami.   2023-02-07T20:04:40Z
65  1   2   [0, 100, 3584, 42, 299, 11, 41, 9876, 1001, 1400, 94, 186, 4, 5, 1318, 16, 4613, 8, 5, 2272, 1173, 2440, 3195, 16, 182, 2216, 4, 5, 3089, 11556, 34, 10, 2721, 4140, 219, 740, 7042, 1020, 459, 14, 16, 7391, 23, 5, 10762, 1437, 53, 64, 28, 2928, 30, 11803, 4, 939, 362, 29, 372, 77, 10610, 80, 430, 1319, 4, 939, 5328, 24, 19, 5, 2205, 4104, 66, 1437, 8, 24, 3723, 15390, 149, 5, 3089, 11556, 23, 5, 2576, 4, 24, 67, 1326, 372, 77, 5, 11021, 354, 4104, 16, 10610, 11, 4, 127, 129, 2813, 16, 14, 24, 74, 283, 11, 10, 4716, 1459, 1836, 25, 24, 18, 10, 2842, 380, 23, 5, 10762, 8, 5397, 3572, 2, 1, 1, 1, 1, 1]   I purchased this top in an antro store last week. the quality is wonderful and the greenish blue color is very unique. the blouse has a beautiful stretchy camsiole that is attached at the shoulders  but can be removed by snaps. i tooks great when worn two different ways. i wore it with the campole out  and it peeks through the blouse at the bottom. it also looks great when the camisole is worn in. my only wish is that it would come in a petite size as it's a touch big at the shoulders and neckli    2023-02-07T20:04:40Z</code></pre>
</div>
</div>
<div class="cell" data-outputid="fce03655-4455-476d-aeca-5e4b6e378f7a">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>validation<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
5506    1   2   [0, 19065, 3588, 11, 1110, 9, 1468, 1437, 1318, 1437, 5780, 734, 18891, 59, 5, 2408, 19, 5, 14187, 156, 24, 45, 173, 13, 162, 4, 939, 2740, 65, 1836, 159, 25, 5131, 30, 97, 34910, 1437, 53, 14, 399, 75, 173, 131, 89, 21, 350, 203, 10199, 13, 5, 5933, 8, 5, 14187, 156, 24, 356, 19351, 4, 939, 2740, 10, 4761, 8, 939, 113, 119, 195, 108, 245, 113, 15, 5, 5350, 11454, 526, 4, 14223, 157, 4, 939, 348, 56, 98, 203, 6620, 19, 97, 6215, 3365, 98, 939, 437, 45, 350, 5779, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] "Great dress in terms of material  quality  print...something about the weight with the lining made it not work for me. i ordered one size down as recommended by other reviewers  but that didn't work; there was too much fabric for the length and the lining made it look heavier. i ordered a medium and i""m 5'5"" on the curvy side. oh well. i've had so much luck with other retailer orders so i'm not too disappointed." 2023-02-07T20:04:40Z
8480    0   1   [0, 713, 2170, 473, 45, 109, 42, 16576, 2427, 4, 24, 16, 12058, 4, 959, 1437, 5, 13977, 21, 98, 650, 14, 5, 16721, 1344, 11532, 88, 127, 13977, 442, 162, 206, 9, 10, 25818, 11809, 2187, 4, 9574, 1437, 24, 21, 5, 1154, 1836, 98, 939, 64, 75, 1836, 62, 4, 939, 437, 204, 108, 1225, 113, 98, 5, 5933, 21, 1969, 111, 24, 376, 7, 235, 1065, 127, 15145, 4, 939, 657, 5, 16576, 98, 203, 14, 939, 437, 2811, 11356, 366, 27345, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] "This picture does not do this skirt justice. it is gorgeous. however  the waist was so small that the sequins dug into my waist making me think of a medieval torture device. unfortunately  it was the largest size so i can't size up. i'm 4'11"" so the length was perfect - it came to right above my knees. i love the skirt so much that i'm considering liposuction."   2023-02-07T20:04:40Z
66  0   1   [0, 100, 829, 42, 6399, 11, 127, 6097, 3023, 29, 8, 24, 10698, 6683, 4, 939, 116, 119, 45, 5373, 11, 657, 19, 24, 53, 939, 67, 218, 116, 90, 28101, 4, 5, 6399, 16, 15, 5, 7174, 526, 4, 109, 939, 240, 7, 3568, 10, 740, 5602, 12213, 24, 1437, 117, 4, 127, 2212, 16, 6538, 4, 24, 473, 8736, 162, 9, 10, 1468, 14, 115, 2179, 103, 6538, 71, 103, 3568, 8, 21, 5065, 4, 19, 14, 145, 26, 939, 116, 890, 10397, 42, 6399, 11, 2569, 514, 8, 6713, 3841, 8, 5952, 14, 40, 2097, 6538, 31, 2623, 4, 5, 5933, 16, 2051, 8, 939, 109, 101, 5, 3369, 2629, 11, 760, 116, 405, 3639, 10, 410, 14548, 2, 1, 1, 1, 1, 1, 1]   I received this shirt in my typical xs and it fits perfectly. i?m not crazy in love with it but i also don?t dislike. the shirt is on the thin side. do i need to wear a cami underneath it  no. my concern is holes. it does remind me of a material that could develop some holes after some wear and washes. with that being said i?ll wash this shirt in cold water and hang dry and hopefully that will prevent holes from developing. the length is fine and i do like the slits in front?it adds a little dim    2023-02-07T20:04:40Z
10411   -1  0   [0, 100, 33, 57, 546, 23, 42, 23204, 804, 187, 24, 78, 376, 66, 8, 939, 1747, 2740, 24, 77, 24, 21, 843, 207, 160, 4, 939, 2740, 10, 1836, 475, 4716, 1459, 1437, 16748, 77, 24, 2035, 8, 939, 1381, 24, 15, 1437, 24, 21, 182, 2233, 219, 1437, 13116, 101, 1437, 8, 222, 45, 3041, 101, 24, 1415, 15, 5, 1421, 804, 98, 939, 1051, 24, 124, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I have been looking at this sweater online since it first came out and i finally ordered it when it was 40% off. i ordered a size m petite  sadly when it arrived and i tried it on  it was very boxy  stiff like  and did not flow like it looked on the model online so i sent it back.   2023-02-07T20:04:40Z</code></pre>
</div>
</div>
<div class="cell" data-outputid="dfa07e96-7f91-4be6-afdc-e98a520bce67">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>balanced<span class="op" style="color: #5E5E5E;">/</span>sentiment<span class="op" style="color: #5E5E5E;">-</span>test<span class="op" style="color: #5E5E5E;">/</span>part<span class="op" style="color: #5E5E5E;">-</span>algo<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>womens_clothing_ecommerce_reviews.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>review_id   sentiment   label_id    input_ids   review_body date
4815    0   1   [0, 100, 300, 5, 1275, 1437, 61, 21, 765, 30145, 5202, 4, 5, 6399, 1495, 21, 98, 11962, 1437, 53, 5, 2564, 16, 182, 2233, 219, 4, 939, 300, 10, 650, 8, 24, 21, 169, 350, 1810, 4, 444, 6012, 8, 10941, 11, 5, 13977, 87, 5, 2170, 924, 4, 939, 524, 5074, 7, 671, 1437, 53, 24, 817, 162, 356, 101, 10, 3925, 4, 36, 43882, 14, 16, 43, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I got the red  which was short sleeved. the shirt itself was so cute  but the fit is very boxy. i got a small and it was way too wide. far wider and shorter in the waist than the picture shows. i am sad to return  but it makes me look like a square. (shape that is)   2023-02-07T20:04:40Z
1933    1   2   [0, 1708, 5, 124, 9, 24, 1437, 30, 5, 13977, 1437, 15713, 5559, 95, 10, 5262, 828, 4, 114, 939, 120, 2671, 1437, 24, 40, 28, 350, 251, 4, 53, 939, 657, 5, 16576, 1437, 24, 16, 34203, 8, 11962, 4, 45, 24, 17414, 13, 162, 190, 114, 5, 1270, 161, 24787, 4, 939, 2740, 5, 16273, 642, 8, 5, 5933, 16, 1256, 203, 25, 7092, 1437, 95, 874, 5, 4117, 11, 760, 4, 5, 13977, 16, 41783, 1437, 2671, 24, 74, 1136, 55, 15, 127, 28097, 36, 2457, 1755, 5, 350, 251, 1129, 656, 4, 36, 15314, 23246, 1437, 973, 12, 2518, 11, 13977, 1437, 765, 5856, 41137, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   But the back of it  by the waist  bunches just a tiny bit. if i get bigger  it will be too long. but i love the skirt  it is flattering and cute. not itchy for me even if the title says wool. i ordered the 00p and the length is pretty much as pictured  just below the knee in front. the waist is snug  bigger it would fall more on my hips (hence the too long comment earlier. (115 lbs  26-27 in waist  short legs...)    2023-02-07T20:04:40Z
14029   -1  0   [0, 100, 269, 657, 5, 6184, 8, 5, 356, 15, 5, 1421, 1437, 8, 939, 802, 939, 74, 657, 24, 4, 939, 2740, 804, 1437, 98, 939, 222, 45, 860, 15, 11, 1400, 4, 77, 939, 1381, 24, 15, 1437, 24, 34, 169, 350, 203, 10199, 198, 5, 13977, 8, 16576, 4, 24, 16, 7992, 10199, 25, 157, 1437, 8, 34, 10, 14187, 1437, 8, 5, 13977, 34, 1823, 10199, 13, 5, 1521, 1437, 8, 24, 34, 12189, 1437, 98, 24, 70, 3639, 62, 7, 28, 169, 350, 35156, 4, 24, 16, 45, 34203, 23, 70, 8, 156, 162, 356, 158, 2697, 19351, 4, 939, 524, 3357, 42, 3588, 4, 5074, 1437, 142, 24, 1326, 98, 9869, 15, 5, 1421, 4, 939, 524, 2, 1, 1, 1, 1] I really love the pattern and the look on the model  and i thought i would love it. i ordered online  so i did not try on in store. when i tried it on  it has way too much fabric around the waist and skirt. it is thick fabric as well  and has a lining  and the waist has extra fabric for the design  and it has pockets  so it all adds up to be way too bulky. it is not flattering at all and made me look 10 pounds heavier. i am returning this dress. sad  because it looks so lovely on the model. i am    2023-02-07T20:04:40Z
10468   0   1   [0, 713, 6966, 18605, 16, 182, 157, 156, 8, 190, 39083, 906, 11, 621, 4, 939, 437, 195, 108, 398, 113, 8, 59, 17445, 2697, 4, 939, 2333, 3568, 10, 1836, 231, 4, 939, 3568, 10, 2631, 417, 11689, 4, 939, 303, 5, 3235, 7, 422, 10, 828, 650, 4, 939, 1835, 24, 142, 1437, 1135, 141, 203, 939, 6640, 5, 2496, 1437, 24, 95, 938, 75, 34203, 15, 127, 809, 1907, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]    "This swimsuit is very well made and even prettier in person. i'm 5'8"" and about 145 pounds. i usually wear a size 6. i wear a 34d bra. i found the suit to run a bit small. i returned it because  despite how much i liked the style  it just wasn't flattering on my body type."    2023-02-07T20:04:40Z</code></pre>
</div>
</div>
</section>
<section id="query-the-feature-store" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="query-the-feature-store"><span class="header-section-number">7</span> Query the Feature Store</h2>
<p>In addition to transforming the data and saving in S3 bucket, the processing job populates the feature store with the transformed and balanced data. Let’s query this data using Amazon Athena.</p>
<section id="export-training-validation-and-test-datasets-from-the-feature-store" class="level3" data-number="7.1">
<h3 data-number="7.1" class="anchored" data-anchor-id="export-training-validation-and-test-datasets-from-the-feature-store"><span class="header-section-number">7.1</span> Export training, validation, and test datasets from the Feature Store</h3>
<p>Here we will do the export only for the training dataset, as an example.</p>
<p>We will use the <code>athena_query()</code> function to create an Athena query for the defined above Feature Group. Then we can pull the table name of the Amazon Glue Data Catalog table which is auto-generated by Feature Store.</p>
<div class="cell" data-outputid="5d8077d0-a8b9-4e3a-920c-643ba37e4265">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">feature_store_query <span class="op" style="color: #5E5E5E;">=</span> feature_group.athena_query()</span>
<span id="cb44-2"></span>
<span id="cb44-3">feature_store_table <span class="op" style="color: #5E5E5E;">=</span> feature_store_query.table_name</span>
<span id="cb44-4"></span>
<span id="cb44-5">query_string <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb44-6"><span class="st" style="color: #20794D;">    SELECT date,</span></span>
<span id="cb44-7"><span class="st" style="color: #20794D;">        review_id,</span></span>
<span id="cb44-8"><span class="st" style="color: #20794D;">        sentiment, </span></span>
<span id="cb44-9"><span class="st" style="color: #20794D;">        label_id,</span></span>
<span id="cb44-10"><span class="st" style="color: #20794D;">        input_ids,</span></span>
<span id="cb44-11"><span class="st" style="color: #20794D;">        review_body</span></span>
<span id="cb44-12"><span class="st" style="color: #20794D;">    FROM "</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">" </span></span>
<span id="cb44-13"><span class="st" style="color: #20794D;">    WHERE split_type='train' </span></span>
<span id="cb44-14"><span class="st" style="color: #20794D;">    LIMIT 5</span></span>
<span id="cb44-15"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(feature_store_table)</span>
<span id="cb44-16"></span>
<span id="cb44-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Glue Catalog table name: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(feature_store_table))</span>
<span id="cb44-18"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Running query: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(query_string))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Glue Catalog table name: reviews-feature-group-1675799708-1675800251
Running query: 
    SELECT date,
        review_id,
        sentiment, 
        label_id,
        input_ids,
        review_body
    FROM "reviews-feature-group-1675799708-1675800251" 
    WHERE split_type='train' 
    LIMIT 5
</code></pre>
</div>
</div>
<p>Now we configure the S3 location for the query results. This allows us to re-use the query results for future queries if the data has not changed. We can even share this S3 location between team members to improve query performance for common queries on data that does not change often.</p>
<div class="cell" data-outputid="16e5dec6-907f-4617-c5b1-77c508a60490">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/query_results/</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/'</span>.<span class="bu" style="color: null;">format</span>(bucket, feature_store_offline_prefix)</span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(output_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-951182689916/query_results/reviews-feature-store-1675799708/</code></pre>
</div>
</div>
<p>Let’s query the feature store.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">feature_store_query.run(</span>
<span id="cb48-2">    query_string<span class="op" style="color: #5E5E5E;">=</span>query_string,</span>
<span id="cb48-3">    output_location<span class="op" style="color: #5E5E5E;">=</span>output_s3_uri </span>
<span id="cb48-4">)</span>
<span id="cb48-5"></span>
<span id="cb48-6">feature_store_query.wait()</span></code></pre></div>
</div>
<div class="cell" data-outputid="94020c99-585a-4aff-dd74-d988b35e3177">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb49-2">pd.set_option(<span class="st" style="color: #20794D;">"max_colwidth"</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb49-3"></span>
<span id="cb49-4">df_feature_store <span class="op" style="color: #5E5E5E;">=</span> feature_store_query.as_dataframe()</span>
<span id="cb49-5">df_feature_store</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>date</th>
      <th>review_id</th>
      <th>sentiment</th>
      <th>label_id</th>
      <th>input_ids</th>
      <th>review_body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>3151</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 17425, 27941, 181, 267, 1318, 4, 939, 33, 10, 5342, 7174, 5120, 8, 42, 10601, 15, 162, 101, ...</td>
      <td>Definitely pj quality. i have a fairly thin frame and this hung on me like a tent. and it's very...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>2313</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 713, 16, 10, 182, 11962, 3588, 4, 24, 21, 1969, 137, 939, 15158, 24, 4, 5, 1272, 939, 56, 71...</td>
      <td>This is a very cute dress. it was perfect before i washed it. the problems i had after washing i...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>10378</td>
      <td>1</td>
      <td>2</td>
      <td>[0, 100, 2162, 5, 10521, 1437, 61, 16, 10, 12058, 3195, 4, 939, 101, 5, 251, 5933, 11, 5, 3701, ...</td>
      <td>I bought the grey  which is a gorgeous color. i like the long length in the arms (though i tried...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>13251</td>
      <td>0</td>
      <td>1</td>
      <td>[0, 37396, 299, 804, 111, 8578, 11, 621, 4, 1237, 650, 1437, 941, 15, 2576, 23385, 1902, 4, 802,...</td>
      <td>Pretty top online - okay in person. runs small  especially on bottom hemline. thought it would h...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2023-02-07T20:04:40Z</td>
      <td>9286</td>
      <td>-1</td>
      <td>0</td>
      <td>[0, 713, 299, 16, 2721, 804, 8, 11, 621, 4, 939, 524, 11, 117, 169, 10, 739, 455, 11464, 22101, ...</td>
      <td>This top is beautiful online and in person. i am in no way a large full figured gal  but i did o...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="export-tsv-from-feature-store" class="level3" data-number="7.2">
<h3 data-number="7.2" class="anchored" data-anchor-id="export-tsv-from-feature-store"><span class="header-section-number">7.2</span> Export TSV from Feature Store</h3>
<p>Save the output as a TSV file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">df_feature_store.to_csv(<span class="st" style="color: #20794D;">'./feature_store_export.tsv'</span>,</span>
<span id="cb50-2">                        sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">'</span>,</span>
<span id="cb50-3">                        index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb50-4">                        header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="16035dde-6294-4b65-dbf0-bd405e1f1645">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>date    review_id   sentiment   label_id    input_ids   review_body
2023-02-07T20:04:40Z    3151    0   1   [0, 17425, 27941, 181, 267, 1318, 4, 939, 33, 10, 5342, 7174, 5120, 8, 42, 10601, 15, 162, 101, 10, 10178, 4, 8, 24, 18, 182, 7174, 1437, 98, 24, 1364, 25, 10, 6966, 1719, 1437, 53, 2299, 45, 10, 3588, 13, 932, 1493, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]    Definitely pj quality. i have a fairly thin frame and this hung on me like a tent. and it's very thin  so it works as a swim cover  but definitely not a dress for anything else.
2023-02-07T20:04:40Z    2313    0   1   [0, 713, 16, 10, 182, 11962, 3588, 4, 24, 21, 1969, 137, 939, 15158, 24, 4, 5, 1272, 939, 56, 71, 14784, 24, 21, 5, 15705, 13178, 10490, 9, 5, 3588, 28704, 5933, 11036, 150, 5, 1025, 909, 14187, 222, 45, 1437, 98, 5, 909, 14187, 3723, 15390, 66, 10, 205, 10468, 50, 80, 4, 8, 187, 5, 3588, 16, 10941, 939, 64, 75, 269, 3568, 24, 396, 634, 741, 17625, 13344, 1437, 941, 13, 5, 124, 9, 5, 3588, 187, 24, 18, 10941, 89, 8, 114, 939, 18822, 81, 47, 115, 192, 960, 4, 939, 437, 98, 5779, 11, 5, 1318, 142, 24, 16, 10, 182, 11962, 1437, 4342, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  This is a very cute dress. it was perfect before i washed it. the problems i had after washing it was the outer cotton layer of the dress shrunk length wise while the inside black lining did not  so the black lining peeks out a good inch or two. and since the dress is shorter i can't really wear it without using biker shorts  especially for the back of the dress since it's shorter there and if i bent over you could see everything. i'm so disappointed in the quality because it is a very cute  ver
2023-02-07T20:04:40Z    10378   1   2   [0, 100, 2162, 5, 10521, 1437, 61, 16, 10, 12058, 3195, 4, 939, 101, 5, 251, 5933, 11, 5, 3701, 36, 18401, 939, 1381, 24, 15, 11, 430, 8089, 8, 5, 3124, 5933, 222, 182, 322, 3793, 8, 1256, 4, 939, 101, 5, 5933, 4, 5, 124, 473, 14902, 15673, 1437, 53, 939, 202, 101, 5, 6399, 4, 24, 18, 7082, 1437, 9881, 8, 34203, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  I bought the grey  which is a gorgeous color. i like the long length in the arms (though i tried it on in different colors and the arm length did very). soft and pretty. i like the length. the back does wrinkle  but i still like the shirt. it's loose  casual and flattering.
2023-02-07T20:04:40Z    13251   0   1   [0, 37396, 299, 804, 111, 8578, 11, 621, 4, 1237, 650, 1437, 941, 15, 2576, 23385, 1902, 4, 802, 24, 74, 33, 10, 7021, 7, 24, 4, 24, 473, 45, 4, 55, 11708, 11, 621, 87, 939, 802, 24, 74, 28, 4, 14, 1979, 75, 912, 162, 31, 2396, 24, 600, 4, 24, 21, 5, 169, 24, 4976, 15, 127, 7050, 14, 21, 29747, 24203, 4, 1415, 101, 939, 21, 2498, 10, 741, 1452, 4, 939, 218, 75, 33, 10, 739, 7050, 1437, 95, 7735, 356, 15, 162, 4, 9327, 1437, 142, 24, 16, 41, 15652, 5780, 4, 299, 156, 13, 29284, 50, 10, 4716, 1459, 6429, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  Pretty top online - okay in person. runs small  especially on bottom hemline. thought it would have a swing to it. it does not. more sheer in person than i thought it would be. that wouldn't stop me from keeping it though. it was the way it laid on my chest that was unflattering. looked like i was wearing a bib. i don't have a large chest  just weird look on me. unfortunate  because it is an adorable print. top made for thinner or a petite lady.</code></pre>
</div>
</div>
<p>Upload TSV to the S3 bucket:</p>
<div class="cell" data-outputid="57290246-f471-4e48-b0e5-1b2a681773b8">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp .<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>feature_store<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: ./feature_store_export.tsv to s3://sagemaker-us-east-1-951182689916/feature_store/feature_store_export.tsv</code></pre>
</div>
</div>
<p>Check the file in the S3 bucket:</p>
<div class="cell" data-outputid="5640ed9c-5bee-410e-c22b-c1097ba6fb6b">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls <span class="op" style="color: #5E5E5E;">--</span>recursive s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>feature_store<span class="op" style="color: #5E5E5E;">/</span>feature_store_export.tsv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-07 20:11:18       4714 feature_store/feature_store_export.tsv</code></pre>
</div>
</div>
</section>
<section id="check-that-the-dataset-in-the-feature-store-is-balanced-by-sentiment" class="level3" data-number="7.3">
<h3 data-number="7.3" class="anchored" data-anchor-id="check-that-the-dataset-in-the-feature-store-is-balanced-by-sentiment"><span class="header-section-number">7.3</span> Check that the dataset in the Feature Store is balanced by sentiment</h3>
<p>Now we can setup an Athena query to check that the stored dataset is balanced by the target class <code>sentiment</code>.</p>
<p>We will rrite an SQL query to count the total number of the reviews per <code>sentiment</code> stored in the Feature Group.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">feature_store_query_2 <span class="op" style="color: #5E5E5E;">=</span> feature_group.athena_query()</span>
<span id="cb57-2"></span>
<span id="cb57-3">query_string_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb57-4"><span class="st" style="color: #20794D;">SELECT sentiment, COUNT(*) AS count_reviews</span></span>
<span id="cb57-5"><span class="st" style="color: #20794D;">FROM "</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb57-6"><span class="st" style="color: #20794D;">GROUP BY sentiment</span></span>
<span id="cb57-7"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(feature_store_table)</span></code></pre></div>
</div>
<p>Now we query the feature store.</p>
<div class="cell" data-outputid="d812a8f3-720c-401a-9cd5-553a467cf07f">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">feature_store_query_2.run(</span>
<span id="cb58-2">    query_string<span class="op" style="color: #5E5E5E;">=</span>query_string_count_by_sentiment, </span>
<span id="cb58-3">    output_location<span class="op" style="color: #5E5E5E;">=</span>output_s3_uri </span>
<span id="cb58-4">)</span>
<span id="cb58-5"></span>
<span id="cb58-6">feature_store_query_2.wait()</span>
<span id="cb58-7"></span>
<span id="cb58-8">df_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> feature_store_query_2.as_dataframe()</span>
<span id="cb58-9">df_count_by_sentiment</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>count_reviews</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>2051</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>2051</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>2051</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s visualize the result of the query in the bar plot, showing the count of the reviews by sentiment value.</p>
<div class="cell" data-outputid="e4ec7bc7-058d-4ec5-be1c-d4cac2bc3728">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb59-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb59-3"></span>
<span id="cb59-4">sns.barplot(</span>
<span id="cb59-5">    data<span class="op" style="color: #5E5E5E;">=</span>df_count_by_sentiment, </span>
<span id="cb59-6">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb59-7">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_reviews'</span>, </span>
<span id="cb59-8">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span></span>
<span id="cb59-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9c4f4c9710&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store_files/figure-html/cell-36-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">8</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-08-feature-transformation-aws-sagemaker-processing-job-feature-store.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Creating a Sentiment Analysis Text Classification Model using AWS SageMaker BlazingText</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In <a href="../#category=aws">earlier articles we introduced AWS cloud services for data science</a>, and showed how it could help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will use the AWS SageMaker BlazingText built-in deep learning model to predict the sentiment for customer text reviews. The model will analyze customer feedback and classify the messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>The dataset we will use is the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>In my <a href="2023-02-05-train-model-aws-sagemaker-autopilot.html">previous article</a> we saw how you could use AWS Sagemaker Autopilot (an AutoML method) to automatically choose an appropriate model and perform all the required steps of the Data Science workflow.</p>
<p>But sometimes, we may need to go beyond AutoML and do more customisation and human selection for the Data Science workflow, and even between AutoML and fully customised Models, there are a range of choices in between for example from most to least automated methods we could have:</p>
<ol type="1">
<li>AWS Sagemaker Autopilot (AutoML)</li>
<li>AWS Sagemaker Built-in Algorithms</li>
<li>AWS Sagemaker Bring your own script (import and define your own models)</li>
<li>AWS Sagemaker Bring your own container (i.e.&nbsp;docker image with models &amp; environment)</li>
</ol>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_built_in.png" title="AWS Degrees of Automation" class="img-fluid"></p>
<p>And of course, there are various pros and cons for each of the options for most automated to most customised.</p>
<p>So when would we use built-in algorithms? What would be the advantages for this?</p>
<ul>
<li>Implementations are highly-optimized and scalable</li>
<li>Focus more on domain-specific tasks rather than managing low-level model code and infrastructure</li>
<li>Trained model can be downloaded and re-used elsewhere</li>
</ul>
<p>So as mentioned previously we will be using the BlazingText built in deep learning language model. BlazingText is a variant of FastText which is based on word2vec created by the AWS team in 2017.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_lang_model_history.png" title="Deep Leaning Language Model History" class="img-fluid"></p>
<p>Key aspects of BlazingText are:</p>
<ul>
<li>Scales and accelerates Word2Vec using multiple CPUs or GPUs for training</li>
<li>Extends FastText to use GPU acceleration with custom CUDA kernels</li>
<li>Creates n-gram embeddings using CBOW and skip-gram</li>
<li>Saves money by early-stopping a training job when the validation accuracy stops increasing</li>
<li>Optimized I/O for datasets stored in Amazon S3</li>
</ul>
<p>For more information on BlazingText, see the documentation here: https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext.html</p>
<p>Let’s now install and import the required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w4'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-14">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-15"></span>
<span id="cb1-16">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-17">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-18"></span>
<span id="cb1-19">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-20">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-21">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="prepare-dataset" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="prepare-dataset"><span class="header-section-number">2</span> Prepare dataset</h2>
<p>Let’s adapt the dataset into a format that BlazingText understands. The BlazingText format is as follows:</p>
<pre><code>__label__&lt;label&gt; "&lt;features&gt;"</code></pre>
<p>Here are some examples:</p>
<pre><code>__label__-1 "this is bad"
__label__0 "this is ok"
__label__1 "this is great"</code></pre>
<p>Sentiment is one of three classes: negative (-1), neutral (0), or positive (1). BlazingText requires that <code>__label__</code> is prepended to each sentiment value.</p>
<p>We will tokenize the <code>review_body</code> with the Natural Language Toolkit (<code>nltk</code>) for the model training. We will also use <code>nltk</code> later to tokenize reviews to use as inputs to the deployed model.</p>
<section id="load-the-dataset" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="load-the-dataset"><span class="header-section-number">2.1</span> Load the dataset</h3>
<p>Upload the dataset into the Pandas dataframe:</p>
<div class="cell" data-outputid="34df5410-2390-4657-b19f-246e9c5fe266">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv to ./womens_clothing_ecommerce_reviews_balanced.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="0fd0d00a-5727-48e3-eb67-bb08b771cd5a">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb7-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1</td>
      <td>This suit did nothing for me. the top has zero...</td>
      <td>Swim</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Like other reviewers  i saw this dress on the ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>I wish i had read the reviews before purchasin...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>I ordered these pants in my usual size (xl) an...</td>
      <td>Legwear</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I noticed this top on one of the sales associa...</td>
      <td>Knits</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="transform-the-dataset" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="transform-the-dataset"><span class="header-section-number">2.2</span> Transform the dataset</h3>
<p>Now we will prepend <code>__label__</code> to each sentiment value and tokenize the review body using <code>nltk</code> module. Let’s import the module and download the tokenizer:</p>
<div class="cell" data-outputid="44ad1f28-d869-4615-eb2e-c8ac46c4c79a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> nltk</span>
<span id="cb8-2">nltk.download(<span class="st" style="color: #20794D;">'punkt'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package punkt to /root/nltk_data...
[nltk_data]   Unzipping tokenizers/punkt.zip.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>True</code></pre>
</div>
</div>
<p>To split a sentence into tokens we can use <code>word_tokenize</code> method. It will separate words, punctuation, and apply some stemming.</p>
<p>For example:</p>
<div class="cell" data-outputid="c70bb32b-97b3-42ec-be3d-53a7788ca2a6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">sentence <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"I'm not a fan of this product!"</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">tokens <span class="op" style="color: #5E5E5E;">=</span> nltk.word_tokenize(sentence)</span>
<span id="cb11-4"><span class="bu" style="color: null;">print</span>(tokens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['I', "'m", 'not', 'a', 'fan', 'of', 'this', 'product', '!']</code></pre>
</div>
</div>
<p>The output of word tokenization can be converted into a string separated by spaces and saved in the dataframe. The transformed sentences are prepared then for better text understending by the model.</p>
<p>Let’s define a <code>prepare_data</code> function which we will apply later to transform both training and validation datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">def</span> tokenize(review):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;"># delete commas and quotation marks, apply tokenization and join back into a string separating by spaces</span></span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">' '</span>.join([<span class="bu" style="color: null;">str</span>(token) <span class="cf" style="color: #003B4F;">for</span> token <span class="kw" style="color: #003B4F;">in</span> nltk.word_tokenize(<span class="bu" style="color: null;">str</span>(review).replace(<span class="st" style="color: #20794D;">','</span>, <span class="st" style="color: #20794D;">''</span>).replace(<span class="st" style="color: #20794D;">'"'</span>, <span class="st" style="color: #20794D;">''</span>).lower())])</span>
<span id="cb13-4">    </span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;">def</span> prepare_data(df):</span>
<span id="cb13-6">    df[<span class="st" style="color: #20794D;">'sentiment'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'sentiment'</span>].<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> sentiment : <span class="st" style="color: #20794D;">'__label__</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(<span class="bu" style="color: null;">str</span>(sentiment).replace(<span class="st" style="color: #20794D;">'__label__'</span>, <span class="st" style="color: #20794D;">''</span>)))</span>
<span id="cb13-7">    df[<span class="st" style="color: #20794D;">'review_body'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'review_body'</span>].<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> review : tokenize(review)) </span>
<span id="cb13-8">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<p>Test the prepared function and examine the result.</p>
<div class="cell" data-outputid="07e02f68-d47a-49d0-9623-b78450b91a6e">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># create a sample dataframe</span></span>
<span id="cb14-2">df_example <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'sentiment'</span>:[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], </span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'review_body'</span>:[</span>
<span id="cb14-5">        <span class="st" style="color: #20794D;">"I don't like this product!"</span>, </span>
<span id="cb14-6">        <span class="st" style="color: #20794D;">"this product is ok"</span>, </span>
<span id="cb14-7">        <span class="st" style="color: #20794D;">"I do like this product!"</span>]</span>
<span id="cb14-8">})</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;"># test the prepare_data function</span></span>
<span id="cb14-11"><span class="bu" style="color: null;">print</span>(prepare_data(df_example))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sentiment                   review_body
0  __label__-1  i do n't like this product !
1   __label__0            this product is ok
2   __label__1      i do like this product !</code></pre>
</div>
</div>
<p>Let’s apply the <code>prepare_data</code> function to the dataset.</p>
<div class="cell" data-outputid="671cfd5b-7e6b-49f4-c19f-fdda64e38fb9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df_blazingtext <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb16-2">df_blazingtext <span class="op" style="color: #5E5E5E;">=</span> prepare_data(df_blazingtext)</span>
<span id="cb16-3">df_blazingtext.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>__label__-1</td>
      <td>this suit did nothing for me . the top has zer...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>__label__-1</td>
      <td>like other reviewers i saw this dress on the c...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>__label__-1</td>
      <td>i wish i had read the reviews before purchasin...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>__label__-1</td>
      <td>i ordered these pants in my usual size ( xl ) ...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>__label__-1</td>
      <td>i noticed this top on one of the sales associa...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="split-the-dataset-into-train-and-validation-sets" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="split-the-dataset-into-train-and-validation-sets"><span class="header-section-number">2.3</span> Split the dataset into train and validation sets</h3>
<p>We will now split and visualize a pie chart of the train (90%) and validation (10%) sets.</p>
<div class="cell" data-outputid="4a37424f-56b0-42e8-d401-5d2c0eab7fbe">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;"># Split all data into 90% train and 10% holdout</span></span>
<span id="cb17-4">df_train, df_validation <span class="op" style="color: #5E5E5E;">=</span> train_test_split(df_blazingtext, </span>
<span id="cb17-5">                                           test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.10</span>,</span>
<span id="cb17-6">                                           stratify<span class="op" style="color: #5E5E5E;">=</span>df_blazingtext[<span class="st" style="color: #20794D;">'sentiment'</span>])</span>
<span id="cb17-7"></span>
<span id="cb17-8">labels <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'train'</span>, <span class="st" style="color: #20794D;">'validation'</span>]</span>
<span id="cb17-9">sizes <span class="op" style="color: #5E5E5E;">=</span> [<span class="bu" style="color: null;">len</span>(df_train.index), <span class="bu" style="color: null;">len</span>(df_validation.index)]</span>
<span id="cb17-10">explode <span class="op" style="color: #5E5E5E;">=</span> (<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">0</span>)  </span>
<span id="cb17-11"></span>
<span id="cb17-12">fig1, ax1 <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb17-13"></span>
<span id="cb17-14">ax1.pie(sizes, explode<span class="op" style="color: #5E5E5E;">=</span>explode, labels<span class="op" style="color: #5E5E5E;">=</span>labels, autopct<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%1.1f%%</span><span class="st" style="color: #20794D;">'</span>, startangle<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;"># Equal aspect ratio ensures that pie is drawn as a circle.</span></span>
<span id="cb17-17">ax1.axis(<span class="st" style="color: #20794D;">'equal'</span>)  </span>
<span id="cb17-18"></span>
<span id="cb17-19">plt.show()</span>
<span id="cb17-20"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">len</span>(df_train))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>6399</code></pre>
</div>
</div>
<p>Save the results as CSV files.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">blazingtext_train_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./train.csv'</span></span>
<span id="cb19-2">df_train[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(blazingtext_train_path, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">blazingtext_validation_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./validation.csv'</span></span>
<span id="cb20-2">df_validation[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(blazingtext_validation_path, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span></code></pre></div>
</div>
</section>
<section id="upload-the-train-and-validation-datasets-to-s3-bucket" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="upload-the-train-and-validation-datasets-to-s3-bucket"><span class="header-section-number">2.4</span> Upload the <code>train</code> and <code>validation</code> datasets to S3 bucket</h3>
<p>We will use these to train and validate your model. Let’s save them to S3 bucket.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">train_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>blazingtext_train_path)</span>
<span id="cb21-2">validation_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>blazingtext_validation_path)</span></code></pre></div>
</div>
</section>
</section>
<section id="train-the-model" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="train-the-model"><span class="header-section-number">3</span> Train the model</h2>
<p>We will now setup the BlazingText estimator. For more information on Estimators, see the SageMaker Python SDK documentation here: https://sagemaker.readthedocs.io/.</p>
<p>We will setup the container image to use for training with the BlazingText algorithm.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">image_uri <span class="op" style="color: #5E5E5E;">=</span> sagemaker.image_uris.retrieve(</span>
<span id="cb22-2">    region<span class="op" style="color: #5E5E5E;">=</span>region,</span>
<span id="cb22-3">    framework<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blazingtext'</span> </span>
<span id="cb22-4">)</span></code></pre></div>
</div>
<p>Let’s now create an estimator instance passing the container image and other instance parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">estimator <span class="op" style="color: #5E5E5E;">=</span> sagemaker.estimator.Estimator(</span>
<span id="cb23-2">    image_uri<span class="op" style="color: #5E5E5E;">=</span>image_uri, </span>
<span id="cb23-3">    role<span class="op" style="color: #5E5E5E;">=</span>role, </span>
<span id="cb23-4">    instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb23-5">    instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb23-6">    volume_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb23-7">    max_run<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span>,</span>
<span id="cb23-8">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess</span>
<span id="cb23-9">)</span></code></pre></div>
</div>
<p>Now we need to configure the hyper-parameters for BlazingText. In our case we are using BlazingText for a supervised classification task.</p>
<p>Information on the hyper-parameters can be found in the documentation here: https://docs.aws.amazon.com/sagemaker/latest/dg/blazingtext-tuning.html</p>
<p>The hyperparameters that have the greatest impact on word2vec objective metrics are: <code>learning_rate</code> and <code>vector_dim</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">estimator.set_hyperparameters(mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'supervised'</span>,   <span class="co" style="color: #5E5E5E;"># supervised (text classification)</span></span>
<span id="cb24-2">                              epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>,           <span class="co" style="color: #5E5E5E;"># number of complete passes through the dataset: 5 - 15</span></span>
<span id="cb24-3">                              learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>,  <span class="co" style="color: #5E5E5E;"># step size for the  numerical optimizer: 0.005 - 0.01</span></span>
<span id="cb24-4">                              min_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,         <span class="co" style="color: #5E5E5E;"># discard words that appear less than this number: 0 - 100                              </span></span>
<span id="cb24-5">                              vector_dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">300</span>,      <span class="co" style="color: #5E5E5E;"># number of dimensions in vector space: 32-300</span></span>
<span id="cb24-6">                              word_ngrams<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)       <span class="co" style="color: #5E5E5E;"># number of words in a word n-gram: 1 - 3</span></span></code></pre></div>
</div>
<p>To call the <code>fit</code> method for the created estimator instance we need to setup the input data channels. This can be organized as a dictionary</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb25-2">    <span class="st" style="color: #20794D;">'train'</span>: ..., <span class="co" style="color: #5E5E5E;"># training data</span></span>
<span id="cb25-3">    <span class="st" style="color: #20794D;">'validation'</span>: ... <span class="co" style="color: #5E5E5E;"># validation data</span></span>
<span id="cb25-4">}</span></code></pre></div>
<p>where training and validation data are the Amazon SageMaker channels for S3 input data sources.</p>
<p>Let’s create a train data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">train_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb26-2">    train_s3_uri, </span>
<span id="cb26-3">    distribution<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FullyReplicated'</span>, </span>
<span id="cb26-4">    content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/plain'</span>, </span>
<span id="cb26-5">    s3_data_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'S3Prefix'</span></span>
<span id="cb26-6">)</span></code></pre></div>
</div>
<p>Let’s create a validation data channel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">validation_data <span class="op" style="color: #5E5E5E;">=</span> sagemaker.inputs.TrainingInput(</span>
<span id="cb27-2">    validation_s3_uri, </span>
<span id="cb27-3">    distribution<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FullyReplicated'</span>, </span>
<span id="cb27-4">    content_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/plain'</span>, </span>
<span id="cb27-5">    s3_data_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'S3Prefix'</span></span>
<span id="cb27-6">)</span></code></pre></div>
</div>
<p>Let’s now organize the data channels defined above as a dictionary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">data_channels <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb28-2">    <span class="st" style="color: #20794D;">'train'</span>: train_data, </span>
<span id="cb28-3">    <span class="st" style="color: #20794D;">'validation'</span>: validation_data </span>
<span id="cb28-4">}</span></code></pre></div>
</div>
<p>We will now start fitting the model to the dataset.</p>
<p>To do this we call the <code>fit</code> method of the estimator passing the configured train and validation inputs (data channels).</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">estimator.fit(</span>
<span id="cb29-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>..., <span class="co" style="color: #5E5E5E;"># train and validation input</span></span>
<span id="cb29-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span> <span class="co" style="color: #5E5E5E;"># do not wait for the job to complete before continuing</span></span>
<span id="cb29-4">)</span></code></pre></div>
<div class="cell" data-outputid="5c73b989-aaef-4d66-a97a-071d5224e40e">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">estimator.fit(</span>
<span id="cb30-2">    inputs<span class="op" style="color: #5E5E5E;">=</span>data_channels, </span>
<span id="cb30-3">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb30-4">)</span>
<span id="cb30-5"></span>
<span id="cb30-6">training_job_name <span class="op" style="color: #5E5E5E;">=</span> estimator.latest_training_job.name</span>
<span id="cb30-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Training Job Name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(training_job_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Job Name:  blazingtext-2023-02-06-12-48-14-823</code></pre>
</div>
</div>
<p>Let’s setup a watcher while we wait for the training job to complete.</p>
<div class="cell" data-outputid="ec783304-328a-45ae-acf2-366fa3db6a16">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb32-2"></span>
<span id="cb32-3">estimator.latest_training_job.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
2023-02-06 12:48:16 Starting - Starting the training job.........
2023-02-06 12:49:15 Starting - Preparing the instances for training..
2023-02-06 12:49:30 Downloading - Downloading input data.......
2023-02-06 12:50:10 Training - Downloading the training image..
2023-02-06 12:50:26 Training - Training image download completed. Training in progress.......
2023-02-06 12:51:02 Uploading - Uploading generated training model....................................................................
2023-02-06 12:56:53 Completed - Training job completed
CPU times: user 470 ms, sys: 76.5 ms, total: 547 ms
Wall time: 8min 28s</code></pre>
</div>
</div>
<p>Let’s now review the train and validation accuracy.</p>
<div class="cell" data-outputid="66ccfcce-3320-4916-9a33-163c920e81e9">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">estimator.training_job_analytics.dataframe()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: No metrics called train:mean_rho found</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>timestamp</th>
      <th>metric_name</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>train:accuracy</td>
      <td>0.5456</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.0</td>
      <td>validation:accuracy</td>
      <td>0.5021</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="deploy-the-model" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="deploy-the-model"><span class="header-section-number">4</span> Deploy the model</h2>
<p>Now lets deploy the trained model as an Endpoint.</p>
<div class="cell" data-outputid="81abb496-0741-4167-eb6d-4b97b85b78e4">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb36-2"></span>
<span id="cb36-3">text_classifier <span class="op" style="color: #5E5E5E;">=</span> estimator.deploy(initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb36-4">                                   instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb36-5">                                   serializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.serializers.JSONSerializer(),</span>
<span id="cb36-6">                                   deserializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.deserializers.JSONDeserializer())</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb36-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Endpoint name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(text_classifier.endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-----!
Endpoint name:  blazingtext-2023-02-06-12-56-55-806
CPU times: user 124 ms, sys: 4.38 ms, total: 128 ms
Wall time: 2min 32s</code></pre>
</div>
</div>
</section>
<section id="test-the-model" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="test-the-model"><span class="header-section-number">5</span> Test the model</h2>
<p>Let’s now test the model to see if it makes reasonable predictions.</p>
<p>We need to import the <code>nltk</code> library to convert the raw reviews into tokens that BlazingText recognizes.</p>
<div class="cell" data-outputid="e58ccf0a-00bc-4b85-9dfe-3329f6f2528b">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">import</span> nltk</span>
<span id="cb38-2">nltk.download(<span class="st" style="color: #20794D;">'punkt'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package punkt to /root/nltk_data...
[nltk_data]   Package punkt is already up-to-date!</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>True</code></pre>
</div>
</div>
<p>Then we need to specify sample reviews to predict the sentiment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">reviews <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'This product is great!'</span>,</span>
<span id="cb41-2">           <span class="st" style="color: #20794D;">'OK, but not great'</span>,</span>
<span id="cb41-3">           <span class="st" style="color: #20794D;">'This is not the right product.'</span>] </span></code></pre></div>
</div>
<p>Next we tokenize the reviews and specify the payload to use when calling the REST API.</p>
<div class="cell" data-outputid="b5bae882-80a2-4667-a11f-89b0487e45d3">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">tokenized_reviews <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">' '</span>.join(nltk.word_tokenize(review)) <span class="cf" style="color: #003B4F;">for</span> review <span class="kw" style="color: #003B4F;">in</span> reviews]</span>
<span id="cb42-2"></span>
<span id="cb42-3">payload <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"instances"</span> : tokenized_reviews}</span>
<span id="cb42-4"><span class="bu" style="color: null;">print</span>(payload)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'instances': ['This product is great !', 'OK , but not great', 'This is not the right product .']}</code></pre>
</div>
</div>
<p>Now we can predict the sentiment for each review. Calling the <code>predict</code> method of the text classifier passing the tokenized sentence instances (<code>payload</code>) into the data argument.</p>
<div class="cell" data-outputid="46ce1f0a-67ac-44cc-ebe1-5fd7c02cd7f3">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">predictions <span class="op" style="color: #5E5E5E;">=</span> text_classifier.predict(data<span class="op" style="color: #5E5E5E;">=</span>payload)</span>
<span id="cb44-2"><span class="cf" style="color: #003B4F;">for</span> prediction <span class="kw" style="color: #003B4F;">in</span> predictions:</span>
<span id="cb44-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Predicted class: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(prediction[<span class="st" style="color: #20794D;">'label'</span>][<span class="dv" style="color: #AD0000;">0</span>].lstrip(<span class="st" style="color: #20794D;">'__label__'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted class: 1
Predicted class: -1
Predicted class: -1</code></pre>
</div>
</div>
</section>
<section id="acknowledgements" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">6</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-02-06-creating-text-classifier-using-aws-sagemaker-blazingtext.html</guid>
  <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Train a model quickly with Amazon SageMaker Autopilot</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-05-train-model-aws-sagemaker-autopilot.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In an <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article we introduced AWS cloud services for data science</a>, and how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article, we will use <strong>Amazon Sagemaker Autopilot</strong> to train a natural language processing (NLP) model. The model will analyze customer feedback and classify the messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>Amazon SageMaker Autopilot automatically trains and tunes the best machine learning models for classification or regression, based on your data while allowing to maintain full control and visibility.</p>
<p>SageMaker Autopilot is an example of <strong>AutoML</strong>, much like <a href="https://livingdatalab.com/categories/#pycaret">Pycaret</a> which I have written about previously. In comparison, not only is Autopilot even more automated than Pycaret, it is also designed to work at large scale as is possible with <a href="https://livingdatalab.com/categories/#cloud-data-science">cloud data science solutions</a>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl.png" title="Amazon Sagemaker Autopilot - Solutions" class="img-fluid"></p>
<p>SageMaker Autopilot will inspect the raw dataset, apply feature processors, pick the best set of algorithms, train and tune multiple models, and then rank the models based on performance - all with just a few clicks. Autopilot transparently generates a set of Python scripts and notebooks for a complete end-to-end pipeline including data analysis, candidate generation, feature engineering, and model training/tuning.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl2.png" title="Amazon Sagemaker Autopilot - Details" class="img-fluid"></p>
<p>SageMaker Autopilot job consists of the following high-level steps: * <em>Data analysis</em> where the data is summarized and analyzed to determine which feature engineering techniques, hyper-parameters, and models to explore. * <em>Feature engineering</em> where the data is scrubbed, balanced, combined, and split into train and validation. * <em>Model training and tuning</em> where the top performing features, hyper-parameters, and models are selected and trained.</p>
<p>These re-usable scripts and notebooks give us full visibility into how the model candidates were created. Since Autopilot integrates natively with SageMaker Studio, we can visually explore the different models generated by SageMaker Autopilot.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_automl3.png" title="Amazon Sagemaker Autopilot - Overview" class="img-fluid"></p>
<p>SageMaker Autopilot can be used by people without machine learning experience to automatically train a model from a dataset. Additionally, experienced developers can use Autopilot to train a baseline model from which they can iterate and manually improve.</p>
<p>Autopilot is available through the SageMaker Studio UI and AWS Python SDK. In this project, we will use the AWS Python SDK to train a series of text-classification models and deploy the model with the highest accuracy.</p>
<p>For more details on Autopilot, please refer to this <a href="https://www.amazon.science/publications/amazon-sagemaker-autopilot-a-white-box-automl-solution-at-scale"><strong>Amazon Science Publication</strong></a>.</p>
</section>
<section id="use-case-analyze-customer-sentiment" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="use-case-analyze-customer-sentiment"><span class="header-section-number">2</span> Use case: Analyze Customer Sentiment</h2>
<p>Customer feedback appears across many channels including social media and partner websites. As a company, you want to capture this valuable product feedback to spot negative trends and improve the situation, if needed. Here we will train a model to classify the feedback messages into positive (1), neutral (0) and negative (-1) sentiment.</p>
<p>First, let’s install and import required modules.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-8"></span>
<span id="cb1-9">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w3'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-12">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-13">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-14"></span>
<span id="cb1-15">sm_runtime <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'sagemaker-runtime'</span>,</span>
<span id="cb1-16">                          config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-17"></span>
<span id="cb1-18">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm,</span>
<span id="cb1-19">                         sagemaker_runtime_client<span class="op" style="color: #5E5E5E;">=</span>sm_runtime)</span>
<span id="cb1-20"></span>
<span id="cb1-21">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-22">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-23">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="review-transformed-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="review-transformed-dataset"><span class="header-section-number">3</span> Review transformed dataset</h2>
<p>Let’s transform the dataset into a format that Autopilot recognizes. Specifically, a comma-separated file of <code>label,features</code> as shown here:</p>
<pre><code>sentiment,review_body
-1,"this is bad"
0,"this is ok"
1,"this is great"
...</code></pre>
<p>Sentiment is one of three classes: negative (-1), neutral (0), or positive (1). Autopilot requires that the target variable, <code>sentiment</code> is first and the set of features, just <code>review_body</code> in this case, come next.</p>
<div class="cell" data-outputid="2e643d00-6040-4ae6-a4b1-2f4a51efd224">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/balanced/womens_clothing_ecommerce_reviews_balanced.csv to ./womens_clothing_ecommerce_reviews_balanced.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="42205a63-3097-4dad-e034-b8e01f8bd90f">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb6-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1</td>
      <td>This suit did nothing for me. the top has zero...</td>
      <td>Swim</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Like other reviewers  i saw this dress on the ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>I wish i had read the reviews before purchasin...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>I ordered these pants in my usual size (xl) an...</td>
      <td>Legwear</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I noticed this top on one of the sales associa...</td>
      <td>Knits</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">path_autopilot <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">df[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>]].to_csv(path_autopilot, </span>
<span id="cb7-4">                                        sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>, </span>
<span id="cb7-5">                                        index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="configure-the-autopilot-job" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="configure-the-autopilot-job"><span class="header-section-number">4</span> Configure the Autopilot job</h2>
<section id="upload-data-to-s3-bucket" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="upload-data-to-s3-bucket"><span class="header-section-number">4.1</span> Upload data to S3 bucket</h3>
<div class="cell" data-outputid="59b3ec83-60f1-496b-bd45-868a80710d3a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">autopilot_train_s3_uri <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'autopilot/data'</span>, path<span class="op" style="color: #5E5E5E;">=</span>path_autopilot)</span>
<span id="cb8-2">autopilot_train_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>'s3://sagemaker-us-east-1-491783890788/autopilot/data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'</code></pre>
</div>
</div>
<p>Check the existence of the dataset in this S3 bucket folder:</p>
<div class="cell" data-outputid="61202b74-cc95-4c4b-93b3-92194b0d4747">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $autopilot_train_s3_uri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-05 14:47:43    2253749 womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv</code></pre>
</div>
</div>
</section>
<section id="s3-output-for-generated-assets" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="s3-output-for-generated-assets"><span class="header-section-number">4.2</span> S3 output for generated assets</h3>
<p>Set the S3 output path for the Autopilot outputs. This includes Jupyter notebooks (analysis), Python scripts (feature engineering), and trained models.</p>
<div class="cell" data-outputid="16db0f93-429d-49f1-9e7a-4747ef6796d6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model_output_s3_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/autopilot'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="bu" style="color: null;">print</span>(model_output_s3_uri)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>s3://sagemaker-us-east-1-491783890788/autopilot</code></pre>
</div>
</div>
</section>
<section id="configure-the-autopilot-job-1" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="configure-the-autopilot-job-1"><span class="header-section-number">4.3</span> Configure the Autopilot job</h3>
<p>Let’s now create the Autopilot job name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb14-2"></span>
<span id="cb14-3">timestamp <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(time.time())</span>
<span id="cb14-4"></span>
<span id="cb14-5">auto_ml_job_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'automl-dm-</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(timestamp)</span></code></pre></div>
</div>
<p>When configuring our Autopilot job, we need to specify the maximum number of candidates, <code>max_candidates</code>, to explore as well as the input/output S3 locations and target column to predict. In this case, we want to predict <code>sentiment</code> from the review text.</p>
<p>We will create an instance of the <code>sagemaker.automl.automl.AutoML</code> estimator class passing the required configuration parameters. Target attribute for predictions here is <code>sentiment</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">max_candidates <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">automl <span class="op" style="color: #5E5E5E;">=</span> sagemaker.automl.automl.AutoML(</span>
<span id="cb15-4">    target_attribute_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb15-5">    base_job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb15-6">    output_path<span class="op" style="color: #5E5E5E;">=</span>model_output_s3_uri, </span>
<span id="cb15-7">    max_candidates<span class="op" style="color: #5E5E5E;">=</span>max_candidates,</span>
<span id="cb15-8">    sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess,</span>
<span id="cb15-9">    role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb15-10">    max_runtime_per_training_job_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1200</span>,</span>
<span id="cb15-11">    total_job_runtime_in_seconds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7200</span></span>
<span id="cb15-12">)</span></code></pre></div>
</div>
</section>
</section>
<section id="launch-the-autopilot-job" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="launch-the-autopilot-job"><span class="header-section-number">5</span> Launch the Autopilot job</h2>
<p>Now we call the <code>fit</code> function of the configured estimator passing the S3 bucket input data path and the Autopilot job name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">automl.fit(</span>
<span id="cb16-2">    autopilot_train_s3_uri, </span>
<span id="cb16-3">    job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb16-4">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, </span>
<span id="cb16-5">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb16-6">)</span></code></pre></div>
</div>
</section>
<section id="track-autopilot-job-progress" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="track-autopilot-job-progress"><span class="header-section-number">6</span> Track Autopilot job progress</h2>
<p>Once the Autopilot job has been launched, we can track the job progress directly from the notebook using the SDK capabilities.</p>
<section id="autopilot-job-description" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="autopilot-job-description"><span class="header-section-number">6.1</span> Autopilot job description</h3>
<p>Function <code>describe_auto_ml_job</code> of the Amazon SageMaker service returns the information about the AutoML job in dictionary format. We can review the response syntax and response elements in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html"><strong>documentation</strong></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span></code></pre></div>
</div>
</section>
<section id="autopilot-job-status" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="autopilot-job-status"><span class="header-section-number">6.2</span> Autopilot job status</h3>
<p>To track the job progress we can use two response elements: <code>AutoMLJobStatus</code> and <code>AutoMLJobSecondaryStatus</code>, which correspond to the primary (Completed | InProgress | Failed | Stopped | Stopping) and secondary (AnalyzingData | FeatureEngineering | ModelTuning etc.) job states respectively. To see if the AutoML job has started, we can check the existence of the <code>AutoMLJobStatus</code> and <code>AutoMLJobSecondaryStatus</code> elements in the job description response.</p>
<p>We will use the following scheme to track the job progress:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># check if the job is still at certain stage</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;">while</span> [check <span class="st" style="color: #20794D;">'AutoMLJobStatus'</span> <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>] <span class="kw" style="color: #003B4F;">in</span> job_description_response:</span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;"># update the job description response</span></span>
<span id="cb18-4">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(AutoMLJobName<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb18-5">    <span class="co" style="color: #5E5E5E;"># print the message the Autopilot job is in the stage ...</span></span>
<span id="cb18-6">    <span class="bu" style="color: null;">print</span>([message])</span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;"># get a time step to check the status again</span></span>
<span id="cb18-8">    sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb18-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Autopilot job complete..."</span>)</span></code></pre></div>
<div class="cell" data-outputid="d2833a5c-7825-4691-9c44-b00af74da0e0">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'AutoMLJobStatus'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys() <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys():</span>
<span id="cb19-2">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb19-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet started. Please wait. '</span>)</span>
<span id="cb19-4">    <span class="co" style="color: #5E5E5E;"># function `json.dumps` encodes JSON string for printing.</span></span>
<span id="cb19-5">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb19-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for Autopilot job to start...'</span>)</span>
<span id="cb19-7">    sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] AutoML job started.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] AutoML job started.</code></pre>
</div>
</div>
</section>
<section id="review-the-sagemaker-processing-jobs" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="review-the-sagemaker-processing-jobs"><span class="header-section-number">6.3</span> Review the SageMaker processing jobs</h3>
<p>The Autopilot creates the required SageMaker processing jobs during the run:</p>
<ul>
<li>First processing job (data splitter) checks the data sanity, performs stratified shuffling and splits the data into training and validation.</li>
<li>Second processing job (candidate generator) first streams through the data to compute statistics for the dataset. Then, uses these statistics to identify the problem type, and possible types of every column-predictor: numeric, categorical, natural language, etc.</li>
</ul>
</section>
<section id="wait-for-the-data-analysis-step-to-finish" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="wait-for-the-data-analysis-step-to-finish"><span class="header-section-number">6.4</span> Wait for the data analysis step to finish</h3>
<p>Here we will use the same scheme as above to check the completion of the data analysis step. This step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status values <code>Starting</code> and then <code>AnalyzingData</code>.</p>
<div class="cell" data-outputid="814b1f9a-e40a-4eae-9700-2f5bfe3c98da" data-scrolled="true">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb21-2"></span>
<span id="cb21-3">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb21-4">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Starting'</span>, <span class="st" style="color: #20794D;">'AnalyzingData'</span>):</span>
<span id="cb21-8">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb21-9">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb21-10">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb21-11">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb21-12">        time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb21-13">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Data analysis phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb21-14">    </span>
<span id="cb21-15"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress FeatureEngineering
[OK] Data analysis phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "FeatureEngineering",
    "AutoMLJobStatus": "InProgress",
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 14:56:15.134000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "1815",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 14:56:16 GMT",
            "x-amzn-requestid": "0faeba6e-7645-46d4-a41d-658ebc1167e8"
        },
        "HTTPStatusCode": 200,
        "RequestId": "0faeba6e-7645-46d4-a41d-658ebc1167e8",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 26.6 ms, sys: 43 µs, total: 26.7 ms
Wall time: 15.2 s</code></pre>
</div>
</div>
</section>
<section id="view-generated-notebooks" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="view-generated-notebooks"><span class="header-section-number">6.5</span> View generated notebooks</h3>
<p>Once data analysis is complete, SageMaker AutoPilot generates two notebooks: * <a href="https://nbviewer.org/github/pranath/pds/blob/main/SageMakerAutopilotDataExplorationNotebook.ipynb">Data exploration</a> * <a href="https://nbviewer.org/github/pranath/pds/blob/main/SageMakerAutopilotCandidateDefinitionNotebook.ipynb">Candidate definition</a></p>
<p>Notebooks are included in the AutoML job artifacts generated during the run. Before checking the existence of the notebooks, we can check if the artifacts have been generated.</p>
<p>We will use the status check scheme described above. The generation of artifacts can be identified by existence of <code>AutoMLJobArtifacts</code> element in the keys of the job description response.</p>
<div class="cell" data-outputid="ca0e1bec-c2ce-4006-92af-8d6948add323">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># get the information about the running Autopilot job</span></span>
<span id="cb23-2">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)  </span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;"># keep in the while loop until the Autopilot job artifacts will be generated</span></span>
<span id="cb23-5"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'AutoMLJobArtifacts'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response.keys(): </span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;"># update the information about the running Autopilot job</span></span>
<span id="cb23-7">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb23-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet generated the artifacts. Please wait. '</span>)</span>
<span id="cb23-9">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb23-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for AutoMLJobArtifacts...'</span>)</span>
<span id="cb23-11">    time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb23-12"></span>
<span id="cb23-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] AutoMLJobArtifacts generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] AutoMLJobArtifacts generated.</code></pre>
</div>
</div>
<p>We need to wait for Autopilot to make the notebooks available.</p>
<p>We will again use the status check scheme described above. Notebooks creation can be identified by existence of <code>DataExplorationNotebookLocation</code> element in the keys of the <code>job_description_response['AutoMLJobArtifacts']</code> dictionary.</p>
<div class="cell" data-outputid="c0bb5e6e-367a-465e-8b9b-d50875e59e78">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># get the information about the running Autopilot job</span></span>
<span id="cb25-2">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;"># keep in the while loop until the notebooks will be created</span></span>
<span id="cb25-5"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'DataExplorationNotebookLocation'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobArtifacts'</span>].keys(): </span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;"># update the information about the running Autopilot job</span></span>
<span id="cb25-7">    job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name) </span>
<span id="cb25-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job has not yet generated the notebooks. Please wait. '</span>)</span>
<span id="cb25-9">    <span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb25-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Waiting for DataExplorationNotebookLocation...'</span>)</span>
<span id="cb25-11">    time.sleep(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] DataExplorationNotebookLocation found.'</span>)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] DataExplorationNotebookLocation found.</code></pre>
</div>
</div>
<p>We could review the generated resources in S3 directly. We can find the notebooks in the folder <code>notebooks</code> and download them by clicking on object <code>Actions</code>/<code>Object actions</code> -&gt; <code>Download as</code>/<code>Download</code>.</p>
</section>
</section>
<section id="feature-engineering" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="feature-engineering"><span class="header-section-number">7</span> Feature engineering</h2>
<p>We will use the status check scheme described above. The feature engineering step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status value <code>FeatureEngineering</code>.</p>
<div class="cell" data-outputid="f9783f05-9391-4602-e13b-5897ee7abada" data-scrolled="true">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb27-2"></span>
<span id="cb27-3">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb27-4">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb27-5">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb27-6"><span class="bu" style="color: null;">print</span>(job_status)</span>
<span id="cb27-7"><span class="bu" style="color: null;">print</span>(job_sec_status)</span>
<span id="cb27-8"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb27-9">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'FeatureEngineering'</span>): </span>
<span id="cb27-10">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb27-11">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb27-12">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb27-13">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb27-14">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb27-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Feature engineering phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress
FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress FeatureEngineering
InProgress ModelTuning
[OK] Feature engineering phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "ModelTuning",
    "AutoMLJobStatus": "InProgress",
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:04:28.632000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "1808",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 15:04:28 GMT",
            "x-amzn-requestid": "eecffe9b-ef5e-4e69-b4ca-d0b0b3a95be7"
        },
        "HTTPStatusCode": 200,
        "RequestId": "eecffe9b-ef5e-4e69-b4ca-d0b0b3a95be7",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 378 ms, sys: 49.3 ms, total: 427 ms
Wall time: 7min 7s</code></pre>
</div>
</div>
</section>
<section id="model-training-and-tuning" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="model-training-and-tuning"><span class="header-section-number">8</span> Model training and tuning</h2>
<p>We can use the status check scheme described above. the model tuning step can be identified with the (primary) job status value <code>InProgress</code> and secondary job status value <code>ModelTuning</code>.</p>
<div class="cell" data-outputid="d2921959-8f60-49c9-e79a-17b7e0605d04" data-scrolled="true">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb29-2"></span>
<span id="cb29-3">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb29-4">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb29-5">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb29-6"><span class="bu" style="color: null;">print</span>(job_status)</span>
<span id="cb29-7"><span class="bu" style="color: null;">print</span>(job_sec_status)</span>
<span id="cb29-8"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb29-9">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'InProgress'</span>) <span class="kw" style="color: #003B4F;">and</span> job_sec_status <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'ModelTuning'</span>): </span>
<span id="cb29-10">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb29-11">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb29-12">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb29-13">        <span class="bu" style="color: null;">print</span>(job_status, job_sec_status)</span>
<span id="cb29-14">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb29-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Model tuning phase completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb29-16">    </span>
<span id="cb29-17"><span class="bu" style="color: null;">print</span>(json.dumps(job_description_response, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>InProgress
ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress ModelTuning
InProgress MaxCandidatesReached
[OK] Model tuning phase completed.

{
    "AutoMLJobArn": "arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463",
    "AutoMLJobArtifacts": {
        "CandidateDefinitionNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb",
        "DataExplorationNotebookLocation": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb"
    },
    "AutoMLJobConfig": {
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "SecurityConfig": {
            "EnableInterContainerTrafficEncryption": false
        }
    },
    "AutoMLJobName": "automl-dm-1675608463",
    "AutoMLJobSecondaryStatus": "MaxCandidatesReached",
    "AutoMLJobStatus": "InProgress",
    "BestCandidate": {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6152600049972534
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6158699989318848
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.843940019607544
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6150500178337097
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:01+00:00",
        "EndTime": "2023-02-05 15:07:54+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6150500178337097
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    "CreationTime": "2023-02-05 14:47:43.853000+00:00",
    "GenerateCandidateDefinitionsOnly": false,
    "InputDataConfig": [
        {
            "ChannelType": "training",
            "ContentType": "text/csv;header=present",
            "DataSource": {
                "S3DataSource": {
                    "S3DataType": "S3Prefix",
                    "S3Uri": "s3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv"
                }
            },
            "TargetAttributeName": "sentiment"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:09:06.661000+00:00",
    "OutputDataConfig": {
        "S3OutputPath": "s3://sagemaker-us-east-1-491783890788/autopilot"
    },
    "ResolvedAttributes": {
        "AutoMLJobObjective": {
            "MetricName": "Accuracy"
        },
        "CompletionCriteria": {
            "MaxAutoMLJobRuntimeInSeconds": 7200,
            "MaxCandidates": 3,
            "MaxRuntimePerTrainingJobInSeconds": 1200
        },
        "ProblemType": "MulticlassClassification"
    },
    "ResponseMetadata": {
        "HTTPHeaders": {
            "content-length": "5731",
            "content-type": "application/x-amz-json-1.1",
            "date": "Sun, 05 Feb 2023 15:09:06 GMT",
            "x-amzn-requestid": "d6af6156-cd79-4bf4-8025-52c85f36afa3"
        },
        "HTTPStatusCode": 200,
        "RequestId": "d6af6156-cd79-4bf4-8025-52c85f36afa3",
        "RetryAttempts": 0
    },
    "RoleArn": "arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role"
}
CPU times: user 241 ms, sys: 24.9 ms, total: 266 ms
Wall time: 4min 12s</code></pre>
</div>
</div>
<p>Finally, we can check the completion of the Autopilot job looking for the <code>Completed</code> job status.</p>
<div class="cell" data-outputid="49ad7397-10cf-4dcf-8d4c-3a8c849fc769">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb31-4"></span>
<span id="cb31-5">job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb31-6">pprint(job_description_response)</span>
<span id="cb31-7">job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb31-8">job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb31-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_sec_status))</span>
<span id="cb31-11"><span class="cf" style="color: #003B4F;">if</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Stopped'</span>, <span class="st" style="color: #20794D;">'Failed'</span>):</span>
<span id="cb31-12">    <span class="cf" style="color: #003B4F;">while</span> job_status <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'Completed'</span>):</span>
<span id="cb31-13">        job_description_response <span class="op" style="color: #5E5E5E;">=</span> automl.describe_auto_ml_job(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb31-14">        job_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobStatus'</span>]</span>
<span id="cb31-15">        job_sec_status <span class="op" style="color: #5E5E5E;">=</span> job_description_response[<span class="st" style="color: #20794D;">'AutoMLJobSecondaryStatus'</span>]</span>
<span id="cb31-16">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_sec_status))        </span>
<span id="cb31-18">        time.sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb31-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Autopilot job completed.</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb31-20"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb31-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span>
<span id="cb31-22">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Secondary job status: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(job_status))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'AutoMLJobArn': 'arn:aws:sagemaker:us-east-1:491783890788:automl-job/automl-dm-1675608463',
 'AutoMLJobArtifacts': {'CandidateDefinitionNotebookLocation': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb',
                        'DataExplorationNotebookLocation': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/sagemaker-automl-candidates/automl-dm-1675608463-pr-1-210c7900f5854fdc89ce01c59579c034fb883/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb'},
 'AutoMLJobConfig': {'CompletionCriteria': {'MaxAutoMLJobRuntimeInSeconds': 7200,
                                            'MaxCandidates': 3,
                                            'MaxRuntimePerTrainingJobInSeconds': 1200},
                     'SecurityConfig': {'EnableInterContainerTrafficEncryption': False}},
 'AutoMLJobName': 'automl-dm-1675608463',
 'AutoMLJobSecondaryStatus': 'MergingAutoMLTaskReports',
 'AutoMLJobStatus': 'InProgress',
 'BestCandidate': {'CandidateName': 'automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                   'CandidateProperties': {'CandidateMetrics': [{'MetricName': 'F1macro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'F1macro',
                                                                 'Value': 0.6152600049972534},
                                                                {'MetricName': 'PrecisionMacro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'PrecisionMacro',
                                                                 'Value': 0.6158699989318848},
                                                                {'MetricName': 'Accuracy',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'Accuracy',
                                                                 'Value': 0.6150500178337097},
                                                                {'MetricName': 'BalancedAccuracy',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'BalancedAccuracy',
                                                                 'Value': 0.6150500178337097},
                                                                {'MetricName': 'LogLoss',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'LogLoss',
                                                                 'Value': 0.843940019607544},
                                                                {'MetricName': 'RecallMacro',
                                                                 'Set': 'Validation',
                                                                 'StandardMetricName': 'RecallMacro',
                                                                 'Value': 0.6150500178337097}]},
                   'CandidateStatus': 'Completed',
                   'CandidateSteps': [{'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5',
                                       'CandidateStepName': 'automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5',
                                       'CandidateStepType': 'AWS::SageMaker::ProcessingJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a',
                                       'CandidateStepName': 'automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a',
                                       'CandidateStepType': 'AWS::SageMaker::TrainingJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd',
                                       'CandidateStepName': 'automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd',
                                       'CandidateStepType': 'AWS::SageMaker::TransformJob'},
                                      {'CandidateStepArn': 'arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                                       'CandidateStepName': 'automl-dm-1675608463sujxUg8wYQX0-002-657fba80',
                                       'CandidateStepType': 'AWS::SageMaker::TrainingJob'}],
                   'CreationTime': datetime.datetime(2023, 2, 5, 15, 6, 1, tzinfo=tzlocal()),
                   'EndTime': datetime.datetime(2023, 2, 5, 15, 7, 54, tzinfo=tzlocal()),
                   'FinalAutoMLJobObjectiveMetric': {'MetricName': 'validation:accuracy',
                                                     'Value': 0.6150500178337097},
                   'InferenceContainers': [{'Environment': {'AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF': '1',
                                                            'AUTOML_TRANSFORM_MODE': 'feature-transform',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'application/x-recordio-protobuf',
                                                            'SAGEMAKER_PROGRAM': 'sagemaker_serve',
                                                            'SAGEMAKER_SUBMIT_DIRECTORY': '/opt/ml/model/code'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz'},
                                           {'Environment': {'MAX_CONTENT_LENGTH': '20971520',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'text/csv',
                                                            'SAGEMAKER_INFERENCE_OUTPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_SUPPORTED': 'predicted_label,probability,probabilities'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz'},
                                           {'Environment': {'AUTOML_TRANSFORM_MODE': 'inverse-label-transform',
                                                            'SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT': 'text/csv',
                                                            'SAGEMAKER_INFERENCE_INPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_OUTPUT': 'predicted_label',
                                                            'SAGEMAKER_INFERENCE_SUPPORTED': 'predicted_label,probability,labels,probabilities',
                                                            'SAGEMAKER_PROGRAM': 'sagemaker_serve',
                                                            'SAGEMAKER_SUBMIT_DIRECTORY': '/opt/ml/model/code'},
                                            'Image': '683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3',
                                            'ModelDataUrl': 's3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz'}],
                   'LastModifiedTime': datetime.datetime(2023, 2, 5, 15, 9, 6, 585000, tzinfo=tzlocal()),
                   'ObjectiveStatus': 'Succeeded'},
 'CreationTime': datetime.datetime(2023, 2, 5, 14, 47, 43, 853000, tzinfo=tzlocal()),
 'GenerateCandidateDefinitionsOnly': False,
 'InputDataConfig': [{'ChannelType': 'training',
                      'ContentType': 'text/csv;header=present',
                      'DataSource': {'S3DataSource': {'S3DataType': 'S3Prefix',
                                                      'S3Uri': 's3://sagemaker-us-east-1-491783890788/auto-ml-input-data/womens_clothing_ecommerce_reviews_balanced_for_autopilot.csv'}},
                      'TargetAttributeName': 'sentiment'}],
 'LastModifiedTime': datetime.datetime(2023, 2, 5, 15, 9, 7, 862000, tzinfo=tzlocal()),
 'OutputDataConfig': {'S3OutputPath': 's3://sagemaker-us-east-1-491783890788/autopilot'},
 'ResolvedAttributes': {'AutoMLJobObjective': {'MetricName': 'Accuracy'},
                        'CompletionCriteria': {'MaxAutoMLJobRuntimeInSeconds': 7200,
                                               'MaxCandidates': 3,
                                               'MaxRuntimePerTrainingJobInSeconds': 1200},
                        'ProblemType': 'MulticlassClassification'},
 'ResponseMetadata': {'HTTPHeaders': {'content-length': '5735',
                                      'content-type': 'application/x-amz-json-1.1',
                                      'date': 'Sun, 05 Feb 2023 15:09:27 GMT',
                                      'x-amzn-requestid': '5577738e-56f0-40ea-8ae0-9f4f512ecae8'},
                      'HTTPStatusCode': 200,
                      'RequestId': '5577738e-56f0-40ea-8ae0-9f4f512ecae8',
                      'RetryAttempts': 0},
 'RoleArn': 'arn:aws:iam::491783890788:role/sagemaker-studio-vpc-firewall-us-east-1-sagemaker-execution-role'}
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  InProgress
Secondary job status:  MergingAutoMLTaskReports
Job status:  Completed
Secondary job status:  Completed
[OK] Autopilot job completed.

CPU times: user 719 ms, sys: 63.7 ms, total: 783 ms
Wall time: 7min 59s</code></pre>
</div>
</div>
<section id="compare-model-candidates" class="level3" data-number="8.1">
<h3 data-number="8.1" class="anchored" data-anchor-id="compare-model-candidates"><span class="header-section-number">8.1</span> Compare model candidates</h3>
<p>Once model tuning is complete, we can view all the candidates (pipeline evaluations with different hyperparameter combinations) that were explored by AutoML and sort them by their final performance metric.</p>
<p>We will list candidates generated by Autopilot sorted by accuracy from highest to lowest.</p>
<p>To do this we will use the <code>list_candidates</code> function passing the Autopilot job name <code>auto_ml_job_name</code> with the accuracy field <code>FinalObjectiveMetricValue</code>. It returns the list of candidates with the information about them.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(</span>
<span id="cb33-2">    job_name<span class="op" style="color: #5E5E5E;">=</span>..., <span class="co" style="color: #5E5E5E;"># Autopilot job name</span></span>
<span id="cb33-3">    sort_by<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'...'</span> <span class="co" style="color: #5E5E5E;"># accuracy field name</span></span>
<span id="cb33-4">)</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(</span>
<span id="cb34-2">    job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name, </span>
<span id="cb34-3">    sort_by<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'FinalObjectiveMetricValue'</span> </span>
<span id="cb34-4">)</span></code></pre></div>
</div>
<p>We can review the response syntax and response elements of the function <code>list_candidates</code> in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLCandidate.html"><strong>documentation</strong></a>. Now let’s put the candidate existence check into the loop:</p>
<div class="cell" data-outputid="de90b063-75f7-4e71-950b-77a0af2a7761">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">while</span> candidates <span class="op" style="color: #5E5E5E;">==</span> []:</span>
<span id="cb35-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb35-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating the candidates. Please wait.'</span>)</span>
<span id="cb35-4">    time.sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] Candidates generated.'</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] Candidates generated.</code></pre>
</div>
</div>
<p>The information about each of the candidates is in the dictionary with the following keys:</p>
<div class="cell" data-outputid="138a0ce9-bff9-46e2-a0f7-c447f8e0244e">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;">print</span>(candidates[<span class="dv" style="color: #AD0000;">0</span>].keys())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['CandidateName', 'FinalAutoMLJobObjectiveMetric', 'ObjectiveStatus', 'CandidateSteps', 'CandidateStatus', 'InferenceContainers', 'CreationTime', 'EndTime', 'LastModifiedTime', 'CandidateProperties'])</code></pre>
</div>
</div>
<p><code>CandidateName</code> contains the candidate name and the <code>FinalAutoMLJobObjectiveMetric</code> element contains the metric information which can be used to identify the best candidate later. Let’s check that they were generated.</p>
<div class="cell" data-outputid="02f16f63-e28d-479f-d706-03fe90d71bd5">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'CandidateName'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> candidates[<span class="dv" style="color: #AD0000;">0</span>]:</span>
<span id="cb39-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb39-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating CandidateName. Please wait. '</span>)</span>
<span id="cb39-4">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] CandidateName generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] CandidateName generated.</code></pre>
</div>
</div>
<div class="cell" data-outputid="921a1c6b-73b3-4a1b-d268-5bfa8ad3d78b">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> candidates[<span class="dv" style="color: #AD0000;">0</span>]:</span>
<span id="cb41-2">    candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb41-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot job is generating FinalAutoMLJobObjectiveMetric. Please wait. '</span>)</span>
<span id="cb41-4">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] FinalAutoMLJobObjectiveMetric generated.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] FinalAutoMLJobObjectiveMetric generated.</code></pre>
</div>
</div>
<div class="cell" data-outputid="3abcb0b9-9173-4294-c91f-bf6a9ca334f9" data-scrolled="true">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;">print</span>(json.dumps(candidates, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
        "CandidateProperties": {
            "CandidateArtifactLocations": {
                "Explainability": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/explainability/output",
                "ModelInsights": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/model_monitor/output"
            },
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6152600049972534
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6158699989318848
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6150500178337097
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.843940019607544
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6150500178337097
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:01+00:00",
        "EndTime": "2023-02-05 15:07:54+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6150500178337097
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.6157000064849854
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.6168199777603149
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.6149100065231323
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.6149100065231323
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 0.8395400047302246
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.6149100065231323
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e",
                "CandidateStepName": "automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp0-rpb-1-57a73878e9f24b9dbe23bf82b200317",
                "CandidateStepName": "automl-dm-1675608463-dpp0-rpb-1-57a73878e9f24b9dbe23bf82b200317",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:05:53+00:00",
        "EndTime": "2023-02-05 15:07:46+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.6149100065231323
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp0-xgb/automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp0-1-b325f697683a4300957f609440a1906660e/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.515000+00:00",
        "ObjectiveStatus": "Succeeded"
    },
    {
        "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
        "CandidateProperties": {
            "CandidateMetrics": [
                {
                    "MetricName": "F1macro",
                    "Set": "Validation",
                    "StandardMetricName": "F1macro",
                    "Value": 0.39879000186920166
                },
                {
                    "MetricName": "PrecisionMacro",
                    "Set": "Validation",
                    "StandardMetricName": "PrecisionMacro",
                    "Value": 0.39879998564720154
                },
                {
                    "MetricName": "Accuracy",
                    "Set": "Validation",
                    "StandardMetricName": "Accuracy",
                    "Value": 0.3990600109100342
                },
                {
                    "MetricName": "BalancedAccuracy",
                    "Set": "Validation",
                    "StandardMetricName": "BalancedAccuracy",
                    "Value": 0.3990600109100342
                },
                {
                    "MetricName": "LogLoss",
                    "Set": "Validation",
                    "StandardMetricName": "LogLoss",
                    "Value": 1.2047499418258667
                },
                {
                    "MetricName": "RecallMacro",
                    "Set": "Validation",
                    "StandardMetricName": "RecallMacro",
                    "Value": 0.3990600109100342
                }
            ]
        },
        "CandidateStatus": "Completed",
        "CandidateSteps": [
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
                "CandidateStepType": "AWS::SageMaker::ProcessingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29",
                "CandidateStepName": "automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp1-csv-1-24672b27ae4440179a3b7b3070f05ec",
                "CandidateStepName": "automl-dm-1675608463-dpp1-csv-1-24672b27ae4440179a3b7b3070f05ec",
                "CandidateStepType": "AWS::SageMaker::TransformJob"
            },
            {
                "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
                "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e",
                "CandidateStepType": "AWS::SageMaker::TrainingJob"
            }
        ],
        "CreationTime": "2023-02-05 15:06:13+00:00",
        "EndTime": "2023-02-05 15:08:50+00:00",
        "FinalAutoMLJobObjectiveMetric": {
            "MetricName": "validation:accuracy",
            "Value": 0.3990600109100342
        },
        "InferenceContainers": [
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "feature-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29/output/model.tar.gz"
            },
            {
                "Environment": {
                    "MAX_CONTENT_LENGTH": "20971520",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp1-xgb/automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e/output/model.tar.gz"
            },
            {
                "Environment": {
                    "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                    "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                    "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                    "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                    "SAGEMAKER_PROGRAM": "sagemaker_serve",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
                },
                "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
                "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp1-1-8b1885df2d2546b0abb07a329d1fb466b29/output/model.tar.gz"
            }
        ],
        "LastModifiedTime": "2023-02-05 15:09:06.513000+00:00",
        "ObjectiveStatus": "Succeeded"
    }
]</code></pre>
</div>
</div>
<p>You can print the names of the candidates with their metric values:</p>
<div class="cell" data-outputid="9b1e7165-6756-4011-d33c-1ff82e372aa7">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"metric "</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(candidates[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'MetricName'</span>]))</span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="cf" style="color: #003B4F;">for</span> index, candidate <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(candidates):</span>
<span id="cb45-4">    <span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">str</span>(index) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"  "</span> </span>
<span id="cb45-5">        <span class="op" style="color: #5E5E5E;">+</span> candidate[<span class="st" style="color: #20794D;">'CandidateName'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"  "</span> </span>
<span id="cb45-6">        <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'Value'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>metric validation:accuracy
0  automl-dm-1675608463sujxUg8wYQX0-002-657fba80  0.6150500178337097
1  automl-dm-1675608463sujxUg8wYQX0-001-5d775b4b  0.6149100065231323
2  automl-dm-1675608463sujxUg8wYQX0-003-a2d5723e  0.3990600109100342</code></pre>
</div>
</div>
</section>
<section id="review-best-candidate" class="level3" data-number="8.2">
<h3 data-number="8.2" class="anchored" data-anchor-id="review-best-candidate"><span class="header-section-number">8.2</span> Review best candidate</h3>
<p>Now that we have successfully completed the Autopilot job on the dataset and visualized the trials, we can get the information about the best candidate model and review it.</p>
<p>We can use the <code>best_candidate</code> function passing the Autopilot job name. <strong>Note</strong>: This function will give an error if candidates have not been generated.</p>
<div class="cell" data-outputid="a03972d5-a693-4093-ba59-7425af7a055a">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">candidates <span class="op" style="color: #5E5E5E;">=</span> automl.list_candidates(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="cf" style="color: #003B4F;">if</span> candidates <span class="op" style="color: #5E5E5E;">!=</span> []:</span>
<span id="cb47-4">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(</span>
<span id="cb47-5">        job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name </span>
<span id="cb47-6">    )</span>
<span id="cb47-7">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "CandidateName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
    "CandidateProperties": {
        "CandidateArtifactLocations": {
            "Explainability": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/explainability/output",
            "ModelInsights": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/documentation/model_monitor/output"
        },
        "CandidateMetrics": [
            {
                "MetricName": "F1macro",
                "Set": "Validation",
                "StandardMetricName": "F1macro",
                "Value": 0.6152600049972534
            },
            {
                "MetricName": "PrecisionMacro",
                "Set": "Validation",
                "StandardMetricName": "PrecisionMacro",
                "Value": 0.6158699989318848
            },
            {
                "MetricName": "Accuracy",
                "Set": "Validation",
                "StandardMetricName": "Accuracy",
                "Value": 0.6150500178337097
            },
            {
                "MetricName": "BalancedAccuracy",
                "Set": "Validation",
                "StandardMetricName": "BalancedAccuracy",
                "Value": 0.6150500178337097
            },
            {
                "MetricName": "LogLoss",
                "Set": "Validation",
                "StandardMetricName": "LogLoss",
                "Value": 0.843940019607544
            },
            {
                "MetricName": "RecallMacro",
                "Set": "Validation",
                "StandardMetricName": "RecallMacro",
                "Value": 0.6150500178337097
            }
        ]
    },
    "CandidateStatus": "Completed",
    "CandidateSteps": [
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:processing-job/automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
            "CandidateStepName": "automl-dm-1675608463-db-1-ec0fb37f4b964d1a9485854c252aa8f0683f5",
            "CandidateStepType": "AWS::SageMaker::ProcessingJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
            "CandidateStepName": "automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a",
            "CandidateStepType": "AWS::SageMaker::TrainingJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:transform-job/automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
            "CandidateStepName": "automl-dm-1675608463-dpp2-rpb-1-fd31c8d697b34a02a3472ce6d7557cd",
            "CandidateStepType": "AWS::SageMaker::TransformJob"
        },
        {
            "CandidateStepArn": "arn:aws:sagemaker:us-east-1:491783890788:training-job/automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
            "CandidateStepName": "automl-dm-1675608463sujxUg8wYQX0-002-657fba80",
            "CandidateStepType": "AWS::SageMaker::TrainingJob"
        }
    ],
    "CreationTime": "2023-02-05 15:06:01+00:00",
    "EndTime": "2023-02-05 15:07:54+00:00",
    "FinalAutoMLJobObjectiveMetric": {
        "MetricName": "validation:accuracy",
        "Value": 0.6150500178337097
    },
    "InferenceContainers": [
        {
            "Environment": {
                "AUTOML_SPARSE_ENCODE_RECORDIO_PROTOBUF": "1",
                "AUTOML_TRANSFORM_MODE": "feature-transform",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "application/x-recordio-protobuf",
                "SAGEMAKER_PROGRAM": "sagemaker_serve",
                "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
        },
        {
            "Environment": {
                "MAX_CONTENT_LENGTH": "20971520",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,probabilities"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.3-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/tuning/automl-dm--dpp2-xgb/automl-dm-1675608463sujxUg8wYQX0-002-657fba80/output/model.tar.gz"
        },
        {
            "Environment": {
                "AUTOML_TRANSFORM_MODE": "inverse-label-transform",
                "SAGEMAKER_DEFAULT_INVOCATIONS_ACCEPT": "text/csv",
                "SAGEMAKER_INFERENCE_INPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_OUTPUT": "predicted_label",
                "SAGEMAKER_INFERENCE_SUPPORTED": "predicted_label,probability,labels,probabilities",
                "SAGEMAKER_PROGRAM": "sagemaker_serve",
                "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code"
            },
            "Image": "683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-sklearn-automl:2.5-1-cpu-py3",
            "ModelDataUrl": "s3://sagemaker-us-east-1-491783890788/autopilot/automl-dm-1675608463/data-processor-models/automl-dm-1675608463-dpp2-1-f8c17915c5bd4efbb7862d503ce9d50304a/output/model.tar.gz"
        }
    ],
    "LastModifiedTime": "2023-02-05 15:09:06.585000+00:00",
    "ObjectiveStatus": "Succeeded"
}</code></pre>
</div>
</div>
<p>Check the existence of the candidate name for the best candidate.</p>
<div class="cell" data-outputid="3022057b-70ce-4f1d-beac-9a2e5d3f11e7">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'CandidateName'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> best_candidate:</span>
<span id="cb49-2">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb49-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot Job is generating BestCandidate CandidateName. Please wait. '</span>)</span>
<span id="cb49-4">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb49-5">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] BestCandidate CandidateName generated.'</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] BestCandidate CandidateName generated.</code></pre>
</div>
</div>
<p>Check the existence of the metric value for the best candidate.</p>
<div class="cell" data-outputid="74fdda50-1229-4e48-aa24-dc424b81294d">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="cf" style="color: #003B4F;">while</span> <span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> best_candidate:</span>
<span id="cb51-2">    best_candidate <span class="op" style="color: #5E5E5E;">=</span> automl.best_candidate(job_name<span class="op" style="color: #5E5E5E;">=</span>auto_ml_job_name)</span>
<span id="cb51-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[INFO] Autopilot Job is generating BestCandidate FinalAutoMLJobObjectiveMetric. Please wait. '</span>)</span>
<span id="cb51-4">    <span class="bu" style="color: null;">print</span>(json.dumps(best_candidate, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sort_keys<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>))</span>
<span id="cb51-5">    sleep(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb51-6"></span>
<span id="cb51-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'[OK] BestCandidate FinalAutoMLJobObjectiveMetric generated.'</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[OK] BestCandidate FinalAutoMLJobObjectiveMetric generated.</code></pre>
</div>
</div>
<p>Print the information about the best candidate:</p>
<div class="cell" data-outputid="cdffee6b-633d-450d-d6f9-f39757ae553d">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">best_candidate_identifier <span class="op" style="color: #5E5E5E;">=</span> best_candidate[<span class="st" style="color: #20794D;">'CandidateName'</span>]</span>
<span id="cb53-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Candidate name: "</span> <span class="op" style="color: #5E5E5E;">+</span> best_candidate_identifier)</span>
<span id="cb53-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Metric name: "</span> <span class="op" style="color: #5E5E5E;">+</span> best_candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'MetricName'</span>])</span>
<span id="cb53-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Metric value: "</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(best_candidate[<span class="st" style="color: #20794D;">'FinalAutoMLJobObjectiveMetric'</span>][<span class="st" style="color: #20794D;">'Value'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Candidate name: automl-dm-1675608463sujxUg8wYQX0-002-657fba80
Metric name: validation:accuracy
Metric value: 0.6150500178337097</code></pre>
</div>
</div>
</section>
</section>
<section id="review-all-output-in-s3-bucket" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="review-all-output-in-s3-bucket"><span class="header-section-number">9</span> Review all output in S3 bucket</h2>
<p>We can see the artifacts generated by Autopilot including the following:</p>
<pre><code>data-processor-models/        # "models" learned to transform raw data into features 
documentation/                # explainability and other documentation about your model
preprocessed-data/            # data for train and validation
sagemaker-automl-candidates/  # candidate models which autopilot compares
transformed-data/             # candidate-specific data for train and validation
tuning/                       # candidate-specific tuning results
validations/                  # validation results</code></pre>
</section>
<section id="deploy-and-test-best-candidate-model" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="deploy-and-test-best-candidate-model"><span class="header-section-number">10</span> Deploy and test best candidate model</h2>
<section id="deploy-best-candidate-model" class="level3" data-number="10.1">
<h3 data-number="10.1" class="anchored" data-anchor-id="deploy-best-candidate-model"><span class="header-section-number">10.1</span> Deploy best candidate model</h3>
<p>While batch transformations are supported, we will deploy our model as a REST Endpoint in this example.</p>
<p>First, we need to customize the inference response. The inference containers generated by SageMaker Autopilot allow you to select the response content for predictions. By default the inference containers are configured to generate the <code>predicted_label</code>. But we can add <code>probability</code> into the list of inference response keys.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">inference_response_keys <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'predicted_label'</span>, <span class="st" style="color: #20794D;">'probability'</span>]</span></code></pre></div>
</div>
<p>Now we will create a SageMaker endpoint from the best candidate generated by Autopilot. Wait for SageMaker to deploy the endpoint.</p>
<div class="cell" data-outputid="5f61b43c-9f4e-4371-c77f-7c11ea0844f6">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">autopilot_model <span class="op" style="color: #5E5E5E;">=</span> automl.deploy(</span>
<span id="cb57-2">    initial_instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb57-3">    instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb57-4">    candidate<span class="op" style="color: #5E5E5E;">=</span>best_candidate,</span>
<span id="cb57-5">    inference_response_keys<span class="op" style="color: #5E5E5E;">=</span>inference_response_keys,</span>
<span id="cb57-6">    predictor_cls<span class="op" style="color: #5E5E5E;">=</span>sagemaker.predictor.Predictor,</span>
<span id="cb57-7">    serializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.serializers.JSONSerializer(),</span>
<span id="cb57-8">    deserializer<span class="op" style="color: #5E5E5E;">=</span>sagemaker.deserializers.JSONDeserializer()</span>
<span id="cb57-9">)</span>
<span id="cb57-10"></span>
<span id="cb57-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Endpoint name:  </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(autopilot_model.endpoint_name))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-------!
Endpoint name:  sagemaker-sklearn-automl-2023-02-05-15-18-52-694</code></pre>
</div>
</div>
</section>
<section id="test-the-model" class="level3" data-number="10.2">
<h3 data-number="10.2" class="anchored" data-anchor-id="test-the-model"><span class="header-section-number">10.2</span> Test the model</h3>
<p>Let’s invoke a few predictions for the actual reviews using the deployed endpoint to test our model.</p>
<div class="cell" data-outputid="8d008785-db1d-427d-f09b-343c89c5668a">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;">#sm_runtime = boto3.client('sagemaker-runtime')</span></span>
<span id="cb59-2"></span>
<span id="cb59-3">review_list <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'This product is great!'</span>,</span>
<span id="cb59-4">               <span class="st" style="color: #20794D;">'OK, but not great.'</span>,</span>
<span id="cb59-5">               <span class="st" style="color: #20794D;">'This is not the right product.'</span>]</span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="cf" style="color: #003B4F;">for</span> review <span class="kw" style="color: #003B4F;">in</span> review_list:</span>
<span id="cb59-8">    </span>
<span id="cb59-9">    <span class="co" style="color: #5E5E5E;"># remove commas from the review since we're passing the inputs as a CSV</span></span>
<span id="cb59-10">    review <span class="op" style="color: #5E5E5E;">=</span> review.replace(<span class="st" style="color: #20794D;">","</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb59-11"></span>
<span id="cb59-12">    response <span class="op" style="color: #5E5E5E;">=</span> sm_runtime.invoke_endpoint(</span>
<span id="cb59-13">        EndpointName<span class="op" style="color: #5E5E5E;">=</span>autopilot_model.endpoint_name, <span class="co" style="color: #5E5E5E;"># endpoint name</span></span>
<span id="cb59-14">        ContentType<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span>, <span class="co" style="color: #5E5E5E;"># type of input data</span></span>
<span id="cb59-15">        Accept<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span>, <span class="co" style="color: #5E5E5E;"># type of the inference in the response</span></span>
<span id="cb59-16">        Body<span class="op" style="color: #5E5E5E;">=</span>review <span class="co" style="color: #5E5E5E;"># review text</span></span>
<span id="cb59-17">        )</span>
<span id="cb59-18"></span>
<span id="cb59-19">    response_body<span class="op" style="color: #5E5E5E;">=</span>response[<span class="st" style="color: #20794D;">'Body'</span>].read().decode(<span class="st" style="color: #20794D;">'utf-8'</span>).strip().split(<span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb59-20"></span>
<span id="cb59-21">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Review: '</span>, review, <span class="st" style="color: #20794D;">' Predicated class: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(response_body[<span class="dv" style="color: #AD0000;">0</span>]))</span>
<span id="cb59-22"></span>
<span id="cb59-23"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"(-1 = Negative, 0=Neutral, 1=Positive)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Review:  This product is great!  Predicated class: 1
Review:  OK but not great.  Predicated class: 0
Review:  This is not the right product.  Predicated class: -1
(-1 = Negative, 0=Neutral, 1=Positive)</code></pre>
</div>
</div>
<p>So we used Amazon SageMaker Autopilot to automatically find the best model, hyper-parameters, and feature-engineering scripts for our dataset. Autopilot uses a uniquely-transparent approach to AutoML by generating re-usable Python scripts and notebooks.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">11</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-05-train-model-aws-sagemaker-autopilot.html</guid>
  <pubDate>Sun, 05 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Detect data bias with Amazon SageMaker Clarify</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In Data Science and machine learning, bias can be present in data before any model training occurs. Inspecting a dataset for bias can help detect collection gaps, inform your feature engineering, and understand biases the dataset may reflect. In this article we will analyze bias on a dataset, generate and analyze bias reports, and prepare the dataset for the model training.</p>
</section>
<section id="setup-aws-sagemaker" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="setup-aws-sagemaker"><span class="header-section-number">2</span> Setup AWS Sagemaker</h2>
<p>In an <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article we introduced AWS cloud services for data science</a>, and how it can help with different stages of the data science &amp; machine learning workflow.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this project, we will be using AWS Sagemaker Clarify to explore the bias in a dataset.</p>
<p>Let’s now set up AWS sagemaker for this new project.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb1-6"></span>
<span id="cb1-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w2'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb1-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb1-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb1-12"></span>
<span id="cb1-13">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)</span>
<span id="cb1-14"></span>
<span id="cb1-15">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb1-16">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb1-17">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
</section>
<section id="analyze-the-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="analyze-the-dataset"><span class="header-section-number">3</span> Analyze the dataset</h2>
<p>As with our <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article using AWS</a> we will be using the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>It is shared in a public Amazon S3 bucket, and is available as a comma-separated value (CSV) text format:</p>
<section id="create-a-pandas-data-frame-from-the-csv-file" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="create-a-pandas-data-frame-from-the-csv-file"><span class="header-section-number">3.1</span> Create a pandas data frame from the CSV file</h3>
<p>Let’s create a pandas dataframe from each of the product categories and concatenate them into one.</p>
<div class="cell" data-outputid="7568fb40-e703-4b60-aed8-b173878c0179">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="st" style="color: #20794D;">'s3://dlai-practical-data-science/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv'</span> .<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv to ./womens_clothing_ecommerce_reviews_transformed.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="fc28444e-e35b-409d-c5d5-ca00d8755d7a">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path)</span>
<span id="cb5-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>If this product was in petite  i would get the...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>Blouses</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>As we saw in the <a href="2023-02-03-loading-transforming-clothes-reviews-text-aws.html">earlier article</a>, there are way more positive reviews than negative or neutral. Such a dataset is called unbalanced.</p>
<p>In this case, using a relatively small data subset we could visualize the occurring unbalances. At scale, we would need to perform bias analysis. Let’s use this dataset as an example.</p>
<div class="cell" data-outputid="e59151d4-22b9-406d-b425-cce7c30d5e16">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb6-2"></span>
<span id="cb6-3">sns.countplot(data<span class="op" style="color: #5E5E5E;">=</span>df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper right'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.3</span>, <span class="fl" style="color: #AD0000;">1.1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fc9f6a32090&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="upload-the-dataset-to-s3-bucket" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="upload-the-dataset-to-s3-bucket"><span class="header-section-number">3.2</span> Upload the dataset to S3 bucket</h3>
<p>Now we will upload the dataset to a private S3 bucket in a folder called <code>bias/unbalanced</code>.</p>
<div class="cell" data-outputid="91f0862d-9e28-4b23-9cf6-e28e3d1cbc0a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">data_s3_uri_unbalanced <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, </span>
<span id="cb8-2">                               key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias/unbalanced'</span>, </span>
<span id="cb8-3">                               path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span>)</span>
<span id="cb8-4">data_s3_uri_unbalanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>'s3://sagemaker-us-east-1-763519884484/bias/unbalanced/womens_clothing_ecommerce_reviews_transformed.csv'</code></pre>
</div>
</div>
</section>
</section>
<section id="analyze-class-imbalance-on-the-dataset-with-amazon-sagemaker-clarify" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="analyze-class-imbalance-on-the-dataset-with-amazon-sagemaker-clarify"><span class="header-section-number">4</span> Analyze class imbalance on the dataset with Amazon SageMaker Clarify</h2>
<p>Let’s analyze bias in <code>sentiment</code> with respect to the <code>product_category</code> facet on the dataset.</p>
<section id="configure-a-dataconfig" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="configure-a-dataconfig"><span class="header-section-number">4.1</span> Configure a <code>DataConfig</code></h3>
<p>Information about the input data needs to be provided to the processor. This can be done with the <code>DataConfig</code> of the Clarify container. It stores information about the dataset to be analyzed, for example the dataset file, its format, headers and labels.</p>
<p>We can use <code>DataConfig</code> to configure the target column (<code>'sentiment'</code> label), data input (<code>data_s3_uri_unbalanced</code>) and output paths (<code>bias_report_unbalanced_output_path</code>) with their formats (header names and the dataset type):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> sagemaker <span class="im" style="color: #00769E;">import</span> clarify</span>
<span id="cb10-2"></span>
<span id="cb10-3">bias_report_unbalanced_output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/bias/generated_bias_report/unbalanced'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb10-4"></span>
<span id="cb10-5">data_config_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.DataConfig(</span>
<span id="cb10-6">    s3_data_input_path<span class="op" style="color: #5E5E5E;">=</span>data_s3_uri_unbalanced, </span>
<span id="cb10-7">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span>bias_report_unbalanced_output_path, </span>
<span id="cb10-8">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb10-9">    headers<span class="op" style="color: #5E5E5E;">=</span>df.columns.to_list(),</span>
<span id="cb10-10">    dataset_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb10-11">)</span></code></pre></div>
</div>
</section>
<section id="configure-biasconfig" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="configure-biasconfig"><span class="header-section-number">4.2</span> Configure <code>BiasConfig</code></h3>
<p>Bias is measured by calculating a metric and comparing it across groups. To compute it, we will specify the required information in the <code>BiasConfig</code> API. SageMaker Clarify needs the sensitive columns (<code>facet_name</code>) and the desirable outcomes (<code>label_values_or_threshold</code>). Here <code>product_category</code> is the sensitive facet and the desired outcome is with the <code>sentiment==1</code>.</p>
<p>SageMaker Clarify can handle both categorical and continuous data for <code>label_values_or_threshold</code>. In this case we are using categorical data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">bias_config_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.BiasConfig(</span>
<span id="cb11-2">    label_values_or_threshold<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># desired sentiment</span></span>
<span id="cb11-3">    facet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span> <span class="co" style="color: #5E5E5E;"># sensitive column (facet)</span></span>
<span id="cb11-4">)</span></code></pre></div>
</div>
</section>
<section id="configure-amazon-sagemaker-clarify-as-a-processing-job" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="configure-amazon-sagemaker-clarify-as-a-processing-job"><span class="header-section-number">4.3</span> Configure Amazon SageMaker Clarify as a processing job</h3>
<p>Now we need to construct an object called <code>SageMakerClarifyProcessor</code>. This allows you to scale the process of data bias detection using two parameters, <code>instance_count</code> and <code>instance_type</code>.</p>
<p><code>Instance_count</code> represents how many nodes you want in the distributor cluster during the data detection. <code>Instance_type</code> specifies the processing capability (compute capacity, memory capacity) available for each one of those nodes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">clarify_processor_unbalanced <span class="op" style="color: #5E5E5E;">=</span> clarify.SageMakerClarifyProcessor(role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb12-2">                                                      instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb12-3">                                                      instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb12-4">                                                      sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job"><span class="header-section-number">4.4</span> Run the Amazon SageMaker Clarify processing job</h3>
<p>Let’s run the configured processing job to compute the requested bias <code>methods</code> of the input data.</p>
<p>We will apply the <code>run_pre_training_bias</code> method to the configured Clarify processor, passing the configured input/output data (<code>data_config_unbalanced</code>), configuration of sensitive groups (<code>bias_config_unbalanced</code>) with the other job setup parameters.</p>
<div class="cell" data-outputid="c641457e-8d33-42e4-83a9-ba493b264918">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">clarify_processor_unbalanced.run_pre_training_bias(</span>
<span id="cb13-2">    data_config<span class="op" style="color: #5E5E5E;">=</span>data_config_unbalanced, </span>
<span id="cb13-3">    data_bias_config<span class="op" style="color: #5E5E5E;">=</span>bias_config_unbalanced, </span>
<span id="cb13-4">    methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"CI"</span>, <span class="st" style="color: #20794D;">"DPL"</span>, <span class="st" style="color: #20794D;">"KL"</span>, <span class="st" style="color: #20794D;">"JS"</span>, <span class="st" style="color: #20794D;">"LP"</span>, <span class="st" style="color: #20794D;">"TVD"</span>, <span class="st" style="color: #20794D;">"KS"</span>],</span>
<span id="cb13-5">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb13-6">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb13-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  Clarify-Pretraining-Bias-2023-02-04-18-19-13-642
Inputs:  [{'InputName': 'dataset', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/unbalanced/womens_clothing_ecommerce_reviews_transformed.csv', 'LocalPath': '/opt/ml/processing/input/data', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'analysis_config', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis_config.json', 'LocalPath': '/opt/ml/processing/input/config', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'analysis_result', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced', 'LocalPath': '/opt/ml/processing/output', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<div class="cell" data-outputid="c49425e3-3a7b-4a10-fb42-29dcb1a5b670">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">run_unbalanced_bias_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> clarify_processor_unbalanced.latest_job.job_name</span>
<span id="cb15-2"><span class="bu" style="color: null;">print</span>(run_unbalanced_bias_processing_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Clarify-Pretraining-Bias-2023-02-04-18-19-13-642</code></pre>
</div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job-on-the-unbalanced-dataset" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job-on-the-unbalanced-dataset"><span class="header-section-number">4.5</span> Run the Amazon SageMaker Clarify processing job on the unbalanced dataset</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>run_unbalanced_bias_processing_job_name,</span>
<span id="cb17-2">                                                                            sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
<div class="cell" data-outputid="89c3b97e-f97f-49d6-c98a-30db64937351">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb18-2"></span>
<span id="cb18-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.............................................................................!CPU times: user 304 ms, sys: 55.6 ms, total: 360 ms
Wall time: 6min 30s</code></pre>
</div>
</div>
</section>
<section id="analyze-unbalanced-bias-report" class="level3" data-number="4.6">
<h3 data-number="4.6" class="anchored" data-anchor-id="analyze-unbalanced-bias-report"><span class="header-section-number">4.6</span> Analyze unbalanced bias report</h3>
<p>In this run, we analyzed bias for <code>sentiment</code> relative to the <code>product_category</code> for the unbalanced data. Let’s have a look at the bias report.</p>
<p>List the files in the output path <code>bias_report_unbalanced_output_path</code>:</p>
<div class="cell" data-outputid="071c0c96-8eb0-4284-f041-7eca7e395451">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $bias_report_unbalanced_output_path<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-04 18:25:39      31732 analysis.json
2023-02-04 18:19:14        346 analysis_config.json
2023-02-04 18:25:39     607108 report.html
2023-02-04 18:25:39     346473 report.ipynb
2023-02-04 18:25:39     326001 report.pdf</code></pre>
</div>
</div>
<p>Download generated bias report from S3 bucket:</p>
<div class="cell" data-outputid="db213745-8f79-439d-c566-58e83616e649">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp <span class="op" style="color: #5E5E5E;">--</span>recursive $bias_report_unbalanced_output_path .<span class="op" style="color: #5E5E5E;">/</span>generated_bias_report<span class="op" style="color: #5E5E5E;">/</span>unbalanced<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis_config.json to generated_bias_report/unbalanced/analysis_config.json
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/analysis.json to generated_bias_report/unbalanced/analysis.json
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.pdf to generated_bias_report/unbalanced/report.pdf
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.ipynb to generated_bias_report/unbalanced/report.ipynb
download: s3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/unbalanced/report.html to generated_bias_report/unbalanced/report.html</code></pre>
</div>
</div>
<p>You can view the bias report <a href="https://pranath.github.io/pds/report_unbalanced.html">here</a>.</p>
<p>The bias report shows a number of metrics, but here we will focus on just two of them: - Class Imbalance (CI). Measures the imbalance in the number of members between different facet values. Answers the question, does a <code>product_category</code> have disproportionately more reviews than others? Values of CI will become equal for even distribution between facets. Here, different CI values show the existence of imbalance. - Difference in Positive Proportions in Labels (DPL). Measures the imbalance of positive outcomes between different facet values. Answers the question, does a <code>product_category</code> have disproportionately higher ratings than others? With the range over the interval from -1 to 1, if there is no bias, you want to see this value as close as possible to zero. Here, non-zero values indicate the imbalances.</p>
</section>
</section>
<section id="balance-the-dataset-by-product_category-and-sentiment" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="balance-the-dataset-by-product_category-and-sentiment"><span class="header-section-number">5</span> Balance the dataset by <code>product_category</code> and <code>sentiment</code></h2>
<p>Let’s balance the dataset by <code>product_category</code> and <code>sentiment</code>. Then we can configure and run SageMaker Clarify processing job to analyze the bias of it. Which metrics values do we expect to see in the bias report?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df_grouped_by <span class="op" style="color: #5E5E5E;">=</span> df.groupby([<span class="st" style="color: #20794D;">'product_category'</span>, <span class="st" style="color: #20794D;">'sentiment'</span>])</span>
<span id="cb24-2">df_balanced <span class="op" style="color: #5E5E5E;">=</span> df_grouped_by.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x.sample(df_grouped_by.size().<span class="bu" style="color: null;">min</span>()).reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
</div>
<div class="cell" data-outputid="0938f3c6-3893-4ce6-c7b9-401a42251c58">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df_balanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
    <tr>
      <th>product_category</th>
      <th>sentiment</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">Blouses</th>
      <th rowspan="5" valign="top">-1</th>
      <th>0</th>
      <td>-1</td>
      <td>I bought this top in the store  which was good...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-1</td>
      <td>Wow this is huge! i'm all for the tent-look wi...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1</td>
      <td>If you have anything larger than an a cup  thi...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-1</td>
      <td>Like another reviewer mentioned  this shirt is...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1</td>
      <td>I did not like this top at all-but had i looke...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="5" valign="top">Trend</th>
      <th rowspan="5" valign="top">1</th>
      <th>4</th>
      <td>1</td>
      <td>Never spent this much on a dress so it needs t...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>I love this sweatshirt! i truly did not pay mu...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>6</th>
      <td>1</td>
      <td>I am waist-challenged. i like a narrowly cut s...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>7</th>
      <td>1</td>
      <td>I love the style and look oft this blouse but ...</td>
      <td>Trend</td>
    </tr>
    <tr>
      <th>8</th>
      <td>1</td>
      <td>I love this top  it is a cool style mix betwee...</td>
      <td>Trend</td>
    </tr>
  </tbody>
</table>
<p>486 rows × 3 columns</p>
</div>
</div>
</div>
<p>Let’s now visualize the distribution of review sentiment in the balanced dataset.</p>
<div class="cell" data-outputid="543ac772-98ee-4bbe-db6e-6455349fa8b4">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb26-2"></span>
<span id="cb26-3">sns.countplot(data<span class="op" style="color: #5E5E5E;">=</span>df_balanced, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'upper right'</span>,bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.3</span>, <span class="fl" style="color: #AD0000;">1.1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>&lt;matplotlib.legend.Legend at 0x7fc9f52ca4d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="analyze-bias-on-balanced-dataset-with-aws-sagemaker-clarify" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="analyze-bias-on-balanced-dataset-with-aws-sagemaker-clarify"><span class="header-section-number">6</span> Analyze bias on balanced dataset with AWS SageMaker Clarify</h2>
<p>Let’s now analyze bias in <code>sentiment</code> with respect to the <code>product_category</code> facet on the balanced dataset.</p>
<p>We need to save and upload the balanced data to the S3 bucket.</p>
<div class="cell" data-outputid="4de7a09e-b535-4e53-fe8e-d63a5d3ac06e">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">path_balanced <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_balanced.csv'</span></span>
<span id="cb28-2">df_balanced.to_csv(path_balanced, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4">data_s3_uri_balanced <span class="op" style="color: #5E5E5E;">=</span> sess.upload_data(bucket<span class="op" style="color: #5E5E5E;">=</span>bucket, key_prefix<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias/balanced'</span>, path<span class="op" style="color: #5E5E5E;">=</span>path_balanced)</span>
<span id="cb28-5">data_s3_uri_balanced</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>'s3://sagemaker-us-east-1-763519884484/bias/balanced/womens_clothing_ecommerce_reviews_balanced.csv'</code></pre>
</div>
</div>
<section id="configure-a-dataconfig-1" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="configure-a-dataconfig-1"><span class="header-section-number">6.1</span> Configure a <code>DataConfig</code></h3>
<p>We need to configure a <code>DataConfig</code> for Clarify to analyze bias on the balanced dataset. To do this we pass the S3 object path containing the balanced dataset, the path to store the output (<code>bias_report_balanced_output_path</code>) and the target column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">from</span> sagemaker <span class="im" style="color: #00769E;">import</span> clarify</span>
<span id="cb30-2"></span>
<span id="cb30-3">bias_report_balanced_output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/bias/generated_bias_report/balanced'</span>.<span class="bu" style="color: null;">format</span>(bucket)</span>
<span id="cb30-4"></span>
<span id="cb30-5">data_config_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.DataConfig(</span>
<span id="cb30-6">    s3_data_input_path<span class="op" style="color: #5E5E5E;">=</span>data_s3_uri_balanced, </span>
<span id="cb30-7">    s3_output_path<span class="op" style="color: #5E5E5E;">=</span>bias_report_balanced_output_path,</span>
<span id="cb30-8">    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, </span>
<span id="cb30-9">    headers<span class="op" style="color: #5E5E5E;">=</span>df_balanced.columns.to_list(),</span>
<span id="cb30-10">    dataset_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'text/csv'</span></span>
<span id="cb30-11">)</span></code></pre></div>
</div>
</section>
<section id="configure-biasconfig-1" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="configure-biasconfig-1"><span class="header-section-number">6.2</span> Configure <code>BiasConfig</code></h3>
<p><code>BiasConfig</code> for the balanced dataset will have the same settings as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">bias_config_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.BiasConfig(</span>
<span id="cb31-2">    label_values_or_threshold<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># desired sentiment</span></span>
<span id="cb31-3">    facet_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span> <span class="co" style="color: #5E5E5E;"># sensitive column (facet)</span></span>
<span id="cb31-4">)</span></code></pre></div>
</div>
</section>
<section id="configure-sagemaker-clarify-as-a-processing-job" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="configure-sagemaker-clarify-as-a-processing-job"><span class="header-section-number">6.3</span> Configure SageMaker Clarify as a processing job</h3>
<p><code>SageMakerClarifyProcessor</code> object will also have the same parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">clarify_processor_balanced <span class="op" style="color: #5E5E5E;">=</span> clarify.SageMakerClarifyProcessor(role<span class="op" style="color: #5E5E5E;">=</span>role,</span>
<span id="cb32-2">                                                      instance_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb32-3">                                                      instance_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ml.m5.large'</span>,</span>
<span id="cb32-4">                                                      sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
</section>
<section id="run-the-amazon-sagemaker-clarify-processing-job-1" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="run-the-amazon-sagemaker-clarify-processing-job-1"><span class="header-section-number">6.4</span> Run the Amazon SageMaker Clarify processing job</h3>
<p>Let’s run the configured processing job for the balanced dataset.</p>
<p>We will apply the <code>run_pre_training_bias</code> method to the configured Clarify processor, passing the input/output data, configuration of sensitive groups with the other job setup parameters.</p>
<div class="cell" data-outputid="92df7f72-40e4-4aa6-e8f6-535ce3f83be8">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">clarify_processor_balanced.run_pre_training_bias(</span>
<span id="cb33-2">    data_config<span class="op" style="color: #5E5E5E;">=</span>data_config_balanced, </span>
<span id="cb33-3">    data_bias_config<span class="op" style="color: #5E5E5E;">=</span>bias_config_balanced, </span>
<span id="cb33-4">    methods<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"CI"</span>, <span class="st" style="color: #20794D;">"DPL"</span>, <span class="st" style="color: #20794D;">"KL"</span>, <span class="st" style="color: #20794D;">"JS"</span>, <span class="st" style="color: #20794D;">"LP"</span>, <span class="st" style="color: #20794D;">"TVD"</span>, <span class="st" style="color: #20794D;">"KS"</span>],</span>
<span id="cb33-5">    wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb33-6">    logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span></span>
<span id="cb33-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Job Name:  Clarify-Pretraining-Bias-2023-02-04-18-25-47-825
Inputs:  [{'InputName': 'dataset', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/balanced/womens_clothing_ecommerce_reviews_balanced.csv', 'LocalPath': '/opt/ml/processing/input/data', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}, {'InputName': 'analysis_config', 'AppManaged': False, 'S3Input': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/balanced/analysis_config.json', 'LocalPath': '/opt/ml/processing/input/config', 'S3DataType': 'S3Prefix', 'S3InputMode': 'File', 'S3DataDistributionType': 'FullyReplicated', 'S3CompressionType': 'None'}}]
Outputs:  [{'OutputName': 'analysis_result', 'AppManaged': False, 'S3Output': {'S3Uri': 's3://sagemaker-us-east-1-763519884484/bias/generated_bias_report/balanced', 'LocalPath': '/opt/ml/processing/output', 'S3UploadMode': 'EndOfJob'}}]</code></pre>
</div>
</div>
<div class="cell" data-outputid="8c142b34-3dfd-493e-e85c-1f3cffabc19f">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">run_balanced_bias_processing_job_name <span class="op" style="color: #5E5E5E;">=</span> clarify_processor_balanced.latest_job.job_name</span>
<span id="cb35-2"><span class="bu" style="color: null;">print</span>(run_balanced_bias_processing_job_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Clarify-Pretraining-Bias-2023-02-04-18-25-47-825</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">running_processor <span class="op" style="color: #5E5E5E;">=</span> sagemaker.processing.ProcessingJob.from_processing_name(processing_job_name<span class="op" style="color: #5E5E5E;">=</span>run_balanced_bias_processing_job_name,</span>
<span id="cb37-2">                                                                            sagemaker_session<span class="op" style="color: #5E5E5E;">=</span>sess)</span></code></pre></div>
</div>
<div class="cell" data-outputid="e81cff0d-e4e8-4da8-d98f-f1ba48118438">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb38-2"></span>
<span id="cb38-3">running_processor.wait(logs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>...........................................................................!CPU times: user 312 ms, sys: 46.6 ms, total: 359 ms
Wall time: 6min 20s</code></pre>
</div>
</div>
</section>
<section id="analyze-balanced-bias-report" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="analyze-balanced-bias-report"><span class="header-section-number">6.5</span> Analyze balanced bias report</h3>
<p>Let’s see again the files created by the report.</p>
<div class="cell" data-outputid="d882e3fd-1d59-44b2-87e0-dbca4ba6caea">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls $bias_report_balanced_output_path<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2023-02-04 18:32:02      29889 analysis.json
2023-02-04 18:25:48        346 analysis_config.json
2023-02-04 18:32:02     592454 report.html
2023-02-04 18:32:02     331819 report.ipynb
2023-02-04 18:32:02     320692 report.pdf</code></pre>
</div>
</div>
<p>We can view the report <a href="https://pranath.github.io/pds/report_balanced.html">here</a>.</p>
<p>In this run, we analyzed bias for <code>sentiment</code> relative to the <code>product_category</code> for the balanced data. Note that the Class Imbalance (CI) metric is equal across all product categories for the target label, <code>sentiment</code>. And Difference in Positive Proportions in Labels (DPL) metric values are zero.</p>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">7</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-04-detecting-bias-with-aws-sagemaker-clarify.html</guid>
  <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Loading &amp; Transforming Clothing Reviews Text Data with AWS</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this project we will ingest and transform a customer product reviews dataset using AWS (Amazon Web Services) cloud services. We will then use AWS data stack services such as AWS Glue and Amazon Athena for ingesting and querying the dataset. Finally we will use AWS Data Wrangler to analyze the dataset and plot some visuals extracting insights.</p>
<p>This exploration could be useful for a range of tasks, including creating a sentiment analysis text classification model - which is something we will explore in future articles.</p>
</section>
<section id="aws-cloud-services-for-data-science" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="aws-cloud-services-for-data-science"><span class="header-section-number">2</span> AWS &amp; Cloud Services for Data Science</h2>
<section id="why-use-the-cloud-for-data-science" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="why-use-the-cloud-for-data-science"><span class="header-section-number">2.1</span> Why use the Cloud for Data Science ?</h3>
<p>Data Science can be performed in a range of devices and environments, from local machines and laptops, to dedicated server centers, to cloud services such as <a href="../#category=aws">AWS</a> or <a href="../#category=azure-databricks">Azure Databricks</a>.</p>
<p>Why would you want to use cloud services for Data Science?</p>
<ul>
<li>Local machines or server centers have limited resources as they are specific machines and the only ones you have, which have limited computing power, disk space and memory which could make certain tasks and problems unfeasible to solve</li>
<li>Cloud services allow the storage of any amount of data</li>
<li>Cloud services allow you to <em>scale up</em> e.g.&nbsp;increase the processing or memory capacity of the machines you use in minutes</li>
<li>Cloud services allow you to <em>scale out</em> e.g.&nbsp;increase the number of machines you are able to use for a task</li>
<li>Cloud services provide a large range of data science tools already installed and maintained</li>
<li>Cloud services provide a flexible deployment platform for any products you develop, with a capacity able to scale with demand</li>
<li>Cloud services provide a more cost efficient and flexible solution for many tasks, you generally only pay for what you use and can increase or decrease options and capacity easily either by choice or even automatically based on need or demand</li>
</ul>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/practical_ds.png" title="Why use the cloud for Data Science" class="img-fluid"></p>
</section>
<section id="using-aws-for-cloud-data-science" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="using-aws-for-cloud-data-science"><span class="header-section-number">2.2</span> Using AWS for Cloud Data Science</h3>
<p>AWS offers a range of different services that can help at different stages of the machine learning development cycle.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_ds_workflow.png" title="The AWS Data Science Workflow" class="img-fluid"></p>
<p>In this article we will be demonstrating how we can use AWS for the <strong>Ingesting and Analysing stage</strong>, so we will be using the following services:</p>
<ul>
<li>Amazon S3: A simple storage service</li>
<li>AWS Glue: An ETL service that helps prepare, extract and load data</li>
<li>Amazon Athena: An interactive query service that uses SQL</li>
<li>Amazon Sagemaker: A cloud machine learning service</li>
</ul>
</section>
</section>
<section id="ingest-and-transform-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="ingest-and-transform-dataset"><span class="header-section-number">3</span> Ingest and transform Dataset</h2>
<p>The dataset we will use is the <a href="https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews">Women’s Clothing Reviews</a> a public dataset available on kaggle.</p>
<p>It is shared in a public Amazon S3 bucket, and is available as a comma-separated value (CSV) text format:</p>
<p><code>s3://dlai-practical-data-science/data/raw/womens_clothing_ecommerce_reviews.csv</code></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_s3.png" title="Amazon S3" class="img-fluid"></p>
<section id="list-the-dataset-files-in-the-public-s3-bucket" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="list-the-dataset-files-in-the-public-s3-bucket"><span class="header-section-number">3.1</span> List the dataset files in the public S3 bucket</h3>
<p>The <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/index.html">AWS Command Line Interface (CLI)</a> is a unified tool to manage AWS services. With just one tool, you can control multiple AWS services from the command line and automate them through scripts. We will use it to list the dataset files.</p>
<p><code>aws s3 ls [bucket_name]</code> is a function lists all objects in the S3 bucket. Let’s use it to view the reviews data files in CSV format.</p>
<div class="cell" data-outputid="7cc4b5c0-4e8d-4eab-a671-34f5faf79f5d">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 ls s3:<span class="op" style="color: #5E5E5E;">//</span>dlai<span class="op" style="color: #5E5E5E;">-</span>practical<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">-</span>science<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>raw<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2021-04-30 02:21:06    8457214 womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
</section>
<section id="copy-the-data-locally-to-the-notebook" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="copy-the-data-locally-to-the-notebook"><span class="header-section-number">3.2</span> Copy the data locally to the notebook</h3>
<p><code>aws s3 cp [bucket_name/file_name] [file_name]</code> is a function that copies the file from the S3 bucket into the local environment or into another S3 bucket. Let’s use it to copy the file with the dataset locally.</p>
<div class="cell" data-outputid="862d14a1-53d7-43a5-b453-a36375749318">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp s3:<span class="op" style="color: #5E5E5E;">//</span>dlai<span class="op" style="color: #5E5E5E;">-</span>practical<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">-</span>science<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>raw<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>download: s3://dlai-practical-data-science/data/raw/womens_clothing_ecommerce_reviews.csv to ./womens_clothing_ecommerce_reviews.csv</code></pre>
</div>
</div>
<p>Now we will use Pandas to load and preview the data.</p>
<div class="cell" data-outputid="c631958c-d885-455d-a09e-fa73d9ca8a44">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">import</span> csv</span>
<span id="cb5-3"></span>
<span id="cb5-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews.csv'</span>,</span>
<span id="cb5-5">                 index_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(23486, 10)</code></pre>
</div>
</div>
<div class="cell" data-outputid="1b21b49f-2b92-4ea0-c812-b982550de7fe">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Clothing ID</th>
      <th>Age</th>
      <th>Title</th>
      <th>Review Text</th>
      <th>Rating</th>
      <th>Recommended IND</th>
      <th>Positive Feedback Count</th>
      <th>Division Name</th>
      <th>Department Name</th>
      <th>Class Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>847</td>
      <td>33</td>
      <td>Cute, crisp shirt</td>
      <td>If this product was in petite  i would get the...</td>
      <td>4</td>
      <td>1</td>
      <td>2</td>
      <td>General</td>
      <td>Tops</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1080</td>
      <td>34</td>
      <td>NaN</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>5</td>
      <td>1</td>
      <td>4</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1077</td>
      <td>60</td>
      <td>Some major design flaws</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1049</td>
      <td>50</td>
      <td>My favorite buy!</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>5</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Bottoms</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>847</td>
      <td>47</td>
      <td>Flattering shirt</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>5</td>
      <td>1</td>
      <td>6</td>
      <td>General</td>
      <td>Tops</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23481</th>
      <td>1104</td>
      <td>34</td>
      <td>Great dress for many occasions</td>
      <td>I was very happy to snag this dress at such a ...</td>
      <td>5</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23482</th>
      <td>862</td>
      <td>48</td>
      <td>Wish it was made of cotton</td>
      <td>It reminds me of maternity clothes. soft  stre...</td>
      <td>3</td>
      <td>1</td>
      <td>0</td>
      <td>General Petite</td>
      <td>Tops</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>23483</th>
      <td>1104</td>
      <td>31</td>
      <td>Cute, but see through</td>
      <td>This fit well  but the top was very see throug...</td>
      <td>3</td>
      <td>0</td>
      <td>1</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23484</th>
      <td>1084</td>
      <td>28</td>
      <td>Very cute dress, perfect for summer parties an...</td>
      <td>I bought this dress for a wedding i have this ...</td>
      <td>3</td>
      <td>1</td>
      <td>2</td>
      <td>General</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23485</th>
      <td>1104</td>
      <td>52</td>
      <td>Please make more like this one!</td>
      <td>This dress in a lovely platinum is feminine an...</td>
      <td>5</td>
      <td>1</td>
      <td>22</td>
      <td>General Petite</td>
      <td>Dresses</td>
      <td>Dresses</td>
    </tr>
  </tbody>
</table>
<p>23486 rows × 10 columns</p>
</div>
</div>
</div>
</section>
<section id="transform-the-data" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="transform-the-data"><span class="header-section-number">3.3</span> Transform the data</h3>
<p>To simplify the task, we will transform the data into a comma-separated value (CSV) file that contains only a <code>review_body</code>, <code>product_category</code>, and <code>sentiment</code> derived from the original data.</p>
<div class="cell" data-outputid="3345c2d3-4ab3-4b26-98b0-cdff61f2992f">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_transformed <span class="op" style="color: #5E5E5E;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'Review Text'</span>: <span class="st" style="color: #20794D;">'review_body'</span>,</span>
<span id="cb8-2">                                    <span class="st" style="color: #20794D;">'Rating'</span>: <span class="st" style="color: #20794D;">'star_rating'</span>,</span>
<span id="cb8-3">                                    <span class="st" style="color: #20794D;">'Class Name'</span>: <span class="st" style="color: #20794D;">'product_category'</span>})</span>
<span id="cb8-4">df_transformed.drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Clothing ID'</span>, <span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'Title'</span>, <span class="st" style="color: #20794D;">'Recommended IND'</span>, <span class="st" style="color: #20794D;">'Positive Feedback Count'</span>, <span class="st" style="color: #20794D;">'Division Name'</span>, <span class="st" style="color: #20794D;">'Department Name'</span>],</span>
<span id="cb8-5">                    inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7">df_transformed.dropna(inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">df_transformed.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(22628, 3)</code></pre>
</div>
</div>
<p>Now lets convert the <code>star_rating</code> into the <code>sentiment</code> (positive, neutral, negative), which later on we could use for a text classification model.</p>
<div class="cell" data-outputid="8f8db857-dc81-4e5e-c4df-907268dc1f7f">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;">def</span> to_sentiment(star_rating):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="kw" style="color: #003B4F;">in</span> {<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>}: <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb10-3">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> </span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">3</span>:      <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;">if</span> star_rating <span class="kw" style="color: #003B4F;">in</span> {<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>}: <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># transform star_rating into the sentiment</span></span>
<span id="cb10-10">df_transformed[<span class="st" style="color: #20794D;">'sentiment'</span>] <span class="op" style="color: #5E5E5E;">=</span> df_transformed[<span class="st" style="color: #20794D;">'star_rating'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> star_rating: </span>
<span id="cb10-11">    to_sentiment(star_rating<span class="op" style="color: #5E5E5E;">=</span>star_rating) </span>
<span id="cb10-12">)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;"># drop the star rating column</span></span>
<span id="cb10-15">df_transformed.drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'star_rating'</span>],</span>
<span id="cb10-16">                    inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># remove reviews for product_categories with &lt; 10 reviews</span></span>
<span id="cb10-19">df_transformed <span class="op" style="color: #5E5E5E;">=</span> df_transformed.groupby(<span class="st" style="color: #20794D;">'product_category'</span>).<span class="bu" style="color: null;">filter</span>(<span class="kw" style="color: #003B4F;">lambda</span> reviews : <span class="bu" style="color: null;">len</span>(reviews) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>)[[<span class="st" style="color: #20794D;">'sentiment'</span>, <span class="st" style="color: #20794D;">'review_body'</span>, <span class="st" style="color: #20794D;">'product_category'</span>]]</span>
<span id="cb10-20"></span>
<span id="cb10-21">df_transformed.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(22626, 3)</code></pre>
</div>
</div>
<div class="cell" data-outputid="0462fa50-7798-4440-daad-c4d615070f63">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># preview the results</span></span>
<span id="cb12-2">df_transformed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sentiment</th>
      <th>review_body</th>
      <th>product_category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>If this product was in petite  i would get the...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>Love this dress!  it's sooo pretty.  i happene...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>I had such high hopes for this dress and reall...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>I love  love  love this jumpsuit. it's fun  fl...</td>
      <td>Pants</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>This shirt is very flattering to all due to th...</td>
      <td>Blouses</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23481</th>
      <td>1</td>
      <td>I was very happy to snag this dress at such a ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23482</th>
      <td>0</td>
      <td>It reminds me of maternity clothes. soft  stre...</td>
      <td>Knits</td>
    </tr>
    <tr>
      <th>23483</th>
      <td>0</td>
      <td>This fit well  but the top was very see throug...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23484</th>
      <td>0</td>
      <td>I bought this dress for a wedding i have this ...</td>
      <td>Dresses</td>
    </tr>
    <tr>
      <th>23485</th>
      <td>1</td>
      <td>This dress in a lovely platinum is feminine an...</td>
      <td>Dresses</td>
    </tr>
  </tbody>
</table>
<p>22626 rows × 3 columns</p>
</div>
</div>
</div>
</section>
<section id="write-the-data-to-a-csv-file" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="write-the-data-to-a-csv-file"><span class="header-section-number">3.4</span> Write the data to a CSV file</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_transformed.to_csv(<span class="st" style="color: #20794D;">'./womens_clothing_ecommerce_reviews_transformed.csv'</span>, </span>
<span id="cb13-2">                      index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="fc0c8905-6380-4488-8915-546f55752f23">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">!</span>head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">5</span> .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sentiment,review_body,product_category
1,If this product was in petite  i would get the petite. the regular is a little long on me but a tailor can do a simple fix on that.     fits nicely! i'm 5'4  130lb and pregnant so i bough t medium to grow into.     the tie can be front or back so provides for some nice flexibility on form fitting.,Blouses
1,"Love this dress!  it's sooo pretty.  i happened to find it in a store  and i'm glad i did bc i never would have ordered it online bc it's petite.  i bought a petite and am 5'8"".  i love the length on me- hits just a little below the knee.  would definitely be a true midi on someone who is truly petite.",Dresses
0,I had such high hopes for this dress and really wanted it to work for me. i initially ordered the petite small (my usual size) but i found this to be outrageously small. so small in fact that i could not zip it up! i reordered it in petite medium  which was just ok. overall  the top half was comfortable and fit nicely  but the bottom half had a very tight under layer and several somewhat cheap (net) over layers. imo  a major design flaw was the net over layer sewn directly into the zipper - it c,Dresses
1,I love  love  love this jumpsuit. it's fun  flirty  and fabulous! every time i wear it  i get nothing but great compliments!,Pants</code></pre>
</div>
</div>
</section>
</section>
<section id="register-the-public-dataset-for-querying-and-visualizing" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="register-the-public-dataset-for-querying-and-visualizing"><span class="header-section-number">4</span> Register the public dataset for querying and visualizing</h2>
<p>We will now register the public dataset into an S3-backed database table so we can query and visualize our dataset at scale.</p>
<section id="register-s3-dataset-files-as-a-table-for-querying" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="register-s3-dataset-files-as-a-table-for-querying"><span class="header-section-number">4.1</span> Register S3 dataset files as a table for querying</h3>
<p>Before we can use Amazon Athena to query our data, we first need to get our data ‘registered’ so we can do this.</p>
<p>Let’s import some key modules.</p>
<p><code>boto3</code> is the AWS SDK for Python to create, configure, and manage AWS services, such as Amazon Elastic Compute Cloud (Amazon EC2) and Amazon Simple Storage Service (Amazon S3). The SDK provides an object-oriented API as well as low-level access to AWS services.</p>
<p><code>sagemaker</code> is the SageMaker Python SDK which provides several high-level abstractions for working with the Amazon SageMaker.</p>
<div class="cell" data-outputid="fa4f4313-0f69-426b-f22d-22291540a77b">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb16-2"><span class="im" style="color: #00769E;">import</span> sagemaker</span>
<span id="cb16-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb16-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb16-5"><span class="im" style="color: #00769E;">import</span> botocore</span>
<span id="cb16-6"></span>
<span id="cb16-7">config <span class="op" style="color: #5E5E5E;">=</span> botocore.config.Config(user_agent_extra<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dlai-pds/c1/w1'</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;"># low-level service client of the boto3 session</span></span>
<span id="cb16-10">sm <span class="op" style="color: #5E5E5E;">=</span> boto3.client(service_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sagemaker'</span>, </span>
<span id="cb16-11">                  config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb16-12"></span>
<span id="cb16-13">sess <span class="op" style="color: #5E5E5E;">=</span> sagemaker.Session(sagemaker_client<span class="op" style="color: #5E5E5E;">=</span>sm)                         </span>
<span id="cb16-14"></span>
<span id="cb16-15">bucket <span class="op" style="color: #5E5E5E;">=</span> sess.default_bucket()</span>
<span id="cb16-16">role <span class="op" style="color: #5E5E5E;">=</span> sagemaker.get_execution_role()</span>
<span id="cb16-17">region <span class="op" style="color: #5E5E5E;">=</span> sess.boto_region_name</span>
<span id="cb16-18">account_id <span class="op" style="color: #5E5E5E;">=</span> sess.account_id</span>
<span id="cb16-19"></span>
<span id="cb16-20"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'S3 Bucket: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(bucket))</span>
<span id="cb16-21"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Region: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(region))</span>
<span id="cb16-22"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Account ID: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(account_id))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>S3 Bucket: sagemaker-us-east-1-634231958143
Region: us-east-1
Account ID: &lt;bound method Session.account_id of &lt;sagemaker.session.Session object at 0x7f987cf24490&gt;&gt;</code></pre>
</div>
</div>
<p>Lets now copy the file into the S3 bucket.</p>
<div class="cell" data-outputid="25af66a5-66be-4cd9-b656-224dafc92c4d">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">!</span>aws s3 cp .<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv s3:<span class="op" style="color: #5E5E5E;">//</span>$bucket<span class="op" style="color: #5E5E5E;">/</span>data<span class="op" style="color: #5E5E5E;">/</span>transformed<span class="op" style="color: #5E5E5E;">/</span>womens_clothing_ecommerce_reviews_transformed.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>upload: ./womens_clothing_ecommerce_reviews_transformed.csv to s3://sagemaker-us-east-1-634231958143/data/transformed/womens_clothing_ecommerce_reviews_transformed.csv</code></pre>
</div>
</div>
<p><strong>Import AWS Data Wrangler</strong></p>
<p><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> is an AWS Professional Service open source python initiative part of Amazon Sagemaker - that extends the power of Pandas library to AWS connecting dataframes and AWS data related services (Amazon Redshift, AWS Glue, Amazon Athena, Amazon EMR, Amazon QuickSight, etc).</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_data_wrangler.png" title="AWS Data Wrangler" class="img-fluid"></p>
<p>Built on top of other open-source projects like Pandas, Apache Arrow, Boto3, SQLAlchemy, Psycopg2 and PyMySQL, it offers abstracted functions to execute usual ETL tasks like load/unload data from data lakes, data warehouses and databases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;">import</span> awswrangler <span class="im" style="color: #00769E;">as</span> wr</span></code></pre></div>
</div>
</section>
<section id="create-aws-glue-catalog-database" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="create-aws-glue-catalog-database"><span class="header-section-number">4.2</span> Create AWS Glue Catalog database</h3>
<p>The data catalog features of <strong>AWS Glue</strong> and the inbuilt integration to Amazon S3 simplify the process of identifying data and deriving the schema definition out of the discovered data. Using AWS Glue crawlers within our data catalog, we can traverse the data stored in Amazon S3 and build out the metadata tables that are defined in our data catalog.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_glue.png" title="AWS Glue" class="img-fluid"></p>
<p>Here we will use the <code>wr.catalog.create_database</code> function to create a database with the name <code>dsoaws_deep_learning</code> (“dsoaws” stands for “Data Science on AWS”).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">wr.catalog.create_database(</span>
<span id="cb21-2">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>,</span>
<span id="cb21-3">    exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb21-4">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="7e5143b1-a925-4177-d6bd-347f256665a7">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">dbs <span class="op" style="color: #5E5E5E;">=</span> wr.catalog.get_databases()</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;">for</span> db <span class="kw" style="color: #003B4F;">in</span> dbs:</span>
<span id="cb22-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Database name: "</span> <span class="op" style="color: #5E5E5E;">+</span> db[<span class="st" style="color: #20794D;">'Name'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Database name: dsoaws_deep_learning</code></pre>
</div>
</div>
</section>
<section id="register-csv-data-with-aws-glue-catalog" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="register-csv-data-with-aws-glue-catalog"><span class="header-section-number">4.3</span> Register CSV data with AWS Glue Catalog</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">wr.catalog.create_csv_table(</span>
<span id="cb24-2">    database<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>, </span>
<span id="cb24-3">    path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s3://</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">/data/transformed/'</span>.<span class="bu" style="color: null;">format</span>(bucket), </span>
<span id="cb24-4">    table<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"reviews"</span>,    </span>
<span id="cb24-5">    columns_types<span class="op" style="color: #5E5E5E;">=</span>{</span>
<span id="cb24-6">        <span class="st" style="color: #20794D;">'sentiment'</span>: <span class="st" style="color: #20794D;">'int'</span>,        </span>
<span id="cb24-7">        <span class="st" style="color: #20794D;">'review_body'</span>: <span class="st" style="color: #20794D;">'string'</span>,</span>
<span id="cb24-8">        <span class="st" style="color: #20794D;">'product_category'</span>: <span class="st" style="color: #20794D;">'string'</span>      </span>
<span id="cb24-9">    },</span>
<span id="cb24-10">    mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>,</span>
<span id="cb24-11">    skip_header_line_count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb24-12">    sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span></span>
<span id="cb24-13">)</span></code></pre></div>
</div>
<p>Review the table shape:</p>
<div class="cell" data-outputid="120953c8-d8e6-49c3-e142-33fe75274bca">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">table <span class="op" style="color: #5E5E5E;">=</span> wr.catalog.table(database<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span>,</span>
<span id="cb25-2">                         table<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviews'</span>)</span>
<span id="cb25-3">table</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Column Name</th>
      <th>Type</th>
      <th>Partition</th>
      <th>Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>sentiment</td>
      <td>int</td>
      <td>False</td>
      <td></td>
    </tr>
    <tr>
      <th>1</th>
      <td>review_body</td>
      <td>string</td>
      <td>False</td>
      <td></td>
    </tr>
    <tr>
      <th>2</th>
      <td>product_category</td>
      <td>string</td>
      <td>False</td>
      <td></td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="create-default-s3-bucket-for-amazon-athena" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="create-default-s3-bucket-for-amazon-athena"><span class="header-section-number">4.4</span> Create default S3 bucket for Amazon Athena</h3>
<p>We can use Amazon Athena to query our results. Amazon Athena requires this S3 bucket to store temporary query results and improve performance of subsequent queries.</p>
<p>The contents of this bucket are mostly binary and human-unreadable.</p>
<div class="cell" data-outputid="7d9ec90b-876b-45cd-e8cb-af0c4a755682">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># S3 bucket name</span></span>
<span id="cb26-2">wr.athena.create_athena_bucket()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>'s3://aws-athena-query-results-634231958143-us-east-1/'</code></pre>
</div>
</div>
</section>
</section>
<section id="visualising-the-data-and-answering-questions" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="visualising-the-data-and-answering-questions"><span class="header-section-number">5</span> Visualising the Data and Answering Questions</h2>
<p>Let’s review the columns we have selected from our reviews dataset.</p>
<ul>
<li><code>sentiment</code>: The review’s sentiment (-1, 0, 1).</li>
<li><code>product_category</code>: Broad product category that can be used to group reviews (in this case digital videos).</li>
<li><code>review_body</code>: The text of the review.</li>
</ul>
<section id="preparation-for-data-visualization" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="preparation-for-data-visualization"><span class="header-section-number">5.1</span> Preparation for data visualization</h3>
<p><strong>Imports</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb28-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb28-5"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb28-6"><span class="op" style="color: #5E5E5E;">%</span>config InlineBackend.figure_format<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'retina'</span></span></code></pre></div>
</div>
<p><strong>Settings</strong></p>
<p>We need to set an AWS Glue database and a table name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">database_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dsoaws_deep_learning'</span></span>
<span id="cb29-2">table_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reviews'</span></span></code></pre></div>
</div>
<p>Let’s also define some seaborn config for our visualisations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">sns.set_style <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'seaborn-whitegrid'</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"font.style"</span>:<span class="st" style="color: #20794D;">"normal"</span>,</span>
<span id="cb30-4">            <span class="st" style="color: #20794D;">"axes.facecolor"</span>:<span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb30-5">            <span class="st" style="color: #20794D;">'grid.color'</span>: <span class="st" style="color: #20794D;">'.8'</span>,</span>
<span id="cb30-6">            <span class="st" style="color: #20794D;">'grid.linestyle'</span>: <span class="st" style="color: #20794D;">'-'</span>,</span>
<span id="cb30-7">            <span class="st" style="color: #20794D;">"figure.facecolor"</span>:<span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb30-8">            <span class="st" style="color: #20794D;">"figure.titlesize"</span>:<span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb30-9">            <span class="st" style="color: #20794D;">"text.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-10">            <span class="st" style="color: #20794D;">"xtick.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-11">            <span class="st" style="color: #20794D;">"ytick.color"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-12">            <span class="st" style="color: #20794D;">"axes.labelcolor"</span>:<span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb30-13">            <span class="st" style="color: #20794D;">"axes.grid"</span>:<span class="va" style="color: #111111;">True</span>,</span>
<span id="cb30-14">            <span class="st" style="color: #20794D;">'axes.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-15">            <span class="st" style="color: #20794D;">'xtick.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-16">            <span class="st" style="color: #20794D;">'font.size'</span>:<span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb30-17">            <span class="st" style="color: #20794D;">'ytick.labelsize'</span>:<span class="dv" style="color: #AD0000;">10</span>})</span></code></pre></div>
</div>
</section>
<section id="plotting-key-stats-using-bar-charts" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="plotting-key-stats-using-bar-charts"><span class="header-section-number">5.2</span> Plotting key stats using bar charts</h3>
<p><strong>Amazon Athena</strong> lets you query data in Amazon S3 using a standard SQL interface. It reflects the databases and tables in the AWS Glue Catalog.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_athena2.png" title="AWS Athena - Overview" class="img-fluid"></p>
<p>You can create interactive queries and perform any data manipulations required for further downstream processing.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/aws_athena1.png" title="AWS Athena - Overview" class="img-fluid"></p>
<p>A Standard SQL query can be saved as a string and then passed as a parameter into the Athena query. For example to count the total number of reviews by sentiment, the SQL query here will take the following form:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb31-1"><span class="kw" style="color: #003B4F;">SELECT</span> column_name, <span class="fu" style="color: #4758AB;">COUNT</span>(column_name) <span class="kw" style="color: #003B4F;">as</span> new_column_name</span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;">FROM</span> table_name</span>
<span id="cb31-3"><span class="kw" style="color: #003B4F;">GROUP</span> <span class="kw" style="color: #003B4F;">BY</span> column_name</span>
<span id="cb31-4"><span class="kw" style="color: #003B4F;">ORDER</span> <span class="kw" style="color: #003B4F;">BY</span> column_name</span></code></pre></div>
</section>
<section id="how-many-reviews-per-sentiment" class="level3" data-number="5.3">
<h3 data-number="5.3" class="anchored" data-anchor-id="how-many-reviews-per-sentiment"><span class="header-section-number">5.3</span> How many reviews per sentiment?</h3>
<div class="cell" data-outputid="6a908564-8c2e-43c0-eb0c-70ec4a19d4e7">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">statement_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb32-2"><span class="st" style="color: #20794D;">SELECT sentiment, COUNT(sentiment) AS count_sentiment</span></span>
<span id="cb32-3"><span class="st" style="color: #20794D;">FROM reviews</span></span>
<span id="cb32-4"><span class="st" style="color: #20794D;">GROUP BY sentiment</span></span>
<span id="cb32-5"><span class="st" style="color: #20794D;">ORDER BY sentiment</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="bu" style="color: null;">print</span>(statement_count_by_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT sentiment, COUNT(sentiment) AS count_sentiment
FROM reviews
GROUP BY sentiment
ORDER BY sentiment
</code></pre>
</div>
</div>
<p>Query data in Amazon Athena database cluster using the prepared SQL statement:</p>
<div class="cell" data-outputid="223abb7e-6ff3-4d27-e79d-3bdcddc61d42">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df_count_by_sentiment <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb34-2">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_sentiment,</span>
<span id="cb34-3">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb34-4">)</span>
<span id="cb34-5"></span>
<span id="cb34-6"><span class="bu" style="color: null;">print</span>(df_count_by_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sentiment  count_sentiment
0         -1             2370
1          0             2823
2          1            17433</code></pre>
</div>
</div>
<p>Preview the results of the query:</p>
<div class="cell" data-outputid="8c1baeae-65d9-488f-b6ae-b1141cd32dc1">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df_count_by_sentiment.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bar'</span>, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sentiment'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_sentiment'</span>, rot<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;AxesSubplot:xlabel='sentiment'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>So we can see the positive sentiment (1) category has by far the most reviews.</p>
</section>
<section id="calculate-total-number-of-reviews-per-product-category" class="level3" data-number="5.4">
<h3 data-number="5.4" class="anchored" data-anchor-id="calculate-total-number-of-reviews-per-product-category"><span class="header-section-number">5.4</span> Calculate total number of reviews per product category</h3>
<p>Using an Amazon Athena query with the standard SQL statement passed as a parameter, we can calculate the total number of reviews per <code>product_category</code> in the table <code>reviews</code>.</p>
<p>We can create an SQL statement of the form</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb38-1"><span class="kw" style="color: #003B4F;">SELECT</span> category_column, <span class="fu" style="color: #4758AB;">COUNT</span>(column_name) <span class="kw" style="color: #003B4F;">AS</span> new_column_name</span>
<span id="cb38-2"><span class="kw" style="color: #003B4F;">FROM</span> table_name</span>
<span id="cb38-3"><span class="kw" style="color: #003B4F;">GROUP</span> <span class="kw" style="color: #003B4F;">BY</span> category_column</span>
<span id="cb38-4"><span class="kw" style="color: #003B4F;">ORDER</span> <span class="kw" style="color: #003B4F;">BY</span> new_column_name <span class="kw" style="color: #003B4F;">DESC</span></span></code></pre></div>
<p>as a triple quote string into the variable <code>statement_count_by_category</code>. We will also use the column <code>sentiment</code> in the <code>COUNT</code> function and give it a new name <code>count_sentiment</code>.</p>
<div class="cell" data-outputid="2dca4de6-d34f-4602-c37e-53966cc1c3d7">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">statement_count_by_category <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb39-2"><span class="st" style="color: #20794D;">SELECT product_category, COUNT(sentiment) AS count_sentiment</span></span>
<span id="cb39-3"><span class="st" style="color: #20794D;">FROM reviews</span></span>
<span id="cb39-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb39-5"><span class="st" style="color: #20794D;">ORDER BY count_sentiment DESC</span></span>
<span id="cb39-6"><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb39-7"><span class="bu" style="color: null;">print</span>(statement_count_by_category)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, COUNT(sentiment) AS count_sentiment
FROM reviews
GROUP BY product_category 
ORDER BY count_sentiment DESC
</code></pre>
</div>
</div>
<p>Let’s query data in Amazon Athena database passing the prepared SQL statement:</p>
<div class="cell" data-outputid="bbb496c2-f765-4b59-f67b-c692b2bed41b">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb41-2">df_count_by_category <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb41-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category,</span>
<span id="cb41-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb41-5">)</span>
<span id="cb41-6"></span>
<span id="cb41-7">df_count_by_category</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 320 ms, sys: 24.5 ms, total: 345 ms
Wall time: 3.27 s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="34">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>product_category</th>
      <th>count_sentiment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Dresses</td>
      <td>6145</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Knits</td>
      <td>4626</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Blouses</td>
      <td>2983</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Sweaters</td>
      <td>1380</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Pants</td>
      <td>1350</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Jeans</td>
      <td>1104</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Fine gauge</td>
      <td>1059</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Skirts</td>
      <td>903</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Jackets</td>
      <td>683</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Lounge</td>
      <td>669</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Swim</td>
      <td>332</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Outerwear</td>
      <td>319</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Shorts</td>
      <td>304</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Sleep</td>
      <td>214</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Legwear</td>
      <td>158</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Intimates</td>
      <td>147</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Layering</td>
      <td>132</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Trend</td>
      <td>118</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="which-product-categories-are-highest-rated-by-average-sentiment" class="level3" data-number="5.5">
<h3 data-number="5.5" class="anchored" data-anchor-id="which-product-categories-are-highest-rated-by-average-sentiment"><span class="header-section-number">5.5</span> Which product categories are highest rated by average sentiment?</h3>
<p>We will set the SQL statement to find the average sentiment per product category, showing the results in the descending order.</p>
<div class="cell" data-outputid="3a8832c5-0db9-4b7a-beef-a617c2c94560">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">statement_avg_by_category <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb43-2"><span class="st" style="color: #20794D;">SELECT product_category, AVG(sentiment) AS avg_sentiment</span></span>
<span id="cb43-3"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> </span></span>
<span id="cb43-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb43-5"><span class="st" style="color: #20794D;">ORDER BY avg_sentiment DESC</span></span>
<span id="cb43-6"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="bu" style="color: null;">print</span>(statement_avg_by_category)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, AVG(sentiment) AS avg_sentiment
FROM reviews 
GROUP BY product_category 
ORDER BY avg_sentiment DESC
</code></pre>
</div>
</div>
<p>Lets query data in Amazon Athena database passing the prepared SQL statement:</p>
<div class="cell" data-outputid="32a30401-6472-4e46-d6ae-a8447213ae53">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb45-2">df_avg_by_category <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb45-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_avg_by_category,</span>
<span id="cb45-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb45-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 462 ms, sys: 16.5 ms, total: 478 ms
Wall time: 3.74 s</code></pre>
</div>
</div>
<p>Let’s now preview the query results in the temporary S3 bucket: <code>s3://aws-athena-query-results-ACCOUNT-REGION/</code></p>
<div class="cell" data-outputid="8b91eb80-2228-4cdb-9cb4-f49430d5665c">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">df_avg_by_category</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>product_category</th>
      <th>avg_sentiment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Layering</td>
      <td>0.780303</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Jeans</td>
      <td>0.746377</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Lounge</td>
      <td>0.745889</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Sleep</td>
      <td>0.710280</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Shorts</td>
      <td>0.707237</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Pants</td>
      <td>0.705185</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Intimates</td>
      <td>0.700680</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Jackets</td>
      <td>0.699854</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Skirts</td>
      <td>0.696567</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Legwear</td>
      <td>0.696203</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Fine gauge</td>
      <td>0.692162</td>
    </tr>
    <tr>
      <th>11</th>
      <td>Outerwear</td>
      <td>0.683386</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Knits</td>
      <td>0.653913</td>
    </tr>
    <tr>
      <th>13</th>
      <td>Swim</td>
      <td>0.644578</td>
    </tr>
    <tr>
      <th>14</th>
      <td>Dresses</td>
      <td>0.643287</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Sweaters</td>
      <td>0.641304</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Blouses</td>
      <td>0.641301</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Trend</td>
      <td>0.483051</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p><strong>Visualization</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;">def</span> show_values_barplot(axs, space):</span>
<span id="cb48-2">    <span class="kw" style="color: #003B4F;">def</span> _show_on_plot(ax):</span>
<span id="cb48-3">        <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> ax.patches:</span>
<span id="cb48-4">            _x <span class="op" style="color: #5E5E5E;">=</span> p.get_x() <span class="op" style="color: #5E5E5E;">+</span> p.get_width() <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">float</span>(space)</span>
<span id="cb48-5">            _y <span class="op" style="color: #5E5E5E;">=</span> p.get_y() <span class="op" style="color: #5E5E5E;">+</span> p.get_height()</span>
<span id="cb48-6">            value <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">round</span>(<span class="bu" style="color: null;">float</span>(p.get_width()),<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb48-7">            ax.text(_x, _y, value, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"left"</span>)</span>
<span id="cb48-8"></span>
<span id="cb48-9">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(axs, np.ndarray):</span>
<span id="cb48-10">        <span class="cf" style="color: #003B4F;">for</span> idx, ax <span class="kw" style="color: #003B4F;">in</span> np.ndenumerate(axs):</span>
<span id="cb48-11">            _show_on_plot(ax)</span>
<span id="cb48-12">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb48-13">        _show_on_plot(axs)</span></code></pre></div>
</div>
<div class="cell" data-outputid="499a9209-b8ea-4fbc-e1a2-3216e241cbaf">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># Create plot</span></span>
<span id="cb49-2">barplot <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(</span>
<span id="cb49-3">    data <span class="op" style="color: #5E5E5E;">=</span> df_avg_by_category, </span>
<span id="cb49-4">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>,</span>
<span id="cb49-5">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'avg_sentiment'</span>, </span>
<span id="cb49-6">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"b"</span>, </span>
<span id="cb49-7">    saturation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb49-8">)</span>
<span id="cb49-9"></span>
<span id="cb49-10"><span class="co" style="color: #5E5E5E;"># Set the size of the figure</span></span>
<span id="cb49-11">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="fl" style="color: #AD0000;">15.0</span>, <span class="fl" style="color: #AD0000;">10.0</span>)})</span>
<span id="cb49-12">    </span>
<span id="cb49-13"><span class="co" style="color: #5E5E5E;"># Set title and x-axis ticks </span></span>
<span id="cb49-14">plt.title(<span class="st" style="color: #20794D;">'Average sentiment by product category'</span>)</span>
<span id="cb49-15"><span class="co" style="color: #5E5E5E;">#plt.xticks([-1, 0, 1], ['Negative', 'Neutral', 'Positive'])</span></span>
<span id="cb49-16"></span>
<span id="cb49-17"><span class="co" style="color: #5E5E5E;"># Helper code to show actual values afters bars </span></span>
<span id="cb49-18">show_values_barplot(barplot, <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb49-19"></span>
<span id="cb49-20">plt.xlabel(<span class="st" style="color: #20794D;">"Average sentiment"</span>)</span>
<span id="cb49-21">plt.ylabel(<span class="st" style="color: #20794D;">"Product category"</span>)</span>
<span id="cb49-22"></span>
<span id="cb49-23">plt.tight_layout()</span>
<span id="cb49-24"></span>
<span id="cb49-25"><span class="co" style="color: #5E5E5E;"># Show graphic</span></span>
<span id="cb49-26">plt.show(barplot)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="which-product-categories-have-the-most-reviews" class="level3" data-number="5.6">
<h3 data-number="5.6" class="anchored" data-anchor-id="which-product-categories-have-the-most-reviews"><span class="header-section-number">5.6</span> Which product categories have the most reviews?</h3>
<p>Let’s create an SQL statement to find the count of sentiment per product category, showing the results in the descending order.</p>
<div class="cell" data-outputid="f2568c3d-d2e9-46a4-c837-9e36d6ffe6ea">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">statement_count_by_category_desc <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb50-2"><span class="st" style="color: #20794D;">SELECT product_category, COUNT(*) AS count_reviews </span></span>
<span id="cb50-3"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb50-4"><span class="st" style="color: #20794D;">GROUP BY product_category </span></span>
<span id="cb50-5"><span class="st" style="color: #20794D;">ORDER BY count_reviews DESC</span></span>
<span id="cb50-6"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb50-7"></span>
<span id="cb50-8"><span class="bu" style="color: null;">print</span>(statement_count_by_category_desc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category, COUNT(*) AS count_reviews 
FROM reviews
GROUP BY product_category 
ORDER BY count_reviews DESC
</code></pre>
</div>
</div>
<p>Now lets query data in Amazon Athena database passing the prepared SQL statement.</p>
<div class="cell" data-outputid="607b59d9-f9d8-4671-a27f-45422d2dc9ee">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb52-2">df_count_by_category_desc <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb52-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category_desc,</span>
<span id="cb52-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb52-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 360 ms, sys: 22.6 ms, total: 382 ms
Wall time: 4.38 s</code></pre>
</div>
</div>
<p>Let’s store maximum number of sentiment for the visualization plot.</p>
<div class="cell" data-outputid="58d816a8-053f-4a0e-8254-78e71ee6bde7">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">max_sentiment <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_desc[<span class="st" style="color: #20794D;">'count_reviews'</span>].<span class="bu" style="color: null;">max</span>()</span>
<span id="cb54-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Highest number of reviews (in a single category): </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(max_sentiment))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest number of reviews (in a single category): 6145</code></pre>
</div>
</div>
<p>Let’s now plot this as a bar chart.</p>
<div class="cell" data-outputid="49aa5fc4-9c2f-4f65-dbbf-68eb18d4a4c0">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># Create seaborn barplot</span></span>
<span id="cb56-2">barplot <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(</span>
<span id="cb56-3">    data<span class="op" style="color: #5E5E5E;">=</span>df_count_by_category_desc, </span>
<span id="cb56-4">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'product_category'</span>, </span>
<span id="cb56-5">    x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count_reviews'</span>, </span>
<span id="cb56-6">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"b"</span>,</span>
<span id="cb56-7">    saturation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb56-8">)</span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="co" style="color: #5E5E5E;"># Set the size of the figure</span></span>
<span id="cb56-11">sns.<span class="bu" style="color: null;">set</span>(rc<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'figure.figsize'</span>:(<span class="fl" style="color: #AD0000;">15.0</span>, <span class="fl" style="color: #AD0000;">10.0</span>)})</span>
<span id="cb56-12">    </span>
<span id="cb56-13"><span class="co" style="color: #5E5E5E;"># Set title</span></span>
<span id="cb56-14">plt.title(<span class="st" style="color: #20794D;">"Number of reviews per product category"</span>)</span>
<span id="cb56-15">plt.xlabel(<span class="st" style="color: #20794D;">"Number of reviews"</span>)</span>
<span id="cb56-16">plt.ylabel(<span class="st" style="color: #20794D;">"Product category"</span>)</span>
<span id="cb56-17"></span>
<span id="cb56-18">plt.tight_layout()</span>
<span id="cb56-19"></span>
<span id="cb56-20"><span class="co" style="color: #5E5E5E;"># Show the barplot</span></span>
<span id="cb56-21">plt.show(barplot)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="what-is-the-breakdown-of-sentiments-per-product-category" class="level3" data-number="5.7">
<h3 data-number="5.7" class="anchored" data-anchor-id="what-is-the-breakdown-of-sentiments-per-product-category"><span class="header-section-number">5.7</span> What is the breakdown of sentiments per product category?</h3>
<p>Let’s set the SQL statement to find the count of sentiment per product category and sentiment.</p>
<div class="cell" data-outputid="5dbd22ae-0041-4fdb-93d0-41253e311611">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">statement_count_by_category_and_sentiment <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb57-2"><span class="st" style="color: #20794D;">SELECT product_category,</span></span>
<span id="cb57-3"><span class="st" style="color: #20794D;">         sentiment,</span></span>
<span id="cb57-4"><span class="st" style="color: #20794D;">         COUNT(*) AS count_reviews</span></span>
<span id="cb57-5"><span class="st" style="color: #20794D;">FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb57-6"><span class="st" style="color: #20794D;">GROUP BY  product_category, sentiment</span></span>
<span id="cb57-7"><span class="st" style="color: #20794D;">ORDER BY  product_category ASC, sentiment DESC, count_reviews</span></span>
<span id="cb57-8"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb57-9"></span>
<span id="cb57-10"><span class="bu" style="color: null;">print</span>(statement_count_by_category_and_sentiment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
SELECT product_category,
         sentiment,
         COUNT(*) AS count_reviews
FROM reviews
GROUP BY  product_category, sentiment
ORDER BY  product_category ASC, sentiment DESC, count_reviews
</code></pre>
</div>
</div>
<p>Now we query the data in Amazon Athena database passing the prepared SQL statement.</p>
<div class="cell" data-outputid="9a244d23-07ba-477a-8dbc-bcf48863b824">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb59-2">df_count_by_category_and_sentiment <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb59-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_count_by_category_and_sentiment,</span>
<span id="cb59-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb59-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 482 ms, sys: 22 ms, total: 504 ms
Wall time: 3.56 s</code></pre>
</div>
</div>
<p>Let’s prepare for a stacked percentage horizontal bar plot showing proportion of sentiments per product category.</p>
<div class="cell" data-outputid="9443387b-b7a8-4e3f-987c-00b852468be5">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Create grouped dataframes by category and by sentiment</span></span>
<span id="cb61-2">grouped_category <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby(<span class="st" style="color: #20794D;">'product_category'</span>)</span>
<span id="cb61-3">grouped_star <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby(<span class="st" style="color: #20794D;">'sentiment'</span>)</span>
<span id="cb61-4"></span>
<span id="cb61-5"><span class="co" style="color: #5E5E5E;"># Create sum of sentiments per star sentiment</span></span>
<span id="cb61-6">df_sum <span class="op" style="color: #5E5E5E;">=</span> df_count_by_category_and_sentiment.groupby([<span class="st" style="color: #20794D;">'sentiment'</span>]).<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb61-7"></span>
<span id="cb61-8"><span class="co" style="color: #5E5E5E;"># Calculate total number of sentiments</span></span>
<span id="cb61-9">total <span class="op" style="color: #5E5E5E;">=</span> df_sum[<span class="st" style="color: #20794D;">'count_reviews'</span>].<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb61-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total number of reviews: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(total))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total number of reviews: 22626</code></pre>
</div>
</div>
<p>And create a dictionary of product categories and array of star rating distribution per category.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">distribution <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb63-2">count_reviews_per_star <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb63-3">i<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb63-4"></span>
<span id="cb63-5"><span class="cf" style="color: #003B4F;">for</span> category, sentiments <span class="kw" style="color: #003B4F;">in</span> grouped_category:</span>
<span id="cb63-6">    count_reviews_per_star <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb63-7">    <span class="cf" style="color: #003B4F;">for</span> star <span class="kw" style="color: #003B4F;">in</span> sentiments[<span class="st" style="color: #20794D;">'sentiment'</span>]:</span>
<span id="cb63-8">        count_reviews_per_star.append(sentiments.at[i, <span class="st" style="color: #20794D;">'count_reviews'</span>])</span>
<span id="cb63-9">        i<span class="op" style="color: #5E5E5E;">=</span>i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb63-10">    distribution[category] <span class="op" style="color: #5E5E5E;">=</span> count_reviews_per_star</span></code></pre></div>
</div>
<p>Now let’s build an array per star across all categories.</p>
<div class="cell" data-outputid="1fb0704b-3db6-4f2d-d697-fe1b5fe47972">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">distribution</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>{'Blouses': [2256, 384, 343],
 'Dresses': [4634, 830, 681],
 'Fine gauge': [837, 118, 104],
 'Intimates': [117, 16, 14],
 'Jackets': [550, 61, 72],
 'Jeans': [909, 110, 85],
 'Knits': [3523, 605, 498],
 'Layering': [113, 9, 10],
 'Legwear': [126, 16, 16],
 'Lounge': [545, 78, 46],
 'Outerwear': [254, 29, 36],
 'Pants': [1074, 154, 122],
 'Shorts': [240, 39, 25],
 'Skirts': [714, 104, 85],
 'Sleep': [175, 16, 23],
 'Sweaters': [1036, 193, 151],
 'Swim': [252, 42, 38],
 'Trend': [78, 19, 21]}</code></pre>
</div>
</div>
<div class="cell" data-outputid="bd11465c-101d-42ea-809b-636d1804ec92">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">df_distribution_pct <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(distribution).transpose().<span class="bu" style="color: null;">apply</span>(</span>
<span id="cb66-2">    <span class="kw" style="color: #003B4F;">lambda</span> num_sentiments: num_sentiments<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">sum</span>(num_sentiments)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb66-3">)</span>
<span id="cb66-4">df_distribution_pct.columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'0'</span>, <span class="st" style="color: #20794D;">'-1'</span>]</span>
<span id="cb66-5">df_distribution_pct</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>1</th>
      <th>0</th>
      <th>-1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Blouses</th>
      <td>75.628562</td>
      <td>12.872947</td>
      <td>11.498491</td>
    </tr>
    <tr>
      <th>Dresses</th>
      <td>75.410903</td>
      <td>13.506916</td>
      <td>11.082181</td>
    </tr>
    <tr>
      <th>Fine gauge</th>
      <td>79.036827</td>
      <td>11.142587</td>
      <td>9.820585</td>
    </tr>
    <tr>
      <th>Intimates</th>
      <td>79.591837</td>
      <td>10.884354</td>
      <td>9.523810</td>
    </tr>
    <tr>
      <th>Jackets</th>
      <td>80.527086</td>
      <td>8.931186</td>
      <td>10.541728</td>
    </tr>
    <tr>
      <th>Jeans</th>
      <td>82.336957</td>
      <td>9.963768</td>
      <td>7.699275</td>
    </tr>
    <tr>
      <th>Knits</th>
      <td>76.156507</td>
      <td>13.078253</td>
      <td>10.765240</td>
    </tr>
    <tr>
      <th>Layering</th>
      <td>85.606061</td>
      <td>6.818182</td>
      <td>7.575758</td>
    </tr>
    <tr>
      <th>Legwear</th>
      <td>79.746835</td>
      <td>10.126582</td>
      <td>10.126582</td>
    </tr>
    <tr>
      <th>Lounge</th>
      <td>81.464873</td>
      <td>11.659193</td>
      <td>6.875934</td>
    </tr>
    <tr>
      <th>Outerwear</th>
      <td>79.623824</td>
      <td>9.090909</td>
      <td>11.285266</td>
    </tr>
    <tr>
      <th>Pants</th>
      <td>79.555556</td>
      <td>11.407407</td>
      <td>9.037037</td>
    </tr>
    <tr>
      <th>Shorts</th>
      <td>78.947368</td>
      <td>12.828947</td>
      <td>8.223684</td>
    </tr>
    <tr>
      <th>Skirts</th>
      <td>79.069767</td>
      <td>11.517165</td>
      <td>9.413068</td>
    </tr>
    <tr>
      <th>Sleep</th>
      <td>81.775701</td>
      <td>7.476636</td>
      <td>10.747664</td>
    </tr>
    <tr>
      <th>Sweaters</th>
      <td>75.072464</td>
      <td>13.985507</td>
      <td>10.942029</td>
    </tr>
    <tr>
      <th>Swim</th>
      <td>75.903614</td>
      <td>12.650602</td>
      <td>11.445783</td>
    </tr>
    <tr>
      <th>Trend</th>
      <td>66.101695</td>
      <td>16.101695</td>
      <td>17.796610</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s plot the distributions of sentiments per product category.</p>
<div class="cell" data-outputid="25bec75a-75df-4fc6-9d67-67c6953b4431">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">categories <span class="op" style="color: #5E5E5E;">=</span> df_distribution_pct.index</span>
<span id="cb67-2"></span>
<span id="cb67-3"><span class="co" style="color: #5E5E5E;"># Plot bars</span></span>
<span id="cb67-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb67-5"></span>
<span id="cb67-6">df_distribution_pct.plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"barh"</span>, </span>
<span id="cb67-7">                         stacked<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, </span>
<span id="cb67-8">                         edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb67-9">                         width<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>,</span>
<span id="cb67-10">                         color<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'green'</span>, </span>
<span id="cb67-11">                                <span class="st" style="color: #20794D;">'orange'</span>, </span>
<span id="cb67-12">                                <span class="st" style="color: #20794D;">'blue'</span>])</span>
<span id="cb67-13"></span>
<span id="cb67-14">plt.title(<span class="st" style="color: #20794D;">"Distribution of reviews per sentiment per category"</span>, </span>
<span id="cb67-15">          fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'16'</span>)</span>
<span id="cb67-16"></span>
<span id="cb67-17">plt.legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.04</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb67-18">           loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"upper left"</span>,</span>
<span id="cb67-19">           labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Positive'</span>, </span>
<span id="cb67-20">                   <span class="st" style="color: #20794D;">'Neutral'</span>, </span>
<span id="cb67-21">                   <span class="st" style="color: #20794D;">'Negative'</span>])</span>
<span id="cb67-22"></span>
<span id="cb67-23">plt.xlabel(<span class="st" style="color: #20794D;">"% Breakdown of sentiments"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb67-24">plt.gca().invert_yaxis()</span>
<span id="cb67-25">plt.tight_layout()</span>
<span id="cb67-26"></span>
<span id="cb67-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 1000x500 with 0 Axes&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-43-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="analyze-the-distribution-of-review-word-counts" class="level3" data-number="5.8">
<h3 data-number="5.8" class="anchored" data-anchor-id="analyze-the-distribution-of-review-word-counts"><span class="header-section-number">5.8</span> Analyze the distribution of review word counts</h3>
<p>Let’s now set the SQL statement to count the number of the words in each of the reviews.</p>
<div class="cell" data-outputid="dd6a2a1d-78e0-40cb-8095-6bd32edb4d31">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">statement_num_words <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb69-2"><span class="st" style="color: #20794D;">    SELECT CARDINALITY(SPLIT(review_body, ' ')) as num_words</span></span>
<span id="cb69-3"><span class="st" style="color: #20794D;">    FROM </span><span class="sc" style="color: #5E5E5E;">{}</span></span>
<span id="cb69-4"><span class="st" style="color: #20794D;">"""</span>.<span class="bu" style="color: null;">format</span>(table_name)</span>
<span id="cb69-5"></span>
<span id="cb69-6"><span class="bu" style="color: null;">print</span>(statement_num_words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    SELECT CARDINALITY(SPLIT(review_body, ' ')) as num_words
    FROM reviews
</code></pre>
</div>
</div>
<p>Now query the data in Amazon Athena database passing the SQL statement.</p>
<div class="cell" data-outputid="452e8a65-c21a-4bbb-de47-f4bdeff4f3a7">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb71-2">df_num_words <span class="op" style="color: #5E5E5E;">=</span> wr.athena.read_sql_query(</span>
<span id="cb71-3">    sql<span class="op" style="color: #5E5E5E;">=</span>statement_num_words,</span>
<span id="cb71-4">    database<span class="op" style="color: #5E5E5E;">=</span>database_name</span>
<span id="cb71-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 286 ms, sys: 20.9 ms, total: 307 ms
Wall time: 3.25 s</code></pre>
</div>
</div>
<p>Let’s print out and analyse some descriptive statistics.</p>
<div class="cell" data-outputid="ae09e3c3-d0b4-41b6-e836-ceeda57eb6c1">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">summary <span class="op" style="color: #5E5E5E;">=</span> df_num_words[<span class="st" style="color: #20794D;">"num_words"</span>].describe(percentiles<span class="op" style="color: #5E5E5E;">=</span>[<span class="fl" style="color: #AD0000;">0.10</span>, <span class="fl" style="color: #AD0000;">0.20</span>, <span class="fl" style="color: #AD0000;">0.30</span>, <span class="fl" style="color: #AD0000;">0.40</span>, <span class="fl" style="color: #AD0000;">0.50</span>, <span class="fl" style="color: #AD0000;">0.60</span>, <span class="fl" style="color: #AD0000;">0.70</span>, <span class="fl" style="color: #AD0000;">0.80</span>, <span class="fl" style="color: #AD0000;">0.90</span>, <span class="fl" style="color: #AD0000;">1.00</span>])</span>
<span id="cb73-2">summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>count    22626.000000
mean        62.709847
std         29.993735
min          2.000000
10%         22.000000
20%         33.000000
30%         42.000000
40%         51.000000
50%         61.000000
60%         72.000000
70%         86.000000
80%         97.000000
90%        103.000000
100%       122.000000
max        122.000000
Name: num_words, dtype: float64</code></pre>
</div>
</div>
<p>Now we will plot the distribution of the words number per review.</p>
<div class="cell" data-outputid="70a460d3-cf2d-4e89-fb74-0ca2b43ef362">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">df_num_words[<span class="st" style="color: #20794D;">"num_words"</span>].plot.hist(xticks<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">64</span>, <span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">256</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">256</span>]).axvline(</span>
<span id="cb75-2">    x<span class="op" style="color: #5E5E5E;">=</span>summary[<span class="st" style="color: #20794D;">"100%"</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"red"</span></span>
<span id="cb75-3">)</span>
<span id="cb75-4"></span>
<span id="cb75-5">plt.xlabel(<span class="st" style="color: #20794D;">"Words number"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb75-6">plt.ylabel(<span class="st" style="color: #20794D;">"Frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'14'</span>)</span>
<span id="cb75-7">plt.savefig(<span class="st" style="color: #20794D;">'distribution_num_words_per_review.png'</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb75-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="acknowledgements" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">6</span> Acknowledgements</h2>
<p>I’d like to express my thanks to the great <a href="https://www.deeplearning.ai/courses/practical-data-science-specialization/">Deep Learning AI Practical Data Science on AWS Specialisation Course</a> which i completed, and acknowledge the use of some images and other materials from the training course in this article.</p>


</section>

 ]]></description>
  <category>aws</category>
  <category>cloud-data-science</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-02-03-loading-transforming-clothes-reviews-text-aws.html</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/aws.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Using Satellite Images and Deep Learning to Track Deforestation in the Amazon</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this project we will be using a deep learning model to help classify satellite images of the amazon rain forest. <strong>Here the main objective is not actually to get the best results for this task, rather to use this dataset to illustrate the use of the Fastai deep learning library</strong> - in particular to demonstrate the uses of the high-level api as well as the mid-level api and show how this can be used to configure different types of datasets for different types of problems.</p>
</section>
<section id="using-fastai-to-prepare-data-for-the-amazon-image-classification-task" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="using-fastai-to-prepare-data-for-the-amazon-image-classification-task"><span class="header-section-number">2</span> Using Fastai to prepare data for the Amazon Image classification task</h2>
<p>The amazon dataset comes from the <a href="https://www.kaggle.com/competitions/planet-understanding-the-amazon-from-space">Understanding the Amazon from Space</a> project, which aims:</p>
<blockquote class="blockquote">
<p>‘…to label satellite image chips with atmospheric conditions and various classes of land cover/land use. Resulting algorithms will help the global community better understand where, how, and why deforestation happens all over the world - and ultimately how to respond.’</p>
</blockquote>
<p>Key aspects of this task include.</p>
<ul>
<li>Our data consists of images as well as multiple labels for each image</li>
<li>Our task is <em>Multi-label Classification</em> i.e.&nbsp;to be able to predict one or more labels for a given image</li>
</ul>
<p>While the main dataset has over 40,000 images - we will be using a small subset of this of just 200 images.</p>
<p>In an earlier project I looked at a different dataset of satellite images, in this case for an <a href="2021-05-15-satellite-recognition-buildings-woodland-water-ai.html">image segmentation task rather than classification</a>.</p>
</section>
<section id="loading-and-examining-the-data" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="loading-and-examining-the-data"><span class="header-section-number">3</span> Loading and examining the data</h2>
<p>Let’s see how we can use the Fastai library to prepare our data to perform this task, and start by loading the data.</p>
<div class="cell" data-outputid="7a87a3fa-37ec-464d-c448-15885ffc1ce2" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">path <span class="op" style="color: #5E5E5E;">=</span> untar_data(URLs.PLANET_TINY)</span>
<span id="cb1-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(#3) [Path('/root/.fastai/data/planet_tiny/labels.csv'),Path('/root/.fastai/data/planet_tiny/models'),Path('/root/.fastai/data/planet_tiny/train')]</code></pre>
</div>
</div>
<p>So we have a folder called ‘train’ which we assume has the images, lets take a look to check.</p>
<div class="cell" data-outputid="dd002822-29a6-4111-a9b8-aafbbee59ebe" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"train"</span>).ls()[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(#5) [Path('/root/.fastai/data/planet_tiny/train/train_39223.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_5302.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_34793.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_28156.jpg'),Path('/root/.fastai/data/planet_tiny/train/train_15839.jpg')]</code></pre>
</div>
</div>
<p>We also have a labels.csv file, which would normally have the image names and their associated labels, lets verify this.</p>
<div class="cell" data-outputid="daabefdb-3fe5-4b24-f79e-1bf2c1985215" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"labels.csv"</span>)</span>
<span id="cb5-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">


  <div id="df-9d5aa2e9-296f-4abc-8109-47ff26223573">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_name</th>
      <th>tags</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>train_31112</td>
      <td>clear primary</td>
    </tr>
    <tr>
      <th>1</th>
      <td>train_4300</td>
      <td>partly_cloudy primary water</td>
    </tr>
    <tr>
      <th>2</th>
      <td>train_39539</td>
      <td>clear primary water</td>
    </tr>
    <tr>
      <th>3</th>
      <td>train_12498</td>
      <td>agriculture clear primary road</td>
    </tr>
    <tr>
      <th>4</th>
      <td>train_9320</td>
      <td>clear primary</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-9d5aa2e9-296f-4abc-8109-47ff26223573')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-9d5aa2e9-296f-4abc-8109-47ff26223573 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-9d5aa2e9-296f-4abc-8109-47ff26223573');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Let’s check how many images we have.</p>
<div class="cell" data-outputid="45f3de6e-d8df-4613-e4be-9acaf5d095fa" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(200, 2)</code></pre>
</div>
</div>
<p>So this is a <em>multi-label classification</em> task, each image has one or more labels which we hope to predict. Lets get an idea of how many example images we have for each label.</p>
<div class="cell" data-outputid="77a3d10a-4a57-496a-ba16-37b5ce1b0805" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">new_df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'tags'</span>].<span class="bu" style="color: null;">str</span>.split(expand<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).stack().value_counts().reset_index()</span>
<span id="cb8-2">new_df.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Word'</span>, <span class="st" style="color: #20794D;">'Frequency'</span>] </span>
<span id="cb8-3"><span class="bu" style="color: null;">print</span>(new_df.shape)</span>
<span id="cb8-4">new_df.head(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(14, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">


  <div id="df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Word</th>
      <th>Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>primary</td>
      <td>190</td>
    </tr>
    <tr>
      <th>1</th>
      <td>clear</td>
      <td>139</td>
    </tr>
    <tr>
      <th>2</th>
      <td>agriculture</td>
      <td>61</td>
    </tr>
    <tr>
      <th>3</th>
      <td>partly_cloudy</td>
      <td>42</td>
    </tr>
    <tr>
      <th>4</th>
      <td>road</td>
      <td>41</td>
    </tr>
    <tr>
      <th>5</th>
      <td>water</td>
      <td>31</td>
    </tr>
    <tr>
      <th>6</th>
      <td>cultivation</td>
      <td>28</td>
    </tr>
    <tr>
      <th>7</th>
      <td>habitation</td>
      <td>19</td>
    </tr>
    <tr>
      <th>8</th>
      <td>haze</td>
      <td>11</td>
    </tr>
    <tr>
      <th>9</th>
      <td>cloudy</td>
      <td>8</td>
    </tr>
    <tr>
      <th>10</th>
      <td>bare_ground</td>
      <td>5</td>
    </tr>
    <tr>
      <th>11</th>
      <td>artisinal_mine</td>
      <td>4</td>
    </tr>
    <tr>
      <th>12</th>
      <td>blooming</td>
      <td>3</td>
    </tr>
    <tr>
      <th>13</th>
      <td>selective_logging</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-3afd105e-e4e7-4f9a-a604-b0d5cfccd96d');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>So we can see this is a very imbalanced dataset, some labels such as <em>primary</em> occur alot, wheras other labels such as <em>selective_logging</em> only occur twice.</p>
<p>As we are mainly focussing on the use of fastai not making the best model, we will be using the fastest method of creating a training &amp; validation datasets using the random split method. Given we have some categories that don’t have many examples, if we do a random split its possible we could have some labels only in the training or valdiation sets, and this will create an error as we can’t have labels in the validation set that are not in the training set.</p>
<p>Let’s deal with this by removing the images that have low-frequency labels, to try to reduce the risk of this error so we can focus on how to use the fastai library.</p>
<div class="cell" data-outputid="10cf63c9-722f-4607-9c39-bd9a8bd9af75" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df <span class="op" style="color: #5E5E5E;">=</span> df.copy()</span>
<span id="cb10-2">df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">"tags"</span>].<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">"haze|cloudy|bare_ground|artisinal_mine|blooming|selective_logging"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">False</span>]</span>
<span id="cb10-3">new_df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'tags'</span>].<span class="bu" style="color: null;">str</span>.split(expand<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).stack().value_counts().reset_index()</span>
<span id="cb10-4">new_df.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Word'</span>, <span class="st" style="color: #20794D;">'Frequency'</span>] </span>
<span id="cb10-5"><span class="bu" style="color: null;">print</span>(new_df.shape)</span>
<span id="cb10-6">new_df.head(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(7, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">


  <div id="df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Word</th>
      <th>Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>clear</td>
      <td>127</td>
    </tr>
    <tr>
      <th>1</th>
      <td>primary</td>
      <td>126</td>
    </tr>
    <tr>
      <th>2</th>
      <td>agriculture</td>
      <td>38</td>
    </tr>
    <tr>
      <th>3</th>
      <td>road</td>
      <td>26</td>
    </tr>
    <tr>
      <th>4</th>
      <td>water</td>
      <td>18</td>
    </tr>
    <tr>
      <th>5</th>
      <td>cultivation</td>
      <td>14</td>
    </tr>
    <tr>
      <th>6</th>
      <td>habitation</td>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e4fc5de0-13ce-4e90-9d90-d7d7014bceb3');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>We now have a second issue to deal with, the image names in our labels.csv is not a complete file name, this will make it more difficult to read in the image files. Lets create a new column that has the complete image file name.</p>
<div class="cell" data-outputid="225a7282-926e-458d-edf6-c96d719a88e6" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df[<span class="st" style="color: #20794D;">'filename'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'image_name'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'.jpg'</span></span>
<span id="cb12-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">


  <div id="df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_name</th>
      <th>tags</th>
      <th>filename</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>train_31112</td>
      <td>clear primary</td>
      <td>train_31112.jpg</td>
    </tr>
    <tr>
      <th>2</th>
      <td>train_39539</td>
      <td>clear primary water</td>
      <td>train_39539.jpg</td>
    </tr>
    <tr>
      <th>3</th>
      <td>train_12498</td>
      <td>agriculture clear primary road</td>
      <td>train_12498.jpg</td>
    </tr>
    <tr>
      <th>4</th>
      <td>train_9320</td>
      <td>clear primary</td>
      <td>train_9320.jpg</td>
    </tr>
    <tr>
      <th>5</th>
      <td>train_28430</td>
      <td>agriculture clear cultivation primary road</td>
      <td>train_28430.jpg</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-bf48662a-d33c-4f9e-8c3c-f8c6bea0a5aa');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
</section>
<section id="the-fastai-layered-api" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="the-fastai-layered-api"><span class="header-section-number">4</span> The Fastai layered API</h2>
<p>In a previous article i gave an introduction to the <a href="https://livingdatalab.com/fastai/2021/05/30/fastai-midlevel-api.html">Fastai layered API</a></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/fastai-layered.png" title="The Fastai layered API" class="img-fluid"></p>
<p>In this article we will make use of the High &amp; Mid level API.</p>
<section id="using-the-high-level-api" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="using-the-high-level-api"><span class="header-section-number">4.1</span> Using the High Level API</h3>
<p>This level API is the simplest to use, having many preset defaults that make it easy to load and setup data for a range of deep learning tasks.</p>
<p>Let’s use it now to set up our amazon image data.</p>
<div class="cell" data-outputid="677d2a11-f292-4d4a-d198-58a75e09da3c" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_df(df, path, fn_col<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'train'</span>, label_delim<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>,</span>
<span id="cb13-2">                               item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">460</span>), batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb13-3">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So a few things to note which the Fastai high level api has done:</p>
<ul>
<li>It’s used our dataframe to load the data</li>
<li>It uses the <em>path</em> variable to know which file path the images are located</li>
<li>The ‘fn_col’ parameter tells it which column to use for the filenames, in this case column 2 is the new column we created for the complete filename</li>
<li>The <em>folder</em> parameter tells it where the images are located under <em>path</em></li>
<li>The <em>label_delim</em> parameter tells it how to split the labels, in this case separated by spaces</li>
<li><em>item_tfms</em> a list of one or several transforms applied to the items before batching them for model training</li>
<li><em>batch_tfms</em> a list of one or several transforms applied to batches of images once they are formed during model training</li>
</ul>
<p>So we can see we have a good level of configurability even at the high level api.</p>
<p><a href="https://docs.fast.ai/vision.data.html">There are many other high level api functions for Fastai vision applications for loading different types of data</a>.</p>
<p>It will also be helpful to set up some metrics to measure our progress during training, specific to being a multi labelled classification task, and having an unbalanced dataset. A Good metric for this situation would be an F1 score for multiple classes, so lets set up some metrics for this now.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">f1_macro <span class="op" style="color: #5E5E5E;">=</span> F1ScoreMulti(thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, average<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'macro'</span>)</span>
<span id="cb14-2">f1_macro.name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'F1(macro)'</span></span>
<span id="cb14-3">f1_samples <span class="op" style="color: #5E5E5E;">=</span> F1ScoreMulti(thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, average<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'samples'</span>)</span>
<span id="cb14-4">f1_samples.name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'F1(samples)'</span></span></code></pre></div>
</div>
<p>So we are almost ready to create our model and start training.</p>
<p>One consideration we have when creating a model is which model to use? as of date of this article, there are many pre-trained deep learning vision models, and many new ones being added. Which should we use?</p>
<p>Jeremy Howard, one of the co-founders of FastAI completed <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">a project where he looked at a number recent of vision models and evaluated and ranked them by different criteria</a>.</p>
<p>These were based on Ros Wightmanns list of Pytorch state of the art image models library <a href="https://timm.fast.ai/">timm</a>.</p>
<p>Looking at these models and considering this use case: i’d like the best performing model but the best <em>smallest</em> model as we are not focussing here on getting the best results, rather to just demonstrate the usage of the Fastai library.</p>
<p>So looking with this criteria, i’ve selected the ‘convnext_small_in22k’ pre-trained image model to use.</p>
<p>Let’s now create the model using the high-level api function <em>vision_learner</em>.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;">'convnext_small_in22k'</span>, metrics<span class="op" style="color: #5E5E5E;">=</span>[partial(accuracy_multi, thresh<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>), f1_macro, f1_samples])</span></code></pre></div>
</div>
<p>So we have created our model, using our data, and added the metrics to use.</p>
<p>But what about the model learning rate? for this we can use another great Fastai api function <em>lr_find()</em>.</p>
<p>For more information on this concept and the research behind it, including discriminative learning rates this is a <a href="https://towardsdatascience.com/why-i-use-fastai-and-you-should-too-a421f6c99508">great article</a>.</p>
<div class="cell" data-outputid="9d92276c-99aa-4944-c346-1d452ebf0266" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">learn.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>SuggestedLRs(valley=0.0008317637839354575)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-13-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>So this gives us a good idea of the a good learning rate to use, lets set this and train the model for 2 epochs.</p>
<div class="cell" data-outputid="9c62fa39-a651-4ae7-8200-91be3a84fb1d" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">learn.fine_tune(<span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">3e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.044040</td>
      <td>2.020892</td>
      <td>0.497143</td>
      <td>0.312559</td>
      <td>0.430190</td>
      <td>00:02</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.955900</td>
      <td>1.813314</td>
      <td>0.411429</td>
      <td>0.347462</td>
      <td>0.411784</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.914945</td>
      <td>1.890064</td>
      <td>0.554286</td>
      <td>0.363607</td>
      <td>0.453518</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>We can see our model is slowly starting to improve.</p>
<p>Let’s see how our model is predicting labels for our satellite images.</p>
<div class="cell" data-outputid="8d84cc30-51ed-4674-878d-e24705bc762a" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">learn.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-15-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We can also get an idea of which images the model finds hardest to predict by using the <em>plot_top_losses()</em> function.</p>
<div class="cell" data-outputid="69e82aa9-9fe4-4974-9c95-507cc216f538" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">interp <span class="op" style="color: #5E5E5E;">=</span> Interpretation.from_learner(learn)</span>
<span id="cb20-2">interp.plot_top_losses(<span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>target</th>
      <th>predicted</th>
      <th>probabilities</th>
      <th>loss</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>clear;habitation;primary;road;water</td>
      <td>agriculture;cultivation;habitation;road;water</td>
      <td>TensorBase([1.0000e+00, 5.3429e-10, 9.1896e-01, 5.3812e-01, 1.8748e-02,\n            9.9999e-01, 9.9779e-01])</td>
      <td>5.9950785636901855</td>
    </tr>
    <tr>
      <th>1</th>
      <td>agriculture;clear;habitation;primary;road</td>
      <td>agriculture;cultivation;habitation;primary;road;water</td>
      <td>TensorBase([1.0000e+00, 1.3865e-08, 9.7993e-01, 9.4586e-01, 5.2794e-01,\n            9.9999e-01, 9.9923e-01])</td>
      <td>4.266438961029053</td>
    </tr>
    <tr>
      <th>2</th>
      <td>clear;primary;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9979e-01, 5.7836e-05, 1.7540e-01, 7.1101e-01, 5.7885e-01,\n            9.9740e-01, 9.9980e-01])</td>
      <td>3.7381298542022705</td>
    </tr>
    <tr>
      <th>3</th>
      <td>clear;cultivation;primary</td>
      <td>agriculture;road;water</td>
      <td>TensorBase([9.9726e-01, 3.5533e-04, 2.8459e-01, 3.0627e-01, 3.5213e-01,\n            9.9678e-01, 9.3701e-01])</td>
      <td>3.573106050491333</td>
    </tr>
    <tr>
      <th>4</th>
      <td>agriculture;clear;habitation;primary;road;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9999e-01, 6.4912e-11, 1.6498e-01, 8.6925e-01, 8.6978e-01,\n            1.0000e+00, 9.9922e-01])</td>
      <td>3.4169580936431885</td>
    </tr>
    <tr>
      <th>5</th>
      <td>agriculture;clear;primary;road</td>
      <td>agriculture;cultivation;habitation;road;water</td>
      <td>TensorBase([9.9999e-01, 3.5587e-06, 6.8011e-01, 5.0741e-01, 3.6172e-02,\n            9.9992e-01, 9.7514e-01])</td>
      <td>3.058271884918213</td>
    </tr>
    <tr>
      <th>6</th>
      <td>clear;primary;water</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([9.9094e-01, 1.3812e-04, 4.5300e-01, 6.2815e-01, 6.4152e-01,\n            7.7717e-01, 8.5307e-01])</td>
      <td>2.4697818756103516</td>
    </tr>
    <tr>
      <th>7</th>
      <td>clear;primary</td>
      <td>agriculture;habitation;primary;road;water</td>
      <td>TensorBase([0.9377, 0.0013, 0.1471, 0.7862, 0.9317, 0.9659, 0.6219])</td>
      <td>2.221360206604004</td>
    </tr>
    <tr>
      <th>8</th>
      <td>clear;primary</td>
      <td>agriculture;road</td>
      <td>TensorBase([6.0217e-01, 3.6376e-04, 3.3483e-02, 3.6663e-01, 4.4091e-01,\n            5.4576e-01, 9.7288e-02])</td>
      <td>1.5774089097976685</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-16-output-6.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-1" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="using-the-mid-level-api---version-1"><span class="header-section-number">4.2</span> Using the Mid Level API - Version 1</h3>
<p>Using the mid-level api can give us more control over how the dataset is constructed, which will be determined by the task.</p>
<p>The <a href="https://docs.fast.ai/tutorial.datablock.html">Fastai data block tutorial</a> is a great way to understand the methodology behind what the mid level api can do.</p>
<p>So there are many ways we could construct the data using the mid level api, however JH encourages us to consider a list of questions that can be helpful for choosing the best method which are:</p>
<ul>
<li>what are the types of our inputs and targets? Images and multiple labels.</li>
<li>where is the data? In a dataframe.</li>
<li>how do we know if a sample is in the training or the validation set? A column of our dataframe.</li>
<li>how do we get an image? By looking at the column ‘filename’.</li>
<li>how do we know the label of an image? By looking at the column ‘tags’.</li>
<li>do we want to apply a function to a given sample? Yes, we need to resize everything to a given size.</li>
<li>do we want to apply a function to a batch after it’s created? Yes, we want data augmentation.</li>
</ul>
<p>So while our model input (x -images) and outputs (y - labels) are in the dataframe, we need to do need to do a little processing on these dataframe columns before being able to use them, for example the filenames need filepaths added, and the labels need splitting.</p>
<p>We can create a datablock this way to address these needs.</p>
<div class="cell" data-outputid="067639e7-c4b1-4ad5-fa47-ba5c41a945cd" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb21-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span>ColReader(<span class="st" style="color: #20794D;">'filename'</span>, pref<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train'</span>) <span class="op" style="color: #5E5E5E;">+</span> os.path.sep),</span>
<span id="cb21-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span>ColReader(<span class="st" style="color: #20794D;">'tags'</span>, label_delim<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>),</span>
<span id="cb21-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb21-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb21-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb21-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see we used the <em>get_x &amp; get_y</em> parameters to process the images and labels columns using the <em>ColReader()</em> function. We can also see how the answers to those questions directly translates to different parameters in the DataBlock function.</p>
</section>
<section id="using-the-mid-level-api---version-2" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="using-the-mid-level-api---version-2"><span class="header-section-number">4.3</span> Using the Mid Level API - Version 2</h3>
<p>Another way we could approach this, for getting our images and labels correctly processed is by defining our own functions for doing this using a <em>lambda function</em>.</p>
<div class="cell" data-outputid="cf143791-6590-42ad-acb3-60ce4d9fe18b" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb22-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">"train"</span><span class="op" style="color: #5E5E5E;">/</span><span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>x[<span class="dv" style="color: #AD0000;">2</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>,</span>
<span id="cb22-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x:x[<span class="dv" style="color: #AD0000;">1</span>].split(<span class="st" style="color: #20794D;">' '</span>),</span>
<span id="cb22-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb22-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb22-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb22-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-3" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="using-the-mid-level-api---version-3"><span class="header-section-number">4.4</span> Using the Mid Level API - Version 3</h3>
<p>Alternatively, for our lambda functions we could use the column names rather than the indexes.</p>
<div class="cell" data-outputid="639fac1a-af05-4f2c-d9ad-6ebddd083f9e" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb23-2">                   get_x<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> o:<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/train/'</span><span class="op" style="color: #5E5E5E;">+</span>o.filename,</span>
<span id="cb23-3">                   get_y<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> o:o.tags.split(),</span>
<span id="cb23-4">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb23-5">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb23-6">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb23-7">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="using-the-mid-level-api---version-4" class="level3" data-number="4.5">
<h3 data-number="4.5" class="anchored" data-anchor-id="using-the-mid-level-api---version-4"><span class="header-section-number">4.5</span> Using the Mid Level API - Version 4</h3>
<p>Both of these previous methods would involve iterating over all the rows of the dataframe. For large datasets &amp; dataframes, this could prove very costly in terms of time - not the ideal way for Fastai !</p>
<p>A better and faster way would be to use the <em>from_columns()</em> Datablock method. This uses a user-defined function passed in the <em>get_items</em> parameter to convert the columns into numpy arrays and work with these which would be quicker.</p>
<div class="cell" data-outputid="808dee54-2c83-40e5-8aec-8e1ac592ebd2" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;">def</span> _amazon_items(x): <span class="cf" style="color: #003B4F;">return</span> (</span>
<span id="cb24-2">    <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/train/'</span><span class="op" style="color: #5E5E5E;">+</span>x.filename, x.tags.<span class="bu" style="color: null;">str</span>.split())</span>
<span id="cb24-3"></span>
<span id="cb24-4">planet <span class="op" style="color: #5E5E5E;">=</span> DataBlock.from_columns(blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb24-5">                   get_items<span class="op" style="color: #5E5E5E;">=</span>_amazon_items,</span>
<span id="cb24-6">                   item_tfms <span class="op" style="color: #5E5E5E;">=</span> Resize(<span class="dv" style="color: #AD0000;">460</span>),</span>
<span id="cb24-7">                   batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>))</span>
<span id="cb24-8">dls <span class="op" style="color: #5E5E5E;">=</span> planet.dataloaders(df)</span>
<span id="cb24-9">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="training-our-model-more" class="level3" data-number="4.6">
<h3 data-number="4.6" class="anchored" data-anchor-id="training-our-model-more"><span class="header-section-number">4.6</span> Training our Model More</h3>
<p>Let’s now train our model for a few more epochs and observe the progress.</p>
<div class="cell" data-outputid="05a48846-d149-43b5-c1a0-e43e98284a50" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">learn.fine_tune(<span class="dv" style="color: #AD0000;">12</span>, <span class="fl" style="color: #AD0000;">1e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.839966</td>
      <td>1.319353</td>
      <td>0.628571</td>
      <td>0.423056</td>
      <td>0.526470</td>
      <td>00:02</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy_multi</th>
      <th>F1(macro)</th>
      <th>F1(samples)</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.816123</td>
      <td>0.863024</td>
      <td>0.662857</td>
      <td>0.434543</td>
      <td>0.519232</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.743988</td>
      <td>0.717785</td>
      <td>0.714286</td>
      <td>0.561080</td>
      <td>0.625896</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.748999</td>
      <td>0.740482</td>
      <td>0.645714</td>
      <td>0.488145</td>
      <td>0.593423</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.726016</td>
      <td>0.943211</td>
      <td>0.605714</td>
      <td>0.451780</td>
      <td>0.529645</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.710094</td>
      <td>1.014733</td>
      <td>0.622857</td>
      <td>0.514764</td>
      <td>0.472312</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>5</td>
      <td>0.707066</td>
      <td>0.860917</td>
      <td>0.697143</td>
      <td>0.643097</td>
      <td>0.563126</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>6</td>
      <td>0.692620</td>
      <td>0.711039</td>
      <td>0.702857</td>
      <td>0.556803</td>
      <td>0.558268</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>7</td>
      <td>0.679113</td>
      <td>0.690488</td>
      <td>0.691429</td>
      <td>0.542517</td>
      <td>0.570459</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>8</td>
      <td>0.668592</td>
      <td>0.613841</td>
      <td>0.720000</td>
      <td>0.580288</td>
      <td>0.608078</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>9</td>
      <td>0.664969</td>
      <td>0.561042</td>
      <td>0.748571</td>
      <td>0.617624</td>
      <td>0.648078</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>10</td>
      <td>0.652281</td>
      <td>0.525281</td>
      <td>0.760000</td>
      <td>0.630952</td>
      <td>0.665602</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>11</td>
      <td>0.635785</td>
      <td>0.508053</td>
      <td>0.754286</td>
      <td>0.626052</td>
      <td>0.635316</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">5</span> Conclusion</h2>
<p>In this article we used the Amazon images dataset to illustrate the different ways we can use the Fastai library to prepare the data for the task. We used both the high &amp; mid level api, and in particular explored the many options the mid level api offers to make it easy and fast to prepare data for deep learning model training.</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2023-01-15-using-satellite-images-and-deep-learning-to-track-deforestation-in-the-amazon.html</guid>
  <pubDate>Sun, 15 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/amazon_deforrest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>NLP and Text Classification Without Deep Learning for Business Applications</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2023-01-08-nlp-text-classification-without-deep-learning-for-business-applications.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>Deep Learning and AI is powering some of the most recent amazing advances in text &amp; natural language processing (NLP) applications, such as GPT-3, Chat-GPT and Dall-E, but these often require specialist resources such as GPU servers that many businesses new to this technology don’t have or can’t yet justify these resources. With traditional Machine Learning (ML) its possible to create useful NLP applications such as text classification without using AI and Deep Learning, and in this article we will look at some examples of how these can provide useful business applications.</p>
</section>
<section id="business-applications-of-nlp" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="business-applications-of-nlp"><span class="header-section-number">2</span> Business Applications of NLP</h2>
<p>NLP (Natural Language Processing) is a branch of Artificial Intelligence (AI) and Data Science that is having a huge effect on all areas of society, including business.</p>
<p><strong>In essence, Natural language processing helps computers communicate with humans in their own language and scales other language-related tasks. For example, NLP makes it possible for computers to read text, hear speech, interpret it, measure sentiment and determine which parts are important.</strong></p>
<p>A recent article by the <a href="https://hbr.org/2022/04/the-power-of-natural-language-processing">Harvard Business Review</a> highlighted some of the huge potential NLP has for businesses.</p>
<blockquote class="blockquote">
<p>Until recently, the conventional wisdom was that while AI was better than humans at data-driven decision making tasks, it was still inferior to humans for cognitive and creative ones. But in the past two years language-based AI has advanced by leaps and bounds, changing common notions of what this technology can do. The most visible advances have been in what’s called “natural language processing” (NLP), the branch of AI focused on how computers can process language like humans do. It has been used to write an article for The Guardian, and AI-authored blog posts have gone viral — feats that weren’t possible a few years ago. AI even excels at cognitive tasks like programming where it is able to generate programs for simple video games from human instructions.</p>
</blockquote>
<p>A recent article on LinkedIn highlighted some of the <a href="https://www.linkedin.com/pulse/top-natural-language-processing-applications-business-mori-/?trk=pulse-article_more-articles_related-content-card">top business applications of NLP</a> these include:</p>
<section id="market-intelligence" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="market-intelligence"><span class="header-section-number">2.1</span> Market Intelligence</h3>
<p>Marketers can utilize natural language processing to understand their clients better and use those insights to develop more effective tactics. They can analyze subjects and keywords and make effective use of unstructured data thanks to the power of NLP. It can also determine your consumers pain points and maintain track of your competition.</p>
</section>
<section id="sentiment-analysis" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="sentiment-analysis"><span class="header-section-number">2.2</span> Sentiment Analysis</h3>
<p>Companies can regularly use sentiment analysis to acquire a better knowledge of their business. Humans can be sarcastic and sardonic during conversations. You may keep an eye on social media mentions and use real-time sentiment analysis to intervene before things get out of hand. Your company may sense the pulse of its customers with this NLP application. It also allows you to evaluate how your clients reacted to your most recent digital marketing campaign.</p>
</section>
<section id="text-classification" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="text-classification"><span class="header-section-number">2.3</span> Text Classification</h3>
<p>Text classification, is a text analysis task that also includes sentiment analysis, involves automatically understanding, processing, and categorizing unstructured text.</p>
<p>Let’s say you want to analyze hundreds of open-ended responses to your recent NPS survey. Doing it manually would take you a lot of time and end up being too expensive. But what if you could train a natural language processing model to automatically tag your data in just seconds, using predefined categories and applying your own criteria.</p>
</section>
<section id="topic-modelling" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="topic-modelling"><span class="header-section-number">2.4</span> Topic Modelling</h3>
<p>Topic modeling is an approach that can scan a series of documents, find word and phrase patterns within them, and automatically cluster word groupings and related expressions that best represent the set.</p>
<p>Topic Modeling doesn’t require a preexisting list of tags or training data that has been previously categorized by humans, it can ‘discover’ what seem the most appropriate categories for a given set of documents for itself, based on which documents seem the most similar or different.</p>
</section>
<section id="recruiting-and-hiring" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="recruiting-and-hiring"><span class="header-section-number">2.5</span> Recruiting And Hiring</h3>
<p>We can all agree that picking the right staff is one of the most important duties performed by the HR department. However, HR has so much data in the current situation that sifting resumes and shortlisting prospects become overwhelming.</p>
<p>Natural Language Processing can help to make this work more accessible. HR experts can use information extraction and named entity recognition to extract information from candidates, such as their names, talents, locations, and educational histories. This enables unbiased resume filtering and the selection of the best candidate for the job.</p>
</section>
<section id="text-summarization" class="level3" data-number="2.6">
<h3 data-number="2.6" class="anchored" data-anchor-id="text-summarization"><span class="header-section-number">2.6</span> Text Summarization</h3>
<p>This NLP application extracts the most crucial information from a text and summarises it. The primary purpose is to speed up sifting through massive volumes of data in news articles, legal documents, and scientific studies. Text summarization can be done in two ways: extraction-based summarization, which selects crucial words and provides a summary without adding further information, and abstraction-based summarization, which paraphrases the original content to produce new terms.</p>
</section>
<section id="survey-analysis" class="level3" data-number="2.7">
<h3 data-number="2.7" class="anchored" data-anchor-id="survey-analysis"><span class="header-section-number">2.7</span> Survey Analysis</h3>
<p>Surveys are an essential tool for businesses to use in evaluating their performance. Survey analysis is crucial in finding defects and supporting companies in improving their goods, whether gathering input on a new product launch or analyzing how effectively a company’s customer service is doing. When many clients complete these surveys, the issue emerges, resulting in massive data. The human brain is unable to comprehend everything. At this time, natural language processing is introduced. These methods help organisations get accurate information about their consumers’ opinions and improve their performance.</p>
</section>
</section>
<section id="machine-learning-vs-deep-learning-for-nlp-and-business" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="machine-learning-vs-deep-learning-for-nlp-and-business"><span class="header-section-number">3</span> Machine Learning vs Deep Learning for NLP and Business</h2>
<p>The most powerful and useful applications of NLP use <a href="https://www.ibm.com/topics/deep-learning">Deep Learning and AI</a> which is a sub-branch of Machine Learning. All the the most recent and most powerful applications of NLP such as GPT-3, Chat-GPT and Dall-E all use Deep Learning. Many would argue <a href="https://www.kdnuggets.com/2018/04/why-deep-learning-perfect-nlp-natural-language-processing.html">Deep Learning is perfect for NLP</a>.</p>
<p>In fact, <a href="https://livingdatalab.com/categories/#natural-language-processing">most of my own recent projects in NLP</a> over the last few years have almost exclusively used Deep Learning.</p>
<p>However before Deep Learning and AI existed and was developed recently, NLP still existed for many years and has its <a href="https://www.exxactcorp.com/blog/Deep-Learning/deep-learning-in-natural-language-processing-history-and-achievements">origins in work in the 1950’s</a>. It just used different methods and techniques, that while not as powerful as Deep Learning and AI, still provided useful business applications and benefits at the time they were developed and used. These include the use of traddtional machine learning for NLP.</p>
<p>In a recent article i covered in more detail the differences between <a href="https://livingdatalab.com/fastai/fastai-2022/deep-learning/mathematics/2022/12/17/machine-learning-to-deep-learning-from-scratch.html">tradditonal machine learning and deep learning</a>.</p>
<p>Also, Deep Learning requires the use of specialist resources - namely <a href="https://towardsdatascience.com/what-is-a-gpu-and-do-you-need-one-in-deep-learning-718b9597aa0d">GPU servers</a>. Many businesses starting to explore the potental benefit of Data, Data Science, Machine Learning and AI don’t always have the rescources or infrastructure setup to develop this technology.</p>
<p>Furthermore, some businesses may feel much more cautious to adopt this technology and the associated cost of resources, and may need a more gradual approach that takes them on a journey as much about education, learning what this technology can do to help solve business problems, as much as gradually using more and more advanced technology.</p>
<p>Some businesses, especially older &amp; established businesses with exisiting business practices, may need to learn slowly how to walk first before running with the most advanced technology!</p>
<p>With this in mind, it’s good to know it is actually possible to develop useful and valuable NLP business applications - without the use of Deep Learning and the specialist resources that requires. While you might not get the best or near state of the art results for your solution, businesses can still gain huge value and benefit by using these slightly older methods compared to none at all.</p>
</section>
<section id="pycaret-and-nlp" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="pycaret-and-nlp"><span class="header-section-number">4</span> Pycaret and NLP</h2>
<p>NLP often requires a significant amount of code and steps to solve business problems. <a href="https://pycaret.org/">Pycaret</a> is a low code machine learning library, that allows you to perform common tasks in Data Science and Machine Learning with very little code, and has been listed in a recent article by Forbes as <a href="https://www.forbes.com/sites/bernardmarr/2022/12/12/the-10-best-examples-of-low-code-and-no-code-ai/?sh=29f5099274b5"><em>one of the 10 Best Examples Of Low-Code And No-Code AI</em></a></p>
<p>I’ve been using Pycaret myself professionally in my role as a Data Scientist as well as for <a href="https://livingdatalab.com/categories/#pycaret">personal projects</a> for over a year now and have found it incredibily useful to enable me to work much more quickly and efficiently. I’ve also written about how Pycaret is actually a <a href="https://livingdatalab.com/python-power-tools/pycaret/2021/12/04/python-power-tools-pycaret.html">Data Science Power Tool</a>.</p>
<p>In this project I will be using Pycaret for the NLP tasks we will be doing to solve certain business problems using machine learning.</p>
</section>
<section id="text-classification-without-deep-learning" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="text-classification-without-deep-learning"><span class="header-section-number">5</span> Text Classification Without Deep Learning</h2>
<p>Remembering our common uses of NLP, we are going to solve 2 different business problems to illustrate these methods:</p>
<ul>
<li><strong>Topic Modelling</strong>: We will use this method to try to discover what the hidden categories are for a dataset from <em>kiva - a crowdfunder for loans</em> which includes text data of each loan application. Or put another way - what kind of hidden topics would best describe peoples loan applications? For most busineses, it might be really useful to understand using customer text, such as customer contact form text etc, and discover what kind of topics customers were talking about without us knowing or assuming we know what they are before hand.</li>
<li><strong>Sentiment Analysis &amp; Classification</strong>: We will use this method to learn to predict the sentiment of <em>amazon customer product reviews</em> using the review text, and each of the positive or negative labels they have been assigned in the dataset. In other words, given a customer review text - to predict if this is a positive or negative review. This could be very useful for a business to understand if a product or service was succesful or not, by analysing thousands or even millions of customer reviews automatically and efficiently.</li>
</ul>
<p>Note, with Topic Modelling we are actually trying to discover new categories for a given set of texts, wheras with Sentiment Analysis &amp; Classification we are using an exisiting category. These are known as <em>unsupervised machine learning</em> and <em>supervised machine learning</em> respectively. In both cases, we produce something called a <em>model</em> which is something that we can then use on new text to predict what category that text is.</p>
<section id="topic-modelling---discovering-hidden-categories-in-kiva-loan-applications" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="topic-modelling---discovering-hidden-categories-in-kiva-loan-applications"><span class="header-section-number">5.1</span> Topic modelling - Discovering hidden categories in Kiva loan applications</h3>
<p>Pycaret comes with some ready to use datasets such as Kiva. <a href="https://www.kiva.org/">Kiva</a> is a non-profit that allows individuals to lend money to low-income entrepreneurs and students around the world. The kiva dataset is data on individual loan applications which include the text of the application. Lets load and view the data.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T15:33:21.611024Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T15:33:21.610589Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T15:33:22.057337Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T15:33:22.056117Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T15:33:21.610989Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">kiva <span class="op" style="color: #5E5E5E;">=</span> get_data(<span class="st" style="color: #20794D;">'kiva'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>country</th>
      <th>en</th>
      <th>gender</th>
      <th>loan_amount</th>
      <th>nonpayment</th>
      <th>sector</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Dominican Republic</td>
      <td>"Banco Esperanza" is a group of 10 women looking to receive a small loan. Each of them has taken out a very small loan already, so this would be their second. With this loan the group is going to try and expand their small businesses and start generating more income. &lt;P&gt;\n\nEduviges is the group representative and leader of the group. Eduviges has a lot on the line because she has 6 children that she has to take care of. She told me that those children are the reason she wants to be successful. She wants to be able to provide a different life for them and show them that they can be successful as well. &lt;P&gt;\n\nEduviges has a very small business selling shoes and Avon products. She plans to expand using this loan and dreams of success. The whole group is ready for this new challenge and a...</td>
      <td>F</td>
      <td>1225</td>
      <td>partner</td>
      <td>Retail</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Dominican Republic</td>
      <td>"Caminemos Hacia Adelante" or "Walking Forward" is a group of ten entrepreneurs seeking their second loan from Esperanza International. The groups past loan has been successfully repaid and the group hopes to use additional loan funds for further business expansion. \n\nEstella is one of the coordinators for this group in Santiago. Estella sells undergarments to her community and neighboring communities.  Estella used her first loan, which has now been completely repaid, to buy additional products and Estela was able to increase the return on her business by adding inventory.  Estella wants to use her second loan to buy more undergarments to sell to her customers.  \n\nEstella lives with her mother and sister and dreams of improving the house they live in and plans to use her business ...</td>
      <td>F</td>
      <td>1975</td>
      <td>lender</td>
      <td>Clothing</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Dominican Republic</td>
      <td>"Creciendo Por La Union" is a group of 10 people hoping to start their own businesses. This group is looking to receive loans to either start a small business or to try and increase their business. Everyone in this group is living in extreme poverty, and they see this as a chance to improve their lives and the lives of their families. \n\n"Dalina" is the group representative and was chosen because she is a very hardworking women. She is a young mother of two children, and she realized that she wanted a better life for her and her family. She is hoping to start a small business of selling clothes to people in her barrio. She hopes to someday have a thriving business and be able to provide for her family. On behalf of Dalina, the rest of the group, and Esperanza International: Thank you ...</td>
      <td>F</td>
      <td>2175</td>
      <td>partner</td>
      <td>Clothing</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Dominican Republic</td>
      <td>"Cristo Vive" ("Christ lives" is a group of 10 women who are looking to receive their first loans. This is a very young group of women, and they all want to start changing their lives right away. Riquena is the group representative and leader of this group, and she is only 18 years old. She is also married, but has no children. She told me that once she has kids she wants to be able to provide them with a good life, and that is the main reason she is trying to start her own business. She plans on selling used clothes in her area, and hopes to one day have a big clothing store, and also design clothes. She is a very motivated person, and you can see it when you speak with her. She speaks Spanish and Creole fluently, and is studying English. This whole group is ready for this next step, ...</td>
      <td>F</td>
      <td>1425</td>
      <td>partner</td>
      <td>Clothing</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Dominican Republic</td>
      <td>"Cristo Vive" is a large group of 35 people, 20 of which are hoping to take out a loan. For many of them this is their second loan, and a loan they hope to use to increase their business. The business range from clothing sales to salons. Miline is the chosen group representative due to her hard work and dedication. Miline is a hardworking mother of 5 very young children, the oldest being only 10 years old. She took her first loan and started a small business of selling chicken and other types of food. With this next loan she feels like she can increase her business greatly and start making money to support her family. Her dream is to have her own store someday, and be able to provide her family with comfortable life. On behalf of Miline, the group, and Esperanza International, thank yo...</td>
      <td>F</td>
      <td>4025</td>
      <td>partner</td>
      <td>Food</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s check how big the dataset is.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T15:33:22.060642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T15:33:22.059916Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T15:33:22.068810Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T15:33:22.067492Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T15:33:22.060596Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">kiva.shape[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>6818</code></pre>
</div>
</div>
<p>So we have around 7,000 loan applications. Lets now process and prepare the data.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T15:33:22.070091Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T15:33:22.069772Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T15:34:37.361427Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T15:34:37.360224Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T15:33:22.070063Z&quot;}" data-outputid="f751d97a-f74f-4fa6-dd65-c07ecb41ce45" data-execution_count="22">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">%</span>time experiment1 <span class="op" style="color: #5E5E5E;">=</span> setup(data<span class="op" style="color: #5E5E5E;">=</span>kiva, target<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'en'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style type="text/css">
</style>
<table id="T_3bf27_">
  <thead>
    <tr>
      <th class="col_heading level0 col0">Description</th>
      <th class="col_heading level0 col1">Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td id="T_3bf27_row0_col0" class="data row0 col0">session_id</td>
      <td id="T_3bf27_row0_col1" class="data row0 col1">2214</td>
    </tr>
    <tr>
      <td id="T_3bf27_row1_col0" class="data row1 col0">Documents</td>
      <td id="T_3bf27_row1_col1" class="data row1 col1">6818</td>
    </tr>
    <tr>
      <td id="T_3bf27_row2_col0" class="data row2 col0">Vocab Size</td>
      <td id="T_3bf27_row2_col1" class="data row2 col1">12383</td>
    </tr>
    <tr>
      <td id="T_3bf27_row3_col0" class="data row3 col0">Custom Stopwords</td>
      <td id="T_3bf27_row3_col1" class="data row3 col1">False</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1min 14s, sys: 295 ms, total: 1min 15s
Wall time: 1min 15s</code></pre>
</div>
</div>
<p>This single line of code has actually performed a large number of tasks that would normally take many lines of code, but in Pycaret is a single line of code. You can find out more about what this line does for NLP text pre-processing <a href="https://www.pycaret.org/tutorials/html/NLP101.html">here</a>.</p>
<p>Now our data is prepared, lets create our topic model.</p>
<p>For topic modelling we will be using the <a href="https://towardsdatascience.com/topic-modeling-and-latent-dirichlet-allocation-in-python-9bf156893c24">Latent Dirichlet Allocation (LDA)</a> technique. I’ve written previously about the mathemetics behind two other techniques called <a href="https://livingdatalab.com/mathematics/linear-algebra/natural-language-processing/2021/12/28/topic-modelling-nmf.html">Non-negative Matrix Factorization (NMF)</a> and <a href="https://livingdatalab.com/mathematics/linear-algebra/natural-language-processing/2021/12/27/topic-modelling-svd.html">Singular Value Decomposition (SVD)</a>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T15:34:37.364649Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T15:34:37.364275Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T15:35:02.931381Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T15:35:02.930269Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T15:34:37.364617Z&quot;}" data-outputid="9efbead8-b90a-48e4-cdde-043ab517081d" data-execution_count="23">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">lda_topic_model <span class="op" style="color: #5E5E5E;">=</span> create_model(<span class="st" style="color: #20794D;">'lda'</span>, num_topics<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>
<p>So we now have our topic model. Notice we have set ‘num_topics=4’ - this means the model tries to discover the 4 topics that seem most relevant to the loan applications. We could set this to a different number if we wanted to.</p>
<p>Now we have discovered our 4 topics for the loan applications and trained a model to recognise them, we can use this model to predict each of these 4 topics for all our applications using the <em>assign_model()</em> function.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T15:35:02.934066Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T15:35:02.933287Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T15:35:08.418751Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T15:35:08.417600Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T15:35:02.934020Z&quot;}" data-outputid="a7db2f7d-5ba8-4281-d835-e2dc3810f92d" data-execution_count="24">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">lda_results <span class="op" style="color: #5E5E5E;">=</span> assign_model(lda_topic_model)</span>
<span id="cb7-2">lda_results.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>country</th>
      <th>en</th>
      <th>gender</th>
      <th>loan_amount</th>
      <th>nonpayment</th>
      <th>sector</th>
      <th>status</th>
      <th>Topic_0</th>
      <th>Topic_1</th>
      <th>Topic_2</th>
      <th>Topic_3</th>
      <th>Dominant_Topic</th>
      <th>Perc_Dominant_Topic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Dominican Republic</td>
      <td>group woman look receive small loan take small loan already second loan group go try expand small business start generate income group representative leader group eduvige lot line child tell child reason want successful want able provide different life show successful well eduvige small business selling shoe avon product plan expand use loan dream success whole group ready new challenge road better live behalf eduvige thank support</td>
      <td>F</td>
      <td>1225</td>
      <td>partner</td>
      <td>Retail</td>
      <td>0</td>
      <td>0.410590</td>
      <td>0.044232</td>
      <td>0.001707</td>
      <td>0.543472</td>
      <td>Topic 3</td>
      <td>0.54</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Dominican Republic</td>
      <td>caminemos walk forward group entrepreneur seek second loan esperanza_international group loan successfully_repaid group hope use additional loan fund business expansion coordinator group sell undergarment community neighboring community use first loan completely repay buy additional product estela able increase return business add inventory estella want use second loan buy undergarment sell customer live mother sister dream improve house live plan use business profit member art juice ice_cream fry food cake sale behalf esperanza group business entrepreneur like thank support</td>
      <td>F</td>
      <td>1975</td>
      <td>lender</td>
      <td>Clothing</td>
      <td>0</td>
      <td>0.608610</td>
      <td>0.084845</td>
      <td>0.001478</td>
      <td>0.305067</td>
      <td>Topic 0</td>
      <td>0.61</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Dominican Republic</td>
      <td>por la_union group people hope start business group look receive loan start small business try increase business group poverty see chance improve life live family representative choose hardworke woman young mother child realize want well life family hope start small business sell clothe people barrio hope someday thrive business able provide family behalf thank support</td>
      <td>F</td>
      <td>2175</td>
      <td>partner</td>
      <td>Clothing</td>
      <td>0</td>
      <td>0.486984</td>
      <td>0.012169</td>
      <td>0.002022</td>
      <td>0.498825</td>
      <td>Topic 3</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Dominican Republic</td>
      <td>vive live group woman look receive first loan young group woman want start change life right away riquena group representative leader group year old also marry child tell kid want able provide good life main reason try start business plan sell use clothe area hope day big clothing store also design clothe motivated person see speak speak spanish creole fluently study english whole group ready next step excited_opportunity behalf thank support</td>
      <td>F</td>
      <td>1425</td>
      <td>partner</td>
      <td>Clothing</td>
      <td>0</td>
      <td>0.289351</td>
      <td>0.071750</td>
      <td>0.001620</td>
      <td>0.637279</td>
      <td>Topic 3</td>
      <td>0.64</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Dominican Republic</td>
      <td>cristo vive large group people hope take loan many second loan hope use increase business business range clothing sale salon miline choose group representative due hard work dedication miline hardworke mother young child old year old take first loan start small business sell chicken type food next loan feel increase business greatly start make money support family dream store someday able provide family comfortable life behalf miline thank support</td>
      <td>F</td>
      <td>4025</td>
      <td>partner</td>
      <td>Food</td>
      <td>0</td>
      <td>0.562529</td>
      <td>0.032050</td>
      <td>0.001672</td>
      <td>0.403749</td>
      <td>Topic 0</td>
      <td>0.56</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can see the topic model has given us several new things. Firstly, for each loan application it has given us a measure of how much of each of the 4 topics that loan application scores for - which would be a value between 0 and 1. Secondly, for each loan application <em>Dominant_Topic</em> tells us which is the most important topic. Finally, <em>Perc_Dominant_Topic</em> tells hows how highly that loan application scores for its dominant topic.</p>
<p>Lets have a look at how many loan applications are within each of the 4 topics, Pycaret makes this very easy using the <em>plot_model()</em> function.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘topic_distribution’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic1.png" title="Topic Distribution" class="img-fluid"></p>
<p>So we can see that topic 0 covers most of the loan applications, and the other topics much less, with topic 1 having very few examples.</p>
<section id="what-are-topics-actually-about-word-counts" class="level4">
<h4 class="anchored" data-anchor-id="what-are-topics-actually-about-word-counts">What are topics actually about ? Word counts</h4>
<p>How can we find out what these hidden topics are about? We can look at the top 100 words in the text of each topic to give us some idea.</p>
<p>Again, Pycaret makes this very easy again using the <em>plot_model()</em> function.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘frequency’, topic_num = ‘Topic 0’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic2.png" title="Topic 0" class="img-fluid"></p>
<p>So we can see for topic 0 the top 4 words are:</p>
<ul>
<li>Business</li>
<li>Year</li>
<li>Child</li>
<li>Old</li>
</ul>
<p>You could imagine perhaps the loan applications for this topic might emphasise for example how these loans would have a benefit in a specific year, or would benefit perhaps both older and younger people in the community?</p>
<p>Lets have a look at topic 1.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘frequency’, topic_num = ‘Topic 1’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic3.png" title="Topic 1" class="img-fluid"></p>
<p>So we can see for topic 1 the top 4 words are:</p>
<ul>
<li>Year</li>
<li>Loan</li>
<li>Community</li>
<li>Clinic</li>
</ul>
<p>Perhaps applications under this topic tend to emphasise how the loan might benefit the local community, including healthcare services specifically?</p>
<p>Lets examine topic 2.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘frequency’, topic_num = ‘Topic 2’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic4.png" title="Topic 2" class="img-fluid"></p>
<p>So we can see for topic 2 the top 4 words are:</p>
<ul>
<li>Rice</li>
<li>Farmer</li>
<li>Use</li>
<li>Sector</li>
</ul>
<p>For this topic it might be the case that these loan applications could be for projects more relating to agriculture and food production.</p>
<p>Finally lets explore topic 3.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘frequency’, topic_num = ‘Topic 3’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic5.png" title="Topic 3" class="img-fluid"></p>
<p>The top 4 words for topic 3 are:</p>
<ul>
<li>Loan</li>
<li>Child</li>
<li>School</li>
<li>Sell</li>
</ul>
<p>You could imagine that perhaps loans under this topic might be related to education and schools, and perhaps also the buying and selling of products for schools or children.</p>
<p>So this have given us some good indications as to what the different hidden topics might be about regarding these loan applications.</p>
</section>
<section id="how-similar-or-different-are-topics-dimensionality-reduction" class="level4">
<h4 class="anchored" data-anchor-id="how-similar-or-different-are-topics-dimensionality-reduction">How similar or different are topics? Dimensionality Reduction</h4>
<p>Another thing we can do is look at these loan applicaton texts spatially. We can convert these texts into numbers that represent these texts in terms of their meaning, then plot these numbers as points in 3D space. Each point will then represent an individual loan application, and points that are closer will be applications that are more similar, and points further away applications more different.</p>
<p>This general approach of reducing data down into simplified numbers is called <em>Dimenstionality Reduction</em> and you can find more about these methods in an <a href="https://github.com/pranath/high_dim_data_vis">earlier project i did on this</a>. We will use a method for this called TSNE.</p>
<p>Again Pycaret makes this very easy to do using the <em>plot_model()</em> function.</p>
<p><strong>plot_model(lda_topic_model, plot = ‘tsne’)</strong></p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/topic6.png" title="TSNE Plot" class="img-fluid"></p>
<p>We can tell a few things from this view of the loan applications and topics:</p>
<ul>
<li>All topics seem to be fairly distinct with little overlap</li>
<li>Topic 0, 1 &amp; 3 seem to meet at the edges suggesting there are a few cases that could be in either topic</li>
<li>Topic 2 seems to be the most unique, its the most separated from the others spatially</li>
</ul>
<p>This seems to confirm what we found when we looked at the top words from each topic, topic 2 was about farming and agriculture which really was much more unique compared to the other topics, which had a little more overlap between them.</p>
<p>So we can see that topic modelling can be a very useful technique for businesses to provide insight on a group of text that we may know nothing about. It can help us discover hidden categories among these texts, how many are under each of these categories, how closely related or distinct these categories are - and much more. This could easily be applied to customer queries, survey responses, transcripts of customer conversations or emails, and more - to help businesses gain useful insights from their textual data.</p>
</section>
</section>
<section id="sentiment-analysis-classification---predict-if-amazon-product-reviews-are-positive-or-negative" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="sentiment-analysis-classification---predict-if-amazon-product-reviews-are-positive-or-negative"><span class="header-section-number">5.2</span> Sentiment Analysis &amp; Classification - Predict if Amazon product reviews are positive or negative</h3>
<p>Pycaret also comes with a dataset of amazon product reviews, lets load these and have a look.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:06:06.979447Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:06:06.978990Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:06:09.022516Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:06:09.021589Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:06:06.979403Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">amazon_reviews <span class="op" style="color: #5E5E5E;">=</span> get_data(<span class="st" style="color: #20794D;">'amazon'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>reviewText</th>
      <th>Positive</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>This is a one of the best apps acording to a bunch of people and I agree it has bombs eggs pigs TNT king pigs and realustic stuff</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>This is a pretty good version of the game for being free. There are LOTS of different levels to play. My kids enjoy it a lot too.</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>this is a really cool game. there are a bunch of levels and you can find golden eggs. super fun.</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>This is a silly game and can be frustrating, but lots of fun and definitely recommend just as a fun time.</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>This is a terrific game on any pad. Hrs of fun.  My grandkids love it. Great entertainment when waiting in long lines</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>So we can see we have just a column for the text of the review, and another called ‘Positive’ which is a label to indicate if the review was positive or not i.e.&nbsp;1 or 0. Let’s see how many reviews we have.</p>
<div class="cell" data-execution="{&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:05:24.234589Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:05:24.235182Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:05:24.235012Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:05:24.234992Z&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">amazon_reviews.shape[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<p>So we have around 20,000 reviews. Lets get a count of how many positive and negative reviews we have.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:06:09.024391Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:06:09.023802Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:06:09.038302Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:06:09.037200Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:06:09.024355Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">amazon_reviews[<span class="st" style="color: #20794D;">'Positive'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1    15233
0     4767
Name: Positive, dtype: int64</code></pre>
</div>
</div>
<p>So around 75% of the reviews are positive, and 25% negative reviews.</p>
<p>To create a classification model, we will first need to create some <em>features</em>. These are essentially numbers that represent something we are trying to predict, so given we are trying to predict if a review is positive or negative, these features need to represent something about the text that will help us predict that.</p>
<p>There are many methods of turning text into numeric features, but we are actually going to use <em>topic modelling</em> to create some topics to describe our text, and use these as features to help our classfier model to predict positive or negative sentiment.</p>
<p>Lets set up and process our review data for topic modelling.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:06:09.040940Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:06:09.040532Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:07:44.670621Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:07:44.669515Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:06:09.040906Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">%</span>time experiment2 <span class="op" style="color: #5E5E5E;">=</span> setup(data<span class="op" style="color: #5E5E5E;">=</span>amazon_reviews, target<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'reviewText'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style type="text/css">
</style>
<table id="T_0c790_">
  <thead>
    <tr>
      <th class="col_heading level0 col0">Description</th>
      <th class="col_heading level0 col1">Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td id="T_0c790_row0_col0" class="data row0 col0">session_id</td>
      <td id="T_0c790_row0_col1" class="data row0 col1">497</td>
    </tr>
    <tr>
      <td id="T_0c790_row1_col0" class="data row1 col0">Documents</td>
      <td id="T_0c790_row1_col1" class="data row1 col1">20000</td>
    </tr>
    <tr>
      <td id="T_0c790_row2_col0" class="data row2 col0">Vocab Size</td>
      <td id="T_0c790_row2_col1" class="data row2 col1">12771</td>
    </tr>
    <tr>
      <td id="T_0c790_row3_col0" class="data row3 col0">Custom Stopwords</td>
      <td id="T_0c790_row3_col1" class="data row3 col1">False</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1min 28s, sys: 1.51 s, total: 1min 30s
Wall time: 1min 35s</code></pre>
</div>
</div>
<p>As before we will create a topic model to create some new categories.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:07:44.673166Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:07:44.672559Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:08:25.969094Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:08:25.967875Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:07:44.673134Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">lda_topic_model2 <span class="op" style="color: #5E5E5E;">=</span> create_model(<span class="st" style="color: #20794D;">'lda'</span>)</span></code></pre></div>
</div>
<p>Let’s now predict these categories for our reviews.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:08:25.972672Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:08:25.971176Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:08:40.643167Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:08:40.642050Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:08:25.972602Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">lda_results <span class="op" style="color: #5E5E5E;">=</span> assign_model(lda_topic_model2)</span>
<span id="cb15-2">lda_results.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>reviewText</th>
      <th>Positive</th>
      <th>Topic_0</th>
      <th>Topic_1</th>
      <th>Topic_2</th>
      <th>Topic_3</th>
      <th>Dominant_Topic</th>
      <th>Perc_Dominant_Topic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>good app acorde bunch people agree bomb egg pig king pig realustic stuff</td>
      <td>1</td>
      <td>0.081603</td>
      <td>0.309925</td>
      <td>0.227132</td>
      <td>0.381340</td>
      <td>Topic 3</td>
      <td>0.38</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pretty good version game free lot different level play kid enjoy lot</td>
      <td>1</td>
      <td>0.070119</td>
      <td>0.200039</td>
      <td>0.249249</td>
      <td>0.480594</td>
      <td>Topic 3</td>
      <td>0.48</td>
    </tr>
    <tr>
      <th>2</th>
      <td>really cool game bunch level find golden egg super fun</td>
      <td>1</td>
      <td>0.116654</td>
      <td>0.263965</td>
      <td>0.197222</td>
      <td>0.422159</td>
      <td>Topic 3</td>
      <td>0.42</td>
    </tr>
    <tr>
      <th>3</th>
      <td>silly game frustrating lot fun definitely recommend fun time</td>
      <td>1</td>
      <td>0.077698</td>
      <td>0.148072</td>
      <td>0.309584</td>
      <td>0.464646</td>
      <td>Topic 3</td>
      <td>0.46</td>
    </tr>
    <tr>
      <th>4</th>
      <td>terrific game pad fun grandkid love great entertainment wait long line</td>
      <td>1</td>
      <td>0.072539</td>
      <td>0.138212</td>
      <td>0.424701</td>
      <td>0.364547</td>
      <td>Topic 2</td>
      <td>0.42</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>So our data is almost ready. Our classification model does’nt need the text data now as we have represented the text using values for our new categories created by our topic model. We also don’t need the Dominant or Perc topic fields, so lets drop these columns.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:12:03.209740Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:12:03.209315Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:12:03.230596Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:12:03.229345Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:12:03.209707Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">lda_results.drop([<span class="st" style="color: #20794D;">'reviewText'</span>, <span class="st" style="color: #20794D;">'Dominant_Topic'</span>, <span class="st" style="color: #20794D;">'Perc_Dominant_Topic'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb16-2">lda_results.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Positive</th>
      <th>Topic_0</th>
      <th>Topic_1</th>
      <th>Topic_2</th>
      <th>Topic_3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0.081603</td>
      <td>0.309925</td>
      <td>0.227132</td>
      <td>0.381340</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0.070119</td>
      <td>0.200039</td>
      <td>0.249249</td>
      <td>0.480594</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>0.116654</td>
      <td>0.263965</td>
      <td>0.197222</td>
      <td>0.422159</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0.077698</td>
      <td>0.148072</td>
      <td>0.309584</td>
      <td>0.464646</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>0.072539</td>
      <td>0.138212</td>
      <td>0.424701</td>
      <td>0.364547</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>It’s common practice when training classification models to split the data, some to train the model on, and some to test the model later. Let’s split this data of 20,000 reviews, to give is a small test data set.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:56:37.477660Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:56:37.477287Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:56:37.492476Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:56:37.491561Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:56:37.477611Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">train, test <span class="op" style="color: #5E5E5E;">=</span> split_data(lda_results)</span></code></pre></div>
</div>
<p>Let’s now set the data up, this time to prepare it for classification model training using our training data.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:27:31.377794Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:27:31.377437Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:27:31.656789Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:27:31.655560Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:27:31.377762Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%</span>time experiment3 <span class="op" style="color: #5E5E5E;">=</span> setup(data<span class="op" style="color: #5E5E5E;">=</span>train, target<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Positive'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style type="text/css">
#T_e05ea_row7_col1 {
  background-color: lightgreen;
}
</style>
<table id="T_e05ea_">
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">Description</th>
      <th class="col_heading level0 col1">Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_e05ea_level0_row0" class="row_heading level0 row0">0</th>
      <td id="T_e05ea_row0_col0" class="data row0 col0">Session id</td>
      <td id="T_e05ea_row0_col1" class="data row0 col1">227</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row1" class="row_heading level0 row1">1</th>
      <td id="T_e05ea_row1_col0" class="data row1 col0">Target</td>
      <td id="T_e05ea_row1_col1" class="data row1 col1">Positive</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row2" class="row_heading level0 row2">2</th>
      <td id="T_e05ea_row2_col0" class="data row2 col0">Target type</td>
      <td id="T_e05ea_row2_col1" class="data row2 col1">classification</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row3" class="row_heading level0 row3">3</th>
      <td id="T_e05ea_row3_col0" class="data row3 col0">Data shape</td>
      <td id="T_e05ea_row3_col1" class="data row3 col1">(19980, 5)</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row4" class="row_heading level0 row4">4</th>
      <td id="T_e05ea_row4_col0" class="data row4 col0">Train data shape</td>
      <td id="T_e05ea_row4_col1" class="data row4 col1">(13985, 5)</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row5" class="row_heading level0 row5">5</th>
      <td id="T_e05ea_row5_col0" class="data row5 col0">Test data shape</td>
      <td id="T_e05ea_row5_col1" class="data row5 col1">(5995, 5)</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row6" class="row_heading level0 row6">6</th>
      <td id="T_e05ea_row6_col0" class="data row6 col0">Numeric features</td>
      <td id="T_e05ea_row6_col1" class="data row6 col1">4</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row7" class="row_heading level0 row7">7</th>
      <td id="T_e05ea_row7_col0" class="data row7 col0">Preprocess</td>
      <td id="T_e05ea_row7_col1" class="data row7 col1">True</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row8" class="row_heading level0 row8">8</th>
      <td id="T_e05ea_row8_col0" class="data row8 col0">Imputation type</td>
      <td id="T_e05ea_row8_col1" class="data row8 col1">simple</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row9" class="row_heading level0 row9">9</th>
      <td id="T_e05ea_row9_col0" class="data row9 col0">Numeric imputation</td>
      <td id="T_e05ea_row9_col1" class="data row9 col1">mean</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row10" class="row_heading level0 row10">10</th>
      <td id="T_e05ea_row10_col0" class="data row10 col0">Categorical imputation</td>
      <td id="T_e05ea_row10_col1" class="data row10 col1">constant</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row11" class="row_heading level0 row11">11</th>
      <td id="T_e05ea_row11_col0" class="data row11 col0">Fold Generator</td>
      <td id="T_e05ea_row11_col1" class="data row11 col1">StratifiedKFold</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row12" class="row_heading level0 row12">12</th>
      <td id="T_e05ea_row12_col0" class="data row12 col0">Fold Number</td>
      <td id="T_e05ea_row12_col1" class="data row12 col1">10</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row13" class="row_heading level0 row13">13</th>
      <td id="T_e05ea_row13_col0" class="data row13 col0">CPU Jobs</td>
      <td id="T_e05ea_row13_col1" class="data row13 col1">-1</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row14" class="row_heading level0 row14">14</th>
      <td id="T_e05ea_row14_col0" class="data row14 col0">Log Experiment</td>
      <td id="T_e05ea_row14_col1" class="data row14 col1">False</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row15" class="row_heading level0 row15">15</th>
      <td id="T_e05ea_row15_col0" class="data row15 col0">Experiment Name</td>
      <td id="T_e05ea_row15_col1" class="data row15 col1">clf-default-name</td>
    </tr>
    <tr>
      <th id="T_e05ea_level0_row16" class="row_heading level0 row16">16</th>
      <td id="T_e05ea_row16_col0" class="data row16 col0">USI</td>
      <td id="T_e05ea_row16_col1" class="data row16 col1">22b0</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 259 ms, sys: 8.99 ms, total: 267 ms
Wall time: 269 ms</code></pre>
</div>
</div>
<p>Let’s now train a range of different models to predict the positive or negative sentiment, and choose the best one.</p>
<p>Again Pycaret makes this very easy to do something that would normally take many lines of code to do.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:44:55.545898Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:44:55.545417Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:46:54.662918Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:46:54.661520Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:44:55.545850Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">compare_models(exclude<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'dummy'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style type="text/css">
#T_62f96_ th {
  text-align: left;
}
#T_62f96_row0_col0, #T_62f96_row0_col2, #T_62f96_row0_col4, #T_62f96_row0_col6, #T_62f96_row0_col7, #T_62f96_row1_col0, #T_62f96_row1_col1, #T_62f96_row1_col2, #T_62f96_row1_col3, #T_62f96_row1_col4, #T_62f96_row1_col5, #T_62f96_row1_col6, #T_62f96_row1_col7, #T_62f96_row2_col0, #T_62f96_row2_col1, #T_62f96_row2_col2, #T_62f96_row2_col3, #T_62f96_row2_col4, #T_62f96_row2_col5, #T_62f96_row2_col6, #T_62f96_row2_col7, #T_62f96_row3_col0, #T_62f96_row3_col1, #T_62f96_row3_col2, #T_62f96_row3_col3, #T_62f96_row3_col4, #T_62f96_row3_col5, #T_62f96_row3_col6, #T_62f96_row3_col7, #T_62f96_row4_col0, #T_62f96_row4_col1, #T_62f96_row4_col3, #T_62f96_row4_col4, #T_62f96_row4_col5, #T_62f96_row4_col6, #T_62f96_row4_col7, #T_62f96_row5_col0, #T_62f96_row5_col1, #T_62f96_row5_col2, #T_62f96_row5_col3, #T_62f96_row5_col4, #T_62f96_row5_col5, #T_62f96_row5_col6, #T_62f96_row5_col7, #T_62f96_row6_col0, #T_62f96_row6_col1, #T_62f96_row6_col2, #T_62f96_row6_col3, #T_62f96_row6_col4, #T_62f96_row6_col5, #T_62f96_row6_col6, #T_62f96_row6_col7, #T_62f96_row7_col0, #T_62f96_row7_col1, #T_62f96_row7_col2, #T_62f96_row7_col3, #T_62f96_row7_col4, #T_62f96_row7_col5, #T_62f96_row7_col6, #T_62f96_row7_col7, #T_62f96_row8_col0, #T_62f96_row8_col1, #T_62f96_row8_col2, #T_62f96_row8_col3, #T_62f96_row8_col4, #T_62f96_row8_col5, #T_62f96_row8_col6, #T_62f96_row9_col0, #T_62f96_row9_col1, #T_62f96_row9_col2, #T_62f96_row9_col3, #T_62f96_row9_col4, #T_62f96_row9_col5, #T_62f96_row9_col6, #T_62f96_row9_col7, #T_62f96_row10_col0, #T_62f96_row10_col1, #T_62f96_row10_col2, #T_62f96_row10_col3, #T_62f96_row10_col4, #T_62f96_row10_col5, #T_62f96_row10_col6, #T_62f96_row10_col7, #T_62f96_row11_col0, #T_62f96_row11_col1, #T_62f96_row11_col2, #T_62f96_row11_col3, #T_62f96_row11_col4, #T_62f96_row11_col5, #T_62f96_row11_col7, #T_62f96_row12_col0, #T_62f96_row12_col1, #T_62f96_row12_col2, #T_62f96_row12_col3, #T_62f96_row12_col4, #T_62f96_row12_col5, #T_62f96_row12_col6, #T_62f96_row12_col7, #T_62f96_row13_col0, #T_62f96_row13_col1, #T_62f96_row13_col2, #T_62f96_row13_col3, #T_62f96_row13_col4, #T_62f96_row13_col5, #T_62f96_row13_col6, #T_62f96_row13_col7, #T_62f96_row14_col0, #T_62f96_row14_col1, #T_62f96_row14_col2, #T_62f96_row14_col3, #T_62f96_row14_col5, #T_62f96_row14_col6, #T_62f96_row14_col7 {
  text-align: left;
}
#T_62f96_row0_col1, #T_62f96_row0_col3, #T_62f96_row0_col5, #T_62f96_row4_col2, #T_62f96_row8_col7, #T_62f96_row11_col6, #T_62f96_row14_col4 {
  text-align: left;
  background-color: yellow;
}
#T_62f96_row0_col8, #T_62f96_row1_col8, #T_62f96_row3_col8, #T_62f96_row4_col8, #T_62f96_row5_col8, #T_62f96_row6_col8, #T_62f96_row7_col8, #T_62f96_row8_col8, #T_62f96_row9_col8, #T_62f96_row10_col8, #T_62f96_row11_col8, #T_62f96_row12_col8, #T_62f96_row13_col8, #T_62f96_row14_col8 {
  text-align: left;
  background-color: lightgrey;
}
#T_62f96_row2_col8 {
  text-align: left;
  background-color: yellow;
  background-color: lightgrey;
}
</style>
<table id="T_62f96_">
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">Model</th>
      <th class="col_heading level0 col1">Accuracy</th>
      <th class="col_heading level0 col2">AUC</th>
      <th class="col_heading level0 col3">Recall</th>
      <th class="col_heading level0 col4">Prec.</th>
      <th class="col_heading level0 col5">F1</th>
      <th class="col_heading level0 col6">Kappa</th>
      <th class="col_heading level0 col7">MCC</th>
      <th class="col_heading level0 col8">TT (Sec)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_62f96_level0_row0" class="row_heading level0 row0">svm</th>
      <td id="T_62f96_row0_col0" class="data row0 col0">SVM - Linear Kernel</td>
      <td id="T_62f96_row0_col1" class="data row0 col1">0.7618</td>
      <td id="T_62f96_row0_col2" class="data row0 col2">0.0000</td>
      <td id="T_62f96_row0_col3" class="data row0 col3">1.0000</td>
      <td id="T_62f96_row0_col4" class="data row0 col4">0.7618</td>
      <td id="T_62f96_row0_col5" class="data row0 col5">0.8648</td>
      <td id="T_62f96_row0_col6" class="data row0 col6">0.0000</td>
      <td id="T_62f96_row0_col7" class="data row0 col7">0.0000</td>
      <td id="T_62f96_row0_col8" class="data row0 col8">0.0220</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row1" class="row_heading level0 row1">lr</th>
      <td id="T_62f96_row1_col0" class="data row1 col0">Logistic Regression</td>
      <td id="T_62f96_row1_col1" class="data row1 col1">0.7617</td>
      <td id="T_62f96_row1_col2" class="data row1 col2">0.6472</td>
      <td id="T_62f96_row1_col3" class="data row1 col3">0.9981</td>
      <td id="T_62f96_row1_col4" class="data row1 col4">0.7625</td>
      <td id="T_62f96_row1_col5" class="data row1 col5">0.8645</td>
      <td id="T_62f96_row1_col6" class="data row1 col6">0.0053</td>
      <td id="T_62f96_row1_col7" class="data row1 col7">0.0294</td>
      <td id="T_62f96_row1_col8" class="data row1 col8">0.0290</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row2" class="row_heading level0 row2">ridge</th>
      <td id="T_62f96_row2_col0" class="data row2 col0">Ridge Classifier</td>
      <td id="T_62f96_row2_col1" class="data row2 col1">0.7617</td>
      <td id="T_62f96_row2_col2" class="data row2 col2">0.0000</td>
      <td id="T_62f96_row2_col3" class="data row2 col3">0.9992</td>
      <td id="T_62f96_row2_col4" class="data row2 col4">0.7620</td>
      <td id="T_62f96_row2_col5" class="data row2 col5">0.8646</td>
      <td id="T_62f96_row2_col6" class="data row2 col6">0.0019</td>
      <td id="T_62f96_row2_col7" class="data row2 col7">0.0150</td>
      <td id="T_62f96_row2_col8" class="data row2 col8">0.0160</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row3" class="row_heading level0 row3">lda</th>
      <td id="T_62f96_row3_col0" class="data row3 col0">Linear Discriminant Analysis</td>
      <td id="T_62f96_row3_col1" class="data row3 col1">0.7616</td>
      <td id="T_62f96_row3_col2" class="data row3 col2">0.6474</td>
      <td id="T_62f96_row3_col3" class="data row3 col3">0.9948</td>
      <td id="T_62f96_row3_col4" class="data row3 col4">0.7637</td>
      <td id="T_62f96_row3_col5" class="data row3 col5">0.8641</td>
      <td id="T_62f96_row3_col6" class="data row3 col6">0.0156</td>
      <td id="T_62f96_row3_col7" class="data row3 col7">0.0512</td>
      <td id="T_62f96_row3_col8" class="data row3 col8">0.0210</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row4" class="row_heading level0 row4">gbc</th>
      <td id="T_62f96_row4_col0" class="data row4 col0">Gradient Boosting Classifier</td>
      <td id="T_62f96_row4_col1" class="data row4 col1">0.7610</td>
      <td id="T_62f96_row4_col2" class="data row4 col2">0.6559</td>
      <td id="T_62f96_row4_col3" class="data row4 col3">0.9965</td>
      <td id="T_62f96_row4_col4" class="data row4 col4">0.7626</td>
      <td id="T_62f96_row4_col5" class="data row4 col5">0.8640</td>
      <td id="T_62f96_row4_col6" class="data row4 col6">0.0065</td>
      <td id="T_62f96_row4_col7" class="data row4 col7">0.0282</td>
      <td id="T_62f96_row4_col8" class="data row4 col8">0.8190</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row5" class="row_heading level0 row5">ada</th>
      <td id="T_62f96_row5_col0" class="data row5 col0">Ada Boost Classifier</td>
      <td id="T_62f96_row5_col1" class="data row5 col1">0.7602</td>
      <td id="T_62f96_row5_col2" class="data row5 col2">0.6476</td>
      <td id="T_62f96_row5_col3" class="data row5 col3">0.9937</td>
      <td id="T_62f96_row5_col4" class="data row5 col4">0.7631</td>
      <td id="T_62f96_row5_col5" class="data row5 col5">0.8633</td>
      <td id="T_62f96_row5_col6" class="data row5 col6">0.0103</td>
      <td id="T_62f96_row5_col7" class="data row5 col7">0.0318</td>
      <td id="T_62f96_row5_col8" class="data row5 col8">0.2600</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row6" class="row_heading level0 row6">catboost</th>
      <td id="T_62f96_row6_col0" class="data row6 col0">CatBoost Classifier</td>
      <td id="T_62f96_row6_col1" class="data row6 col1">0.7600</td>
      <td id="T_62f96_row6_col2" class="data row6 col2">0.6468</td>
      <td id="T_62f96_row6_col3" class="data row6 col3">0.9868</td>
      <td id="T_62f96_row6_col4" class="data row6 col4">0.7658</td>
      <td id="T_62f96_row6_col5" class="data row6 col5">0.8624</td>
      <td id="T_62f96_row6_col6" class="data row6 col6">0.0316</td>
      <td id="T_62f96_row6_col7" class="data row6 col7">0.0690</td>
      <td id="T_62f96_row6_col8" class="data row6 col8">6.6620</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row7" class="row_heading level0 row7">lightgbm</th>
      <td id="T_62f96_row7_col0" class="data row7 col0">Light Gradient Boosting Machine</td>
      <td id="T_62f96_row7_col1" class="data row7 col1">0.7583</td>
      <td id="T_62f96_row7_col2" class="data row7 col2">0.6380</td>
      <td id="T_62f96_row7_col3" class="data row7 col3">0.9829</td>
      <td id="T_62f96_row7_col4" class="data row7 col4">0.7661</td>
      <td id="T_62f96_row7_col5" class="data row7 col5">0.8610</td>
      <td id="T_62f96_row7_col6" class="data row7 col6">0.0332</td>
      <td id="T_62f96_row7_col7" class="data row7 col7">0.0675</td>
      <td id="T_62f96_row7_col8" class="data row7 col8">0.1940</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row8" class="row_heading level0 row8">nb</th>
      <td id="T_62f96_row8_col0" class="data row8 col0">Naive Bayes</td>
      <td id="T_62f96_row8_col1" class="data row8 col1">0.7540</td>
      <td id="T_62f96_row8_col2" class="data row8 col2">0.6470</td>
      <td id="T_62f96_row8_col3" class="data row8 col3">0.9608</td>
      <td id="T_62f96_row8_col4" class="data row8 col4">0.7720</td>
      <td id="T_62f96_row8_col5" class="data row8 col5">0.8561</td>
      <td id="T_62f96_row8_col6" class="data row8 col6">0.0727</td>
      <td id="T_62f96_row8_col7" class="data row8 col7">0.1019</td>
      <td id="T_62f96_row8_col8" class="data row8 col8">0.0250</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row9" class="row_heading level0 row9">xgboost</th>
      <td id="T_62f96_row9_col0" class="data row9 col0">Extreme Gradient Boosting</td>
      <td id="T_62f96_row9_col1" class="data row9 col1">0.7495</td>
      <td id="T_62f96_row9_col2" class="data row9 col2">0.6231</td>
      <td id="T_62f96_row9_col3" class="data row9 col3">0.9590</td>
      <td id="T_62f96_row9_col4" class="data row9 col4">0.7692</td>
      <td id="T_62f96_row9_col5" class="data row9 col5">0.8537</td>
      <td id="T_62f96_row9_col6" class="data row9 col6">0.0528</td>
      <td id="T_62f96_row9_col7" class="data row9 col7">0.0750</td>
      <td id="T_62f96_row9_col8" class="data row9 col8">0.8160</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row10" class="row_heading level0 row10">qda</th>
      <td id="T_62f96_row10_col0" class="data row10 col0">Quadratic Discriminant Analysis</td>
      <td id="T_62f96_row10_col1" class="data row10 col1">0.7439</td>
      <td id="T_62f96_row10_col2" class="data row10 col2">0.6441</td>
      <td id="T_62f96_row10_col3" class="data row10 col3">0.9504</td>
      <td id="T_62f96_row10_col4" class="data row10 col4">0.7712</td>
      <td id="T_62f96_row10_col5" class="data row10 col5">0.8465</td>
      <td id="T_62f96_row10_col6" class="data row10 col6">0.0333</td>
      <td id="T_62f96_row10_col7" class="data row10 col7">0.0493</td>
      <td id="T_62f96_row10_col8" class="data row10 col8">0.0190</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row11" class="row_heading level0 row11">rf</th>
      <td id="T_62f96_row11_col0" class="data row11 col0">Random Forest Classifier</td>
      <td id="T_62f96_row11_col1" class="data row11 col1">0.7233</td>
      <td id="T_62f96_row11_col2" class="data row11 col2">0.5970</td>
      <td id="T_62f96_row11_col3" class="data row11 col3">0.8956</td>
      <td id="T_62f96_row11_col4" class="data row11 col4">0.7758</td>
      <td id="T_62f96_row11_col5" class="data row11 col5">0.8314</td>
      <td id="T_62f96_row11_col6" class="data row11 col6">0.0819</td>
      <td id="T_62f96_row11_col7" class="data row11 col7">0.0892</td>
      <td id="T_62f96_row11_col8" class="data row11 col8">1.3430</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row12" class="row_heading level0 row12">knn</th>
      <td id="T_62f96_row12_col0" class="data row12 col0">K Neighbors Classifier</td>
      <td id="T_62f96_row12_col1" class="data row12 col1">0.7171</td>
      <td id="T_62f96_row12_col2" class="data row12 col2">0.5745</td>
      <td id="T_62f96_row12_col3" class="data row12 col3">0.8887</td>
      <td id="T_62f96_row12_col4" class="data row12 col4">0.7737</td>
      <td id="T_62f96_row12_col5" class="data row12 col5">0.8272</td>
      <td id="T_62f96_row12_col6" class="data row12 col6">0.0683</td>
      <td id="T_62f96_row12_col7" class="data row12 col7">0.0737</td>
      <td id="T_62f96_row12_col8" class="data row12 col8">0.0930</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row13" class="row_heading level0 row13">et</th>
      <td id="T_62f96_row13_col0" class="data row13 col0">Extra Trees Classifier</td>
      <td id="T_62f96_row13_col1" class="data row13 col1">0.7058</td>
      <td id="T_62f96_row13_col2" class="data row13 col2">0.5801</td>
      <td id="T_62f96_row13_col3" class="data row13 col3">0.8628</td>
      <td id="T_62f96_row13_col4" class="data row13 col4">0.7760</td>
      <td id="T_62f96_row13_col5" class="data row13 col5">0.8171</td>
      <td id="T_62f96_row13_col6" class="data row13 col6">0.0756</td>
      <td id="T_62f96_row13_col7" class="data row13 col7">0.0786</td>
      <td id="T_62f96_row13_col8" class="data row13 col8">0.6430</td>
    </tr>
    <tr>
      <th id="T_62f96_level0_row14" class="row_heading level0 row14">dt</th>
      <td id="T_62f96_row14_col0" class="data row14 col0">Decision Tree Classifier</td>
      <td id="T_62f96_row14_col1" class="data row14 col1">0.6556</td>
      <td id="T_62f96_row14_col2" class="data row14 col2">0.5333</td>
      <td id="T_62f96_row14_col3" class="data row14 col3">0.7667</td>
      <td id="T_62f96_row14_col4" class="data row14 col4">0.7780</td>
      <td id="T_62f96_row14_col5" class="data row14 col5">0.7723</td>
      <td id="T_62f96_row14_col6" class="data row14 col6">0.0657</td>
      <td id="T_62f96_row14_col7" class="data row14 col7">0.0658</td>
      <td id="T_62f96_row14_col8" class="data row14 col8">0.0740</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=227, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)</code></pre>
</div>
</div>
<p>The F1 score is a good measure of how well a model is predicting both positive and negative sentiment, the best model for this is ‘svm’.</p>
<p>Lets use this model on our test data to see if it seems to be predicting correct sentiment for our reviews.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-08T17:48:15.213028Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-08T17:48:15.212557Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-08T17:48:16.409977Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-08T17:48:16.408300Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-08T17:48:15.212990Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">best_model <span class="op" style="color: #5E5E5E;">=</span> create_model(<span class="st" style="color: #20794D;">'svm'</span>, verbose<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb22-2">new_predictions <span class="op" style="color: #5E5E5E;">=</span> predict_model(best_model, data<span class="op" style="color: #5E5E5E;">=</span>test)</span>
<span id="cb22-3">new_predictions <span class="op" style="color: #5E5E5E;">=</span> new_predictions.join(amazon_reviews)</span>
<span id="cb22-4">new_predictions <span class="op" style="color: #5E5E5E;">=</span> new_predictions[[<span class="st" style="color: #20794D;">'reviewText'</span>, <span class="st" style="color: #20794D;">'Topic_0'</span>, <span class="st" style="color: #20794D;">'Topic_0'</span>, <span class="st" style="color: #20794D;">'Topic_0'</span>, <span class="st" style="color: #20794D;">'Topic_0'</span>, <span class="st" style="color: #20794D;">'Positive'</span>, <span class="st" style="color: #20794D;">'Label'</span>]]</span>
<span id="cb22-5">new_predictions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>reviewText</th>
      <th>Topic_0</th>
      <th>Topic_0</th>
      <th>Topic_0</th>
      <th>Topic_0</th>
      <th>Positive</th>
      <th>Label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>60</th>
      <td>who doesn't like angrybirds?but the paid version is better as it doesn't have all those annoying adds. blocking your shots!</td>
      <td>0.085445</td>
      <td>0.085445</td>
      <td>0.085445</td>
      <td>0.085445</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>159</th>
      <td>Free and fun, what could be better?  The birds are angry, it's everything I expected, and anyway, those pigs had it coming!</td>
      <td>0.079090</td>
      <td>0.079090</td>
      <td>0.079090</td>
      <td>0.079090</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1294</th>
      <td>I downloaded this to my tablet, as my phone is out of space. Very easy to read the latest tweets that way</td>
      <td>0.118320</td>
      <td>0.118320</td>
      <td>0.118320</td>
      <td>0.118320</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4352</th>
      <td>I love this App and also use Out Of Milk via the website. It makes creating my lists and sharing it with others, quick and easy! It also keeps track of my cost as I add to is, making budgeting a breeze.</td>
      <td>0.081643</td>
      <td>0.081643</td>
      <td>0.081643</td>
      <td>0.081643</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>7016</th>
      <td>its actualy saying wat I'm going through. its very fun and creative. I will be sure to use it everyday. no complaints. good job guys. :)</td>
      <td>0.104748</td>
      <td>0.104748</td>
      <td>0.104748</td>
      <td>0.104748</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>‘Positive’ is our original sentiment for our reviews, and ‘Label’ is the sentiment predicted by the model. Looking at the first few reviews seems to confirm that our model is able to predict the sentiment of reviews quite well.</p>
<p>This type of text classification or sentiment analysis model could be used for many different types of business application, for example on customer requests to identify complaints. A customer complaints prediction model could be used to classify thousands of customer requests, which could then be used to prioritise customer requests that are flagged as complaints by the model, or pass these on to a specialist team. This could ensure customer complaints were dealt with quickly regardless of how many total customer messages were incoming.</p>
</section>
</section>
<section id="conclusion" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">6</span> Conclusion</h2>
<p>In this article we have looked at the huge benefits NLP applications can bring to businesses. Most state of the art NLP applications use deep learning which often require specialist resources not all businesses will be able or willing initially to support.</p>
<p>We have shown here some examples of how NLP applications without deep learning - such as topic modelling or sentiment analysis and text classification, can bring huge benefits to businesses despite not being state of the art methods, especially for businesses new to Data Science, Machine Learning and AI.</p>


</section>

 ]]></description>
  <category>pycaret</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2023-01-08-nlp-text-classification-without-deep-learning-for-business-applications.html</guid>
  <pubDate>Sun, 08 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/nlp-text-classification.png" medium="image" type="image/png"/>
</item>
<item>
  <title>From Machine Learning to Deep Learning From Scratch</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> course for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>. This article covers lesson 5 of this years course, where we will look at the fundemental details and differences between machine learning (ml) and deep learning (dl).</p>
<p>If you don’t understand the difference between ml and dl or were too afraid to ask - this is the article for you!</p>
</section>
<section id="machine-learning-vs-deep-learning" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="machine-learning-vs-deep-learning"><span class="header-section-number">2</span> Machine Learning vs Deep Learning</h2>
<p><a href="https://en.wikipedia.org/wiki/Machine_learning">Machine Learning</a> is a branch of computer science that seeks to create systems (often called ‘models’) that learn how to perform a task, without being given explicit instructions of how to perform that task. These models learn for themselves how to perform a task. Machine Learning includes a wide range of different types of models, for example linear regression, random forrests, and more.</p>
<p><a href="https://en.wikipedia.org/wiki/Deep_learning">Deep learning</a> is a sub-branch of machine learning, which uses <strong>multi-layered artifical neural networks</strong> as models that learn how to perform a task, without being given explicit instructions of how to perform that task.</p>
<p>Other notable differences between machine learning and deep learning include:</p>
<ul>
<li>Machine learning models tend to be easier to understand and explain why they do what they do, deep learning models tend to be more difficult to understand the reasons for their behaviour</li>
<li>Machine learning models tend to require the data they use to be more carefully constructed, deep learning models tend to be able to work with data that does not need to be so carefully created</li>
<li>Deep learning models are much more powerful and succesful than machine learning models at solving problems that use images or text</li>
</ul>
<p><a href="https://www.zendesk.co.uk/blog/machine-learning-and-deep-learning/">This article</a> also further explains these differences.</p>
<p>In this project we will construct from scratch a very simple machine learning model called <em>linear regression</em>. We will then gradually develop a deep learning model from scratch, and we will illustrate the technical differences between these types of models, which also demonstrates the reasons for the differences between the two types of models highlighted above.</p>
<p>We will not use any machine learning libraries, which often obscure the details of how these models are implemented. <strong>In this project, we will expose the fundemental details of these models by coding them manually and illustrating the mathematics behind them.</strong></p>
</section>
<section id="the-dataset-the-kaggle-titanic-passenger-suvival-dataset" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-dataset-the-kaggle-titanic-passenger-suvival-dataset"><span class="header-section-number">3</span> The Dataset: The Kaggle Titanic passenger suvival dataset</h2>
<p>For our project we will use the famous <a href="https://www.kaggle.com/competitions/titanic/data">Titanic - Machine Learning from Disaster dataset</a>. This is a dataset of the passengers from the Titanic disaster, and the task is to predict which of these passengers died and which survived.</p>
<p>This is a very simple and well known dataset, and is chosen not because it’s an especially challenging task, but more to allow us to understand the differences between machine learning and deep learning.</p>
</section>
<section id="import-libraries" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">4</span> Import Libraries</h2>
<p>First we will import the required libraries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> tensor</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> fastai.data.transforms <span class="im" style="color: #00769E;">import</span> RandomSplitter</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> sympy</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># Set some useful display settings</span></span>
<span id="cb1-10">np.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>)</span>
<span id="cb1-11">torch.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, edgeitems<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;">'display.width'</span>, <span class="dv" style="color: #AD0000;">140</span>)</span></code></pre></div>
</div>
</section>
<section id="get-clean-data" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="get-clean-data"><span class="header-section-number">5</span> Get &amp; Clean Data</h2>
<p>Let’s now extract the data and examine what it looks like.</p>
<div class="cell" data-outputid="6e4b2b46-40b2-4879-fd50-0ed4961334c1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>unzip titanic.<span class="bu" style="color: null;">zip</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Archive:  titanic.zip
  inflating: gender_submission.csv   
  inflating: test.csv                
  inflating: train.csv               
drive  gender_submission.csv  sample_data  test.csv  titanic.zip  train.csv</code></pre>
</div>
</div>
<div class="cell" data-outputid="21387c3e-f4de-4354-b6d3-21ae2edcd8d9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb4-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">


  <div id="df-867e4e87-7df7-47b4-8bb4-e7597a986f45">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-867e4e87-7df7-47b4-8bb4-e7597a986f45')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-867e4e87-7df7-47b4-8bb4-e7597a986f45 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-867e4e87-7df7-47b4-8bb4-e7597a986f45');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Here we can see the different columns in our passenger dataset, for example Name, Sex, Age etc. The <strong>Survived</strong> column tells us if that passenger survived the disaster, with a value of 1 if they did and a value of 0 if they died. This is the value we want our model to predict, given the other data in the dataset. In other words, we want to create a model to predict <strong>Survived</strong> based on Name, Age, Ticket, Fare etc.</p>
<p>Machine learning models require the data to be all numbers, they can’t work with missing values. Let’s check to see if we have any missing values in our dataet the textual columns of the data. The <em>isna()</em> function will do this for us in python.</p>
<div class="cell" data-outputid="83adbebf-a2d0-4152-c063-f1b18b0433ea">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.isna().<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64</code></pre>
</div>
</div>
<p>We can see that the Age, Cabin and Embarked columns have missing values, so we will need to do something about these. Let’s replace the missing values with the most common value in that column, this is known in statistics as the <em>mode</em>.</p>
<p>Lets calculate the mode for each column.</p>
<div class="cell" data-outputid="8356598d-615e-4680-b0f6-417a936d8984">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">modes <span class="op" style="color: #5E5E5E;">=</span> df.mode().iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-2">modes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>PassengerId                      1
Survived                       0.0
Pclass                         3.0
Name           Abbing, Mr. Anthony
Sex                           male
Age                           24.0
SibSp                          0.0
Parch                          0.0
Ticket                        1601
Fare                          8.05
Cabin                      B96 B98
Embarked                         S
Name: 0, dtype: object</code></pre>
</div>
</div>
<p>Now that we have the mode of each column, we can use these to fill in the missing values of any column using the <em>fillna()</em> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>Let’s check to see we no longer have any missing values.</p>
<div class="cell" data-outputid="37031443-4887-47f5-9828-cd081619e024">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df.isna().<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          0
Embarked       0
dtype: int64</code></pre>
</div>
</div>
<p>As mentioned earlier, machine learning models require numbers as inputs - so we will need to convert our text fields into numeric fields. We can do this using a standard technique called <a href="https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/">one-hot encoding</a> which creates a numeric column for each text value which are called <em>dummy variables</em> which has a value of 1 or zero depending if that text/category value is present or not. We can create these fields using the <em>get_dummies()</em> method.</p>
<div class="cell" data-outputid="8065df3a-6d78-4339-f6a7-73450b9b49f4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(df, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Sex"</span>,<span class="st" style="color: #20794D;">"Pclass"</span>,<span class="st" style="color: #20794D;">"Embarked"</span>])</span>
<span id="cb12-2">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>Index(['PassengerId', 'Survived', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'LogFare', 'Sex_female', 'Sex_male',
       'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S'],
      dtype='object')</code></pre>
</div>
</div>
<p>Let’s see what these dummy variable columns look like.</p>
<div class="cell" data-outputid="fd4a90d4-9023-4d99-97d8-5fa4639a78de">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">added_cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Sex_male'</span>, <span class="st" style="color: #20794D;">'Sex_female'</span>, <span class="st" style="color: #20794D;">'Pclass_1'</span>, <span class="st" style="color: #20794D;">'Pclass_2'</span>, <span class="st" style="color: #20794D;">'Pclass_3'</span>, <span class="st" style="color: #20794D;">'Embarked_C'</span>, <span class="st" style="color: #20794D;">'Embarked_Q'</span>, <span class="st" style="color: #20794D;">'Embarked_S'</span>]</span>
<span id="cb14-2">df[added_cols].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">


  <div id="df-98862631-ba13-4396-a92b-487ebc4f9bd5">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sex_male</th>
      <th>Sex_female</th>
      <th>Pclass_1</th>
      <th>Pclass_2</th>
      <th>Pclass_3</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-98862631-ba13-4396-a92b-487ebc4f9bd5')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-98862631-ba13-4396-a92b-487ebc4f9bd5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-98862631-ba13-4396-a92b-487ebc4f9bd5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>So we will need to convert our model variables into Pytorch tensors, which will enable us to use our data for both machine learning and deep learning later on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">t_dep <span class="op" style="color: #5E5E5E;">=</span> tensor(df.Survived)</span></code></pre></div>
</div>
<div class="cell" data-outputid="fa8e710b-ea4b-4520-ad14-04596771f951">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">indep_cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'SibSp'</span>, <span class="st" style="color: #20794D;">'Parch'</span>, <span class="st" style="color: #20794D;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;">+</span> added_cols</span>
<span id="cb16-2"></span>
<span id="cb16-3">t_indep <span class="op" style="color: #5E5E5E;">=</span> tensor(df[indep_cols].values, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb16-4">t_indep</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor([[22.0000,  1.0000,  0.0000,  2.1102,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [38.0000,  1.0000,  0.0000,  4.2806,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000],
        [26.0000,  0.0000,  0.0000,  2.1889,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [35.0000,  1.0000,  0.0000,  3.9908,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [35.0000,  0.0000,  0.0000,  2.2028,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [24.0000,  0.0000,  0.0000,  2.2469,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000],
        [54.0000,  0.0000,  0.0000,  3.9677,  1.0000,  0.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        ...,
        [25.0000,  0.0000,  0.0000,  2.0857,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [39.0000,  0.0000,  5.0000,  3.4054,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000],
        [27.0000,  0.0000,  0.0000,  2.6391,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [19.0000,  0.0000,  0.0000,  3.4340,  0.0000,  1.0000,  1.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1.0000],
        [24.0000,  1.0000,  2.0000,  3.1966,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000],
        [26.0000,  0.0000,  0.0000,  3.4340,  1.0000,  0.0000,  1.0000,  0.0000,  0.0000,  1.0000,  0.0000,  0.0000],
        [32.0000,  0.0000,  0.0000,  2.1691,  1.0000,  0.0000,  0.0000,  0.0000,  1.0000,  0.0000,  1.0000,  0.0000]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="da6b3213-858b-4494-96c0-95a8fd68c932">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">t_indep.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>torch.Size([891, 12])</code></pre>
</div>
</div>
</section>
<section id="creating-a-linear-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="creating-a-linear-model"><span class="header-section-number">6</span> Creating a Linear Model</h2>
<p>A simple linear regression model attempts to capture a linear relationship betweeen one independant variable and a dependant variable, so that you can predict the latter using the former. In our example below, the independant variable model coefficient is <img src="https://latex.codecogs.com/png.latex?b_%7B1%7D">. A constant value is also added, in this case <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D">. This is basically the equation of a line.</p>
<p>A multiple linear regression model attempts to capture a linear relationship betweeen <strong>multiple</strong> independant variables and a dependant variable, so that you can predict the latter using the former. In our example below, the independant variable model coefficients are <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D"> to <img src="https://latex.codecogs.com/png.latex?b_%7Bn%7D">. This is basically the equation of a <a href="https://kindsonthegenius.com/blog/what-is-a-linear-seperator-what-is-a-hyperplane-simple-and-brief-explanation/">hyperplane</a> which is a line in multiple dimensions, in this case that number is the number of independant variables.</p>
<p>The values of the independant variables themselves are represented by <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> to <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D">.</p>
<p>Linear models generate their predictions by multiplying the values of each variable by its coefficient, then summing the values. So for our multiple linear regression model that would mean summing <img src="https://latex.codecogs.com/png.latex?b_%7B1%7D"> * <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> to <img src="https://latex.codecogs.com/png.latex?b_%7Bn%7D"> * <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D"> then adding the constant term <img src="https://latex.codecogs.com/png.latex?b_%7B0%7D"> to get the value for the dependant variable y.</p>
<p>You can read more about <a href="https://levelup.gitconnected.com/beginners-guide-to-simple-and-multiple-linear-regression-models-d2d5dbe9e704">linear regression here</a>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/linear_reg.png" title="Simple &amp; Multiple Linear Regression" class="img-fluid"></p>
<p>For our titanic dataset, we have multiple independant variables such as passenger id, name, fare etc - so we will need to use a multiple linear regression model, which will have a coefficient for each variable we have.</p>
<p>Let’s set up some coefficient’s for each variable with some random initial values.</p>
<div class="cell" data-outputid="28e5d7ac-09ff-4d3e-9f4f-76f60f8504b9">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">442</span>)</span>
<span id="cb20-2"></span>
<span id="cb20-3">n_coeff <span class="op" style="color: #5E5E5E;">=</span> t_indep.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb20-4">coeffs <span class="op" style="color: #5E5E5E;">=</span> torch.rand(n_coeff)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb20-5">coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625])</code></pre>
</div>
</div>
<p>Interestingly we don’t need to add a constant term as per the linear regression model equation. Why? because our dummy variables already cover the whole dataset, everyone is already within one existing value eg male or female. So we don’t need a separate constant term to cover any rows not included.</p>
<p>As mentioned, a linear model will calculate its predictions by multiplying the independant variables by their corresponding coefficients so lets see what that looks like. Remember we have multiple values of our independant variables, one row per passenger, so a matrix. So we will expect from linear algebra, when we multiply a vector (coefficients) by a matrix we should end up with a new matrix.</p>
<div class="cell" data-outputid="b8aab69b-61bc-422c-f20b-ad1e3cf71522">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>tensor([[-10.1838,   0.1386,   0.0000,  -0.4772,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-17.5902,   0.1386,   0.0000,  -0.9681,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-12.0354,   0.0000,   0.0000,  -0.4950,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.1386,   0.0000,  -0.9025,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.0000,   0.0000,  -0.4982,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.0000,   0.0000,  -0.5081,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-24.9966,   0.0000,   0.0000,  -0.8973,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        ...,
        [-11.5725,   0.0000,   0.0000,  -0.4717,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-18.0531,   0.0000,   1.2045,  -0.7701,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-12.4983,   0.0000,   0.0000,  -0.5968,  -0.2632,  -0.0000,   0.0000,   0.3136,   0.0000,  -0.0000,   0.0000,   0.3625],
        [ -8.7951,   0.0000,   0.0000,  -0.7766,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.1386,   0.4818,  -0.7229,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-12.0354,   0.0000,   0.0000,  -0.7766,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-14.8128,   0.0000,   0.0000,  -0.4905,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000]])</code></pre>
</div>
</div>
<p>So there is a bit of an issue here, we notice the first column has much bigger values? this is for the column age, which has bigger numbers than all other numeric columns. This can create problems for machine learning, as many models will treat the column with bigger numbers as more important than other columns.</p>
<p>We can address this issue by <em>normalising</em> all the values i.e.&nbsp;dividing each column by its maximum value. This will result in all values being bewteen 1 and 0 and so all variables being treated with equal importance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">vals,indices <span class="op" style="color: #5E5E5E;">=</span> t_indep.<span class="bu" style="color: null;">max</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb24-2">t_indep <span class="op" style="color: #5E5E5E;">=</span> t_indep <span class="op" style="color: #5E5E5E;">/</span> vals</span></code></pre></div>
</div>
<div class="cell" data-outputid="74d78f65-e317-4fde-a0b8-ab1f088d61d9">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor([[-0.1273,  0.0173,  0.0000, -0.0765, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2199,  0.0173,  0.0000, -0.1551, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1504,  0.0000,  0.0000, -0.0793, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0173,  0.0000, -0.1446, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0000,  0.0000, -0.0798, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0000,  0.0000, -0.0814, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.3125,  0.0000,  0.0000, -0.1438, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        ...,
        [-0.1447,  0.0000,  0.0000, -0.0756, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2257,  0.0000,  0.2008, -0.1234, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.1562,  0.0000,  0.0000, -0.0956, -0.2632, -0.0000,  0.0000,  0.3136,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1099,  0.0000,  0.0000, -0.1244, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0173,  0.0803, -0.1158, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1504,  0.0000,  0.0000, -0.1244, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1852,  0.0000,  0.0000, -0.0786, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000]])</code></pre>
</div>
</div>
<p>We can now create predictions from our linear model, by adding up the rows of the product:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">preds <span class="op" style="color: #5E5E5E;">=</span> (t_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Let’s take a look at the first few:</p>
<div class="cell" data-outputid="1563a027-03a1-4a6c-bba5-407f39d7f033">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">preds[:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor([ 0.1927, -0.6239,  0.0979,  0.2056,  0.0968,  0.0066,  0.1306,  0.3476,  0.1613, -0.6285])</code></pre>
</div>
</div>
<section id="how-our-linear-model-learns---adding-gradient-descent" class="level3" data-number="6.1">
<h3 data-number="6.1" class="anchored" data-anchor-id="how-our-linear-model-learns---adding-gradient-descent"><span class="header-section-number">6.1</span> How our Linear Model Learns - Adding Gradient Descent</h3>
<p>So currently we have a basic linear model, but it is’nt predicting very well because the model coefficients are still random values. How can make these coefficients better so our model predictions can get better? we can use a algorithm called <strong>Gradient Descent (or GD)</strong>.</p>
<p><a href="https://builtin.com/data-science/gradient-descent">This article explains the fundamentals of GD</a>. And <a href="https://towardsdatascience.com/understanding-the-mathematics-behind-gradient-descent-dde5dc9be06e">this article</a> as well as <a href="https://medium.com/geekculture/mathematics-behind-gradient-descent-f2a49a0b714f">this one</a> explain more the mathematics of GD.</p>
<p>In essence, <strong>Gradient Descent is an algorithm that can be used to find values for the coefficients of a function that reduce a separate loss function</strong>. So as long as we can define an appropriate loss function, we can use this algorithm.</p>
<p>What would be an appropriate loss function that we would want to minimise the value of? Well we would like our predictions ultimately to be as close to the actual values we want to predict. So here the loss would be <em>a measure of how wrong our predictions are</em>. A high loss value would mean many mistakes, and a low loss value would mean fewer mistakes. This would then be a good function for us to minimise using Gradient Descent.</p>
<p>So in our case, a good loss function might be:</p>
<p><em>Loss = predictions - values we want to predict</em></p>
<p>So we will have a different loss value for each value and its prediction, so if we took the mean value of all of these different loss values, that would be a way to capture the overall loss for all predictions. It would also be helpful for these differences to be always positive values.</p>
<p>Lets calculate what this loss would be on our current predictions.</p>
<div class="cell" data-outputid="7324fd70-ae28-4e76-b45a-d04a52112d57">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">loss <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">abs</span>(preds<span class="op" style="color: #5E5E5E;">-</span>t_dep).mean()</span>
<span id="cb30-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor(0.5382)</code></pre>
</div>
</div>
<p>Since for Gradient Descent we will need to repeatedly use this loss function, lets define some functions to calculate our predictions as well as the loss.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb32-2">  <span class="cf" style="color: #003B4F;">return</span> (indeps<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="kw" style="color: #003B4F;">def</span> calc_loss(coeffs, indeps, deps): </span>
<span id="cb32-5">  <span class="cf" style="color: #003B4F;">return</span> torch.<span class="bu" style="color: null;">abs</span>(calc_preds(coeffs, indeps)<span class="op" style="color: #5E5E5E;">-</span>deps).mean()</span></code></pre></div>
</div>
<p>Gradient Descent requires us to calculate gradients. These are the values of the derivatives of the functions that generate the predictions so in our case the derviatives of the multiple linear regression function seen earlier. The Pytorch module can calculate these gradients for us every time the linear regression function is used if we set <em>requires_grad()</em> on the model coefficients. Lets do that now.</p>
<div class="cell" data-outputid="16fa5da9-5166-4b0b-91b9-8cd9bb138021">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">coeffs.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625], requires_grad=True)</code></pre>
</div>
</div>
<p>Let’s now calculate the loss for our current predictions again using our new function.</p>
<div class="cell" data-outputid="4fe84325-6209-435b-db00-9472481bc3c3">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb35-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor(0.5382, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<p>We can now ask Pytorch to calculate our gradients now using <em>backward()</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">loss.backward()</span></code></pre></div>
</div>
<p>Let’s have a look at the gradients calculated for our model coefficients.</p>
<div class="cell" data-outputid="8a8ce06f-d544-4fb3-96bb-fdc3df4cfae3">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor([-0.0106,  0.0129, -0.0041, -0.0484,  0.2099, -0.2132, -0.1212, -0.0247,  0.1425, -0.1886, -0.0191,  0.2043])</code></pre>
</div>
</div>
<p>These gradients tell us how much we need to change each model coefficient to reduce the loss function i.e.&nbsp;to improve the predictions.</p>
<p>So putting these steps together:</p>
<div class="cell" data-outputid="f4360546-5f28-4262-d6d9-65802e6f880f">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb40-2">loss.backward()</span>
<span id="cb40-3">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>tensor([-0.0212,  0.0258, -0.0082, -0.0969,  0.4198, -0.4265, -0.2424, -0.0494,  0.2851, -0.3771, -0.0382,  0.4085])</code></pre>
</div>
</div>
<p>We can see our gradient values have doubled? this ie because every time <em>backward()</em> is called it adds the new gradients to the previous ones. We don’t want this, as we only want the gradients that pertain to the current model coefficients, not the previous ones.</p>
<p>So what we really want to do is reset the gradient values to zero after each step of the gradient descent process.</p>
<p>Lets define some code to put this all together, and print our current loss value.</p>
<div class="cell" data-outputid="d328cc3d-af3d-4a6a-aab4-129e9728f98b">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;"># Calculate loss</span></span>
<span id="cb42-3">loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;"># Calculate gradients of linear model e.g. coeffs * inputs</span></span>
<span id="cb42-5">loss.backward()</span>
<span id="cb42-6"><span class="co" style="color: #5E5E5E;"># Don't calculate any gradients here</span></span>
<span id="cb42-7"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb42-8">    <span class="co" style="color: #5E5E5E;"># Subtract the gradients from the model coeffcients to improve them, but scale this update by 0.1 called the 'learning rate'</span></span>
<span id="cb42-9">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb42-10">    <span class="co" style="color: #5E5E5E;"># Set gradients to zero</span></span>
<span id="cb42-11">    coeffs.grad.zero_()</span>
<span id="cb42-12">    <span class="co" style="color: #5E5E5E;"># Print current loss</span></span>
<span id="cb42-13">    <span class="bu" style="color: null;">print</span>(calc_loss(coeffs, t_indep, t_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.4945)</code></pre>
</div>
</div>
<p>The learning rate i used to ensure we take small steps of improvement for the cofficients, rather than big steps. To better understand why and how gradient decent works in more detail <a href="https://builtin.com/data-science/gradient-descent">this article explains the fundamentals of GD</a>. And <a href="https://towardsdatascience.com/understanding-the-mathematics-behind-gradient-descent-dde5dc9be06e">this article</a> as well as <a href="https://medium.com/geekculture/mathematics-behind-gradient-descent-f2a49a0b714f">this one</a> explain more the mathematics of GD.</p>
</section>
<section id="training-the-linear-model" class="level3" data-number="6.2">
<h3 data-number="6.2" class="anchored" data-anchor-id="training-the-linear-model"><span class="header-section-number">6.2</span> Training the Linear Model</h3>
<p>Before we can train our model we need to split our data into training and validation sets. We can use <em>RandomSplitter()</em> to do this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">trn_split,val_split<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)(df)</span></code></pre></div>
</div>
<div class="cell" data-outputid="19915c2e-3052-479c-f28c-ace964df4be0">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">trn_indep,val_indep <span class="op" style="color: #5E5E5E;">=</span> t_indep[trn_split],t_indep[val_split]</span>
<span id="cb45-2">trn_dep,val_dep <span class="op" style="color: #5E5E5E;">=</span> t_dep[trn_split],t_dep[val_split]</span>
<span id="cb45-3"><span class="bu" style="color: null;">len</span>(trn_indep),<span class="bu" style="color: null;">len</span>(val_indep)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>(713, 178)</code></pre>
</div>
</div>
<p>We’ll also create functions for the three things we did manually above: updating coeffs, doing one full gradient descent step, and initilising coeffs to random numbers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb47-2">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb47-3">    coeffs.grad.zero_()</span>
<span id="cb47-4"></span>
<span id="cb47-5"><span class="kw" style="color: #003B4F;">def</span> one_epoch(coeffs, lr):</span>
<span id="cb47-6">    loss <span class="op" style="color: #5E5E5E;">=</span> calc_loss(coeffs, trn_indep, trn_dep)</span>
<span id="cb47-7">    loss.backward()</span>
<span id="cb47-8">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): update_coeffs(coeffs, lr)</span>
<span id="cb47-9">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">:.3f}</span><span class="ss" style="color: #20794D;">"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"; "</span>)</span>
<span id="cb47-10"></span>
<span id="cb47-11"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(): </span>
<span id="cb47-12">    <span class="cf" style="color: #003B4F;">return</span> (torch.rand(n_coeff)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>).requires_grad_()</span></code></pre></div>
</div>
<p>Let’s now create a function do train the model. We will initialise the model coefficients to random values, then loop through one epoch to calculate the loss and gradients, and update the coefficients. An <em>epoch</em> is the model generating precdictions for the entire training dataet. So the training process is multiple epochs/loops over the training data, updating the model coefficients in each loop. <strong>This is the gradient descent algorithm</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;">def</span> train_model(epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>):</span>
<span id="cb48-2">    torch.manual_seed(<span class="dv" style="color: #AD0000;">442</span>)</span>
<span id="cb48-3">    coeffs <span class="op" style="color: #5E5E5E;">=</span> init_coeffs()</span>
<span id="cb48-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(epochs): one_epoch(coeffs, lr<span class="op" style="color: #5E5E5E;">=</span>lr)</span>
<span id="cb48-5">    <span class="cf" style="color: #003B4F;">return</span> coeffs</span></code></pre></div>
</div>
<p>Lets choose a learning rate of 0.2 and train our model for 18 epochs. What we hope to see is out loss value go down in each epoch, as the model coefficients are updated to get better and improve the predictions.</p>
<div class="cell" data-outputid="66e8aa0c-93c2-4b57-96ed-5f4f9dd3bdd1">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(<span class="dv" style="color: #AD0000;">18</span>, lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.536; 0.502; 0.477; 0.454; 0.431; 0.409; 0.388; 0.367; 0.349; 0.336; 0.330; 0.326; 0.329; 0.304; 0.314; 0.296; 0.300; 0.289; </code></pre>
</div>
</div>
<p>We can see here as expected, the loss is going down and the predictions are improving with each epoch.</p>
<p>This means that the model coefficients for each of the input variables is getting better, or more accurate. Lets have a look at the improved coefficients so far.</p>
<div class="cell" data-outputid="86c094ea-83cd-4934-8161-1a833e3b6eaa">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;">def</span> show_coeffs(): </span>
<span id="cb51-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">zip</span>(indep_cols, coeffs.requires_grad_(<span class="va" style="color: #111111;">False</span>)))</span>
<span id="cb51-3">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>{'Age': tensor(-0.2694),
 'SibSp': tensor(0.0901),
 'Parch': tensor(0.2359),
 'LogFare': tensor(0.0280),
 'Sex_male': tensor(-0.3990),
 'Sex_female': tensor(0.2345),
 'Pclass_1': tensor(0.7232),
 'Pclass_2': tensor(0.4112),
 'Pclass_3': tensor(0.3601),
 'Embarked_C': tensor(0.0955),
 'Embarked_Q': tensor(0.2395),
 'Embarked_S': tensor(0.2122)}</code></pre>
</div>
</div>
</section>
<section id="checking-model-accuracy" class="level3" data-number="6.3">
<h3 data-number="6.3" class="anchored" data-anchor-id="checking-model-accuracy"><span class="header-section-number">6.3</span> Checking Model Accuracy</h3>
<p>So the loss value is giving us a good indication of how well our model is improving. But it’s not perhaps what we want as our ultimate measure of the model performance. For the kaggle competition, the desire measure of performance is <em>accuracy</em> i.e.</p>
<p>Accuracy = Correct Predictions / Total Predictions</p>
<p>Lets first get the predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">preds <span class="op" style="color: #5E5E5E;">=</span> calc_preds(coeffs, val_indep)</span></code></pre></div>
</div>
<p>We want a simple category of True if the passenger died, and False if they survived. To convert our predictions into these values we will use a threshold of 0.5 to decide which converts to which.</p>
<div class="cell" data-outputid="a8067b15-9666-41ab-d96a-30c2f1d00201">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">results <span class="op" style="color: #5E5E5E;">=</span> val_dep.<span class="bu" style="color: null;">bool</span>()<span class="op" style="color: #5E5E5E;">==</span>(preds<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb54-2">results[:<span class="dv" style="color: #AD0000;">16</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True, False, False, False,  True,  True, False])</code></pre>
</div>
</div>
<p>Let’s now calculate the accuracy.</p>
<div class="cell" data-outputid="4ed619e6-4691-4cdd-a5e3-b5143162cd29">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;">def</span> acc(coeffs): </span>
<span id="cb56-2">    <span class="cf" style="color: #003B4F;">return</span> (val_dep.<span class="bu" style="color: null;">bool</span>()<span class="op" style="color: #5E5E5E;">==</span>(calc_preds(coeffs, val_indep)<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.5</span>)).<span class="bu" style="color: null;">float</span>().mean()</span>
<span id="cb56-3">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>tensor(0.7865)</code></pre>
</div>
</div>
</section>
<section id="improving-model-predictions-with-a-sigmoid-function" class="level3" data-number="6.4">
<h3 data-number="6.4" class="anchored" data-anchor-id="improving-model-predictions-with-a-sigmoid-function"><span class="header-section-number">6.4</span> Improving Model Predictions with a Sigmoid Function</h3>
<p>If we look at our predictions, they could easily have values bigger that 1 or less than zero.</p>
<div class="cell" data-outputid="791efb08-5065-40db-a890-1ae08c16a4d4">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">preds[:<span class="dv" style="color: #AD0000;">28</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>tensor([ 0.8160,  0.1295, -0.0148,  0.1831,  0.1520,  0.1350,  0.7279,  0.7754,  0.3222,  0.6740,  0.0753,  0.0389,  0.2216,  0.7631,
         0.0678,  0.3997,  0.3324,  0.8278,  0.1078,  0.7126,  0.1023,  0.3627,  0.9937,  0.8050,  0.1153,  0.1455,  0.8652,  0.3425])</code></pre>
</div>
</div>
<p>We want these predictions to be only from 0-1. If we pass these predictions through a <em>sigmoid function</em> that will achieve this.</p>
<div class="cell" data-outputid="04784176-daea-42c4-e6e7-beecbd444018">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">sympy.plot(<span class="st" style="color: #20794D;">"1/(1+exp(-x))"</span>, xlim<span class="op" style="color: #5E5E5E;">=</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch_files/figure-html/cell-40-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s now improve our predictions function using this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb61-2">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid((indeps<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>And now lets train the model again.</p>
<div class="cell" data-outputid="202df3fe-f005-49be-940e-dc0f8f473167">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.510; 0.327; 0.294; 0.207; 0.201; 0.199; 0.198; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
<p>This has really improved the loss which is falling much more. Let’s check the accuracy.</p>
<div class="cell" data-outputid="daca6c85-a636-4355-faac-64cbd23c8c15">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>This has also improved a lot.</p>
<p>Lets look at the model coefficients.</p>
<div class="cell" data-outputid="9168e1ce-0ac2-4209-dc03-73ea0707939e">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>{'Age': tensor(-1.5061),
 'SibSp': tensor(-1.1575),
 'Parch': tensor(-0.4267),
 'LogFare': tensor(0.2543),
 'Sex_male': tensor(-10.3320),
 'Sex_female': tensor(8.4185),
 'Pclass_1': tensor(3.8389),
 'Pclass_2': tensor(2.1398),
 'Pclass_3': tensor(-6.2331),
 'Embarked_C': tensor(1.4771),
 'Embarked_Q': tensor(2.1168),
 'Embarked_S': tensor(-4.7958)}</code></pre>
</div>
</div>
<p>Do these values make sense? these coefficients suggest what are the most important features useful for predicting survival. We can see that Sex_male has a big negative value, which implies a negative association. We can also see age is negatively associated. Taken together, these two coefficients suggest that males and older people were less likely to survive the titantic disaster.</p>
</section>
<section id="improving-the-maths---using-matrix-multiplications" class="level3" data-number="6.5">
<h3 data-number="6.5" class="anchored" data-anchor-id="improving-the-maths---using-matrix-multiplications"><span class="header-section-number">6.5</span> Improving the Maths - Using Matrix Multiplications</h3>
<p>Is there a way we can improve the calculations to make things more efficient? if we look again at the biggest calculation to make predictions.</p>
<div class="cell" data-outputid="01050ced-6828-4780-d2b1-2c07491ded72">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">(val_indep<span class="op" style="color: #5E5E5E;">*</span>coeffs).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3512, -13.6469,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310])</code></pre>
</div>
</div>
<p>So we are multiplying elements together then summing accross rows. This is identical to the linear algebra operation of a <em>matrix-vector product</em>. This operation has been implemented in Pytorch and uses the ‘@’ symbol, so we can write the above in a simpler way as:</p>
<div class="cell" data-outputid="2ab7fa87-9638-44ef-ddc7-8b20c369bf22">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">val_indep<span class="op" style="color: #5E5E5E;">@</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3511, -13.6468,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310])</code></pre>
</div>
</div>
<p>Not only is this simpler, but matrix-vector products in PyTorch have been highly optimised to make them much faster. So not only is the code for this more compact, this actually runs much faster than using the normal multiplication and sum.</p>
<p>Let’s update our predictions function with this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps): </span>
<span id="cb72-2">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(indeps<span class="op" style="color: #5E5E5E;">@</span>coeffs)</span></code></pre></div>
</div>
</section>
</section>
<section id="creating-a-neural-network-model" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="creating-a-neural-network-model"><span class="header-section-number">7</span> Creating a Neural Network Model</h2>
<p>We will now transition to creating a simple neural network model, which will build on what we have used to make our linear model.</p>
<p>For this type of model we will need to perform <em>matrix-matrix products</em> and to do this we will need to turn the coefficients into a column vector i.e.&nbsp;a matrix with a single column which we can do by passing a second argument 1 to torch.rand(), indicating that we want our coefficients to have one column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(): </span>
<span id="cb73-2">    <span class="cf" style="color: #003B4F;">return</span> (torch.rand(n_coeff, <span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.1</span>).requires_grad_()</span></code></pre></div>
</div>
<p>We’ll also need to turn our dependent variable into a column vector, which we can do by indexing the column dimension with the special value None, which tells PyTorch to add a new dimension in this position:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">trn_dep <span class="op" style="color: #5E5E5E;">=</span> trn_dep[:,<span class="va" style="color: #111111;">None</span>]</span>
<span id="cb74-2">val_dep <span class="op" style="color: #5E5E5E;">=</span> val_dep[:,<span class="va" style="color: #111111;">None</span>]</span></code></pre></div>
</div>
<p>We can now train our model as before and confirm we get identical outputs…</p>
<div class="cell" data-outputid="47d216e8-2efa-4670-87df-b81c882ee982">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.512; 0.323; 0.290; 0.205; 0.200; 0.198; 0.197; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
<p>…and identical accuracy:</p>
<div class="cell" data-outputid="31cf89de-9c91-43cd-8e15-02518073c826">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>So what is a Neural Network? In <a href="https://en.wikipedia.org/wiki/Artificial_neural_network">simple terms</a></p>
<blockquote class="blockquote">
<p><em>Artificial neural networks (ANNs), usually simply called neural networks (NNs) or neural nets are computing systems inspired by the biological neural networks that constitute animal brains. An ANN is based on a collection of connected units or nodes called artificial neurons, which loosely model the neurons in a biological brain</em></p>
</blockquote>
<p><strong>One key difference between Neural Networks (NN) and Linear Regression (LR), is that while LR has model parameters/coefficients one for each input variable, NN’s have many model parameters, many of which do not correspond to specific input variables which are often called ‘hidden layers’</strong>.</p>
<p><img src="http://livingdatalab.com/posts/https:/github.com/pranath/blog/raw/master/images/simple_nn.png" title="A Simple Neural Network" class="img-fluid"></p>
<p>You can read more about <a href="https://www.investopedia.com/terms/n/neuralnetwork.asp#:~:text=A%20neural%20network%20is%20a,organic%20or%20artificial%20in%20nature.">Neural Networks here</a>.</p>
<p>To create a Neural Network we’ll need to create coefficients for each of our layers. Our first set of coefficients will take our n_coeff inputs, and create n_hidden outputs for our hidden layers. We can choose whatever n_hidden we like – a higher number gives our network more flexibility, but makes it slower and harder to train. So we need a matrix of size n_coeff by n_hidden. We’ll divide these coefficients by n_hidden so that when we sum them up in the next layer we’ll end up with similar magnitude numbers to what we started with.</p>
<p>Then our second layer will need to take the n_hidden inputs and create a single output, so that means we need a n_hidden by 1 matrix there. The second layer will also need a constant term added.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs(n_hidden<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb79-2">    layer1 <span class="op" style="color: #5E5E5E;">=</span> (torch.rand(n_coeff, n_hidden)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>)<span class="op" style="color: #5E5E5E;">/</span>n_hidden</span>
<span id="cb79-3">    layer2 <span class="op" style="color: #5E5E5E;">=</span> torch.rand(n_hidden, <span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb79-4">    const <span class="op" style="color: #5E5E5E;">=</span> torch.rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb79-5">    <span class="cf" style="color: #003B4F;">return</span> layer1.requires_grad_(),layer2.requires_grad_(),const.requires_grad_()</span></code></pre></div>
</div>
<p>Now we have our coefficients, we can create our neural net. The key steps are the two matrix products, indeps@l1 and res@l2 (where res is the output of the first layer). The first layer output is passed to F.relu (that’s our non-linearity), and the second is passed to torch.sigmoid as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb80-2">    l1,l2,const <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb80-3">    res <span class="op" style="color: #5E5E5E;">=</span> F.relu(indeps<span class="op" style="color: #5E5E5E;">@</span>l1)</span>
<span id="cb80-4">    res <span class="op" style="color: #5E5E5E;">=</span> res<span class="op" style="color: #5E5E5E;">@</span>l2 <span class="op" style="color: #5E5E5E;">+</span> const</span>
<span id="cb80-5">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<p>Finally, now that we have more than one set of coefficients, we need to add a loop to update each one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb81-2">    <span class="cf" style="color: #003B4F;">for</span> layer <span class="kw" style="color: #003B4F;">in</span> coeffs:</span>
<span id="cb81-3">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb81-4">        layer.grad.zero_()</span></code></pre></div>
</div>
<p>Let’s train our model.</p>
<div class="cell" data-outputid="c35f96aa-e660-4f7b-9daa-690797bc826d">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.532; 0.520; 0.505; 0.487; 0.466; 0.439; 0.407; 0.373; 0.343; 0.319; 0.301; 0.286; 0.274; 0.264; 0.256; 0.250; 0.245; 0.240; 0.237; 0.234; 0.231; 0.229; 0.227; 0.226; 0.224; 0.223; 0.222; 0.221; 0.220; </code></pre>
</div>
</div>
<div class="cell" data-outputid="aabf0252-124c-4f2f-8705-1873c58f4ea1">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.400; 0.260; 0.390; 0.221; 0.211; 0.197; 0.195; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; </code></pre>
</div>
</div>
<div class="cell" data-outputid="4f3675be-2c83-446b-a36c-992abb3024dd">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>In this case our neural net isn’t showing better results than the linear model. That’s not surprising; this dataset is very small and very simple, and isn’t the kind of thing we’d expect to see neural networks excel at. Furthermore, our validation set is too small to reliably see much accuracy difference. But the key thing is that we now know exactly what a real neural net looks like, and can see how it relates to a linear regression model.</p>
</section>
<section id="creating-a-deep-learning-model" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="creating-a-deep-learning-model"><span class="header-section-number">8</span> Creating a Deep Learning Model</h2>
<p>The neural net in the previous section only uses one hidden layer, so it doesn’t count as “deep” learning. But we can use the exact same technique to make our neural net deep, by adding more ‘hidden layers’.</p>
<p>First, we’ll need to create additional coefficients for each layer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="kw" style="color: #003B4F;">def</span> init_coeffs():</span>
<span id="cb88-2">    hiddens <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>]  <span class="co" style="color: #5E5E5E;"># &lt;-- set this to the size of each hidden layer you want</span></span>
<span id="cb88-3">    sizes <span class="op" style="color: #5E5E5E;">=</span> [n_coeff] <span class="op" style="color: #5E5E5E;">+</span> hiddens <span class="op" style="color: #5E5E5E;">+</span> [<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb88-4">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(sizes)</span>
<span id="cb88-5">    layers <span class="op" style="color: #5E5E5E;">=</span> [(torch.rand(sizes[i], sizes[i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>)<span class="op" style="color: #5E5E5E;">/</span>sizes[i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">4</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb88-6">    consts <span class="op" style="color: #5E5E5E;">=</span> [(torch.rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.1</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb88-7">    <span class="cf" style="color: #003B4F;">for</span> l <span class="kw" style="color: #003B4F;">in</span> layers<span class="op" style="color: #5E5E5E;">+</span>consts: l.requires_grad_()</span>
<span id="cb88-8">    <span class="cf" style="color: #003B4F;">return</span> layers,consts</span></code></pre></div>
</div>
<p>You’ll notice here that there’s a lot of messy constants to get the random numbers in just the right ranges. When we train the model in a moment, you’ll see that the tiniest changes to these initialisations can cause our model to fail to train at all.</p>
<p><strong>This is a key reason that deep learning failed to make much progress in the early days - it’s very finicky to get a good starting point for our coefficients. Nowadays, we have better ways to deal with that.</strong></p>
<p>Our deep learning calc_preds looks much the same as before, but now we loop through each layer, instead of listing them separately:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="kw" style="color: #003B4F;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb89-2">    layers,consts <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb89-3">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(layers)</span>
<span id="cb89-4">    res <span class="op" style="color: #5E5E5E;">=</span> indeps</span>
<span id="cb89-5">    <span class="cf" style="color: #003B4F;">for</span> i,l <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(layers):</span>
<span id="cb89-6">        res <span class="op" style="color: #5E5E5E;">=</span> res<span class="op" style="color: #5E5E5E;">@</span>l <span class="op" style="color: #5E5E5E;">+</span> consts[i]</span>
<span id="cb89-7">        <span class="cf" style="color: #003B4F;">if</span> i<span class="op" style="color: #5E5E5E;">!=</span>n<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>: res <span class="op" style="color: #5E5E5E;">=</span> F.relu(res)</span>
<span id="cb89-8">    <span class="cf" style="color: #003B4F;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<p>We also need a minor update to update_coeffs since we’ve got layers and consts separated now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="kw" style="color: #003B4F;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb90-2">    layers,consts <span class="op" style="color: #5E5E5E;">=</span> coeffs</span>
<span id="cb90-3">    <span class="cf" style="color: #003B4F;">for</span> layer <span class="kw" style="color: #003B4F;">in</span> layers<span class="op" style="color: #5E5E5E;">+</span>consts:</span>
<span id="cb90-4">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb90-5">        layer.grad.zero_()</span></code></pre></div>
</div>
<p>Let’s train our model…</p>
<div class="cell" data-outputid="e5d0def9-bfa1-4ac4-97ce-336a4ef57d37">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">coeffs <span class="op" style="color: #5E5E5E;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.521; 0.483; 0.427; 0.379; 0.379; 0.379; 0.379; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.377; 0.376; 0.371; 0.333; 0.239; 0.224; 0.208; 0.204; 0.203; 0.203; 0.207; 0.197; 0.196; 0.195; </code></pre>
</div>
</div>
<div class="cell" data-outputid="60c72964-b1bd-4741-f15e-6c6324c89fc2">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
<p>The “real” deep learning models that are used in research and industry look very similar to this, and in fact if you look inside the source code of any deep learning model you’ll recognise the basic steps are the same.</p>
<p>The biggest differences in practical models to what we have above are:</p>
<ul>
<li>How initialisation and normalisation is done to ensure the model trains correctly every time</li>
<li>Regularization (to avoid over-fitting)</li>
<li>Modifying the neural net itself to take advantage of knowledge of the problem domain</li>
<li>Doing gradient descent steps on smaller batches, rather than the whole dataset</li>
</ul>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <category>mathematics</category>
  <guid>http://livingdatalab.com/posts/2022-12-17-machine-learning-to-deep-learning-from-scratch.html</guid>
  <pubDate>Sat, 17 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ml_v_dl.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>US Patent Phrase to Phrase Matching</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-10-us-patent-phrase-to-phrase-matching.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> course for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>. This article covers lesson 4 of this years course, which I will use to create model that can associate short phrases with the correct US patent classification.</p>
<p>While this is based on a fastai training course, in this particular project we will not actually be using the fastai library, we will be using the <a href="https://huggingface.co/docs/transformers/index">Hugging Face Transformers Library</a> which is a python library of state of the art deep learning models, including the very powerful <a href="https://www.quantamagazine.org/will-transformers-take-over-artificial-intelligence-20220310/">transformers model architecture</a> behind so many of the recent advances in AI. Fastai does also integrate <a href="https://docs.fast.ai/tutorial.transformers.html">transfomer models</a> as well.</p>
<p>First we will import the required libraries.</p>
</section>
<section id="import-libraries" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">2</span> Import Libraries</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> Dataset,DatasetDict</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForSequenceClassification,AutoTokenizer,TrainingArguments,Trainer</span></code></pre></div>
</div>
</section>
<section id="the-project-us-patent-phrase-to-phrase-matching" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-project-us-patent-phrase-to-phrase-matching"><span class="header-section-number">3</span> The Project: US Patent Phrase to Phrase Matching</h2>
<p>The U.S. Patent and Trademark Office (USPTO) offers one of the largest repositories of scientific, technical, and commercial information in the world through its Open Data Portal. Patents are a form of intellectual property granted in exchange for the public disclosure of new and useful inventions. Because patents undergo an intensive vetting process prior to grant, and because the history of U.S. innovation spans over two centuries and 11 million patents, the U.S. patent archives stand as a rare combination of data volume, quality, and diversity.</p>
<p>In this project, I will train a model on a novel semantic similarity dataset to extract relevant information by matching key phrases in patent documents. Determining the semantic similarity between phrases is critically important during the patent search and examination process to determine if an invention has been described before.</p>
<p>For example, if one invention claims “television set” and a prior publication describes “TV set”, a model would ideally recognize these are the same and assist a patent attorney or examiner in retrieving relevant documents. This extends beyond paraphrase identification; if one invention claims a “strong material” and another uses “steel”, that may also be a match. What counts as a “strong material” varies per domain (it may be steel in one domain and ripstop fabric in another, but you wouldn’t want your parachute made of steel).</p>
<p>We will seek to build a model to match phrases in order to extract contextual information, which could help the patent community connect the dots between millions of patent documents.</p>
<p>Specifically, we will be comparing two words or short phrases, and scoring them based on whether they’re similar or not, based on which patent class they were used in. With a score of 1 it is considered that the two inputs have identical meaning, and 0 means they have totally different meaning. For instance, <em>abatement</em> and <em>eliminating process</em> have a score of 0.5, meaning they’re somewhat similar, but not identical.</p>
<p>It turns out that this can be represented as a classification problem. How? By representing the question like this:</p>
<blockquote class="blockquote">
<p>For the following text…: “TEXT1: abatement; TEXT2: eliminating process” …chose a category of meaning similarity: “Different; Similar; Identical”.</p>
</blockquote>
<p>In this project we’ll see how to solve the Patent Phrase Matching problem by treating it as a classification task, by representing it in a very similar way to that shown above.</p>
<p>The dataset comes from <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching">this kaggle project</a>.</p>
</section>
<section id="get-data" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="get-data"><span class="header-section-number">4</span> Get Data</h2>
<p>Let’s first download and extract our data.</p>
<div class="cell" data-outputid="994ec26d-2589-42c7-e7b8-258ad524b21f">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>unzip us<span class="op" style="color: #5E5E5E;">-</span>patent<span class="op" style="color: #5E5E5E;">-</span>phrase<span class="op" style="color: #5E5E5E;">-</span>to<span class="op" style="color: #5E5E5E;">-</span>phrase<span class="op" style="color: #5E5E5E;">-</span>matching.<span class="bu" style="color: null;">zip</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Archive:  us-patent-phrase-to-phrase-matching.zip
  inflating: sample_submission.csv   
  inflating: test.csv                
  inflating: train.csv               
drive        sample_submission.csv  train.csv
sample_data  test.csv           us-patent-phrase-to-phrase-matching.zip</code></pre>
</div>
</div>
<div class="cell" data-outputid="1c55912b-5d5e-46f4-e2fe-0b201ce78fbb">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb4-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">


  <div id="df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
      <th>score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>37d61fd2272659b1</td>
      <td>abatement</td>
      <td>abatement of pollution</td>
      <td>A47</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7b9652b17b68b7a4</td>
      <td>abatement</td>
      <td>act of abating</td>
      <td>A47</td>
      <td>0.75</td>
    </tr>
    <tr>
      <th>2</th>
      <td>36d72442aefd8232</td>
      <td>abatement</td>
      <td>active catalyst</td>
      <td>A47</td>
      <td>0.25</td>
    </tr>
    <tr>
      <th>3</th>
      <td>5296b0c19e1ce60e</td>
      <td>abatement</td>
      <td>eliminating process</td>
      <td>A47</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>54c1e3b9184cb5b6</td>
      <td>abatement</td>
      <td>forest region</td>
      <td>A47</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-7e51c032-e3c5-4f81-9307-d87a69cb2e0c');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>The <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching/data">dataset description</a> gives a clearer idea of what these different fields mean.</p>
<p>For example:</p>
<ul>
<li>id - a unique identifier for a pair of phrases</li>
<li>anchor - the first phrase</li>
<li>target - the second phrase</li>
<li>context - the CPC classification (version 2021.05), which indicates the subject within which the similarity is to be scored</li>
<li>score - the similarity. This is sourced from a combination of one or more manual expert ratings.</li>
</ul>
<p>Lets generate some basic summary stats for each field.</p>
<div class="cell" data-outputid="04c33028-57d9-4934-a7f7-af97c11374c9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.describe(include<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'object'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">


  <div id="df-ebd58c4d-8058-424e-91f1-9e8e5711d66a">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>36473</td>
      <td>36473</td>
      <td>36473</td>
      <td>36473</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>36473</td>
      <td>733</td>
      <td>29340</td>
      <td>106</td>
    </tr>
    <tr>
      <th>top</th>
      <td>37d61fd2272659b1</td>
      <td>component composite coating</td>
      <td>composition</td>
      <td>H01</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>152</td>
      <td>24</td>
      <td>2186</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-ebd58c4d-8058-424e-91f1-9e8e5711d66a')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-ebd58c4d-8058-424e-91f1-9e8e5711d66a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-ebd58c4d-8058-424e-91f1-9e8e5711d66a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>We can see that we have far fewer anchors than targets, and that some of these anchors are very common for example ‘component composite coating’ is associated with 152 different targets.</p>
<p>It was suggested earlier that we could represent the input to the model as something like “TEXT1: abatement; TEXT2: eliminating process”. We’ll need to add the context to this too. In Pandas, we just use + to concatenate, like so:</p>
<div class="cell" data-outputid="4ea27036-5cb3-4eaf-9309-6ea068360470">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df[<span class="st" style="color: #20794D;">'input'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'TEXT1: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.context <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.target <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; ANC1: '</span> <span class="op" style="color: #5E5E5E;">+</span> df.anchor</span>
<span id="cb6-2">df[<span class="st" style="color: #20794D;">'input'</span>].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>0    TEXT1: A47; TEXT2: abatement of pollution; ANC...
1    TEXT1: A47; TEXT2: act of abating; ANC1: abate...
2    TEXT1: A47; TEXT2: active catalyst; ANC1: abat...
3    TEXT1: A47; TEXT2: eliminating process; ANC1: ...
4    TEXT1: A47; TEXT2: forest region; ANC1: abatement
Name: input, dtype: object</code></pre>
</div>
</div>
</section>
<section id="text-data-transformation" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="text-data-transformation"><span class="header-section-number">5</span> Text Data Transformation</h2>
<p>The Hugging Face transformers library uses the <em>Dataset</em> object to store data, lets create one for our data.</p>
<div class="cell" data-outputid="99fdcfa6-de63-46c1-893a-665f76aec537">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(df)</span>
<span id="cb8-2">ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Dataset({
    features: ['id', 'anchor', 'target', 'context', 'score', 'input'],
    num_rows: 36473
})</code></pre>
</div>
</div>
<p>So we have our text data, but there is a problem. Machine learning and AI models don’t actually understand text! They can only understand numbers. So we need a way to convert our text data into a numerical representation.</p>
<p>The branch of machine learning and AI concerned with understanding language is called <em>Natural Language Processing or NLP</em>. In NLP we prepare text data for machine learning by converting it into numbers, two common steps are followed:</p>
<ul>
<li><strong>Tokenization</strong>: Split each text up into words (or actually, as we’ll see, into tokens)</li>
<li><strong>Numericalization</strong>: Convert each word (or token) into a number.</li>
</ul>
<p>The details about how this is done actually depends on the particular model we use. So first we’ll need to pick a model. There are thousands of models available, but a reasonable starting point for nearly any NLP problem is to use a smaller model, then working up to a bigger model later.</p>
<p>Why? It’s true that in deep learning and AI, a larger model generally does better than a smaller model. However a smaller model is quicker to train and experiment with multiple times which is better when we are just trying things out at the start and need to iterate rapidly, and can give an idea of some kind of baseline we can expect to improve on with a bigger model.</p>
<p>We will use this small model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model_nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'microsoft/deberta-v3-small'</span></span></code></pre></div>
</div>
<p><em>AutoTokenizer</em> will create a tokenizer appropriate for a given model:</p>
<div class="cell" data-outputid="cd0a9bb9-1902-4ecf-cebe-a73c23c468b3">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">tokz <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_nm)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6583b3bf366d4e2abef054d6c06120a9","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5d375ef026614846a4a9079d4212aab5","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1c1068ad5976450a8460fb74aea3dd1c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
/usr/local/lib/python3.8/dist-packages/transformers/convert_slow_tokenizer.py:446: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.
  warnings.warn(
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.</code></pre>
</div>
</div>
<p>Here’s an example of how the tokenizer splits a text into “tokens” (which are like words, but can be sub-word pieces, as you see below):</p>
<div class="cell" data-outputid="0c424420-5159-41be-ade2-e85037aea09a">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">tokz.tokenize(<span class="st" style="color: #20794D;">"Hi my name is Pranath !"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>['▁Hi', '▁my', '▁name', '▁is', '▁Prana', 'th', '▁!']</code></pre>
</div>
</div>
<p>Uncommon words will be split into pieces. The start of a new word is represented by ▁:</p>
<div class="cell" data-outputid="b9a2ba19-4830-44e3-9820-d0c9346021b0">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tokz.tokenize(<span class="st" style="color: #20794D;">"A platypus is an ornithorhynchus anatinus."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>['▁A',
 '▁platypus',
 '▁is',
 '▁an',
 '▁or',
 'ni',
 'tho',
 'rhynch',
 'us',
 '▁an',
 'at',
 'inus',
 '.']</code></pre>
</div>
</div>
<p>Here’s a simple function which tokenizes our inputs:</p>
<div class="cell" data-outputid="778923db-d625-45e5-b6c1-5dee66138bb6">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> tok_func(x): <span class="cf" style="color: #003B4F;">return</span> tokz(x[<span class="st" style="color: #20794D;">"input"</span>])</span>
<span id="cb17-2"></span>
<span id="cb17-3">tok_ds <span class="op" style="color: #5E5E5E;">=</span> ds.<span class="bu" style="color: null;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8551069b5c3544fa81ce2f9e751c9413","version_major":2,"version_minor":0}
</script>
</div>
</div>
<p>This adds a new item to our dataset called input_ids. For instance, here is the input and IDs for the first row of our data:</p>
<div class="cell" data-outputid="bbf33ef0-dd9e-46b8-e24f-761ec9aeb494">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">row <span class="op" style="color: #5E5E5E;">=</span> tok_ds[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb18-2">row[<span class="st" style="color: #20794D;">'input'</span>], row[<span class="st" style="color: #20794D;">'input_ids'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>('TEXT1: A47; TEXT2: abatement of pollution; ANC1: abatement',
 [1,
  54453,
  435,
  294,
  336,
  5753,
  346,
  54453,
  445,
  294,
  47284,
  265,
  6435,
  346,
  23702,
  435,
  294,
  47284,
  2])</code></pre>
</div>
</div>
<p>So, what are those IDs and where do they come from? The secret is that there’s a list called vocab in the tokenizer which contains a unique integer for every possible token string. We can look them up like this, for instance to find the token for the word “of”:</p>
<div class="cell" data-outputid="806a06e1-cb5b-4221-8d79-d5a0ed527a48">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">tokz.vocab[<span class="st" style="color: #20794D;">'▁of'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>265</code></pre>
</div>
</div>
<p>Looking above at our input IDs, we see that 265 appears as expected.</p>
<p>Finally, we need to prepare our labels. Transformers always assumes that your labels has the column name <strong>labels</strong>, but in our dataset it’s currently called score. Therefore, we need to rename it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">tok_ds <span class="op" style="color: #5E5E5E;">=</span> tok_ds.rename_columns({<span class="st" style="color: #20794D;">'score'</span>:<span class="st" style="color: #20794D;">'labels'</span>})</span></code></pre></div>
</div>
<p>Now that we’ve prepared our tokens and labels, we need to create our validation set.</p>
</section>
<section id="test-and-validation-sets" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="test-and-validation-sets"><span class="header-section-number">6</span> Test and Validation Sets</h2>
<p>You may have noticed that our directory contained another file for our test set.</p>
<div class="cell" data-outputid="a8c1475c-0206-49c0-c541-9791eac07057">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">eval_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'test.csv'</span>)</span>
<span id="cb23-2">eval_df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">


  <div id="df-f7dd49a1-7732-4dde-ae68-09eaa9820990">
    <div class="colab-df-container">
      <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>anchor</th>
      <th>target</th>
      <th>context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>36</td>
      <td>36</td>
      <td>36</td>
      <td>36</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>36</td>
      <td>34</td>
      <td>36</td>
      <td>29</td>
    </tr>
    <tr>
      <th>top</th>
      <td>4112d61851461f60</td>
      <td>el display</td>
      <td>inorganic photoconductor drum</td>
      <td>G02</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>2</td>
      <td>1</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-f7dd49a1-7732-4dde-ae68-09eaa9820990')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-f7dd49a1-7732-4dde-ae68-09eaa9820990 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-f7dd49a1-7732-4dde-ae68-09eaa9820990');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Transformers uses a <em>DatasetDict</em> for holding your training and validation sets. To create one that contains 25% of our data for the validation set, and 75% for the training set, we use train_test_split:</p>
<div class="cell" data-outputid="33d57732-7935-4203-a661-d541e250f734">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dds <span class="op" style="color: #5E5E5E;">=</span> tok_ds.train_test_split(<span class="fl" style="color: #AD0000;">0.25</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb24-2">dds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 27354
    })
    test: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'labels', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 9119
    })
})</code></pre>
</div>
</div>
<p>As you see above, the validation set here is called test and not validate, so we need to be careful we don’t confuse ourselves with terminology!</p>
<p>We will use the separate test set at the end to check our predictions, whereas the validation set will be used during the model training to check our progress.</p>
<p>We’ll use <strong>eval</strong> as our name for the test set, to avoid confusion with the test dataset that was created above.</p>
<div class="cell" data-outputid="84481660-4351-4bd4-a15c-dec69df8a6c8">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">eval_df[<span class="st" style="color: #20794D;">'input'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'TEXT1: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.context <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.target <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'; ANC1: '</span> <span class="op" style="color: #5E5E5E;">+</span> eval_df.anchor</span>
<span id="cb26-2">eval_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(eval_df).<span class="bu" style="color: null;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9ae9031952424fe58b0c3763e16efaf4","version_major":2,"version_minor":0}
</script>
</div>
</div>
</section>
<section id="model-training" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="model-training"><span class="header-section-number">7</span> Model Training</h2>
<p>To train our model we need to pick a batch size that fits our GPU, and small number of epochs so we can run experiments quickly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">128</span></span>
<span id="cb27-2">epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb27-3">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">8e-5</span></span></code></pre></div>
</div>
<p>The most important hyperparameter for model training is the learning rate. Fastai provides a learning rate finder to help you figure this out, but Hugging Face Transformers doesn’t, so we just have to use trial and error. The idea is to find the largest value you can, but which doesn’t result in training failing.</p>
<p>We will also need to define some functions for our model metric, which is how we measure how well our model is performing. For this we will be using <em>Pearsons Correlation Coefficient</em> as a measure of similarity between the anchor and target texts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> corr(x,y): <span class="cf" style="color: #003B4F;">return</span> np.corrcoef(x,y)[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;">def</span> corr_d(eval_pred): <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'pearson'</span>: corr(<span class="op" style="color: #5E5E5E;">*</span>eval_pred)}</span></code></pre></div>
</div>
<p>Transformers uses the <em>TrainingArguments</em> class to set up model training hyper-parameter arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">args <span class="op" style="color: #5E5E5E;">=</span> TrainingArguments(<span class="st" style="color: #20794D;">'outputs'</span>, learning_rate<span class="op" style="color: #5E5E5E;">=</span>lr, warmup_ratio<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, lr_scheduler_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cosine'</span>, fp16<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb29-2">    evaluation_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"epoch"</span>, per_device_train_batch_size<span class="op" style="color: #5E5E5E;">=</span>bs, per_device_eval_batch_size<span class="op" style="color: #5E5E5E;">=</span>bs<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb29-3">    num_train_epochs<span class="op" style="color: #5E5E5E;">=</span>epochs, weight_decay<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>, report_to<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
</div>
<p>We can now create our model, and Trainer, which is a class which combines the data and model together (just like Learner in fastai):</p>
<div class="cell" data-outputid="09aa6249-4642-4d24-d1bb-06300fb1535b">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb30-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(model, args, train_dataset<span class="op" style="color: #5E5E5E;">=</span>dds[<span class="st" style="color: #20794D;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;">=</span>dds[<span class="st" style="color: #20794D;">'test'</span>],</span>
<span id="cb30-3">                  tokenizer<span class="op" style="color: #5E5E5E;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;">=</span>corr_d)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at microsoft/deberta-v3-small were not used when initializing DebertaV2ForSequenceClassification: ['mask_predictions.dense.bias', 'mask_predictions.LayerNorm.bias', 'lm_predictions.lm_head.dense.bias', 'lm_predictions.lm_head.bias', 'lm_predictions.lm_head.LayerNorm.weight', 'lm_predictions.lm_head.dense.weight', 'mask_predictions.dense.weight', 'mask_predictions.classifier.bias', 'mask_predictions.LayerNorm.weight', 'mask_predictions.classifier.weight', 'lm_predictions.lm_head.LayerNorm.bias']
- This IS expected if you are initializing DebertaV2ForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing DebertaV2ForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of DebertaV2ForSequenceClassification were not initialized from the model checkpoint at microsoft/deberta-v3-small and are newly initialized: ['pooler.dense.bias', 'classifier.weight', 'pooler.dense.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Using cuda_amp half precision backend</code></pre>
</div>
</div>
<p>Let’s train our model!</p>
<div class="cell" data-outputid="2420bd99-1a86-43d9-8bcd-5ae24bb154d6">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">trainer.train()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the training set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running training *****
  Num examples = 27354
  Num Epochs = 4
  Instantaneous batch size per device = 128
  Total train batch size (w. parallel, distributed &amp; accumulation) = 128
  Gradient Accumulation steps = 1
  Total optimization steps = 856
  Number of trainable parameters = 141895681</code></pre>
</div>
<div class="cell-output cell-output-display">


    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:39, Epoch 4/4]
    </div>
    <table class="dataframe table table-sm table-striped">
  <thead>
 <tr>
      <th>Epoch</th>
      <th>Training Loss</th>
      <th>Validation Loss</th>
      <th>Pearson</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>No log</td>
      <td>0.023299</td>
      <td>0.827306</td>
    </tr>
    <tr>
      <td>2</td>
      <td>No log</td>
      <td>0.022970</td>
      <td>0.831413</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.014000</td>
      <td>0.022094</td>
      <td>0.831611</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.014000</td>
      <td>0.022278</td>
      <td>0.831688</td>
    </tr>
  </tbody>
</table><p>
</p></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256</code></pre>
</div>
<div class="cell-output cell-output-display">


    <div>
      
      <progress value="215" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [215/856 00:52 &lt; 02:37, 4.08 it/s, Epoch 1/4]
    </div>
    <table class="dataframe table table-sm table-striped">
  <thead>
 <tr>
      <th>Epoch</th>
      <th>Training Loss</th>
      <th>Validation Loss</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table><p>
    </p><div>
      
      <progress value="108" max="36" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [36/36 03:48]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256
Saving model checkpoint to outputs/checkpoint-500
Configuration saved in outputs/checkpoint-500/config.json
Model weights saved in outputs/checkpoint-500/pytorch_model.bin
tokenizer config file saved in outputs/checkpoint-500/tokenizer_config.json
Special tokens file saved in outputs/checkpoint-500/special_tokens_map.json
The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256
The following columns in the evaluation set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Evaluation *****
  Num examples = 9119
  Batch size = 256


Training completed. Do not forget to share your model on huggingface.co/models =)

</code></pre>
</div>
</div>
<p>Lots of warning messages from Transformers – we can ignore these.</p>
<p>The key thing to look at is the “Pearson” value in table above. As we can see, it’s increasing, and is already above 0.8. It looks like we have a model that can predict with high accuracy for these patent text phrases.</p>
</section>
<section id="generate-predictions-for-us-patent-phrases" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="generate-predictions-for-us-patent-phrases"><span class="header-section-number">8</span> Generate Predictions for US Patent Phrases</h2>
<p>Let’s get some predictions on the test set.</p>
<div class="cell" data-outputid="90bdbf74-595c-4f9b-de5f-666406022fc3">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">preds <span class="op" style="color: #5E5E5E;">=</span> trainer.predict(eval_ds).predictions.astype(<span class="bu" style="color: null;">float</span>)</span>
<span id="cb36-2">preds</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The following columns in the test set don't have a corresponding argument in `DebertaV2ForSequenceClassification.forward` and have been ignored: input, context, anchor, target, id. If input, context, anchor, target, id are not expected by `DebertaV2ForSequenceClassification.forward`,  you can safely ignore this message.
***** Running Prediction *****
  Num examples = 36
  Batch size = 256</code></pre>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array([[ 5.01464844e-01],
       [ 6.09863281e-01],
       [ 6.35742188e-01],
       [ 2.67578125e-01],
       [-2.59160995e-04],
       [ 5.31738281e-01],
       [ 4.78515625e-01],
       [-4.77981567e-03],
       [ 2.24121094e-01],
       [ 1.07910156e+00],
       [ 2.25463867e-01],
       [ 2.15087891e-01],
       [ 7.56347656e-01],
       [ 8.77929688e-01],
       [ 7.44628906e-01],
       [ 3.58642578e-01],
       [ 2.76855469e-01],
       [-7.08770752e-03],
       [ 6.49414062e-01],
       [ 3.75488281e-01],
       [ 4.80468750e-01],
       [ 2.20336914e-01],
       [ 2.38159180e-01],
       [ 1.93481445e-01],
       [ 5.60546875e-01],
       [ 1.14746094e-02],
       [-7.29751587e-03],
       [-9.97924805e-03],
       [-8.94165039e-03],
       [ 6.04492188e-01],
       [ 3.15673828e-01],
       [ 1.96685791e-02],
       [ 7.78808594e-01],
       [ 4.83886719e-01],
       [ 4.22363281e-01],
       [ 1.96655273e-01]])</code></pre>
</div>
</div>
<p>Looking at these predictions something is not quite right. The Pearson’s correlation coefficient should have a value (for our case) between 0 and 1, but some values of our predictions are less than zero and bigger than 1.</p>
<p>This once again shows the value of remembering to actually look at your data. Let’s fix those out-of-bounds predictions:</p>
<div class="cell" data-outputid="5a9651f1-9ce0-4de5-fed2-ef0fc0d9932f">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">preds <span class="op" style="color: #5E5E5E;">=</span> np.clip(preds, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb39-2">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>array([[0.50146484],
       [0.60986328],
       [0.63574219],
       [0.26757812],
       [0.        ],
       [0.53173828],
       [0.47851562],
       [0.        ],
       [0.22412109],
       [1.        ],
       [0.22546387],
       [0.21508789],
       [0.75634766],
       [0.87792969],
       [0.74462891],
       [0.35864258],
       [0.27685547],
       [0.        ],
       [0.64941406],
       [0.37548828],
       [0.48046875],
       [0.22033691],
       [0.23815918],
       [0.19348145],
       [0.56054688],
       [0.01147461],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.60449219],
       [0.31567383],
       [0.01966858],
       [0.77880859],
       [0.48388672],
       [0.42236328],
       [0.19665527]])</code></pre>
</div>
</div>
<p>We now have our predictions for the patent phrase pairs which should have a high accruacy from our results.</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <category>natural-language-processing</category>
  <guid>http://livingdatalab.com/posts/2022-12-10-us-patent-phrase-to-phrase-matching.html</guid>
  <pubDate>Sat, 10 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/ai_text.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using AI to Identify Galaxies</title>
  <dc:creator>Pranath Fernando</dc:creator>
  <link>http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>In this series of articles I will be re-visiting the <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> for <a href="../#category=fastai-2022">this year 2022</a> which I have completed in <a href="../#category=fastai">previous years</a>.</p>
<p>This article covers lesson 1 of this years course, which I will use to create model that can identify different types of galaxies. I will also highlight some notable differences from earlier versions of the fastai course and library.</p>
<p>First we will import the required libraries.</p>
</section>
<section id="import-libraries" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="import-libraries"><span class="header-section-number">2</span> Import Libraries</h2>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> duckduckgo_search <span class="im" style="color: #00769E;">import</span> ddg_images</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> fastdownload <span class="im" style="color: #00769E;">import</span> download_url</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastcore.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>The first notable difference from earlier versions of fastai is that its now much easier to download images from a search engine to create a dataset from, by default this uses the search engine duck duck go. Lets define a short function that will gather images for us.</p>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>):</span>
<span id="cb2-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;">{</span>term<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'"</span>)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;">'image'</span>)</span></code></pre></div>
</div>
</section>
<section id="the-project-recognise-spiral-vs-irregular-galaxies" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="the-project-recognise-spiral-vs-irregular-galaxies"><span class="header-section-number">3</span> The Project: Recognise Spiral vs Irregular Galaxies</h2>
<p>Two of the main types of galaxies are <a href="https://hubblesite.org/science/galaxies"><em>spiral and irregular galaxies</em></a>. Lets use our previous function to first download some examples of spiral galaxy images to see what they look like.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;">=</span> search_images(<span class="st" style="color: #20794D;">'spiral galaxy photos'</span>)</span></code></pre></div>
</div>
<p>Let’s now grab one of these images and have a look.</p>
<div class="cell" data-outputid="38e60321-9c24-4074-ed64-f6379bbd8203" data-execution_count="49">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">dest <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral_galaxy.jpg'</span></span>
<span id="cb4-2">download_url(urls[<span class="dv" style="color: #AD0000;">2</span>], dest, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb4-3">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(dest)</span>
<span id="cb4-4">im.to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So we can see spiral galaxies have a spiral structure to them, they are relatively flat and have distinctive arms, with a bulge concerntrated at the center.</p>
<p>Let’s now download some irregular galaxies and have a look at one.</p>
<div class="cell" data-outputid="39de9a78-f8d0-4670-c254-0601be11578a" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">download_url(search_images(<span class="st" style="color: #20794D;">'irregular galaxy photos'</span>)[<span class="dv" style="color: #AD0000;">3</span>], <span class="st" style="color: #20794D;">'irregular_galaxy.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb5-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'irregular_galaxy.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'irregular galaxy photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="50">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Irregular galaxies have no obvious structure, and are not flat like spiral galaxies. These are often some of the oldest galaxies in the universe, which were abundant in the early universe before spirals and other types of galaxies developed.</p>
</section>
<section id="download-galaxy-images" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="download-galaxy-images"><span class="header-section-number">4</span> Download Galaxy Images</h2>
<p>So it looks like our images correspond to the types of galaxy images we want, so we will now grab some examples of each to create our dataset.</p>
<div class="cell" data-outputid="87c35ba4-1794-4c9a-deea-b30aa3c0ad8f" data-execution_count="51">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">searches <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral galaxy'</span>,<span class="st" style="color: #20794D;">'irregular galaxy'</span></span>
<span id="cb7-2">path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'spiral_or_irregular'</span>)</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">from</span> time <span class="im" style="color: #00769E;">import</span> sleep</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> searches:</span>
<span id="cb7-6">    dest <span class="op" style="color: #5E5E5E;">=</span> (path<span class="op" style="color: #5E5E5E;">/</span>o)</span>
<span id="cb7-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, parents<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;">=</span>search_images(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>o<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> photo'</span>))</span>
<span id="cb7-9">    sleep(<span class="dv" style="color: #AD0000;">10</span>)  <span class="co" style="color: #5E5E5E;"># Pause between searches to avoid over-loading server</span></span>
<span id="cb7-10">    resize_images(path<span class="op" style="color: #5E5E5E;">/</span>o, max_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400</span>, dest<span class="op" style="color: #5E5E5E;">=</span>path<span class="op" style="color: #5E5E5E;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'spiral galaxy photo'
Searching for 'irregular galaxy photo'</code></pre>
</div>
</div>
<p>Another nice new fastai feature is the ability to check the images we have download have valid paths and delete any that are not valid images.</p>
<div class="cell" data-outputid="7c091515-fb40-4a99-c4d6-c58177f12ef3" data-execution_count="52">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">failed <span class="op" style="color: #5E5E5E;">=</span> verify_images(get_image_files(path))</span>
<span id="cb9-2">failed.<span class="bu" style="color: null;">map</span>(Path.unlink)</span>
<span id="cb9-3"><span class="bu" style="color: null;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>0</code></pre>
</div>
</div>
</section>
<section id="create-dataset" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="create-dataset"><span class="header-section-number">5</span> Create Dataset</h2>
<p>We will now create a DataLoader object using the DataBlock object. This is very much the way it was done in fastai the last time i did this course.</p>
<div class="cell" data-outputid="12ce2465-e003-419d-b4ac-d53c3f539cc9" data-execution_count="53">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dls <span class="op" style="color: #5E5E5E;">=</span> DataBlock(</span>
<span id="cb11-2">    blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, CategoryBlock), </span>
<span id="cb11-3">    get_items<span class="op" style="color: #5E5E5E;">=</span>get_image_files, </span>
<span id="cb11-4">    splitter<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>),</span>
<span id="cb11-5">    get_y<span class="op" style="color: #5E5E5E;">=</span>parent_label,</span>
<span id="cb11-6">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>[Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>)]</span>
<span id="cb11-7">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see we have some nice examples of each type of galaxy.</p>
</section>
<section id="train-model" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="train-model"><span class="header-section-number">6</span> Train Model</h2>
<p>Now we have our data ready we can create our vision model and train it. We will train a ResNet18 model for just 3 epochs (or 3 complete passes over the entire dataset).</p>
<div class="cell" data-outputid="5df23929-c673-4d2d-987f-c5e3e9b4ec7d" data-execution_count="70">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate)</span>
<span id="cb12-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.071076</td>
      <td>0.766020</td>
      <td>0.391304</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.594808</td>
      <td>0.279009</td>
      <td>0.173913</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.417826</td>
      <td>0.361526</td>
      <td>0.086957</td>
      <td>00:00</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.303060</td>
      <td>0.362775</td>
      <td>0.086957</td>
      <td>00:00</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="test-model" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="test-model"><span class="header-section-number">7</span> Test Model</h2>
<p>We will now test our model by picking an example image for each type of galaxy and see how well it can predict which type of galaxy it is.</p>
<div class="cell" data-outputid="bb4698f0-125a-400f-cda9-b5c021525b0c" data-execution_count="64">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">dest <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'spiral_galaxy2.jpg'</span></span>
<span id="cb13-2">download_url(urls[<span class="dv" style="color: #AD0000;">3</span>], dest, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb13-3">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(dest)</span>
<span id="cb13-4">im.to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="eb3913b2-0831-4be7-a422-97c0634c2c5a" data-execution_count="71">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">is_spiral_galaxy,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'spiral_galaxy2.jpg'</span>))</span>
<span id="cb14-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_spiral_galaxy<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb14-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability it's a spiral galaxy: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: spiral galaxy.
Probability it's a spiral galaxy: 0.9313</code></pre>
</div>
</div>
<div class="cell" data-outputid="257915b0-f1e2-46af-e7f9-c222e0d8158d" data-execution_count="67">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">download_url(search_images(<span class="st" style="color: #20794D;">'irregular galaxy photos'</span>)[<span class="dv" style="color: #AD0000;">6</span>], <span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>, show_progress<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb16-2">Image.<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;">512</span>,<span class="dv" style="color: #AD0000;">512</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'irregular galaxy photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="67">
<p><img src="http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="194cba53-ac6b-43b1-f1d7-3c135b1af893" data-execution_count="72">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">is_irregular_galaxy,_,probs <span class="op" style="color: #5E5E5E;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;">'irregular_galaxy2.jpg'</span>))</span>
<span id="cb18-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This is a: </span><span class="sc" style="color: #5E5E5E;">{</span>is_irregular_galaxy<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">."</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Probability it's a irregular galaxy: </span><span class="sc" style="color: #5E5E5E;">{</span>probs[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">:.4f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: irregular galaxy.
Probability it's a irregular galaxy: 0.8309</code></pre>
</div>
</div>
<p>After training the model for just 3 epochs the model has achieved an excellent accuracy, probably if it had trained for a few more epochs it would have had near perfect accuracy in correctly distingushing these 2 different types of galaxy.</p>
</section>
<section id="conclusion" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">8</span> Conclusion</h2>
<p>It’s worth stepping back for a moment just to appreciate how incredible this achievement is - with just a few lines of code, we have trained a model with around 31 million artifical neurons to recognise a galaxy with around 100 <em>billion</em> stars in a matter of a few seconds.</p>
<p>The fastai library just becomes easier and easier to use over time with continual improvements, automatically using the best methods and practices in deep learning in an easy to use library.</p>
<p>Lesson 2 of 2022 coming up !</p>


</section>

 ]]></description>
  <category>fastai</category>
  <category>fastai-2022</category>
  <category>deep-learning</category>
  <guid>http://livingdatalab.com/posts/2022-12-05-using-ai-to-identify-galaxies.html</guid>
  <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/pranath/blog/raw/master/images/spiral_galaxy.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
